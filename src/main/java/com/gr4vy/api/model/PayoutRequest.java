/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gr4vy.api.model.MerchantRequest;
import com.gr4vy.api.model.PayoutConnectionOptionsRequest;
import com.gr4vy.api.model.PayoutPaymentMethodRequest;
import com.gr4vy.api.model.TransactionBuyerRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.UUID;

/**
 * Request body for creating new payout.
 */
@ApiModel(description = "Request body for creating new payout.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PayoutRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_ID = "payment_service_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_ID)
  private UUID paymentServiceId;

  /**
   * The type of payout to process.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    ONLINE_GAMBLING("online_gambling");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category = CategoryEnum.ONLINE_GAMBLING;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_BUYER_ID = "buyer_id";
  @SerializedName(SERIALIZED_NAME_BUYER_ID)
  private UUID buyerId;

  public static final String SERIALIZED_NAME_BUYER_EXTERNAL_IDENTIFIER = "buyer_external_identifier";
  @SerializedName(SERIALIZED_NAME_BUYER_EXTERNAL_IDENTIFIER)
  private String buyerExternalIdentifier;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private TransactionBuyerRequest buyer;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private MerchantRequest merchant;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PayoutPaymentMethodRequest paymentMethod;

  public static final String SERIALIZED_NAME_CONNECTION_OPTIONS = "connection_options";
  @SerializedName(SERIALIZED_NAME_CONNECTION_OPTIONS)
  private PayoutConnectionOptionsRequest connectionOptions;


  public PayoutRequest amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount to payout.
   * minimum: 1
   * maximum: 99999999
   * @return amount
  **/
  @ApiModelProperty(example = "1299", required = true, value = "The amount to payout.")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public PayoutRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The ISO-4217 currency code for the payout.
   * @return currency
  **/
  @ApiModelProperty(example = "USD", required = true, value = "The ISO-4217 currency code for the payout.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PayoutRequest paymentServiceId(UUID paymentServiceId) {
    
    this.paymentServiceId = paymentServiceId;
    return this;
  }

   /**
   * The ID of the payment service to use for the payout.
   * @return paymentServiceId
  **/
  @ApiModelProperty(example = "a7d6b829-aea5-407d-ab7f-138784b5ad2c", required = true, value = "The ID of the payment service to use for the payout.")

  public UUID getPaymentServiceId() {
    return paymentServiceId;
  }


  public void setPaymentServiceId(UUID paymentServiceId) {
    this.paymentServiceId = paymentServiceId;
  }


  public PayoutRequest category(CategoryEnum category) {
    
    this.category = category;
    return this;
  }

   /**
   * The type of payout to process.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "online_gambling", value = "The type of payout to process.")

  public CategoryEnum getCategory() {
    return category;
  }


  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public PayoutRequest externalIdentifier(String externalIdentifier) {
    
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * A value that can be used to match the payout against your own records.
   * @return externalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "payout-123", value = "A value that can be used to match the payout against your own records.")

  public String getExternalIdentifier() {
    return externalIdentifier;
  }


  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public PayoutRequest buyerId(UUID buyerId) {
    
    this.buyerId = buyerId;
    return this;
  }

   /**
   * The ID of the buyer to send the payout.
   * @return buyerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "fe26475d-ec3e-4884-9553-f7356683f7f9", value = "The ID of the buyer to send the payout.")

  public UUID getBuyerId() {
    return buyerId;
  }


  public void setBuyerId(UUID buyerId) {
    this.buyerId = buyerId;
  }


  public PayoutRequest buyerExternalIdentifier(String buyerExternalIdentifier) {
    
    this.buyerExternalIdentifier = buyerExternalIdentifier;
    return this;
  }

   /**
   * The &#x60;external_identifier&#x60; of the buyer to send this payout to.
   * @return buyerExternalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "user-789123", value = "The `external_identifier` of the buyer to send this payout to.")

  public String getBuyerExternalIdentifier() {
    return buyerExternalIdentifier;
  }


  public void setBuyerExternalIdentifier(String buyerExternalIdentifier) {
    this.buyerExternalIdentifier = buyerExternalIdentifier;
  }


  public PayoutRequest buyer(TransactionBuyerRequest buyer) {
    
    this.buyer = buyer;
    return this;
  }

   /**
   * Inline buyer details for the payout.
   * @return buyer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inline buyer details for the payout.")

  public TransactionBuyerRequest getBuyer() {
    return buyer;
  }


  public void setBuyer(TransactionBuyerRequest buyer) {
    this.buyer = buyer;
  }


  public PayoutRequest merchant(MerchantRequest merchant) {
    
    this.merchant = merchant;
    return this;
  }

   /**
   * Merchant information for the source of the payout.
   * @return merchant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant information for the source of the payout.")

  public MerchantRequest getMerchant() {
    return merchant;
  }


  public void setMerchant(MerchantRequest merchant) {
    this.merchant = merchant;
  }


  public PayoutRequest paymentMethod(PayoutPaymentMethodRequest paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @ApiModelProperty(required = true, value = "")

  public PayoutPaymentMethodRequest getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(PayoutPaymentMethodRequest paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public PayoutRequest connectionOptions(PayoutConnectionOptionsRequest connectionOptions) {
    
    this.connectionOptions = connectionOptions;
    return this;
  }

   /**
   * Optional fields for processing payouts on specific payment services.
   * @return connectionOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional fields for processing payouts on specific payment services.")

  public PayoutConnectionOptionsRequest getConnectionOptions() {
    return connectionOptions;
  }


  public void setConnectionOptions(PayoutConnectionOptionsRequest connectionOptions) {
    this.connectionOptions = connectionOptions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayoutRequest payoutRequest = (PayoutRequest) o;
    return Objects.equals(this.amount, payoutRequest.amount) &&
        Objects.equals(this.currency, payoutRequest.currency) &&
        Objects.equals(this.paymentServiceId, payoutRequest.paymentServiceId) &&
        Objects.equals(this.category, payoutRequest.category) &&
        Objects.equals(this.externalIdentifier, payoutRequest.externalIdentifier) &&
        Objects.equals(this.buyerId, payoutRequest.buyerId) &&
        Objects.equals(this.buyerExternalIdentifier, payoutRequest.buyerExternalIdentifier) &&
        Objects.equals(this.buyer, payoutRequest.buyer) &&
        Objects.equals(this.merchant, payoutRequest.merchant) &&
        Objects.equals(this.paymentMethod, payoutRequest.paymentMethod) &&
        Objects.equals(this.connectionOptions, payoutRequest.connectionOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, paymentServiceId, category, externalIdentifier, buyerId, buyerExternalIdentifier, buyer, merchant, paymentMethod, connectionOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    paymentServiceId: ").append(toIndentedString(paymentServiceId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    buyerId: ").append(toIndentedString(buyerId)).append("\n");
    sb.append("    buyerExternalIdentifier: ").append(toIndentedString(buyerExternalIdentifier)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    connectionOptions: ").append(toIndentedString(connectionOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

