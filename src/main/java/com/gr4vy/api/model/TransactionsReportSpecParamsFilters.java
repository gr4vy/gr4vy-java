/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gr4vy.api.model.TransactionRetriesReportSpecParamsFiltersCreatedAt;
import com.gr4vy.api.model.TransactionsReportSpecParamsFiltersAuthorizedAt;
import com.gr4vy.api.model.TransactionsReportSpecParamsFiltersCapturedAt;
import com.gr4vy.api.model.TransactionsReportSpecParamsFiltersUpdatedAt;
import com.gr4vy.api.model.TransactionsReportSpecParamsFiltersVoidedAt;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The filters for the report.
 */
@ApiModel(description = "The filters for the report.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionsReportSpecParamsFilters {
  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PROCESSING("processing"),
    
    BUYER_APPROVAL_PENDING("buyer_approval_pending"),
    
    AUTHORIZATION_SUCCEEDED("authorization_succeeded"),
    
    AUTHORIZATION_FAILED("authorization_failed"),
    
    AUTHORIZATION_DECLINED("authorization_declined"),
    
    CAPTURE_PENDING("capture_pending"),
    
    CAPTURE_SUCCEEDED("capture_succeeded"),
    
    AUTHORIZATION_VOID_PENDING("authorization_void_pending"),
    
    AUTHORIZATION_VOIDED("authorization_voided");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<StatusEnum> status = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private TransactionRetriesReportSpecParamsFiltersCreatedAt createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private TransactionsReportSpecParamsFiltersUpdatedAt updatedAt;

  public static final String SERIALIZED_NAME_AUTHORIZED_AT = "authorized_at";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_AT)
  private TransactionsReportSpecParamsFiltersAuthorizedAt authorizedAt;

  public static final String SERIALIZED_NAME_CAPTURED_AT = "captured_at";
  @SerializedName(SERIALIZED_NAME_CAPTURED_AT)
  private TransactionsReportSpecParamsFiltersCapturedAt capturedAt;

  public static final String SERIALIZED_NAME_VOIDED_AT = "voided_at";
  @SerializedName(SERIALIZED_NAME_VOIDED_AT)
  private TransactionsReportSpecParamsFiltersVoidedAt voidedAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private List<String> currency = null;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    AFFIRM("affirm"),
    
    AFTERPAY("afterpay"),
    
    ALIPAY("alipay"),
    
    ALIPAYHK("alipayhk"),
    
    APPLEPAY("applepay"),
    
    BACS("bacs"),
    
    BANCONTACT("bancontact"),
    
    BANKED("banked"),
    
    BECS("becs"),
    
    BITPAY("bitpay"),
    
    BOLETO("boleto"),
    
    BOOST("boost"),
    
    CARD("card"),
    
    CASHAPP("cashapp"),
    
    CHASEORBITAL("chaseorbital"),
    
    CHECKOUT_SESSION("checkout-session"),
    
    CLEARPAY("clearpay"),
    
    CLICK_TO_PAY("click-to-pay"),
    
    DANA("dana"),
    
    DCB("dcb"),
    
    DLOCAL("dlocal"),
    
    EBANX("ebanx"),
    
    EFECTY("efecty"),
    
    EPS("eps"),
    
    EVERYDAYPAY("everydaypay"),
    
    GCASH("gcash"),
    
    GEM("gem"),
    
    GEMDS("gemds"),
    
    GIFT_CARD("gift-card"),
    
    GIROPAY("giropay"),
    
    GIVINGBLOCK("givingblock"),
    
    GOCARDLESS("gocardless"),
    
    GOOGLEPAY("googlepay"),
    
    GOOGLEPAY_PAN_ONLY("googlepay_pan_only"),
    
    GOPAY("gopay"),
    
    GRABPAY("grabpay"),
    
    ID("id"),
    
    IDEAL("ideal"),
    
    KAKAOPAY("kakaopay"),
    
    KCP("kcp"),
    
    KLARNA("klarna"),
    
    LATITUDE("latitude"),
    
    LATITUDEDS("latitudeds"),
    
    LAYBUY("laybuy"),
    
    LINEPAY("linepay"),
    
    LINKAJA("linkaja"),
    
    MAYBANKQRPAY("maybankqrpay"),
    
    MERCADOPAGO("mercadopago"),
    
    MULTIBANCO("multibanco"),
    
    MULTIPAGO("multipago"),
    
    NETBANKING("netbanking"),
    
    NETWORK_TOKEN("network-token"),
    
    ONEY_3X("oney_3x"),
    
    ONEY_4X("oney_4x"),
    
    ONEY_6X("oney_6x"),
    
    ONEY_10X("oney_10x"),
    
    ONEY_12X("oney_12x"),
    
    OVO("ovo"),
    
    OXXO("oxxo"),
    
    PAYID("payid"),
    
    PAYMAYA("paymaya"),
    
    PAYPAL("paypal"),
    
    PAYPALPAYLATER("paypalpaylater"),
    
    PAYTO("payto"),
    
    VENMO("venmo"),
    
    PIX("pix"),
    
    PSE("pse"),
    
    RABBITLINEPAY("rabbitlinepay"),
    
    RAZORPAY("razorpay"),
    
    SCALAPAY("scalapay"),
    
    SEPA("sepa"),
    
    SHOPEEPAY("shopeepay"),
    
    SINGTELDASH("singteldash"),
    
    SMARTPAY("smartpay"),
    
    SOFORT("sofort"),
    
    SPEI("spei"),
    
    STRIPEDD("stripedd"),
    
    THAIQR("thaiqr"),
    
    TOUCHNGO("touchngo"),
    
    TRUEMONEY("truemoney"),
    
    TRUSTLY("trustly"),
    
    TRUSTLYEUROPE("trustlyeurope"),
    
    UPI("upi"),
    
    VIPPS("vipps"),
    
    WAAVE("waave"),
    
    WEBPAY("webpay"),
    
    WECHAT("wechat"),
    
    ZIPPAY("zippay");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private List<MethodEnum> method = null;

  /**
   * Gets or Sets scheme
   */
  @JsonAdapter(SchemeEnum.Adapter.class)
  public enum SchemeEnum {
    ACCEL("accel"),
    
    AMEX("amex"),
    
    BANCONTACT("bancontact"),
    
    CARTE_BANCAIRE("carte-bancaire"),
    
    CIRRUS("cirrus"),
    
    CULIANCE("culiance"),
    
    DANKORT("dankort"),
    
    DINERS_CLUB("diners-club"),
    
    DISCOVER("discover"),
    
    EFTPOS_AUSTRALIA("eftpos-australia"),
    
    ELO("elo"),
    
    HIPERCARD("hipercard"),
    
    JCB("jcb"),
    
    MAESTRO("maestro"),
    
    MASTERCARD("mastercard"),
    
    MIR("mir"),
    
    NYCE("nyce"),
    
    OTHER("other"),
    
    PULSE("pulse"),
    
    RUPAY("rupay"),
    
    STAR("star"),
    
    UATP("uatp"),
    
    UNIONPAY("unionpay"),
    
    VISA("visa"),
    
    NULL("null");

    private String value;

    SchemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemeEnum fromValue(String value) {
      for (SchemeEnum b : SchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private List<SchemeEnum> scheme = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<Object> metadata = null;

  /**
   * Gets or Sets threeDSecureStatus
   */
  @JsonAdapter(ThreeDSecureStatusEnum.Adapter.class)
  public enum ThreeDSecureStatusEnum {
    SETUP_ERROR("setup_error"),
    
    ERROR("error"),
    
    DECLINED("declined"),
    
    CANCELLED("cancelled"),
    
    COMPLETE("complete");

    private String value;

    ThreeDSecureStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreeDSecureStatusEnum fromValue(String value) {
      for (ThreeDSecureStatusEnum b : ThreeDSecureStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreeDSecureStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreeDSecureStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreeDSecureStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThreeDSecureStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_THREE_D_SECURE_STATUS = "three_d_secure_status";
  @SerializedName(SERIALIZED_NAME_THREE_D_SECURE_STATUS)
  private List<ThreeDSecureStatusEnum> threeDSecureStatus = null;

  public static final String SERIALIZED_NAME_THREE_D_SECURE_ECI = "three_d_secure_eci";
  @SerializedName(SERIALIZED_NAME_THREE_D_SECURE_ECI)
  private List<String> threeDSecureEci = null;

  public static final String SERIALIZED_NAME_THREE_D_SECURE_AUTH_RESP = "three_d_secure_auth_resp";
  @SerializedName(SERIALIZED_NAME_THREE_D_SECURE_AUTH_RESP)
  private List<String> threeDSecureAuthResp = null;

  /**
   * Gets or Sets paymentSource
   */
  @JsonAdapter(PaymentSourceEnum.Adapter.class)
  public enum PaymentSourceEnum {
    ECOMMERCE("ecommerce"),
    
    MOTO("moto"),
    
    RECURRING("recurring"),
    
    INSTALLMENT("installment"),
    
    CARD_ON_FILE("card_on_file");

    private String value;

    PaymentSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentSourceEnum fromValue(String value) {
      for (PaymentSourceEnum b : PaymentSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_SOURCE = "payment_source";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SOURCE)
  private List<PaymentSourceEnum> paymentSource = null;

  public static final String SERIALIZED_NAME_MERCHANT_INITIATED = "merchant_initiated";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INITIATED)
  private Boolean merchantInitiated;

  public static final String SERIALIZED_NAME_IS_SUBSEQUENT_PAYMENT = "is_subsequent_payment";
  @SerializedName(SERIALIZED_NAME_IS_SUBSEQUENT_PAYMENT)
  private Boolean isSubsequentPayment;


  public TransactionsReportSpecParamsFilters status(List<StatusEnum> status) {
    
    this.status = status;
    return this;
  }

  public TransactionsReportSpecParamsFilters addStatusItem(StatusEnum statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<StatusEnum>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * A list of statuses to filter by.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"authorization_failed\"]", value = "A list of statuses to filter by.")

  public List<StatusEnum> getStatus() {
    return status;
  }


  public void setStatus(List<StatusEnum> status) {
    this.status = status;
  }


  public TransactionsReportSpecParamsFilters createdAt(TransactionRetriesReportSpecParamsFiltersCreatedAt createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionRetriesReportSpecParamsFiltersCreatedAt getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(TransactionRetriesReportSpecParamsFiltersCreatedAt createdAt) {
    this.createdAt = createdAt;
  }


  public TransactionsReportSpecParamsFilters updatedAt(TransactionsReportSpecParamsFiltersUpdatedAt updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionsReportSpecParamsFiltersUpdatedAt getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(TransactionsReportSpecParamsFiltersUpdatedAt updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TransactionsReportSpecParamsFilters authorizedAt(TransactionsReportSpecParamsFiltersAuthorizedAt authorizedAt) {
    
    this.authorizedAt = authorizedAt;
    return this;
  }

   /**
   * Get authorizedAt
   * @return authorizedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionsReportSpecParamsFiltersAuthorizedAt getAuthorizedAt() {
    return authorizedAt;
  }


  public void setAuthorizedAt(TransactionsReportSpecParamsFiltersAuthorizedAt authorizedAt) {
    this.authorizedAt = authorizedAt;
  }


  public TransactionsReportSpecParamsFilters capturedAt(TransactionsReportSpecParamsFiltersCapturedAt capturedAt) {
    
    this.capturedAt = capturedAt;
    return this;
  }

   /**
   * Get capturedAt
   * @return capturedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionsReportSpecParamsFiltersCapturedAt getCapturedAt() {
    return capturedAt;
  }


  public void setCapturedAt(TransactionsReportSpecParamsFiltersCapturedAt capturedAt) {
    this.capturedAt = capturedAt;
  }


  public TransactionsReportSpecParamsFilters voidedAt(TransactionsReportSpecParamsFiltersVoidedAt voidedAt) {
    
    this.voidedAt = voidedAt;
    return this;
  }

   /**
   * Get voidedAt
   * @return voidedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionsReportSpecParamsFiltersVoidedAt getVoidedAt() {
    return voidedAt;
  }


  public void setVoidedAt(TransactionsReportSpecParamsFiltersVoidedAt voidedAt) {
    this.voidedAt = voidedAt;
  }


  public TransactionsReportSpecParamsFilters currency(List<String> currency) {
    
    this.currency = currency;
    return this;
  }

  public TransactionsReportSpecParamsFilters addCurrencyItem(String currencyItem) {
    if (this.currency == null) {
      this.currency = new ArrayList<String>();
    }
    this.currency.add(currencyItem);
    return this;
  }

   /**
   * A list of ISO-4217 currency codes to filter by.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"GBP\"]", value = "A list of ISO-4217 currency codes to filter by.")

  public List<String> getCurrency() {
    return currency;
  }


  public void setCurrency(List<String> currency) {
    this.currency = currency;
  }


  public TransactionsReportSpecParamsFilters method(List<MethodEnum> method) {
    
    this.method = method;
    return this;
  }

  public TransactionsReportSpecParamsFilters addMethodItem(MethodEnum methodItem) {
    if (this.method == null) {
      this.method = new ArrayList<MethodEnum>();
    }
    this.method.add(methodItem);
    return this;
  }

   /**
   * A list of payment methods to filter by.
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"card\"]", value = "A list of payment methods to filter by.")

  public List<MethodEnum> getMethod() {
    return method;
  }


  public void setMethod(List<MethodEnum> method) {
    this.method = method;
  }


  public TransactionsReportSpecParamsFilters scheme(List<SchemeEnum> scheme) {
    
    this.scheme = scheme;
    return this;
  }

  public TransactionsReportSpecParamsFilters addSchemeItem(SchemeEnum schemeItem) {
    if (this.scheme == null) {
      this.scheme = new ArrayList<SchemeEnum>();
    }
    this.scheme.add(schemeItem);
    return this;
  }

   /**
   * A list of card schemes to filter by.
   * @return scheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"visa\"]", value = "A list of card schemes to filter by.")

  public List<SchemeEnum> getScheme() {
    return scheme;
  }


  public void setScheme(List<SchemeEnum> scheme) {
    this.scheme = scheme;
  }


  public TransactionsReportSpecParamsFilters metadata(List<Object> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public TransactionsReportSpecParamsFilters addMetadataItem(Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<Object>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * A list of metadata as key-value pairs to filter by.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"key\":\"value\"}]", value = "A list of metadata as key-value pairs to filter by.")

  public List<Object> getMetadata() {
    return metadata;
  }


  public void setMetadata(List<Object> metadata) {
    this.metadata = metadata;
  }


  public TransactionsReportSpecParamsFilters threeDSecureStatus(List<ThreeDSecureStatusEnum> threeDSecureStatus) {
    
    this.threeDSecureStatus = threeDSecureStatus;
    return this;
  }

  public TransactionsReportSpecParamsFilters addThreeDSecureStatusItem(ThreeDSecureStatusEnum threeDSecureStatusItem) {
    if (this.threeDSecureStatus == null) {
      this.threeDSecureStatus = new ArrayList<ThreeDSecureStatusEnum>();
    }
    this.threeDSecureStatus.add(threeDSecureStatusItem);
    return this;
  }

   /**
   * A list of 3DS challenge statuses to filter by.
   * @return threeDSecureStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of 3DS challenge statuses to filter by.")

  public List<ThreeDSecureStatusEnum> getThreeDSecureStatus() {
    return threeDSecureStatus;
  }


  public void setThreeDSecureStatus(List<ThreeDSecureStatusEnum> threeDSecureStatus) {
    this.threeDSecureStatus = threeDSecureStatus;
  }


  public TransactionsReportSpecParamsFilters threeDSecureEci(List<String> threeDSecureEci) {
    
    this.threeDSecureEci = threeDSecureEci;
    return this;
  }

  public TransactionsReportSpecParamsFilters addThreeDSecureEciItem(String threeDSecureEciItem) {
    if (this.threeDSecureEci == null) {
      this.threeDSecureEci = new ArrayList<String>();
    }
    this.threeDSecureEci.add(threeDSecureEciItem);
    return this;
  }

   /**
   * A list of electric commerce indicators to filter by.
   * @return threeDSecureEci
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"05\"]", value = "A list of electric commerce indicators to filter by.")

  public List<String> getThreeDSecureEci() {
    return threeDSecureEci;
  }


  public void setThreeDSecureEci(List<String> threeDSecureEci) {
    this.threeDSecureEci = threeDSecureEci;
  }


  public TransactionsReportSpecParamsFilters threeDSecureAuthResp(List<String> threeDSecureAuthResp) {
    
    this.threeDSecureAuthResp = threeDSecureAuthResp;
    return this;
  }

  public TransactionsReportSpecParamsFilters addThreeDSecureAuthRespItem(String threeDSecureAuthRespItem) {
    if (this.threeDSecureAuthResp == null) {
      this.threeDSecureAuthResp = new ArrayList<String>();
    }
    this.threeDSecureAuthResp.add(threeDSecureAuthRespItem);
    return this;
  }

   /**
   * A list of 3DS responses to filter by.
   * @return threeDSecureAuthResp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"N\"]", value = "A list of 3DS responses to filter by.")

  public List<String> getThreeDSecureAuthResp() {
    return threeDSecureAuthResp;
  }


  public void setThreeDSecureAuthResp(List<String> threeDSecureAuthResp) {
    this.threeDSecureAuthResp = threeDSecureAuthResp;
  }


  public TransactionsReportSpecParamsFilters paymentSource(List<PaymentSourceEnum> paymentSource) {
    
    this.paymentSource = paymentSource;
    return this;
  }

  public TransactionsReportSpecParamsFilters addPaymentSourceItem(PaymentSourceEnum paymentSourceItem) {
    if (this.paymentSource == null) {
      this.paymentSource = new ArrayList<PaymentSourceEnum>();
    }
    this.paymentSource.add(paymentSourceItem);
    return this;
  }

   /**
   * A list of payment sources to filter by.
   * @return paymentSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of payment sources to filter by.")

  public List<PaymentSourceEnum> getPaymentSource() {
    return paymentSource;
  }


  public void setPaymentSource(List<PaymentSourceEnum> paymentSource) {
    this.paymentSource = paymentSource;
  }


  public TransactionsReportSpecParamsFilters merchantInitiated(Boolean merchantInitiated) {
    
    this.merchantInitiated = merchantInitiated;
    return this;
  }

   /**
   * A flag indicating transactions initiated by the merchant to filter by.
   * @return merchantInitiated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "A flag indicating transactions initiated by the merchant to filter by.")

  public Boolean getMerchantInitiated() {
    return merchantInitiated;
  }


  public void setMerchantInitiated(Boolean merchantInitiated) {
    this.merchantInitiated = merchantInitiated;
  }


  public TransactionsReportSpecParamsFilters isSubsequentPayment(Boolean isSubsequentPayment) {
    
    this.isSubsequentPayment = isSubsequentPayment;
    return this;
  }

   /**
   * A flag indicating transactions with subsequent payments to filter by.
   * @return isSubsequentPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "A flag indicating transactions with subsequent payments to filter by.")

  public Boolean getIsSubsequentPayment() {
    return isSubsequentPayment;
  }


  public void setIsSubsequentPayment(Boolean isSubsequentPayment) {
    this.isSubsequentPayment = isSubsequentPayment;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsReportSpecParamsFilters transactionsReportSpecParamsFilters = (TransactionsReportSpecParamsFilters) o;
    return Objects.equals(this.status, transactionsReportSpecParamsFilters.status) &&
        Objects.equals(this.createdAt, transactionsReportSpecParamsFilters.createdAt) &&
        Objects.equals(this.updatedAt, transactionsReportSpecParamsFilters.updatedAt) &&
        Objects.equals(this.authorizedAt, transactionsReportSpecParamsFilters.authorizedAt) &&
        Objects.equals(this.capturedAt, transactionsReportSpecParamsFilters.capturedAt) &&
        Objects.equals(this.voidedAt, transactionsReportSpecParamsFilters.voidedAt) &&
        Objects.equals(this.currency, transactionsReportSpecParamsFilters.currency) &&
        Objects.equals(this.method, transactionsReportSpecParamsFilters.method) &&
        Objects.equals(this.scheme, transactionsReportSpecParamsFilters.scheme) &&
        Objects.equals(this.metadata, transactionsReportSpecParamsFilters.metadata) &&
        Objects.equals(this.threeDSecureStatus, transactionsReportSpecParamsFilters.threeDSecureStatus) &&
        Objects.equals(this.threeDSecureEci, transactionsReportSpecParamsFilters.threeDSecureEci) &&
        Objects.equals(this.threeDSecureAuthResp, transactionsReportSpecParamsFilters.threeDSecureAuthResp) &&
        Objects.equals(this.paymentSource, transactionsReportSpecParamsFilters.paymentSource) &&
        Objects.equals(this.merchantInitiated, transactionsReportSpecParamsFilters.merchantInitiated) &&
        Objects.equals(this.isSubsequentPayment, transactionsReportSpecParamsFilters.isSubsequentPayment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, createdAt, updatedAt, authorizedAt, capturedAt, voidedAt, currency, method, scheme, metadata, threeDSecureStatus, threeDSecureEci, threeDSecureAuthResp, paymentSource, merchantInitiated, isSubsequentPayment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsReportSpecParamsFilters {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    authorizedAt: ").append(toIndentedString(authorizedAt)).append("\n");
    sb.append("    capturedAt: ").append(toIndentedString(capturedAt)).append("\n");
    sb.append("    voidedAt: ").append(toIndentedString(voidedAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    threeDSecureStatus: ").append(toIndentedString(threeDSecureStatus)).append("\n");
    sb.append("    threeDSecureEci: ").append(toIndentedString(threeDSecureEci)).append("\n");
    sb.append("    threeDSecureAuthResp: ").append(toIndentedString(threeDSecureAuthResp)).append("\n");
    sb.append("    paymentSource: ").append(toIndentedString(paymentSource)).append("\n");
    sb.append("    merchantInitiated: ").append(toIndentedString(merchantInitiated)).append("\n");
    sb.append("    isSubsequentPayment: ").append(toIndentedString(isSubsequentPayment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

