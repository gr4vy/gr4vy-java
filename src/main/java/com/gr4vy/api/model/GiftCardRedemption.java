/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gr4vy.api.model.GiftCardSnapshot;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * A redemption of a gift card used in a transaction.
 */
@ApiModel(description = "A redemption of a gift card used in a transaction.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GiftCardRedemption {
  /**
   * The type of this resource.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GIFT_CARD_REDEMPTION("gift-card-redemption");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * The status of the gift card redemption for the &#x60;payment_method&#x60;.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    SKIPPED("skipped");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_REFUNDED_AMOUNT = "refunded_amount";
  @SerializedName(SERIALIZED_NAME_REFUNDED_AMOUNT)
  private Integer refundedAmount;

  public static final String SERIALIZED_NAME_GIFT_CARD_SERVICE_REDEMPTION_ID = "gift_card_service_redemption_id";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_SERVICE_REDEMPTION_ID)
  private String giftCardServiceRedemptionId;

  /**
   * If this gift card redemption resulted in an error, this will contain the internal code for the error.
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    DEACTIVATED_CARD("deactivated_card"),
    
    EXPIRED_CARD("expired_card"),
    
    INCORRECT_CURRENCY("incorrect_currency"),
    
    INSUFFICIENT_FUNDS("insufficient_funds"),
    
    INVALID_AMOUNT("invalid_amount"),
    
    INVALID_GIFT_CARD("invalid_gift_card"),
    
    INVALID_SERVICE_CONFIGURATION("invalid_service_configuration"),
    
    INVALID_SERVICE_CREDENTIALS("invalid_service_credentials"),
    
    OPERATION_CANCELED("operation_canceled"),
    
    SERVICE_ERROR("service_error"),
    
    SERVICE_NETWORK_ERROR("service_network_error"),
    
    UNKNOWN_ERROR("unknown_error");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCodeEnum fromValue(String value) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CODE = "error_code";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private ErrorCodeEnum errorCode;

  public static final String SERIALIZED_NAME_RAW_ERROR_CODE = "raw_error_code";
  @SerializedName(SERIALIZED_NAME_RAW_ERROR_CODE)
  private String rawErrorCode;

  public static final String SERIALIZED_NAME_RAW_ERROR_MESSAGE = "raw_error_message";
  @SerializedName(SERIALIZED_NAME_RAW_ERROR_MESSAGE)
  private String rawErrorMessage;

  public static final String SERIALIZED_NAME_GIFT_CARD = "gift_card";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD)
  private GiftCardSnapshot giftCard;


  public GiftCardRedemption type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of this resource.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "gift-card-redemption", value = "The type of this resource.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GiftCardRedemption id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of this gift card redemption. This may be &#x60;null&#x60; if the no redemption happened.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "bc3f0d5a-3529-4d31-b2b4-848d14926bbc", value = "The ID of this gift card redemption. This may be `null` if the no redemption happened.")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public GiftCardRedemption status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the gift card redemption for the &#x60;payment_method&#x60;.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "succeeded", value = "The status of the gift card redemption for the `payment_method`.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GiftCardRedemption amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount redeemed for this gift card.
   * minimum: 1
   * maximum: 99999999
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1299", value = "The amount redeemed for this gift card.")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public GiftCardRedemption refundedAmount(Integer refundedAmount) {
    
    this.refundedAmount = refundedAmount;
    return this;
  }

   /**
   * The amount refunded for this gift card. This can not be larger than &#x60;amount&#x60;.
   * minimum: 1
   * maximum: 99999999
   * @return refundedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1299", value = "The amount refunded for this gift card. This can not be larger than `amount`.")

  public Integer getRefundedAmount() {
    return refundedAmount;
  }


  public void setRefundedAmount(Integer refundedAmount) {
    this.refundedAmount = refundedAmount;
  }


  public GiftCardRedemption giftCardServiceRedemptionId(String giftCardServiceRedemptionId) {
    
    this.giftCardServiceRedemptionId = giftCardServiceRedemptionId;
    return this;
  }

   /**
   * The gift card service&#39;s unique ID for the redemption.
   * @return giftCardServiceRedemptionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "xYqd43gySMtori", value = "The gift card service's unique ID for the redemption.")

  public String getGiftCardServiceRedemptionId() {
    return giftCardServiceRedemptionId;
  }


  public void setGiftCardServiceRedemptionId(String giftCardServiceRedemptionId) {
    this.giftCardServiceRedemptionId = giftCardServiceRedemptionId;
  }


  public GiftCardRedemption errorCode(ErrorCodeEnum errorCode) {
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * If this gift card redemption resulted in an error, this will contain the internal code for the error.
   * @return errorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "expired_card", value = "If this gift card redemption resulted in an error, this will contain the internal code for the error.")

  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }


  public void setErrorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
  }


  public GiftCardRedemption rawErrorCode(String rawErrorCode) {
    
    this.rawErrorCode = rawErrorCode;
    return this;
  }

   /**
   * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
   * @return rawErrorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10001", value = "If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.")

  public String getRawErrorCode() {
    return rawErrorCode;
  }


  public void setRawErrorCode(String rawErrorCode) {
    this.rawErrorCode = rawErrorCode;
  }


  public GiftCardRedemption rawErrorMessage(String rawErrorMessage) {
    
    this.rawErrorMessage = rawErrorMessage;
    return this;
  }

   /**
   * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
   * @return rawErrorMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Card expired.", value = "If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.")

  public String getRawErrorMessage() {
    return rawErrorMessage;
  }


  public void setRawErrorMessage(String rawErrorMessage) {
    this.rawErrorMessage = rawErrorMessage;
  }


  public GiftCardRedemption giftCard(GiftCardSnapshot giftCard) {
    
    this.giftCard = giftCard;
    return this;
  }

   /**
   * Get giftCard
   * @return giftCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GiftCardSnapshot getGiftCard() {
    return giftCard;
  }


  public void setGiftCard(GiftCardSnapshot giftCard) {
    this.giftCard = giftCard;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftCardRedemption giftCardRedemption = (GiftCardRedemption) o;
    return Objects.equals(this.type, giftCardRedemption.type) &&
        Objects.equals(this.id, giftCardRedemption.id) &&
        Objects.equals(this.status, giftCardRedemption.status) &&
        Objects.equals(this.amount, giftCardRedemption.amount) &&
        Objects.equals(this.refundedAmount, giftCardRedemption.refundedAmount) &&
        Objects.equals(this.giftCardServiceRedemptionId, giftCardRedemption.giftCardServiceRedemptionId) &&
        Objects.equals(this.errorCode, giftCardRedemption.errorCode) &&
        Objects.equals(this.rawErrorCode, giftCardRedemption.rawErrorCode) &&
        Objects.equals(this.rawErrorMessage, giftCardRedemption.rawErrorMessage) &&
        Objects.equals(this.giftCard, giftCardRedemption.giftCard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, status, amount, refundedAmount, giftCardServiceRedemptionId, errorCode, rawErrorCode, rawErrorMessage, giftCard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftCardRedemption {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    refundedAmount: ").append(toIndentedString(refundedAmount)).append("\n");
    sb.append("    giftCardServiceRedemptionId: ").append(toIndentedString(giftCardServiceRedemptionId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    rawErrorCode: ").append(toIndentedString(rawErrorCode)).append("\n");
    sb.append("    rawErrorMessage: ").append(toIndentedString(rawErrorMessage)).append("\n");
    sb.append("    giftCard: ").append(toIndentedString(giftCard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

