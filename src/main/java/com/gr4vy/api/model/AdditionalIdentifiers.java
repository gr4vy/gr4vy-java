/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
 */
@ApiModel(description = "A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AdditionalIdentifiers extends HashMap<String, String> {
  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_AUTHORIZATION_ID = "payment_service_authorization_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_AUTHORIZATION_ID)
  private String paymentServiceAuthorizationId;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_CAPTURE_ID = "payment_service_capture_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_CAPTURE_ID)
  private String paymentServiceCaptureId;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_PROCESSOR_ID = "payment_service_processor_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_PROCESSOR_ID)
  private String paymentServiceProcessorId;


  public AdditionalIdentifiers paymentServiceAuthorizationId(String paymentServiceAuthorizationId) {
    
    this.paymentServiceAuthorizationId = paymentServiceAuthorizationId;
    return this;
  }

   /**
   * The optional ID for the authorization of this transaction. Availability of this ID will vary per connector used.
   * @return paymentServiceAuthorizationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "authorization-1234", value = "The optional ID for the authorization of this transaction. Availability of this ID will vary per connector used.")

  public String getPaymentServiceAuthorizationId() {
    return paymentServiceAuthorizationId;
  }


  public void setPaymentServiceAuthorizationId(String paymentServiceAuthorizationId) {
    this.paymentServiceAuthorizationId = paymentServiceAuthorizationId;
  }


  public AdditionalIdentifiers paymentServiceCaptureId(String paymentServiceCaptureId) {
    
    this.paymentServiceCaptureId = paymentServiceCaptureId;
    return this;
  }

   /**
   * The optional ID for the capture of this transaction. Availability of this ID will vary per connector used.
   * @return paymentServiceCaptureId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "capture-1234", value = "The optional ID for the capture of this transaction. Availability of this ID will vary per connector used.")

  public String getPaymentServiceCaptureId() {
    return paymentServiceCaptureId;
  }


  public void setPaymentServiceCaptureId(String paymentServiceCaptureId) {
    this.paymentServiceCaptureId = paymentServiceCaptureId;
  }


  public AdditionalIdentifiers paymentServiceProcessorId(String paymentServiceProcessorId) {
    
    this.paymentServiceProcessorId = paymentServiceProcessorId;
    return this;
  }

   /**
   * The optional ID provided by the processor for this transaction. Availability of this ID will vary per connector used.
   * @return paymentServiceProcessorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "processor-1234", value = "The optional ID provided by the processor for this transaction. Availability of this ID will vary per connector used.")

  public String getPaymentServiceProcessorId() {
    return paymentServiceProcessorId;
  }


  public void setPaymentServiceProcessorId(String paymentServiceProcessorId) {
    this.paymentServiceProcessorId = paymentServiceProcessorId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalIdentifiers additionalIdentifiers = (AdditionalIdentifiers) o;
    return Objects.equals(this.paymentServiceAuthorizationId, additionalIdentifiers.paymentServiceAuthorizationId) &&
        Objects.equals(this.paymentServiceCaptureId, additionalIdentifiers.paymentServiceCaptureId) &&
        Objects.equals(this.paymentServiceProcessorId, additionalIdentifiers.paymentServiceProcessorId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentServiceAuthorizationId, paymentServiceCaptureId, paymentServiceProcessorId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalIdentifiers {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    paymentServiceAuthorizationId: ").append(toIndentedString(paymentServiceAuthorizationId)).append("\n");
    sb.append("    paymentServiceCaptureId: ").append(toIndentedString(paymentServiceCaptureId)).append("\n");
    sb.append("    paymentServiceProcessorId: ").append(toIndentedString(paymentServiceProcessorId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

