/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * General data regarding item such as name, price, etc.
 */
@ApiModel(description = "General data regarding item such as name, price, etc.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectionOptionsForterAntiFraudDeliveryDetails {
  /**
   * Value to populate the &#x60;deliveryType&#x60; field for this cart item. This overrides the type set at the wider level.  Represents the type of delivery. This can be set to &#x60;PHYSICAL&#x60; for any type of shipped goods, &#x60;DIGITAL&#x60; for non-shipped goods (services, gift cards etc.), or &#x60;HYBRID&#x60; for others.
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    PHYSICAL("PHYSICAL"),
    
    DIGITAL("DIGITAL"),
    
    HYBRID("HYBRID");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String value) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "delivery_type";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private DeliveryTypeEnum deliveryType;

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "delivery_method";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private String deliveryMethod;


  public ConnectionOptionsForterAntiFraudDeliveryDetails deliveryType(DeliveryTypeEnum deliveryType) {
    
    this.deliveryType = deliveryType;
    return this;
  }

   /**
   * Value to populate the &#x60;deliveryType&#x60; field for this cart item. This overrides the type set at the wider level.  Represents the type of delivery. This can be set to &#x60;PHYSICAL&#x60; for any type of shipped goods, &#x60;DIGITAL&#x60; for non-shipped goods (services, gift cards etc.), or &#x60;HYBRID&#x60; for others.
   * @return deliveryType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PHYSICAL", value = "Value to populate the `deliveryType` field for this cart item. This overrides the type set at the wider level.  Represents the type of delivery. This can be set to `PHYSICAL` for any type of shipped goods, `DIGITAL` for non-shipped goods (services, gift cards etc.), or `HYBRID` for others.")

  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }


  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }


  public ConnectionOptionsForterAntiFraudDeliveryDetails deliveryMethod(String deliveryMethod) {
    
    this.deliveryMethod = deliveryMethod;
    return this;
  }

   /**
   * Value to populate the &#x60;deliveryMethod&#x60; field for this cart item. This overrides the method set at the wider level.  Represents the delivery method chosen by customer such as postal service, email, in game transfer, etc.
   * @return deliveryMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USPS - Ground Mail", value = "Value to populate the `deliveryMethod` field for this cart item. This overrides the method set at the wider level.  Represents the delivery method chosen by customer such as postal service, email, in game transfer, etc.")

  public String getDeliveryMethod() {
    return deliveryMethod;
  }


  public void setDeliveryMethod(String deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionOptionsForterAntiFraudDeliveryDetails connectionOptionsForterAntiFraudDeliveryDetails = (ConnectionOptionsForterAntiFraudDeliveryDetails) o;
    return Objects.equals(this.deliveryType, connectionOptionsForterAntiFraudDeliveryDetails.deliveryType) &&
        Objects.equals(this.deliveryMethod, connectionOptionsForterAntiFraudDeliveryDetails.deliveryMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryType, deliveryMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionOptionsForterAntiFraudDeliveryDetails {\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

