/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gr4vy.api.model.BuyerSnapshot;
import com.gr4vy.api.model.CartItem;
import com.gr4vy.api.model.PaymentMethodSnapshot;
import com.gr4vy.api.model.PaymentServiceSnapshot;
import com.gr4vy.api.model.StatementDescriptor;
import com.gr4vy.api.model.ThreeDSecureSummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;

/**
 * A transaction record.
 */
@ApiModel(description = "A transaction record.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-09T18:46:45.100086Z[Etc/UTC]")
public class Transaction {
  /**
   * The type of this resource. Is always &#x60;transaction&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TRANSACTION("transaction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * The status of the transaction. The status may change over time as asynchronous processing events occur.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PROCESSING("processing"),
    
    BUYER_APPROVAL_PENDING("buyer_approval_pending"),
    
    AUTHORIZATION_SUCCEEDED("authorization_succeeded"),
    
    AUTHORIZATION_FAILED("authorization_failed"),
    
    AUTHORIZATION_DECLINED("authorization_declined"),
    
    CAPTURE_PENDING("capture_pending"),
    
    CAPTURE_SUCCEEDED("capture_succeeded"),
    
    AUTHORIZATION_VOID_PENDING("authorization_void_pending"),
    
    AUTHORIZATION_VOIDED("authorization_voided");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The original &#x60;intent&#x60; used when the transaction was [created](#operation/authorize-new-transaction).
   */
  @JsonAdapter(IntentEnum.Adapter.class)
  public enum IntentEnum {
    AUTHORIZE("authorize"),
    
    CAPTURE("capture");

    private String value;

    IntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntentEnum fromValue(String value) {
      for (IntentEnum b : IntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private IntentEnum intent;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CAPTURED_AMOUNT = "captured_amount";
  @SerializedName(SERIALIZED_NAME_CAPTURED_AMOUNT)
  private Integer capturedAmount;

  public static final String SERIALIZED_NAME_REFUNDED_AMOUNT = "refunded_amount";
  @SerializedName(SERIALIZED_NAME_REFUNDED_AMOUNT)
  private Integer refundedAmount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodSnapshot paymentMethod;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private BuyerSnapshot buyer;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE = "payment_service";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE)
  private PaymentServiceSnapshot paymentService;

  public static final String SERIALIZED_NAME_MERCHANT_INITIATED = "merchant_initiated";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INITIATED)
  private Boolean merchantInitiated = false;

  /**
   * The source of the transaction. Defaults to &#x60;ecommerce&#x60;.
   */
  @JsonAdapter(PaymentSourceEnum.Adapter.class)
  public enum PaymentSourceEnum {
    ECOMMERCE("ecommerce"),
    
    MOTO("moto"),
    
    RECURRING("recurring"),
    
    INSTALLMENT("installment"),
    
    CARD_ON_FILE("card_on_file");

    private String value;

    PaymentSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentSourceEnum fromValue(String value) {
      for (PaymentSourceEnum b : PaymentSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_SOURCE = "payment_source";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SOURCE)
  private PaymentSourceEnum paymentSource;

  public static final String SERIALIZED_NAME_IS_SUBSEQUENT_PAYMENT = "is_subsequent_payment";
  @SerializedName(SERIALIZED_NAME_IS_SUBSEQUENT_PAYMENT)
  private Boolean isSubsequentPayment = false;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private StatementDescriptor statementDescriptor;

  public static final String SERIALIZED_NAME_CART_ITEMS = "cart_items";
  @SerializedName(SERIALIZED_NAME_CART_ITEMS)
  private List<CartItem> cartItems = null;

  public static final String SERIALIZED_NAME_SCHEME_TRANSACTION_ID = "scheme_transaction_id";
  @SerializedName(SERIALIZED_NAME_SCHEME_TRANSACTION_ID)
  private String schemeTransactionId = "null";

  public static final String SERIALIZED_NAME_RAW_RESPONSE_CODE = "raw_response_code";
  @SerializedName(SERIALIZED_NAME_RAW_RESPONSE_CODE)
  private String rawResponseCode;

  public static final String SERIALIZED_NAME_RAW_RESPONSE_DESCRIPTION = "raw_response_description";
  @SerializedName(SERIALIZED_NAME_RAW_RESPONSE_DESCRIPTION)
  private String rawResponseDescription;

  /**
   * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.  - &#x60;no_match&#x60; - neither address or postal code match - &#x60;match&#x60; - both address and postal code match - &#x60;partial_match_address&#x60; - address matches but postal code does not - &#x60;partial_match_postcode&#x60; - postal code matches but address does not - &#x60;unavailable &#x60; - AVS is unavailable for card/country  The value of this field can be &#x60;null&#x60; if the payment service did not provide a response.
   */
  @JsonAdapter(AvsResponseCodeEnum.Adapter.class)
  public enum AvsResponseCodeEnum {
    NO_MATCH("no_match"),
    
    MATCH("match"),
    
    PARTIAL_MATCH_ADDRESS("partial_match_address"),
    
    PARTIAL_MATCH_POSTCODE("partial_match_postcode"),
    
    UNAVAILABLE("unavailable");

    private String value;

    AvsResponseCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvsResponseCodeEnum fromValue(String value) {
      for (AvsResponseCodeEnum b : AvsResponseCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AvsResponseCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvsResponseCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvsResponseCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvsResponseCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AVS_RESPONSE_CODE = "avs_response_code";
  @SerializedName(SERIALIZED_NAME_AVS_RESPONSE_CODE)
  private AvsResponseCodeEnum avsResponseCode;

  /**
   * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.  - &#x60;no_match&#x60; - the CVV does not match the expected value - &#x60;match&#x60; - the CVV matches the expected value - &#x60;unavailable &#x60; - CVV check unavailable for card our country - &#x60;not_provided &#x60; - CVV not provided  The value of this field can be &#x60;null&#x60; if the payment service did not provide a response.
   */
  @JsonAdapter(CvvResponseCodeEnum.Adapter.class)
  public enum CvvResponseCodeEnum {
    NO_MATCH("no_match"),
    
    MATCH("match"),
    
    UNAVAILABLE("unavailable"),
    
    NOT_PROVIDED("not_provided");

    private String value;

    CvvResponseCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CvvResponseCodeEnum fromValue(String value) {
      for (CvvResponseCodeEnum b : CvvResponseCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CvvResponseCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CvvResponseCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CvvResponseCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CvvResponseCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CVV_RESPONSE_CODE = "cvv_response_code";
  @SerializedName(SERIALIZED_NAME_CVV_RESPONSE_CODE)
  private CvvResponseCodeEnum cvvResponseCode;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    AFTERPAY("afterpay"),
    
    APPLEPAY("applepay"),
    
    BANKED("banked"),
    
    BITPAY("bitpay"),
    
    BOLETO("boleto"),
    
    CARD("card"),
    
    CLEARPAY("clearpay"),
    
    DANA("dana"),
    
    FORTUMO("fortumo"),
    
    GCASH("gcash"),
    
    GOCARDLESS("gocardless"),
    
    GOOGLEPAY("googlepay"),
    
    GRABPAY("grabpay"),
    
    KLARNA("klarna"),
    
    OVO("ovo"),
    
    PAYMAYA("paymaya"),
    
    PAYPAL("paypal"),
    
    PIX("pix"),
    
    RABBITLINEPAY("rabbitlinepay"),
    
    SCALAPAY("scalapay"),
    
    SHOPEEPAY("shopeepay"),
    
    STRIPEDD("stripedd"),
    
    TRUEMONEY("truemoney"),
    
    TRUSTLY("trustly"),
    
    ZIPPAY("zippay");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_TRANSACTION_ID = "payment_service_transaction_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_TRANSACTION_ID)
  private String paymentServiceTransactionId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  public static final String SERIALIZED_NAME_THREE_D_SECURE = "three_d_secure";
  @SerializedName(SERIALIZED_NAME_THREE_D_SECURE)
  private ThreeDSecureSummary threeDSecure;

  public static final String SERIALIZED_NAME_AUTHORIZED_AT = "authorized_at";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_AT)
  private OffsetDateTime authorizedAt;

  public static final String SERIALIZED_NAME_CAPTURED_AT = "captured_at";
  @SerializedName(SERIALIZED_NAME_CAPTURED_AT)
  private OffsetDateTime capturedAt;

  public static final String SERIALIZED_NAME_VOIDED_AT = "voided_at";
  @SerializedName(SERIALIZED_NAME_VOIDED_AT)
  private OffsetDateTime voidedAt;


  public Transaction type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of this resource. Is always &#x60;transaction&#x60;.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "transaction", value = "The type of this resource. Is always `transaction`.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Transaction id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this transaction.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "fe26475d-ec3e-4884-9553-f7356683f7f9", value = "The unique identifier for this transaction.")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Transaction status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the transaction. The status may change over time as asynchronous processing events occur.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "processing", value = "The status of the transaction. The status may change over time as asynchronous processing events occur.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Transaction intent(IntentEnum intent) {
    
    this.intent = intent;
    return this;
  }

   /**
   * The original &#x60;intent&#x60; used when the transaction was [created](#operation/authorize-new-transaction).
   * @return intent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "authorize", value = "The original `intent` used when the transaction was [created](#operation/authorize-new-transaction).")

  public IntentEnum getIntent() {
    return intent;
  }


  public void setIntent(IntentEnum intent) {
    this.intent = intent;
  }


  public Transaction amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The authorized amount for this transaction. This can be more than the actual captured amount and part of this amount may be refunded.
   * minimum: 0
   * maximum: 99999999
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1299", value = "The authorized amount for this transaction. This can be more than the actual captured amount and part of this amount may be refunded.")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public Transaction capturedAmount(Integer capturedAmount) {
    
    this.capturedAmount = capturedAmount;
    return this;
  }

   /**
   * The captured amount for this transaction. This can be the total or a portion of the authorized amount.
   * minimum: 0
   * maximum: 99999999
   * @return capturedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "999", value = "The captured amount for this transaction. This can be the total or a portion of the authorized amount.")

  public Integer getCapturedAmount() {
    return capturedAmount;
  }


  public void setCapturedAmount(Integer capturedAmount) {
    this.capturedAmount = capturedAmount;
  }


  public Transaction refundedAmount(Integer refundedAmount) {
    
    this.refundedAmount = refundedAmount;
    return this;
  }

   /**
   * The refunded amount for this transaction. This can be the total or a portion of the captured amount.
   * minimum: 0
   * maximum: 99999999
   * @return refundedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "The refunded amount for this transaction. This can be the total or a portion of the captured amount.")

  public Integer getRefundedAmount() {
    return refundedAmount;
  }


  public void setRefundedAmount(Integer refundedAmount) {
    this.refundedAmount = refundedAmount;
  }


  public Transaction currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code for this transaction.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The currency code for this transaction.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Transaction country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction. 
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction. ")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public Transaction paymentMethod(PaymentMethodSnapshot paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentMethodSnapshot getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(PaymentMethodSnapshot paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Transaction buyer(BuyerSnapshot buyer) {
    
    this.buyer = buyer;
    return this;
  }

   /**
   * Get buyer
   * @return buyer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BuyerSnapshot getBuyer() {
    return buyer;
  }


  public void setBuyer(BuyerSnapshot buyer) {
    this.buyer = buyer;
  }


  public Transaction createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when this transaction was created in our system.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2013-07-16T19:23Z", value = "The date and time when this transaction was created in our system.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Transaction externalIdentifier(String externalIdentifier) {
    
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * An external identifier that can be used to match the transaction against your own records.
   * @return externalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "user-789123", value = "An external identifier that can be used to match the transaction against your own records.")

  public String getExternalIdentifier() {
    return externalIdentifier;
  }


  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public Transaction updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Defines when the transaction was last updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines when the transaction was last updated.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Transaction paymentService(PaymentServiceSnapshot paymentService) {
    
    this.paymentService = paymentService;
    return this;
  }

   /**
   * Get paymentService
   * @return paymentService
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentServiceSnapshot getPaymentService() {
    return paymentService;
  }


  public void setPaymentService(PaymentServiceSnapshot paymentService) {
    this.paymentService = paymentService;
  }


  public Transaction merchantInitiated(Boolean merchantInitiated) {
    
    this.merchantInitiated = merchantInitiated;
    return this;
  }

   /**
   * Indicates whether the transaction was initiated by the merchant (true) or customer (false).
   * @return merchantInitiated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates whether the transaction was initiated by the merchant (true) or customer (false).")

  public Boolean getMerchantInitiated() {
    return merchantInitiated;
  }


  public void setMerchantInitiated(Boolean merchantInitiated) {
    this.merchantInitiated = merchantInitiated;
  }


  public Transaction paymentSource(PaymentSourceEnum paymentSource) {
    
    this.paymentSource = paymentSource;
    return this;
  }

   /**
   * The source of the transaction. Defaults to &#x60;ecommerce&#x60;.
   * @return paymentSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ecommerce", value = "The source of the transaction. Defaults to `ecommerce`.")

  public PaymentSourceEnum getPaymentSource() {
    return paymentSource;
  }


  public void setPaymentSource(PaymentSourceEnum paymentSource) {
    this.paymentSource = paymentSource;
  }


  public Transaction isSubsequentPayment(Boolean isSubsequentPayment) {
    
    this.isSubsequentPayment = isSubsequentPayment;
    return this;
  }

   /**
   * Indicates whether the transaction represents a subsequent payment coming from a setup recurring payment. Please note there are some restrictions on how this flag may be used.  The flag can only be &#x60;false&#x60; (or not set) when the transaction meets one of the following criteria:  * It is not &#x60;merchant_initiated&#x60;. * &#x60;payment_source&#x60; is set to &#x60;card_on_file&#x60;.  The flag can only be set to &#x60;true&#x60; when the transaction meets one of the following criteria:  * It is not &#x60;merchant_initiated&#x60;. * &#x60;payment_source&#x60; is set to &#x60;recurring&#x60; or &#x60;installment&#x60; and &#x60;merchant_initiated&#x60; is set to &#x60;true&#x60;. * &#x60;payment_source&#x60; is set to &#x60;card_on_file&#x60;.
   * @return isSubsequentPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates whether the transaction represents a subsequent payment coming from a setup recurring payment. Please note there are some restrictions on how this flag may be used.  The flag can only be `false` (or not set) when the transaction meets one of the following criteria:  * It is not `merchant_initiated`. * `payment_source` is set to `card_on_file`.  The flag can only be set to `true` when the transaction meets one of the following criteria:  * It is not `merchant_initiated`. * `payment_source` is set to `recurring` or `installment` and `merchant_initiated` is set to `true`. * `payment_source` is set to `card_on_file`.")

  public Boolean getIsSubsequentPayment() {
    return isSubsequentPayment;
  }


  public void setIsSubsequentPayment(Boolean isSubsequentPayment) {
    this.isSubsequentPayment = isSubsequentPayment;
  }


  public Transaction statementDescriptor(StatementDescriptor statementDescriptor) {
    
    this.statementDescriptor = statementDescriptor;
    return this;
  }

   /**
   * Get statementDescriptor
   * @return statementDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatementDescriptor getStatementDescriptor() {
    return statementDescriptor;
  }


  public void setStatementDescriptor(StatementDescriptor statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }


  public Transaction cartItems(List<CartItem> cartItems) {
    
    this.cartItems = cartItems;
    return this;
  }

  public Transaction addCartItemsItem(CartItem cartItemsItem) {
    if (this.cartItems == null) {
      this.cartItems = new ArrayList<CartItem>();
    }
    this.cartItems.add(cartItemsItem);
    return this;
  }

   /**
   * An array of cart items that represents the line items of a transaction.
   * @return cartItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of cart items that represents the line items of a transaction.")

  public List<CartItem> getCartItems() {
    return cartItems;
  }


  public void setCartItems(List<CartItem> cartItems) {
    this.cartItems = cartItems;
  }


  public Transaction schemeTransactionId(String schemeTransactionId) {
    
    this.schemeTransactionId = schemeTransactionId;
    return this;
  }

   /**
   * An identifier for the transaction used by the scheme itself, when available.  e.g. the Visa Transaction Identifier, or Mastercard Trace ID.
   * @return schemeTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789012345", value = "An identifier for the transaction used by the scheme itself, when available.  e.g. the Visa Transaction Identifier, or Mastercard Trace ID.")

  public String getSchemeTransactionId() {
    return schemeTransactionId;
  }


  public void setSchemeTransactionId(String schemeTransactionId) {
    this.schemeTransactionId = schemeTransactionId;
  }


  public Transaction rawResponseCode(String rawResponseCode) {
    
    this.rawResponseCode = rawResponseCode;
    return this;
  }

   /**
   * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
   * @return rawResponseCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "incorrect-zip", value = "This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.")

  public String getRawResponseCode() {
    return rawResponseCode;
  }


  public void setRawResponseCode(String rawResponseCode) {
    this.rawResponseCode = rawResponseCode;
  }


  public Transaction rawResponseDescription(String rawResponseDescription) {
    
    this.rawResponseDescription = rawResponseDescription;
    return this;
  }

   /**
   * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
   * @return rawResponseDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The card's postal code is incorrect. Check the card's postal code or use a different card.", value = "This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.")

  public String getRawResponseDescription() {
    return rawResponseDescription;
  }


  public void setRawResponseDescription(String rawResponseDescription) {
    this.rawResponseDescription = rawResponseDescription;
  }


  public Transaction avsResponseCode(AvsResponseCodeEnum avsResponseCode) {
    
    this.avsResponseCode = avsResponseCode;
    return this;
  }

   /**
   * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.  - &#x60;no_match&#x60; - neither address or postal code match - &#x60;match&#x60; - both address and postal code match - &#x60;partial_match_address&#x60; - address matches but postal code does not - &#x60;partial_match_postcode&#x60; - postal code matches but address does not - &#x60;unavailable &#x60; - AVS is unavailable for card/country  The value of this field can be &#x60;null&#x60; if the payment service did not provide a response.
   * @return avsResponseCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "partial_match_address", value = "The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.  - `no_match` - neither address or postal code match - `match` - both address and postal code match - `partial_match_address` - address matches but postal code does not - `partial_match_postcode` - postal code matches but address does not - `unavailable ` - AVS is unavailable for card/country  The value of this field can be `null` if the payment service did not provide a response.")

  public AvsResponseCodeEnum getAvsResponseCode() {
    return avsResponseCode;
  }


  public void setAvsResponseCode(AvsResponseCodeEnum avsResponseCode) {
    this.avsResponseCode = avsResponseCode;
  }


  public Transaction cvvResponseCode(CvvResponseCodeEnum cvvResponseCode) {
    
    this.cvvResponseCode = cvvResponseCode;
    return this;
  }

   /**
   * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.  - &#x60;no_match&#x60; - the CVV does not match the expected value - &#x60;match&#x60; - the CVV matches the expected value - &#x60;unavailable &#x60; - CVV check unavailable for card our country - &#x60;not_provided &#x60; - CVV not provided  The value of this field can be &#x60;null&#x60; if the payment service did not provide a response.
   * @return cvvResponseCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "match", value = "The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.  - `no_match` - the CVV does not match the expected value - `match` - the CVV matches the expected value - `unavailable ` - CVV check unavailable for card our country - `not_provided ` - CVV not provided  The value of this field can be `null` if the payment service did not provide a response.")

  public CvvResponseCodeEnum getCvvResponseCode() {
    return cvvResponseCode;
  }


  public void setCvvResponseCode(CvvResponseCodeEnum cvvResponseCode) {
    this.cvvResponseCode = cvvResponseCode;
  }


  public Transaction method(MethodEnum method) {
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "card", value = "")

  public MethodEnum getMethod() {
    return method;
  }


  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public Transaction paymentServiceTransactionId(String paymentServiceTransactionId) {
    
    this.paymentServiceTransactionId = paymentServiceTransactionId;
    return this;
  }

   /**
   * The payment service&#39;s unique ID for the transaction.
   * @return paymentServiceTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "charge_xYqd43gySMtori", value = "The payment service's unique ID for the transaction.")

  public String getPaymentServiceTransactionId() {
    return paymentServiceTransactionId;
  }


  public void setPaymentServiceTransactionId(String paymentServiceTransactionId) {
    this.paymentServiceTransactionId = paymentServiceTransactionId;
  }


  public Transaction metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public Transaction putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String, String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Additional information about the transaction stored as key-value pairs.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"key\":\"value\"}", value = "Additional information about the transaction stored as key-value pairs.")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public Transaction threeDSecure(ThreeDSecureSummary threeDSecure) {
    
    this.threeDSecure = threeDSecure;
    return this;
  }

   /**
   * Get threeDSecure
   * @return threeDSecure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ThreeDSecureSummary getThreeDSecure() {
    return threeDSecure;
  }


  public void setThreeDSecure(ThreeDSecureSummary threeDSecure) {
    this.threeDSecure = threeDSecure;
  }


  public Transaction authorizedAt(OffsetDateTime authorizedAt) {
    
    this.authorizedAt = authorizedAt;
    return this;
  }

   /**
   * The date and time when this transaction was authorized in the payment service.  Don&#39;t use this field to determine whether the transaction was authorized. A &#x60;null&#x60; value doesn&#39;t necessarily imply that the transaction wasn&#39;t authorized, it can mean that the payment service doesn&#39;t provide this value, that it didn&#39;t provide it at the time the transaction was authorized or that the transaction was authorized before the introduction of this field.
   * @return authorizedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2013-07-16T19:23Z", value = "The date and time when this transaction was authorized in the payment service.  Don't use this field to determine whether the transaction was authorized. A `null` value doesn't necessarily imply that the transaction wasn't authorized, it can mean that the payment service doesn't provide this value, that it didn't provide it at the time the transaction was authorized or that the transaction was authorized before the introduction of this field.")

  public OffsetDateTime getAuthorizedAt() {
    return authorizedAt;
  }


  public void setAuthorizedAt(OffsetDateTime authorizedAt) {
    this.authorizedAt = authorizedAt;
  }


  public Transaction capturedAt(OffsetDateTime capturedAt) {
    
    this.capturedAt = capturedAt;
    return this;
  }

   /**
   * The date and time when this transaction was captured in the payment service.  Don&#39;t use this field to determine whether the transaction was captured. A &#x60;null&#x60; value doesn&#39;t necessarily imply that the transaction wasn&#39;t captured, it can mean that the payment service doesn&#39;t provide this value, that it didn&#39;t provide it at the time the transaction was captured or that the transaction was captured before the introduction of this field.
   * @return capturedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2013-07-16T19:23Z", value = "The date and time when this transaction was captured in the payment service.  Don't use this field to determine whether the transaction was captured. A `null` value doesn't necessarily imply that the transaction wasn't captured, it can mean that the payment service doesn't provide this value, that it didn't provide it at the time the transaction was captured or that the transaction was captured before the introduction of this field.")

  public OffsetDateTime getCapturedAt() {
    return capturedAt;
  }


  public void setCapturedAt(OffsetDateTime capturedAt) {
    this.capturedAt = capturedAt;
  }


  public Transaction voidedAt(OffsetDateTime voidedAt) {
    
    this.voidedAt = voidedAt;
    return this;
  }

   /**
   * The date and time when this transaction was voided in the payment service.  Don&#39;t use this field to determine whether the transaction was voided. A &#x60;null&#x60; value doesn&#39;t necessarily imply that the transaction wasn&#39;t voided, it can mean that the payment service doesn&#39;t provide this value, that it didn&#39;t provide it at the time the transaction was voided or that the transaction was voided before the introduction of this field.
   * @return voidedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2013-07-16T19:23Z", value = "The date and time when this transaction was voided in the payment service.  Don't use this field to determine whether the transaction was voided. A `null` value doesn't necessarily imply that the transaction wasn't voided, it can mean that the payment service doesn't provide this value, that it didn't provide it at the time the transaction was voided or that the transaction was voided before the introduction of this field.")

  public OffsetDateTime getVoidedAt() {
    return voidedAt;
  }


  public void setVoidedAt(OffsetDateTime voidedAt) {
    this.voidedAt = voidedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.id, transaction.id) &&
        Objects.equals(this.status, transaction.status) &&
        Objects.equals(this.intent, transaction.intent) &&
        Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.capturedAmount, transaction.capturedAmount) &&
        Objects.equals(this.refundedAmount, transaction.refundedAmount) &&
        Objects.equals(this.currency, transaction.currency) &&
        Objects.equals(this.country, transaction.country) &&
        Objects.equals(this.paymentMethod, transaction.paymentMethod) &&
        Objects.equals(this.buyer, transaction.buyer) &&
        Objects.equals(this.createdAt, transaction.createdAt) &&
        Objects.equals(this.externalIdentifier, transaction.externalIdentifier) &&
        Objects.equals(this.updatedAt, transaction.updatedAt) &&
        Objects.equals(this.paymentService, transaction.paymentService) &&
        Objects.equals(this.merchantInitiated, transaction.merchantInitiated) &&
        Objects.equals(this.paymentSource, transaction.paymentSource) &&
        Objects.equals(this.isSubsequentPayment, transaction.isSubsequentPayment) &&
        Objects.equals(this.statementDescriptor, transaction.statementDescriptor) &&
        Objects.equals(this.cartItems, transaction.cartItems) &&
        Objects.equals(this.schemeTransactionId, transaction.schemeTransactionId) &&
        Objects.equals(this.rawResponseCode, transaction.rawResponseCode) &&
        Objects.equals(this.rawResponseDescription, transaction.rawResponseDescription) &&
        Objects.equals(this.avsResponseCode, transaction.avsResponseCode) &&
        Objects.equals(this.cvvResponseCode, transaction.cvvResponseCode) &&
        Objects.equals(this.method, transaction.method) &&
        Objects.equals(this.paymentServiceTransactionId, transaction.paymentServiceTransactionId) &&
        Objects.equals(this.metadata, transaction.metadata) &&
        Objects.equals(this.threeDSecure, transaction.threeDSecure) &&
        Objects.equals(this.authorizedAt, transaction.authorizedAt) &&
        Objects.equals(this.capturedAt, transaction.capturedAt) &&
        Objects.equals(this.voidedAt, transaction.voidedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, status, intent, amount, capturedAmount, refundedAmount, currency, country, paymentMethod, buyer, createdAt, externalIdentifier, updatedAt, paymentService, merchantInitiated, paymentSource, isSubsequentPayment, statementDescriptor, cartItems, schemeTransactionId, rawResponseCode, rawResponseDescription, avsResponseCode, cvvResponseCode, method, paymentServiceTransactionId, metadata, threeDSecure, authorizedAt, capturedAt, voidedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    capturedAmount: ").append(toIndentedString(capturedAmount)).append("\n");
    sb.append("    refundedAmount: ").append(toIndentedString(refundedAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    paymentService: ").append(toIndentedString(paymentService)).append("\n");
    sb.append("    merchantInitiated: ").append(toIndentedString(merchantInitiated)).append("\n");
    sb.append("    paymentSource: ").append(toIndentedString(paymentSource)).append("\n");
    sb.append("    isSubsequentPayment: ").append(toIndentedString(isSubsequentPayment)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("    cartItems: ").append(toIndentedString(cartItems)).append("\n");
    sb.append("    schemeTransactionId: ").append(toIndentedString(schemeTransactionId)).append("\n");
    sb.append("    rawResponseCode: ").append(toIndentedString(rawResponseCode)).append("\n");
    sb.append("    rawResponseDescription: ").append(toIndentedString(rawResponseDescription)).append("\n");
    sb.append("    avsResponseCode: ").append(toIndentedString(avsResponseCode)).append("\n");
    sb.append("    cvvResponseCode: ").append(toIndentedString(cvvResponseCode)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    paymentServiceTransactionId: ").append(toIndentedString(paymentServiceTransactionId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    threeDSecure: ").append(toIndentedString(threeDSecure)).append("\n");
    sb.append("    authorizedAt: ").append(toIndentedString(authorizedAt)).append("\n");
    sb.append("    capturedAt: ").append(toIndentedString(capturedAt)).append("\n");
    sb.append("    voidedAt: ").append(toIndentedString(voidedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

