/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gr4vy.api.model.BuyerSnapshot;
import com.gr4vy.api.model.CartItem;
import com.gr4vy.api.model.ShippingDetail;
import com.gr4vy.api.model.StatementDescriptor;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;


/**
 * PaymentLink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentLink {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * The type of this resource. Is always &#x60;payment_link&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PAYMENT_LINK("payment_link");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    COMPLETED("completed"),
    
    EXPIRED("expired"),
    
    PROCESSING("processing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private StatementDescriptor statementDescriptor;

  /**
   * The locale used to translate text within the payment link.
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    EN("en"),
    
    EN_GB("en-GB"),
    
    ES("es"),
    
    PT("pt"),
    
    PT_BR("pt-BR");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchant_name";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_MERCHANT_URL = "merchant_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_URL)
  private String merchantUrl;

  public static final String SERIALIZED_NAME_MERCHANT_BANNER_URL = "merchant_banner_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_BANNER_URL)
  private String merchantBannerUrl;

  public static final String SERIALIZED_NAME_MERCHANT_COLOR = "merchant_color";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COLOR)
  private String merchantColor;

  public static final String SERIALIZED_NAME_MERCHANT_MESSAGE = "merchant_message";
  @SerializedName(SERIALIZED_NAME_MERCHANT_MESSAGE)
  private String merchantMessage;

  public static final String SERIALIZED_NAME_MERCHANT_TERMS_AND_CONDITIONS_URL = "merchant_terms_and_conditions_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TERMS_AND_CONDITIONS_URL)
  private String merchantTermsAndConditionsUrl;

  public static final String SERIALIZED_NAME_MERCHANT_FAVICON_URL = "merchant_favicon_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_FAVICON_URL)
  private String merchantFaviconUrl;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  /**
   * The intent of the payment link.
   */
  @JsonAdapter(IntentEnum.Adapter.class)
  public enum IntentEnum {
    AUTHORIZE("authorize"),
    
    CAPTURE("capture");

    private String value;

    IntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntentEnum fromValue(String value) {
      for (IntentEnum b : IntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private IntentEnum intent;

  public static final String SERIALIZED_NAME_RETURN_URL = "return_url";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  public static final String SERIALIZED_NAME_CART_ITEMS = "cart_items";
  @SerializedName(SERIALIZED_NAME_CART_ITEMS)
  private List<CartItem> cartItems = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  /**
   * The source of the payment link. Defaults to &#x60;ecommerce&#x60;.
   */
  @JsonAdapter(PaymentSourceEnum.Adapter.class)
  public enum PaymentSourceEnum {
    ECOMMERCE("ecommerce"),
    
    MOTO("moto"),
    
    RECURRING("recurring"),
    
    INSTALLMENT("installment"),
    
    CARD_ON_FILE("card_on_file");

    private String value;

    PaymentSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentSourceEnum fromValue(String value) {
      for (PaymentSourceEnum b : PaymentSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_SOURCE = "payment_source";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SOURCE)
  private PaymentSourceEnum paymentSource;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private BuyerSnapshot buyer;

  public static final String SERIALIZED_NAME_SHIPPING_DETAILS = "shipping_details";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DETAILS)
  private ShippingDetail shippingDetails;


  public PaymentLink id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of a payment link.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8d3fe99b-1422-42e6-bbb3-932d95ae5f79", value = "The ID of a payment link.")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public PaymentLink type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of this resource. Is always &#x60;payment_link&#x60;.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "payment_link", value = "The type of this resource. Is always `payment_link`.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PaymentLink amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The monetary amount for this payment link, in the smallest currency unit for the given currency, for example &#x60;1299&#x60; cents to create an authorization for &#x60;$12.99&#x60;.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1299", value = "The monetary amount for this payment link, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`.")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public PaymentLink currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * A supported ISO-4217 currency code.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "A supported ISO-4217 currency code.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PaymentLink createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when this payment link was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01T12:00Z", value = "The date and time when this payment link was created.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public PaymentLink updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time when this payment link was created.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01T12:00Z", value = "The date and time when this payment link was created.")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PaymentLink expiresAt(String expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The date and time when this payment link expires.
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01T12:00Z", value = "The date and time when this payment link expires.")

  public String getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public PaymentLink status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "active", value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PaymentLink externalIdentifier(String externalIdentifier) {
    
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * A value that can be used to match the payment link against your own records.
   * @return externalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "payment-link-123", value = "A value that can be used to match the payment link against your own records.")

  public String getExternalIdentifier() {
    return externalIdentifier;
  }


  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public PaymentLink statementDescriptor(StatementDescriptor statementDescriptor) {
    
    this.statementDescriptor = statementDescriptor;
    return this;
  }

   /**
   * Get statementDescriptor
   * @return statementDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatementDescriptor getStatementDescriptor() {
    return statementDescriptor;
  }


  public void setStatementDescriptor(StatementDescriptor statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }


  public PaymentLink locale(LocaleEnum locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * The locale used to translate text within the payment link.
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "The locale used to translate text within the payment link.")

  public LocaleEnum getLocale() {
    return locale;
  }


  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public PaymentLink merchantName(String merchantName) {
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * The name of the merchant to display on the payment link.
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Gr4vy", value = "The name of the merchant to display on the payment link.")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public PaymentLink merchantUrl(String merchantUrl) {
    
    this.merchantUrl = merchantUrl;
    return this;
  }

   /**
   * The URL of the merchant to display on the payment link.
   * @return merchantUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com", value = "The URL of the merchant to display on the payment link.")

  public String getMerchantUrl() {
    return merchantUrl;
  }


  public void setMerchantUrl(String merchantUrl) {
    this.merchantUrl = merchantUrl;
  }


  public PaymentLink merchantBannerUrl(String merchantBannerUrl) {
    
    this.merchantBannerUrl = merchantBannerUrl;
    return this;
  }

   /**
   * The URL of the merchant banner to display on the payment link.
   * @return merchantBannerUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/banner.png", value = "The URL of the merchant banner to display on the payment link.")

  public String getMerchantBannerUrl() {
    return merchantBannerUrl;
  }


  public void setMerchantBannerUrl(String merchantBannerUrl) {
    this.merchantBannerUrl = merchantBannerUrl;
  }


  public PaymentLink merchantColor(String merchantColor) {
    
    this.merchantColor = merchantColor;
    return this;
  }

   /**
   * The color code of the merchant to display on the payment link.
   * @return merchantColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF0000", value = "The color code of the merchant to display on the payment link.")

  public String getMerchantColor() {
    return merchantColor;
  }


  public void setMerchantColor(String merchantColor) {
    this.merchantColor = merchantColor;
  }


  public PaymentLink merchantMessage(String merchantMessage) {
    
    this.merchantMessage = merchantMessage;
    return this;
  }

   /**
   * The message to display on the payment link.
   * @return merchantMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thank you for shopping with us!", value = "The message to display on the payment link.")

  public String getMerchantMessage() {
    return merchantMessage;
  }


  public void setMerchantMessage(String merchantMessage) {
    this.merchantMessage = merchantMessage;
  }


  public PaymentLink merchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
    
    this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
    return this;
  }

   /**
   * The URL of the merchant terms and conditions to display on the payment link.
   * @return merchantTermsAndConditionsUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/terms", value = "The URL of the merchant terms and conditions to display on the payment link.")

  public String getMerchantTermsAndConditionsUrl() {
    return merchantTermsAndConditionsUrl;
  }


  public void setMerchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
    this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
  }


  public PaymentLink merchantFaviconUrl(String merchantFaviconUrl) {
    
    this.merchantFaviconUrl = merchantFaviconUrl;
    return this;
  }

   /**
   * The URL of the merchant favicon icon.
   * @return merchantFaviconUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/favicon.png", value = "The URL of the merchant favicon icon.")

  public String getMerchantFaviconUrl() {
    return merchantFaviconUrl;
  }


  public void setMerchantFaviconUrl(String merchantFaviconUrl) {
    this.merchantFaviconUrl = merchantFaviconUrl;
  }


  public PaymentLink country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction. 
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction. ")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public PaymentLink intent(IntentEnum intent) {
    
    this.intent = intent;
    return this;
  }

   /**
   * The intent of the payment link.
   * @return intent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "authorize", value = "The intent of the payment link.")

  public IntentEnum getIntent() {
    return intent;
  }


  public void setIntent(IntentEnum intent) {
    this.intent = intent;
  }


  public PaymentLink returnUrl(String returnUrl) {
    
    this.returnUrl = returnUrl;
    return this;
  }

   /**
   * The URL to redirect the buyer to after payment.
   * @return returnUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/return", value = "The URL to redirect the buyer to after payment.")

  public String getReturnUrl() {
    return returnUrl;
  }


  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public PaymentLink cartItems(List<CartItem> cartItems) {
    
    this.cartItems = cartItems;
    return this;
  }

  public PaymentLink addCartItemsItem(CartItem cartItemsItem) {
    if (this.cartItems == null) {
      this.cartItems = new ArrayList<CartItem>();
    }
    this.cartItems.add(cartItemsItem);
    return this;
  }

   /**
   * An array of cart items that represents the line items of a payment link.
   * @return cartItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of cart items that represents the line items of a payment link.")

  public List<CartItem> getCartItems() {
    return cartItems;
  }


  public void setCartItems(List<CartItem> cartItems) {
    this.cartItems = cartItems;
  }


  public PaymentLink metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public PaymentLink putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String, String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Any additional information about the payment link that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"key\":\"value\"}", value = "Any additional information about the payment link that you would like to store as key-value pairs. This data is passed to payment service providers that support it.")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public PaymentLink paymentSource(PaymentSourceEnum paymentSource) {
    
    this.paymentSource = paymentSource;
    return this;
  }

   /**
   * The source of the payment link. Defaults to &#x60;ecommerce&#x60;.
   * @return paymentSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "recurring", value = "The source of the payment link. Defaults to `ecommerce`.")

  public PaymentSourceEnum getPaymentSource() {
    return paymentSource;
  }


  public void setPaymentSource(PaymentSourceEnum paymentSource) {
    this.paymentSource = paymentSource;
  }


  public PaymentLink buyer(BuyerSnapshot buyer) {
    
    this.buyer = buyer;
    return this;
  }

   /**
   * The buyer used for this transaction.
   * @return buyer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The buyer used for this transaction.")

  public BuyerSnapshot getBuyer() {
    return buyer;
  }


  public void setBuyer(BuyerSnapshot buyer) {
    this.buyer = buyer;
  }


  public PaymentLink shippingDetails(ShippingDetail shippingDetails) {
    
    this.shippingDetails = shippingDetails;
    return this;
  }

   /**
   * Shipping details for the payment link.
   * @return shippingDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping details for the payment link.")

  public ShippingDetail getShippingDetails() {
    return shippingDetails;
  }


  public void setShippingDetails(ShippingDetail shippingDetails) {
    this.shippingDetails = shippingDetails;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentLink paymentLink = (PaymentLink) o;
    return Objects.equals(this.id, paymentLink.id) &&
        Objects.equals(this.type, paymentLink.type) &&
        Objects.equals(this.amount, paymentLink.amount) &&
        Objects.equals(this.currency, paymentLink.currency) &&
        Objects.equals(this.createdAt, paymentLink.createdAt) &&
        Objects.equals(this.updatedAt, paymentLink.updatedAt) &&
        Objects.equals(this.expiresAt, paymentLink.expiresAt) &&
        Objects.equals(this.status, paymentLink.status) &&
        Objects.equals(this.externalIdentifier, paymentLink.externalIdentifier) &&
        Objects.equals(this.statementDescriptor, paymentLink.statementDescriptor) &&
        Objects.equals(this.locale, paymentLink.locale) &&
        Objects.equals(this.merchantName, paymentLink.merchantName) &&
        Objects.equals(this.merchantUrl, paymentLink.merchantUrl) &&
        Objects.equals(this.merchantBannerUrl, paymentLink.merchantBannerUrl) &&
        Objects.equals(this.merchantColor, paymentLink.merchantColor) &&
        Objects.equals(this.merchantMessage, paymentLink.merchantMessage) &&
        Objects.equals(this.merchantTermsAndConditionsUrl, paymentLink.merchantTermsAndConditionsUrl) &&
        Objects.equals(this.merchantFaviconUrl, paymentLink.merchantFaviconUrl) &&
        Objects.equals(this.country, paymentLink.country) &&
        Objects.equals(this.intent, paymentLink.intent) &&
        Objects.equals(this.returnUrl, paymentLink.returnUrl) &&
        Objects.equals(this.cartItems, paymentLink.cartItems) &&
        Objects.equals(this.metadata, paymentLink.metadata) &&
        Objects.equals(this.paymentSource, paymentLink.paymentSource) &&
        Objects.equals(this.buyer, paymentLink.buyer) &&
        Objects.equals(this.shippingDetails, paymentLink.shippingDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, amount, currency, createdAt, updatedAt, expiresAt, status, externalIdentifier, statementDescriptor, locale, merchantName, merchantUrl, merchantBannerUrl, merchantColor, merchantMessage, merchantTermsAndConditionsUrl, merchantFaviconUrl, country, intent, returnUrl, cartItems, metadata, paymentSource, buyer, shippingDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentLink {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantUrl: ").append(toIndentedString(merchantUrl)).append("\n");
    sb.append("    merchantBannerUrl: ").append(toIndentedString(merchantBannerUrl)).append("\n");
    sb.append("    merchantColor: ").append(toIndentedString(merchantColor)).append("\n");
    sb.append("    merchantMessage: ").append(toIndentedString(merchantMessage)).append("\n");
    sb.append("    merchantTermsAndConditionsUrl: ").append(toIndentedString(merchantTermsAndConditionsUrl)).append("\n");
    sb.append("    merchantFaviconUrl: ").append(toIndentedString(merchantFaviconUrl)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    cartItems: ").append(toIndentedString(cartItems)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    paymentSource: ").append(toIndentedString(paymentSource)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    shippingDetails: ").append(toIndentedString(shippingDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

