/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;


/**
 * A refund record.  A refund is always associated with a single transaction, while a transaction can potentially have several refunds.
 */
@ApiModel(description = "A refund record.  A refund is always associated with a single transaction, while a transaction can potentially have several refunds.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Refund {
  /**
   * The type of this resource. Is always &#x60;refund&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REFUND("refund");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private UUID transactionId;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_REFUND_ID = "payment_service_refund_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_REFUND_ID)
  private String paymentServiceRefundId;

  /**
   * The status of the refund. It may change over time as asynchronous processing events occur.  - &#x60;processing&#x60; - The refund is being processed. - &#x60;succeeded&#x60; - The refund was successful. - &#x60;declined&#x60; - The refund was declined by the underlying PSP. - &#x60;failed&#x60; - The refund could not proceed due to a technical issue. - &#x60;voided&#x60; - The refund was voided and will not proceed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PROCESSING("processing"),
    
    SUCCEEDED("succeeded"),
    
    DECLINED("declined"),
    
    FAILED("failed"),
    
    VOIDED("voided");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason = "null";

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  /**
   * The type of the instrument that was refunded.
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    PAYMENT_METHOD("payment-method"),
    
    GIFT_CARD_REDEMPTION("gift-card-redemption");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypeEnum fromValue(String value) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGET_TYPE = "target_type";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private TargetTypeEnum targetType;

  public static final String SERIALIZED_NAME_TARGET_ID = "target_id";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_RECONCILIATION_ID = "reconciliation_id";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_ID)
  private String reconciliationId;

  public static final String SERIALIZED_NAME_TRANSACTION_EXTERNAL_IDENTIFIER = "transaction_external_identifier";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_EXTERNAL_IDENTIFIER)
  private String transactionExternalIdentifier;

  public static final String SERIALIZED_NAME_TRANSACTION_RECONCILIATION_ID = "transaction_reconciliation_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_RECONCILIATION_ID)
  private String transactionReconciliationId;


  public Refund type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of this resource. Is always &#x60;refund&#x60;.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "refund", value = "The type of this resource. Is always `refund`.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Refund id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique ID of the refund.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8724fd24-5489-4a5d-90fd-0604df7d3b83", value = "The unique ID of the refund.")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Refund transactionId(UUID transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The ID of the transaction associated with this refund.
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "fe26475d-ec3e-4884-9553-f7356683f7f9", value = "The ID of the transaction associated with this refund.")

  public UUID getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(UUID transactionId) {
    this.transactionId = transactionId;
  }


  public Refund paymentServiceRefundId(String paymentServiceRefundId) {
    
    this.paymentServiceRefundId = paymentServiceRefundId;
    return this;
  }

   /**
   * The payment service&#39;s unique ID for the refund.
   * @return paymentServiceRefundId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "refund_xYqd43gySMtori", value = "The payment service's unique ID for the refund.")

  public String getPaymentServiceRefundId() {
    return paymentServiceRefundId;
  }


  public void setPaymentServiceRefundId(String paymentServiceRefundId) {
    this.paymentServiceRefundId = paymentServiceRefundId;
  }


  public Refund status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the refund. It may change over time as asynchronous processing events occur.  - &#x60;processing&#x60; - The refund is being processed. - &#x60;succeeded&#x60; - The refund was successful. - &#x60;declined&#x60; - The refund was declined by the underlying PSP. - &#x60;failed&#x60; - The refund could not proceed due to a technical issue. - &#x60;voided&#x60; - The refund was voided and will not proceed.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "processing", value = "The status of the refund. It may change over time as asynchronous processing events occur.  - `processing` - The refund is being processed. - `succeeded` - The refund was successful. - `declined` - The refund was declined by the underlying PSP. - `failed` - The refund could not proceed due to a technical issue. - `voided` - The refund was voided and will not proceed.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Refund currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code for this refund. Will always match that of the associated transaction.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The currency code for this refund. Will always match that of the associated transaction.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Refund amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount requested for this refund.
   * minimum: 0
   * maximum: 99999999
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1299", value = "The amount requested for this refund.")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public Refund reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * The reason for this refund. Could be a multiline string.
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Refund due to user request", value = "The reason for this refund. Could be a multiline string.")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public Refund createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when this refund was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2013-07-16T19:23Z", value = "The date and time when this refund was created.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Refund updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time when this refund was last updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2013-07-16T19:23Z", value = "The date and time when this refund was last updated.")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Refund targetType(TargetTypeEnum targetType) {
    
    this.targetType = targetType;
    return this;
  }

   /**
   * The type of the instrument that was refunded.
   * @return targetType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "payment-method", value = "The type of the instrument that was refunded.")

  public TargetTypeEnum getTargetType() {
    return targetType;
  }


  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }


  public Refund targetId(String targetId) {
    
    this.targetId = targetId;
    return this;
  }

   /**
   * The optional ID of the instrument that was refunded. This may be &#x60;null&#x60; if the instrument was not stored.
   * @return targetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "c23ea83f-1b1c-4584-a0e8-78ef8c041949", value = "The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.")

  public String getTargetId() {
    return targetId;
  }


  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public Refund externalIdentifier(String externalIdentifier) {
    
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * An external identifier that can be used to match the refund against your own records.
   * @return externalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "refund-789123", value = "An external identifier that can be used to match the refund against your own records.")

  public String getExternalIdentifier() {
    return externalIdentifier;
  }


  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public Refund reconciliationId(String reconciliationId) {
    
    this.reconciliationId = reconciliationId;
    return this;
  }

   /**
   * The base62 encoded refund ID. This represents a shorter version of this refund&#39;s &#x60;id&#x60; which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service&#39;s refund against our system.
   * @return reconciliationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7jZXl4gBUNl0CnaLEnfXbt", value = "The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.")

  public String getReconciliationId() {
    return reconciliationId;
  }


  public void setReconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
  }


  public Refund transactionExternalIdentifier(String transactionExternalIdentifier) {
    
    this.transactionExternalIdentifier = transactionExternalIdentifier;
    return this;
  }

   /**
   * The external identifier of the related transaction.
   * @return transactionExternalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "transaction-789123", value = "The external identifier of the related transaction.")

  public String getTransactionExternalIdentifier() {
    return transactionExternalIdentifier;
  }


  public void setTransactionExternalIdentifier(String transactionExternalIdentifier) {
    this.transactionExternalIdentifier = transactionExternalIdentifier;
  }


  public Refund transactionReconciliationId(String transactionReconciliationId) {
    
    this.transactionReconciliationId = transactionReconciliationId;
    return this;
  }

   /**
   * The base62 encoded transaction ID. This represents a shorter version of the related transaction&#39;s &#x60;id&#x60; which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service&#39;s transaction against our system.
   * @return transactionReconciliationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7jZXl4gBUNl0CnaLEnfXbt", value = "The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.")

  public String getTransactionReconciliationId() {
    return transactionReconciliationId;
  }


  public void setTransactionReconciliationId(String transactionReconciliationId) {
    this.transactionReconciliationId = transactionReconciliationId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Refund refund = (Refund) o;
    return Objects.equals(this.type, refund.type) &&
        Objects.equals(this.id, refund.id) &&
        Objects.equals(this.transactionId, refund.transactionId) &&
        Objects.equals(this.paymentServiceRefundId, refund.paymentServiceRefundId) &&
        Objects.equals(this.status, refund.status) &&
        Objects.equals(this.currency, refund.currency) &&
        Objects.equals(this.amount, refund.amount) &&
        Objects.equals(this.reason, refund.reason) &&
        Objects.equals(this.createdAt, refund.createdAt) &&
        Objects.equals(this.updatedAt, refund.updatedAt) &&
        Objects.equals(this.targetType, refund.targetType) &&
        Objects.equals(this.targetId, refund.targetId) &&
        Objects.equals(this.externalIdentifier, refund.externalIdentifier) &&
        Objects.equals(this.reconciliationId, refund.reconciliationId) &&
        Objects.equals(this.transactionExternalIdentifier, refund.transactionExternalIdentifier) &&
        Objects.equals(this.transactionReconciliationId, refund.transactionReconciliationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, transactionId, paymentServiceRefundId, status, currency, amount, reason, createdAt, updatedAt, targetType, targetId, externalIdentifier, reconciliationId, transactionExternalIdentifier, transactionReconciliationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Refund {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    paymentServiceRefundId: ").append(toIndentedString(paymentServiceRefundId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    reconciliationId: ").append(toIndentedString(reconciliationId)).append("\n");
    sb.append("    transactionExternalIdentifier: ").append(toIndentedString(transactionExternalIdentifier)).append("\n");
    sb.append("    transactionReconciliationId: ").append(toIndentedString(transactionReconciliationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

