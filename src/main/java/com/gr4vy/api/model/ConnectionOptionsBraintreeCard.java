/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gr4vy.api.model.ConnectionOptionsBraintreeCardDynamicDataFields;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Additional options to be passed through to Braintree when processing transactions.
 */
@ApiModel(description = "Additional options to be passed through to Braintree when processing transactions.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectionOptionsBraintreeCard {
  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, String> customFields = null;

  public static final String SERIALIZED_NAME_DYNAMIC_DATA_FIELDS = "dynamic_data_fields";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DATA_FIELDS)
  private ConnectionOptionsBraintreeCardDynamicDataFields dynamicDataFields;


  public ConnectionOptionsBraintreeCard customFields(Map<String, String> customFields) {
    
    this.customFields = customFields;
    return this;
  }

  public ConnectionOptionsBraintreeCard putCustomFieldsItem(String key, String customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<String, String>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * An array with name-value objects representing additional data to be passed to Braintree. Each key is the name sent to Braintree.
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"key-1\":\"Value for key1\",\"key-2\":\"Value for key2\"}", value = "An array with name-value objects representing additional data to be passed to Braintree. Each key is the name sent to Braintree.")

  public Map<String, String> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, String> customFields) {
    this.customFields = customFields;
  }


  public ConnectionOptionsBraintreeCard dynamicDataFields(ConnectionOptionsBraintreeCardDynamicDataFields dynamicDataFields) {
    
    this.dynamicDataFields = dynamicDataFields;
    return this;
  }

   /**
   * Get dynamicDataFields
   * @return dynamicDataFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConnectionOptionsBraintreeCardDynamicDataFields getDynamicDataFields() {
    return dynamicDataFields;
  }


  public void setDynamicDataFields(ConnectionOptionsBraintreeCardDynamicDataFields dynamicDataFields) {
    this.dynamicDataFields = dynamicDataFields;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionOptionsBraintreeCard connectionOptionsBraintreeCard = (ConnectionOptionsBraintreeCard) o;
    return Objects.equals(this.customFields, connectionOptionsBraintreeCard.customFields) &&
        Objects.equals(this.dynamicDataFields, connectionOptionsBraintreeCard.dynamicDataFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFields, dynamicDataFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionOptionsBraintreeCard {\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dynamicDataFields: ").append(toIndentedString(dynamicDataFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

