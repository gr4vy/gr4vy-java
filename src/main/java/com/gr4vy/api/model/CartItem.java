/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A cart item that represents a single cart line item for a transaction. Note that some optional properties are required for certain payment service providers. If no value is set for these properties, we will use their default value.  If the total due to be paid for the item is required by the payment service provider, generally referred to as the \&quot;total amount\&quot;, the formula below will usually be used to calculate this amount:  &#x60;(unit_amount * quantity) - discount_amount + tax_amount&#x60;  It&#39;s highly recommended that the total amount to pay for all items should match the transaction&#39;s amount to reduce the risk of the transaction being declined by the payment service provider.
 */
@ApiModel(description = "A cart item that represents a single cart line item for a transaction. Note that some optional properties are required for certain payment service providers. If no value is set for these properties, we will use their default value.  If the total due to be paid for the item is required by the payment service provider, generally referred to as the \"total amount\", the formula below will usually be used to calculate this amount:  `(unit_amount * quantity) - discount_amount + tax_amount`  It's highly recommended that the total amount to pay for all items should match the transaction's amount to reduce the risk of the transaction being declined by the payment service provider.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T13:56:38.178267Z[Etc/UTC]")
public class CartItem {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_UNIT_AMOUNT = "unit_amount";
  @SerializedName(SERIALIZED_NAME_UNIT_AMOUNT)
  private Integer unitAmount;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discount_amount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Integer discountAmount = 0;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Integer taxAmount = 0;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_PRODUCT_URL = "product_url";
  @SerializedName(SERIALIZED_NAME_PRODUCT_URL)
  private String productUrl;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = null;

  /**
   * The product type of the cart item.
   */
  @JsonAdapter(ProductTypeEnum.Adapter.class)
  public enum ProductTypeEnum {
    PHYSICAL("physical"),
    
    DISCOUNT("discount"),
    
    SHIPPING_FEE("shipping_fee"),
    
    SALES_TAX("sales_tax"),
    
    DIGITAL("digital"),
    
    GIFT_CARD("gift_card"),
    
    STORE_CREDIT("store_credit"),
    
    SURCHARGE("surcharge");

    private String value;

    ProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypeEnum fromValue(String value) {
      for (ProductTypeEnum b : ProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductTypeEnum productType;


  public CartItem name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
   * @return name
  **/
  @ApiModelProperty(example = "GoPro HERO9 Camcorder", required = true, value = "The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CartItem quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of this item in the cart. This value cannot be negative or zero.
   * minimum: 1
   * maximum: 99999999
   * @return quantity
  **/
  @ApiModelProperty(example = "1", required = true, value = "The quantity of this item in the cart. This value cannot be negative or zero.")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public CartItem unitAmount(Integer unitAmount) {
    
    this.unitAmount = unitAmount;
    return this;
  }

   /**
   * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example &#x60;1299&#x60; USD cents represents &#x60;$12.99&#x60;.
   * minimum: 0
   * maximum: 99999999
   * @return unitAmount
  **/
  @ApiModelProperty(example = "37999", required = true, value = "The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.")

  public Integer getUnitAmount() {
    return unitAmount;
  }


  public void setUnitAmount(Integer unitAmount) {
    this.unitAmount = unitAmount;
  }


  public CartItem discountAmount(Integer discountAmount) {
    
    this.discountAmount = discountAmount;
    return this;
  }

   /**
   * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example &#x60;1299&#x60; USD cents represents &#x60;$12.99&#x60;.  Please note that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total discount amount for 5 of the cart item.  You might see unexpected failed transactions if the &#x60;discount_amount&#x60; can not be equally divided by the &#x60;quantity&#x60; value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific discount.
   * minimum: 0
   * maximum: 99999999
   * @return discountAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.  Please note that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total discount amount for 5 of the cart item.  You might see unexpected failed transactions if the `discount_amount` can not be equally divided by the `quantity` value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific discount.")

  public Integer getDiscountAmount() {
    return discountAmount;
  }


  public void setDiscountAmount(Integer discountAmount) {
    this.discountAmount = discountAmount;
  }


  public CartItem taxAmount(Integer taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example &#x60;1299&#x60; USD cents represents &#x60;$12.99&#x60;.  Please not that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total tax amount for 5 of the cart item.  You might see unexpected failed transactions if the &#x60;tax_amount&#x60; can not be equally divided by the &#x60;quantity&#x60; value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific tax amount.
   * minimum: 0
   * maximum: 99999999
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.  Please not that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total tax amount for 5 of the cart item.  You might see unexpected failed transactions if the `tax_amount` can not be equally divided by the `quantity` value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific tax amount.")

  public Integer getTaxAmount() {
    return taxAmount;
  }


  public void setTaxAmount(Integer taxAmount) {
    this.taxAmount = taxAmount;
  }


  public CartItem externalIdentifier(String externalIdentifier) {
    
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
   * @return externalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "item-789123", value = "An external identifier for the cart item. This can be set to any value and is not sent to the payment service.")

  public String getExternalIdentifier() {
    return externalIdentifier;
  }


  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public CartItem sku(String sku) {
    
    this.sku = sku;
    return this;
  }

   /**
   * The SKU for the item.
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sku-789123", value = "The SKU for the item.")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    this.sku = sku;
  }


  public CartItem productUrl(String productUrl) {
    
    this.productUrl = productUrl;
    return this;
  }

   /**
   * The product URL for the item.
   * @return productUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/items/gopro", value = "The product URL for the item.")

  public String getProductUrl() {
    return productUrl;
  }


  public void setProductUrl(String productUrl) {
    this.productUrl = productUrl;
  }


  public CartItem imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * The URL for the image of the item.
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/images/items/gopro.png", value = "The URL for the image of the item.")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public CartItem categories(List<String> categories) {
    
    this.categories = categories;
    return this;
  }

  public CartItem addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<String>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * A list of strings containing product categories for the item. Max length per item: 50.
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of strings containing product categories for the item. Max length per item: 50.")

  public List<String> getCategories() {
    return categories;
  }


  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public CartItem productType(ProductTypeEnum productType) {
    
    this.productType = productType;
    return this;
  }

   /**
   * The product type of the cart item.
   * @return productType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "physical", value = "The product type of the cart item.")

  public ProductTypeEnum getProductType() {
    return productType;
  }


  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartItem cartItem = (CartItem) o;
    return Objects.equals(this.name, cartItem.name) &&
        Objects.equals(this.quantity, cartItem.quantity) &&
        Objects.equals(this.unitAmount, cartItem.unitAmount) &&
        Objects.equals(this.discountAmount, cartItem.discountAmount) &&
        Objects.equals(this.taxAmount, cartItem.taxAmount) &&
        Objects.equals(this.externalIdentifier, cartItem.externalIdentifier) &&
        Objects.equals(this.sku, cartItem.sku) &&
        Objects.equals(this.productUrl, cartItem.productUrl) &&
        Objects.equals(this.imageUrl, cartItem.imageUrl) &&
        Objects.equals(this.categories, cartItem.categories) &&
        Objects.equals(this.productType, cartItem.productType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, quantity, unitAmount, discountAmount, taxAmount, externalIdentifier, sku, productUrl, imageUrl, categories, productType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartItem {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unitAmount: ").append(toIndentedString(unitAmount)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    productUrl: ").append(toIndentedString(productUrl)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

