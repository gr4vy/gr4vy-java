/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gr4vy.api.model.CartItem;
import com.gr4vy.api.model.ConnectionOptions;
import com.gr4vy.api.model.StatementDescriptor;
import com.gr4vy.api.model.TransactionBuyerRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Request body for creating a new payment link.
 */
@ApiModel(description = "Request body for creating a new payment link.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentLinkRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private TransactionBuyerRequest buyer;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_CONNECTION_OPTIONS = "connection_options";
  @SerializedName(SERIALIZED_NAME_CONNECTION_OPTIONS)
  private ConnectionOptions connectionOptions;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private StatementDescriptor statementDescriptor;

  /**
   * The locale used to translate text within the payment link.
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    EN("en"),
    
    EN_GB("en-GB"),
    
    ES("es"),
    
    PT("pt"),
    
    PT_BR("pt-BR");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchant_name";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_MERCHANT_URL = "merchant_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_URL)
  private String merchantUrl;

  public static final String SERIALIZED_NAME_MERCHANT_BANNER_URL = "merchant_banner_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_BANNER_URL)
  private String merchantBannerUrl;

  public static final String SERIALIZED_NAME_MERCHANT_COLOR = "merchant_color";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COLOR)
  private String merchantColor;

  public static final String SERIALIZED_NAME_MERCHANT_MESSAGE = "merchant_message";
  @SerializedName(SERIALIZED_NAME_MERCHANT_MESSAGE)
  private String merchantMessage;

  public static final String SERIALIZED_NAME_MERCHANT_TERMS_AND_CONDITIONS_URL = "merchant_terms_and_conditions_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TERMS_AND_CONDITIONS_URL)
  private String merchantTermsAndConditionsUrl;

  public static final String SERIALIZED_NAME_MERCHANT_FAVICON_URL = "merchant_favicon_url";
  @SerializedName(SERIALIZED_NAME_MERCHANT_FAVICON_URL)
  private String merchantFaviconUrl;

  /**
   * The intent of the payment link.
   */
  @JsonAdapter(IntentEnum.Adapter.class)
  public enum IntentEnum {
    AUTHORIZE("authorize"),
    
    CAPTURE("capture");

    private String value;

    IntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntentEnum fromValue(String value) {
      for (IntentEnum b : IntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private IntentEnum intent = IntentEnum.AUTHORIZE;

  public static final String SERIALIZED_NAME_RETURN_URL = "return_url";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  public static final String SERIALIZED_NAME_CART_ITEMS = "cart_items";
  @SerializedName(SERIALIZED_NAME_CART_ITEMS)
  private List<CartItem> cartItems = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  /**
   * The source of the payment link.
   */
  @JsonAdapter(PaymentSourceEnum.Adapter.class)
  public enum PaymentSourceEnum {
    ECOMMERCE("ecommerce"),
    
    MOTO("moto"),
    
    RECURRING("recurring"),
    
    INSTALLMENT("installment"),
    
    CARD_ON_FILE("card_on_file");

    private String value;

    PaymentSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentSourceEnum fromValue(String value) {
      for (PaymentSourceEnum b : PaymentSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_SOURCE = "payment_source";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SOURCE)
  private PaymentSourceEnum paymentSource;


  public PaymentLinkRequest amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount to request payment for.
   * minimum: 1
   * maximum: 99999999
   * @return amount
  **/
  @ApiModelProperty(example = "1299", required = true, value = "The amount to request payment for.")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public PaymentLinkRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The ISO-4217 currency code for the payment.
   * @return currency
  **/
  @ApiModelProperty(example = "USD", required = true, value = "The ISO-4217 currency code for the payment.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PaymentLinkRequest country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction. 
   * @return country
  **/
  @ApiModelProperty(example = "US", required = true, value = "The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction. ")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public PaymentLinkRequest buyer(TransactionBuyerRequest buyer) {
    
    this.buyer = buyer;
    return this;
  }

   /**
   * Get buyer
   * @return buyer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionBuyerRequest getBuyer() {
    return buyer;
  }


  public void setBuyer(TransactionBuyerRequest buyer) {
    this.buyer = buyer;
  }


  public PaymentLinkRequest expiresAt(String expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The date and time when this payment link expires. Defaults to 24 hours from creation.
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01T12:00Z", value = "The date and time when this payment link expires. Defaults to 24 hours from creation.")

  public String getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public PaymentLinkRequest connectionOptions(ConnectionOptions connectionOptions) {
    
    this.connectionOptions = connectionOptions;
    return this;
  }

   /**
   * Allows for passing optional configuration per connection to take advantage of connection specific features. When provided, the data is only passed to the target connection type to prevent sharing configuration across connections.  Please note that each of the keys this object are in kebab-case, for example &#x60;cybersource-anti-fraud&#x60; as they represent the ID of the connector. All the other keys will be snake case, for example &#x60;merchant_defined_data&#x60; or camel case to match an external API that the connector uses.
   * @return connectionOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows for passing optional configuration per connection to take advantage of connection specific features. When provided, the data is only passed to the target connection type to prevent sharing configuration across connections.  Please note that each of the keys this object are in kebab-case, for example `cybersource-anti-fraud` as they represent the ID of the connector. All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an external API that the connector uses.")

  public ConnectionOptions getConnectionOptions() {
    return connectionOptions;
  }


  public void setConnectionOptions(ConnectionOptions connectionOptions) {
    this.connectionOptions = connectionOptions;
  }


  public PaymentLinkRequest externalIdentifier(String externalIdentifier) {
    
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * A value that can be used to match the payment link against your own records. This will also be applied to any transaction.
   * @return externalIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "payment-link-123", value = "A value that can be used to match the payment link against your own records. This will also be applied to any transaction.")

  public String getExternalIdentifier() {
    return externalIdentifier;
  }


  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public PaymentLinkRequest statementDescriptor(StatementDescriptor statementDescriptor) {
    
    this.statementDescriptor = statementDescriptor;
    return this;
  }

   /**
   * Get statementDescriptor
   * @return statementDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatementDescriptor getStatementDescriptor() {
    return statementDescriptor;
  }


  public void setStatementDescriptor(StatementDescriptor statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }


  public PaymentLinkRequest locale(LocaleEnum locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * The locale used to translate text within the payment link.
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "The locale used to translate text within the payment link.")

  public LocaleEnum getLocale() {
    return locale;
  }


  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public PaymentLinkRequest merchantName(String merchantName) {
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * The name of the merchant to display on the payment link.
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Gr4vy", value = "The name of the merchant to display on the payment link.")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public PaymentLinkRequest merchantUrl(String merchantUrl) {
    
    this.merchantUrl = merchantUrl;
    return this;
  }

   /**
   * The URL of the merchant to display on the payment link.
   * @return merchantUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com", value = "The URL of the merchant to display on the payment link.")

  public String getMerchantUrl() {
    return merchantUrl;
  }


  public void setMerchantUrl(String merchantUrl) {
    this.merchantUrl = merchantUrl;
  }


  public PaymentLinkRequest merchantBannerUrl(String merchantBannerUrl) {
    
    this.merchantBannerUrl = merchantBannerUrl;
    return this;
  }

   /**
   * The URL of the merchant banner to display on the payment link.
   * @return merchantBannerUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/banner.png", value = "The URL of the merchant banner to display on the payment link.")

  public String getMerchantBannerUrl() {
    return merchantBannerUrl;
  }


  public void setMerchantBannerUrl(String merchantBannerUrl) {
    this.merchantBannerUrl = merchantBannerUrl;
  }


  public PaymentLinkRequest merchantColor(String merchantColor) {
    
    this.merchantColor = merchantColor;
    return this;
  }

   /**
   * The color code of the merchant to display on the payment link.
   * @return merchantColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF0000", value = "The color code of the merchant to display on the payment link.")

  public String getMerchantColor() {
    return merchantColor;
  }


  public void setMerchantColor(String merchantColor) {
    this.merchantColor = merchantColor;
  }


  public PaymentLinkRequest merchantMessage(String merchantMessage) {
    
    this.merchantMessage = merchantMessage;
    return this;
  }

   /**
   * The message to display on the payment link.
   * @return merchantMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thank you for shopping with us!", value = "The message to display on the payment link.")

  public String getMerchantMessage() {
    return merchantMessage;
  }


  public void setMerchantMessage(String merchantMessage) {
    this.merchantMessage = merchantMessage;
  }


  public PaymentLinkRequest merchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
    
    this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
    return this;
  }

   /**
   * The URL of the merchant terms and conditions to display on the payment link.
   * @return merchantTermsAndConditionsUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/terms", value = "The URL of the merchant terms and conditions to display on the payment link.")

  public String getMerchantTermsAndConditionsUrl() {
    return merchantTermsAndConditionsUrl;
  }


  public void setMerchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
    this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
  }


  public PaymentLinkRequest merchantFaviconUrl(String merchantFaviconUrl) {
    
    this.merchantFaviconUrl = merchantFaviconUrl;
    return this;
  }

   /**
   * The URL of the merchant favicon icon.
   * @return merchantFaviconUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/favicon.png", value = "The URL of the merchant favicon icon.")

  public String getMerchantFaviconUrl() {
    return merchantFaviconUrl;
  }


  public void setMerchantFaviconUrl(String merchantFaviconUrl) {
    this.merchantFaviconUrl = merchantFaviconUrl;
  }


  public PaymentLinkRequest intent(IntentEnum intent) {
    
    this.intent = intent;
    return this;
  }

   /**
   * The intent of the payment link.
   * @return intent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "authorize", value = "The intent of the payment link.")

  public IntentEnum getIntent() {
    return intent;
  }


  public void setIntent(IntentEnum intent) {
    this.intent = intent;
  }


  public PaymentLinkRequest returnUrl(String returnUrl) {
    
    this.returnUrl = returnUrl;
    return this;
  }

   /**
   * The URL to redirect the buyer to after payment.
   * @return returnUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gr4vy.com/return", value = "The URL to redirect the buyer to after payment.")

  public String getReturnUrl() {
    return returnUrl;
  }


  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public PaymentLinkRequest cartItems(List<CartItem> cartItems) {
    
    this.cartItems = cartItems;
    return this;
  }

  public PaymentLinkRequest addCartItemsItem(CartItem cartItemsItem) {
    if (this.cartItems == null) {
      this.cartItems = new ArrayList<CartItem>();
    }
    this.cartItems.add(cartItemsItem);
    return this;
  }

   /**
   * An array of cart items that represents the line items of a payment link.
   * @return cartItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of cart items that represents the line items of a payment link.")

  public List<CartItem> getCartItems() {
    return cartItems;
  }


  public void setCartItems(List<CartItem> cartItems) {
    this.cartItems = cartItems;
  }


  public PaymentLinkRequest metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public PaymentLinkRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String, String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Any additional information about the payment link that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"key\":\"value\"}", value = "Any additional information about the payment link that you would like to store as key-value pairs. This data is passed to payment service providers that support it.")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public PaymentLinkRequest paymentSource(PaymentSourceEnum paymentSource) {
    
    this.paymentSource = paymentSource;
    return this;
  }

   /**
   * The source of the payment link.
   * @return paymentSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "recurring", value = "The source of the payment link.")

  public PaymentSourceEnum getPaymentSource() {
    return paymentSource;
  }


  public void setPaymentSource(PaymentSourceEnum paymentSource) {
    this.paymentSource = paymentSource;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentLinkRequest paymentLinkRequest = (PaymentLinkRequest) o;
    return Objects.equals(this.amount, paymentLinkRequest.amount) &&
        Objects.equals(this.currency, paymentLinkRequest.currency) &&
        Objects.equals(this.country, paymentLinkRequest.country) &&
        Objects.equals(this.buyer, paymentLinkRequest.buyer) &&
        Objects.equals(this.expiresAt, paymentLinkRequest.expiresAt) &&
        Objects.equals(this.connectionOptions, paymentLinkRequest.connectionOptions) &&
        Objects.equals(this.externalIdentifier, paymentLinkRequest.externalIdentifier) &&
        Objects.equals(this.statementDescriptor, paymentLinkRequest.statementDescriptor) &&
        Objects.equals(this.locale, paymentLinkRequest.locale) &&
        Objects.equals(this.merchantName, paymentLinkRequest.merchantName) &&
        Objects.equals(this.merchantUrl, paymentLinkRequest.merchantUrl) &&
        Objects.equals(this.merchantBannerUrl, paymentLinkRequest.merchantBannerUrl) &&
        Objects.equals(this.merchantColor, paymentLinkRequest.merchantColor) &&
        Objects.equals(this.merchantMessage, paymentLinkRequest.merchantMessage) &&
        Objects.equals(this.merchantTermsAndConditionsUrl, paymentLinkRequest.merchantTermsAndConditionsUrl) &&
        Objects.equals(this.merchantFaviconUrl, paymentLinkRequest.merchantFaviconUrl) &&
        Objects.equals(this.intent, paymentLinkRequest.intent) &&
        Objects.equals(this.returnUrl, paymentLinkRequest.returnUrl) &&
        Objects.equals(this.cartItems, paymentLinkRequest.cartItems) &&
        Objects.equals(this.metadata, paymentLinkRequest.metadata) &&
        Objects.equals(this.paymentSource, paymentLinkRequest.paymentSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, country, buyer, expiresAt, connectionOptions, externalIdentifier, statementDescriptor, locale, merchantName, merchantUrl, merchantBannerUrl, merchantColor, merchantMessage, merchantTermsAndConditionsUrl, merchantFaviconUrl, intent, returnUrl, cartItems, metadata, paymentSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentLinkRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    connectionOptions: ").append(toIndentedString(connectionOptions)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantUrl: ").append(toIndentedString(merchantUrl)).append("\n");
    sb.append("    merchantBannerUrl: ").append(toIndentedString(merchantBannerUrl)).append("\n");
    sb.append("    merchantColor: ").append(toIndentedString(merchantColor)).append("\n");
    sb.append("    merchantMessage: ").append(toIndentedString(merchantMessage)).append("\n");
    sb.append("    merchantTermsAndConditionsUrl: ").append(toIndentedString(merchantTermsAndConditionsUrl)).append("\n");
    sb.append("    merchantFaviconUrl: ").append(toIndentedString(merchantFaviconUrl)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    cartItems: ").append(toIndentedString(cartItems)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    paymentSource: ").append(toIndentedString(paymentSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

