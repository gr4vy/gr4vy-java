/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.ErrorGeneric;
import com.gr4vy.api.model.Transaction;
import com.gr4vy.api.model.TransactionCaptureRequest;
import com.gr4vy.api.model.TransactionRefundRequest;
import com.gr4vy.api.model.TransactionRequest;
import com.gr4vy.api.model.Transactions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for authorizeNewTransaction
     * @param transactionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizeNewTransactionCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeNewTransactionValidateBeforeCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = authorizeNewTransactionCall(transactionRequest, _callback);
        return localVarCall;

    }

    /**
     * New transaction
     * Attempts to create an authorization for a payment method. In some cases it is not possible to create the authorization without redirecting the user for their authorization. In these cases the status is set to &#x60;buyer_approval_pending&#x60; and an &#x60;approval_url&#x60; is returned.  Additionally, this endpoint accepts a few additional fields that allow for simultaneous capturing and storage of the payment method.  * &#x60;store&#x60; - Use this field to store the payment method for future use. Not all payment methods support this feature. * &#x60;capture&#x60; - Use this method to also perform a capture of the transaction after it has been authorized. 
     * @param transactionRequest  (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public Transaction authorizeNewTransaction(TransactionRequest transactionRequest) throws ApiException {
        ApiResponse<Transaction> localVarResp = authorizeNewTransactionWithHttpInfo(transactionRequest);
        return localVarResp.getData();
    }

    /**
     * New transaction
     * Attempts to create an authorization for a payment method. In some cases it is not possible to create the authorization without redirecting the user for their authorization. In these cases the status is set to &#x60;buyer_approval_pending&#x60; and an &#x60;approval_url&#x60; is returned.  Additionally, this endpoint accepts a few additional fields that allow for simultaneous capturing and storage of the payment method.  * &#x60;store&#x60; - Use this field to store the payment method for future use. Not all payment methods support this feature. * &#x60;capture&#x60; - Use this method to also perform a capture of the transaction after it has been authorized. 
     * @param transactionRequest  (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> authorizeNewTransactionWithHttpInfo(TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = authorizeNewTransactionValidateBeforeCall(transactionRequest, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * New transaction (asynchronously)
     * Attempts to create an authorization for a payment method. In some cases it is not possible to create the authorization without redirecting the user for their authorization. In these cases the status is set to &#x60;buyer_approval_pending&#x60; and an &#x60;approval_url&#x60; is returned.  Additionally, this endpoint accepts a few additional fields that allow for simultaneous capturing and storage of the payment method.  * &#x60;store&#x60; - Use this field to store the payment method for future use. Not all payment methods support this feature. * &#x60;capture&#x60; - Use this method to also perform a capture of the transaction after it has been authorized. 
     * @param transactionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizeNewTransactionAsync(TransactionRequest transactionRequest, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeNewTransactionValidateBeforeCall(transactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for captureTransaction
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionCaptureRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the captured transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captureTransactionCall(String transactionId, TransactionCaptureRequest transactionCaptureRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionCaptureRequest;

        // create path and map variables
        String localVarPath = "/transactions/{transaction_id}/capture"
            .replaceAll("\\{" + "transaction_id" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call captureTransactionValidateBeforeCall(String transactionId, TransactionCaptureRequest transactionCaptureRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling captureTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = captureTransactionCall(transactionId, transactionCaptureRequest, _callback);
        return localVarCall;

    }

    /**
     * Capture transaction
     * Captures a previously authorized transaction.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionCaptureRequest  (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the captured transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public Transaction captureTransaction(String transactionId, TransactionCaptureRequest transactionCaptureRequest) throws ApiException {
        ApiResponse<Transaction> localVarResp = captureTransactionWithHttpInfo(transactionId, transactionCaptureRequest);
        return localVarResp.getData();
    }

    /**
     * Capture transaction
     * Captures a previously authorized transaction.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionCaptureRequest  (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the captured transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> captureTransactionWithHttpInfo(String transactionId, TransactionCaptureRequest transactionCaptureRequest) throws ApiException {
        okhttp3.Call localVarCall = captureTransactionValidateBeforeCall(transactionId, transactionCaptureRequest, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Capture transaction (asynchronously)
     * Captures a previously authorized transaction.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionCaptureRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the captured transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captureTransactionAsync(String transactionId, TransactionCaptureRequest transactionCaptureRequest, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = captureTransactionValidateBeforeCall(transactionId, transactionCaptureRequest, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransaction
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction resource. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCall(String transactionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{transaction_id}"
            .replaceAll("\\{" + "transaction_id" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = getTransactionCall(transactionId, _callback);
        return localVarCall;

    }

    /**
     * Get transaction
     * Get information about a transaction.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction resource. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public Transaction getTransaction(String transactionId) throws ApiException {
        ApiResponse<Transaction> localVarResp = getTransactionWithHttpInfo(transactionId);
        return localVarResp.getData();
    }

    /**
     * Get transaction
     * Get information about a transaction.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction resource. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> getTransactionWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionId, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction (asynchronously)
     * Get information about a transaction.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction resource. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionAsync(String transactionId, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionId, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTransactions
     * @param search Filters the transactions to only the items for which the &#x60;id&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any transaction for which either of the fields partially or completely matches. (optional)
     * @param transactionStatus Filters the results to only the transactions for which the &#x60;status&#x60; matches this value. (optional)
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param beforeCreatedAt Filters the results to only transactions created before this ISO date-time string. (optional)
     * @param afterCreatedAt Filters the results to only transactions created after this ISO date-time string. (optional)
     * @param beforeUpdatedAt Filters the results to only transactions last updated before this ISO date-time string. (optional)
     * @param afterUpdatedAt Filters the results to only transactions last updated after this ISO date-time string. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of transactions for an account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsCall(String search, String transactionStatus, String buyerId, String buyerExternalIdentifier, String beforeCreatedAt, String afterCreatedAt, String beforeUpdatedAt, String afterUpdatedAt, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (transactionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_status", transactionStatus));
        }

        if (buyerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_id", buyerId));
        }

        if (buyerExternalIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_external_identifier", buyerExternalIdentifier));
        }

        if (beforeCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_created_at", beforeCreatedAt));
        }

        if (afterCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after_created_at", afterCreatedAt));
        }

        if (beforeUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before_updated_at", beforeUpdatedAt));
        }

        if (afterUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after_updated_at", afterUpdatedAt));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionsValidateBeforeCall(String search, String transactionStatus, String buyerId, String buyerExternalIdentifier, String beforeCreatedAt, String afterCreatedAt, String beforeUpdatedAt, String afterUpdatedAt, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTransactionsCall(search, transactionStatus, buyerId, buyerExternalIdentifier, beforeCreatedAt, afterCreatedAt, beforeUpdatedAt, afterUpdatedAt, limit, cursor, _callback);
        return localVarCall;

    }

    /**
     * List transactions
     * Lists all transactions for an account. Sorted by last &#x60;updated_at&#x60; status.
     * @param search Filters the transactions to only the items for which the &#x60;id&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any transaction for which either of the fields partially or completely matches. (optional)
     * @param transactionStatus Filters the results to only the transactions for which the &#x60;status&#x60; matches this value. (optional)
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param beforeCreatedAt Filters the results to only transactions created before this ISO date-time string. (optional)
     * @param afterCreatedAt Filters the results to only transactions created after this ISO date-time string. (optional)
     * @param beforeUpdatedAt Filters the results to only transactions last updated before this ISO date-time string. (optional)
     * @param afterUpdatedAt Filters the results to only transactions last updated after this ISO date-time string. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @return Transactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of transactions for an account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public Transactions listTransactions(String search, String transactionStatus, String buyerId, String buyerExternalIdentifier, String beforeCreatedAt, String afterCreatedAt, String beforeUpdatedAt, String afterUpdatedAt, Integer limit, String cursor) throws ApiException {
        ApiResponse<Transactions> localVarResp = listTransactionsWithHttpInfo(search, transactionStatus, buyerId, buyerExternalIdentifier, beforeCreatedAt, afterCreatedAt, beforeUpdatedAt, afterUpdatedAt, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * List transactions
     * Lists all transactions for an account. Sorted by last &#x60;updated_at&#x60; status.
     * @param search Filters the transactions to only the items for which the &#x60;id&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any transaction for which either of the fields partially or completely matches. (optional)
     * @param transactionStatus Filters the results to only the transactions for which the &#x60;status&#x60; matches this value. (optional)
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param beforeCreatedAt Filters the results to only transactions created before this ISO date-time string. (optional)
     * @param afterCreatedAt Filters the results to only transactions created after this ISO date-time string. (optional)
     * @param beforeUpdatedAt Filters the results to only transactions last updated before this ISO date-time string. (optional)
     * @param afterUpdatedAt Filters the results to only transactions last updated after this ISO date-time string. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @return ApiResponse&lt;Transactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of transactions for an account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transactions> listTransactionsWithHttpInfo(String search, String transactionStatus, String buyerId, String buyerExternalIdentifier, String beforeCreatedAt, String afterCreatedAt, String beforeUpdatedAt, String afterUpdatedAt, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(search, transactionStatus, buyerId, buyerExternalIdentifier, beforeCreatedAt, afterCreatedAt, beforeUpdatedAt, afterUpdatedAt, limit, cursor, null);
        Type localVarReturnType = new TypeToken<Transactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions (asynchronously)
     * Lists all transactions for an account. Sorted by last &#x60;updated_at&#x60; status.
     * @param search Filters the transactions to only the items for which the &#x60;id&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any transaction for which either of the fields partially or completely matches. (optional)
     * @param transactionStatus Filters the results to only the transactions for which the &#x60;status&#x60; matches this value. (optional)
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param beforeCreatedAt Filters the results to only transactions created before this ISO date-time string. (optional)
     * @param afterCreatedAt Filters the results to only transactions created after this ISO date-time string. (optional)
     * @param beforeUpdatedAt Filters the results to only transactions last updated before this ISO date-time string. (optional)
     * @param afterUpdatedAt Filters the results to only transactions last updated after this ISO date-time string. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of transactions for an account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsAsync(String search, String transactionStatus, String buyerId, String buyerExternalIdentifier, String beforeCreatedAt, String afterCreatedAt, String beforeUpdatedAt, String afterUpdatedAt, Integer limit, String cursor, final ApiCallback<Transactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(search, transactionStatus, buyerId, buyerExternalIdentifier, beforeCreatedAt, afterCreatedAt, beforeUpdatedAt, afterUpdatedAt, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<Transactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refundTransaction
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionRefundRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns cancelled transaction. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundTransactionCall(String transactionId, TransactionRefundRequest transactionRefundRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionRefundRequest;

        // create path and map variables
        String localVarPath = "/transactions/{transaction_id}/refund"
            .replaceAll("\\{" + "transaction_id" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundTransactionValidateBeforeCall(String transactionId, TransactionRefundRequest transactionRefundRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling refundTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = refundTransactionCall(transactionId, transactionRefundRequest, _callback);
        return localVarCall;

    }

    /**
     * Refund or void transactions
     * Refunds or voids transaction. If this transaction was already captured, it will issue a refund. If the transaction was not yet captured the authorization will instead be voided.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionRefundRequest  (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns cancelled transaction. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public Transaction refundTransaction(String transactionId, TransactionRefundRequest transactionRefundRequest) throws ApiException {
        ApiResponse<Transaction> localVarResp = refundTransactionWithHttpInfo(transactionId, transactionRefundRequest);
        return localVarResp.getData();
    }

    /**
     * Refund or void transactions
     * Refunds or voids transaction. If this transaction was already captured, it will issue a refund. If the transaction was not yet captured the authorization will instead be voided.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionRefundRequest  (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns cancelled transaction. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> refundTransactionWithHttpInfo(String transactionId, TransactionRefundRequest transactionRefundRequest) throws ApiException {
        okhttp3.Call localVarCall = refundTransactionValidateBeforeCall(transactionId, transactionRefundRequest, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refund or void transactions (asynchronously)
     * Refunds or voids transaction. If this transaction was already captured, it will issue a refund. If the transaction was not yet captured the authorization will instead be voided.
     * @param transactionId The ID for the transaction to get the information for. (required)
     * @param transactionRefundRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns cancelled transaction. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found or has not yet been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundTransactionAsync(String transactionId, TransactionRefundRequest transactionRefundRequest, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundTransactionValidateBeforeCall(transactionId, transactionRefundRequest, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
