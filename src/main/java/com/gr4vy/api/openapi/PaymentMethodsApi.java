/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.Error404NotFound;
import com.gr4vy.api.model.Error409DuplicateRecord;
import com.gr4vy.api.model.ErrorGeneric;
import com.gr4vy.api.model.PaymentMethod;
import com.gr4vy.api.model.PaymentMethodRequest;
import com.gr4vy.api.model.PaymentMethods;
import com.gr4vy.api.model.PaymentMethodsTokenized;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentMethodsApi {
    private ApiClient localVarApiClient;

    public PaymentMethodsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentMethodsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePaymentMethod
     * @param paymentMethodId The ID of the payment method. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentMethodCall(UUID paymentMethodId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePaymentMethodValidateBeforeCall(UUID paymentMethodId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling deletePaymentMethod(Async)");
        }
        

        okhttp3.Call localVarCall = deletePaymentMethodCall(paymentMethodId, _callback);
        return localVarCall;

    }

    /**
     * Delete payment method
     * Removes a stored payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePaymentMethod(UUID paymentMethodId) throws ApiException {
        deletePaymentMethodWithHttpInfo(paymentMethodId);
    }

    /**
     * Delete payment method
     * Removes a stored payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePaymentMethodWithHttpInfo(UUID paymentMethodId) throws ApiException {
        okhttp3.Call localVarCall = deletePaymentMethodValidateBeforeCall(paymentMethodId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete payment method (asynchronously)
     * Removes a stored payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentMethodAsync(UUID paymentMethodId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePaymentMethodValidateBeforeCall(paymentMethodId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentMethod
     * @param paymentMethodId The ID of the payment method. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a payment method. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentMethodCall(UUID paymentMethodId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentMethodValidateBeforeCall(UUID paymentMethodId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling getPaymentMethod(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentMethodCall(paymentMethodId, _callback);
        return localVarCall;

    }

    /**
     * Get stored payment method
     * Gets the details for a stored payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @return PaymentMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a payment method. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentMethod getPaymentMethod(UUID paymentMethodId) throws ApiException {
        ApiResponse<PaymentMethod> localVarResp = getPaymentMethodWithHttpInfo(paymentMethodId);
        return localVarResp.getData();
    }

    /**
     * Get stored payment method
     * Gets the details for a stored payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @return ApiResponse&lt;PaymentMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a payment method. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethod> getPaymentMethodWithHttpInfo(UUID paymentMethodId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentMethodValidateBeforeCall(paymentMethodId, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get stored payment method (asynchronously)
     * Gets the details for a stored payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a payment method. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentMethodAsync(UUID paymentMethodId, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentMethodValidateBeforeCall(paymentMethodId, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBuyerPaymentMethods
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param country Filters the results to only the items which support this country code. A country is formatted as 2-letter ISO country code. (optional)
     * @param currency Filters the results to only the items which support this currency code. A currency is formatted as 3-letter ISO currency code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of available payment methods for a buyer, filtered by the given currency and country code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBuyerPaymentMethodsCall(String buyerId, String buyerExternalIdentifier, String country, String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buyers/payment-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (buyerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_id", buyerId));
        }

        if (buyerExternalIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_external_identifier", buyerExternalIdentifier));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBuyerPaymentMethodsValidateBeforeCall(String buyerId, String buyerExternalIdentifier, String country, String currency, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listBuyerPaymentMethodsCall(buyerId, buyerExternalIdentifier, country, currency, _callback);
        return localVarCall;

    }

    /**
     * List stored payment methods for a buyer
     * Returns a list of stored payment methods for a buyer in a summarized format. Only payment methods that are compatible with at least one active payment service in that region are shown.
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param country Filters the results to only the items which support this country code. A country is formatted as 2-letter ISO country code. (optional)
     * @param currency Filters the results to only the items which support this currency code. A currency is formatted as 3-letter ISO currency code. (optional)
     * @return PaymentMethodsTokenized
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of available payment methods for a buyer, filtered by the given currency and country code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentMethodsTokenized listBuyerPaymentMethods(String buyerId, String buyerExternalIdentifier, String country, String currency) throws ApiException {
        ApiResponse<PaymentMethodsTokenized> localVarResp = listBuyerPaymentMethodsWithHttpInfo(buyerId, buyerExternalIdentifier, country, currency);
        return localVarResp.getData();
    }

    /**
     * List stored payment methods for a buyer
     * Returns a list of stored payment methods for a buyer in a summarized format. Only payment methods that are compatible with at least one active payment service in that region are shown.
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param country Filters the results to only the items which support this country code. A country is formatted as 2-letter ISO country code. (optional)
     * @param currency Filters the results to only the items which support this currency code. A currency is formatted as 3-letter ISO currency code. (optional)
     * @return ApiResponse&lt;PaymentMethodsTokenized&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of available payment methods for a buyer, filtered by the given currency and country code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethodsTokenized> listBuyerPaymentMethodsWithHttpInfo(String buyerId, String buyerExternalIdentifier, String country, String currency) throws ApiException {
        okhttp3.Call localVarCall = listBuyerPaymentMethodsValidateBeforeCall(buyerId, buyerExternalIdentifier, country, currency, null);
        Type localVarReturnType = new TypeToken<PaymentMethodsTokenized>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List stored payment methods for a buyer (asynchronously)
     * Returns a list of stored payment methods for a buyer in a summarized format. Only payment methods that are compatible with at least one active payment service in that region are shown.
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param country Filters the results to only the items which support this country code. A country is formatted as 2-letter ISO country code. (optional)
     * @param currency Filters the results to only the items which support this currency code. A currency is formatted as 3-letter ISO currency code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of available payment methods for a buyer, filtered by the given currency and country code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBuyerPaymentMethodsAsync(String buyerId, String buyerExternalIdentifier, String country, String currency, final ApiCallback<PaymentMethodsTokenized> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBuyerPaymentMethodsValidateBeforeCall(buyerId, buyerExternalIdentifier, country, currency, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethodsTokenized>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPaymentMethods
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param status Filters the results to only the payment methods for which the &#x60;status&#x60; matches this value. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of payment methods. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPaymentMethodsCall(String buyerId, String buyerExternalIdentifier, String status, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (buyerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_id", buyerId));
        }

        if (buyerExternalIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_external_identifier", buyerExternalIdentifier));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaymentMethodsValidateBeforeCall(String buyerId, String buyerExternalIdentifier, String status, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listPaymentMethodsCall(buyerId, buyerExternalIdentifier, status, limit, cursor, _callback);
        return localVarCall;

    }

    /**
     * List payment methods
     * Returns a list of stored payment methods.
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param status Filters the results to only the payment methods for which the &#x60;status&#x60; matches this value. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @return PaymentMethods
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of payment methods. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentMethods listPaymentMethods(String buyerId, String buyerExternalIdentifier, String status, Integer limit, String cursor) throws ApiException {
        ApiResponse<PaymentMethods> localVarResp = listPaymentMethodsWithHttpInfo(buyerId, buyerExternalIdentifier, status, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * List payment methods
     * Returns a list of stored payment methods.
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param status Filters the results to only the payment methods for which the &#x60;status&#x60; matches this value. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @return ApiResponse&lt;PaymentMethods&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of payment methods. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethods> listPaymentMethodsWithHttpInfo(String buyerId, String buyerExternalIdentifier, String status, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listPaymentMethodsValidateBeforeCall(buyerId, buyerExternalIdentifier, status, limit, cursor, null);
        Type localVarReturnType = new TypeToken<PaymentMethods>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List payment methods (asynchronously)
     * Returns a list of stored payment methods.
     * @param buyerId Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;id&#x60; that matches this value. (optional)
     * @param buyerExternalIdentifier Filters the results to only the items for which the &#x60;buyer&#x60; has an &#x60;external_identifier&#x60; that matches this value. (optional)
     * @param status Filters the results to only the payment methods for which the &#x60;status&#x60; matches this value. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of payment methods. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPaymentMethodsAsync(String buyerId, String buyerExternalIdentifier, String status, Integer limit, String cursor, final ApiCallback<PaymentMethods> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaymentMethodsValidateBeforeCall(buyerId, buyerExternalIdentifier, status, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethods>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storePaymentMethod
     * @param paymentMethodRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment method. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storePaymentMethodCall(PaymentMethodRequest paymentMethodRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentMethodRequest;

        // create path and map variables
        String localVarPath = "/payment-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storePaymentMethodValidateBeforeCall(PaymentMethodRequest paymentMethodRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storePaymentMethodCall(paymentMethodRequest, _callback);
        return localVarCall;

    }

    /**
     * New payment method
     * Stores and vaults a new payment method.  Vaulting a card only stores its information but doesn&#39;t validate it against any PSP, so ephemeral data like the security code, often referred to as the CVV or CVD, won&#39;t be used. In order to validate the card data, a CIT (Customer Initiated Transaction) must be done, even if it&#39;s a zero-value one. 
     * @param paymentMethodRequest  (optional)
     * @return PaymentMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment method. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentMethod storePaymentMethod(PaymentMethodRequest paymentMethodRequest) throws ApiException {
        ApiResponse<PaymentMethod> localVarResp = storePaymentMethodWithHttpInfo(paymentMethodRequest);
        return localVarResp.getData();
    }

    /**
     * New payment method
     * Stores and vaults a new payment method.  Vaulting a card only stores its information but doesn&#39;t validate it against any PSP, so ephemeral data like the security code, often referred to as the CVV or CVD, won&#39;t be used. In order to validate the card data, a CIT (Customer Initiated Transaction) must be done, even if it&#39;s a zero-value one. 
     * @param paymentMethodRequest  (optional)
     * @return ApiResponse&lt;PaymentMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment method. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethod> storePaymentMethodWithHttpInfo(PaymentMethodRequest paymentMethodRequest) throws ApiException {
        okhttp3.Call localVarCall = storePaymentMethodValidateBeforeCall(paymentMethodRequest, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * New payment method (asynchronously)
     * Stores and vaults a new payment method.  Vaulting a card only stores its information but doesn&#39;t validate it against any PSP, so ephemeral data like the security code, often referred to as the CVV or CVD, won&#39;t be used. In order to validate the card data, a CIT (Customer Initiated Transaction) must be done, even if it&#39;s a zero-value one. 
     * @param paymentMethodRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment method. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storePaymentMethodAsync(PaymentMethodRequest paymentMethodRequest, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = storePaymentMethodValidateBeforeCall(paymentMethodRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
