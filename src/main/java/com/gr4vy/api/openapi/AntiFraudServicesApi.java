/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.AntiFraudService;
import com.gr4vy.api.model.AntiFraudServiceCreate;
import com.gr4vy.api.model.AntiFraudServiceUpdate;
import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.Error404NotFound;
import com.gr4vy.api.model.Error409DuplicateRecord;
import com.gr4vy.api.model.ErrorGeneric;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AntiFraudServicesApi {
    private ApiClient localVarApiClient;

    public AntiFraudServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AntiFraudServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addAntiFraudService
     * @param antiFraudServiceCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAntiFraudServiceCall(AntiFraudServiceCreate antiFraudServiceCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = antiFraudServiceCreate;

        // create path and map variables
        String localVarPath = "/anti-fraud-services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAntiFraudServiceValidateBeforeCall(AntiFraudServiceCreate antiFraudServiceCreate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addAntiFraudServiceCall(antiFraudServiceCreate, _callback);
        return localVarCall;

    }

    /**
     * New anti-fraud service
     * Adds an anti-fraud service, enabling merchants to determine risky transactions and prevent chargebacks. 
     * @param antiFraudServiceCreate  (optional)
     * @return AntiFraudService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public AntiFraudService addAntiFraudService(AntiFraudServiceCreate antiFraudServiceCreate) throws ApiException {
        ApiResponse<AntiFraudService> localVarResp = addAntiFraudServiceWithHttpInfo(antiFraudServiceCreate);
        return localVarResp.getData();
    }

    /**
     * New anti-fraud service
     * Adds an anti-fraud service, enabling merchants to determine risky transactions and prevent chargebacks. 
     * @param antiFraudServiceCreate  (optional)
     * @return ApiResponse&lt;AntiFraudService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AntiFraudService> addAntiFraudServiceWithHttpInfo(AntiFraudServiceCreate antiFraudServiceCreate) throws ApiException {
        okhttp3.Call localVarCall = addAntiFraudServiceValidateBeforeCall(antiFraudServiceCreate, null);
        Type localVarReturnType = new TypeToken<AntiFraudService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * New anti-fraud service (asynchronously)
     * Adds an anti-fraud service, enabling merchants to determine risky transactions and prevent chargebacks. 
     * @param antiFraudServiceCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAntiFraudServiceAsync(AntiFraudServiceCreate antiFraudServiceCreate, final ApiCallback<AntiFraudService> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAntiFraudServiceValidateBeforeCall(antiFraudServiceCreate, _callback);
        Type localVarReturnType = new TypeToken<AntiFraudService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAntiFraudService
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAntiFraudServiceCall(UUID antiFraudServiceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anti-fraud-services/{anti_fraud_service_id}"
            .replaceAll("\\{" + "anti_fraud_service_id" + "\\}", localVarApiClient.escapeString(antiFraudServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAntiFraudServiceValidateBeforeCall(UUID antiFraudServiceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'antiFraudServiceId' is set
        if (antiFraudServiceId == null) {
            throw new ApiException("Missing the required parameter 'antiFraudServiceId' when calling deleteAntiFraudService(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAntiFraudServiceCall(antiFraudServiceId, _callback);
        return localVarCall;

    }

    /**
     * Delete anti-fraud service
     * Deletes an anti-fraud service record. Any associated credentials will also be deleted.
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAntiFraudService(UUID antiFraudServiceId) throws ApiException {
        deleteAntiFraudServiceWithHttpInfo(antiFraudServiceId);
    }

    /**
     * Delete anti-fraud service
     * Deletes an anti-fraud service record. Any associated credentials will also be deleted.
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAntiFraudServiceWithHttpInfo(UUID antiFraudServiceId) throws ApiException {
        okhttp3.Call localVarCall = deleteAntiFraudServiceValidateBeforeCall(antiFraudServiceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete anti-fraud service (asynchronously)
     * Deletes an anti-fraud service record. Any associated credentials will also be deleted.
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAntiFraudServiceAsync(UUID antiFraudServiceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAntiFraudServiceValidateBeforeCall(antiFraudServiceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAntiFraudService
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a anti-fraud service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAntiFraudServiceCall(UUID antiFraudServiceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anti-fraud-services/{anti_fraud_service_id}"
            .replaceAll("\\{" + "anti_fraud_service_id" + "\\}", localVarApiClient.escapeString(antiFraudServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAntiFraudServiceValidateBeforeCall(UUID antiFraudServiceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'antiFraudServiceId' is set
        if (antiFraudServiceId == null) {
            throw new ApiException("Missing the required parameter 'antiFraudServiceId' when calling getAntiFraudService(Async)");
        }
        

        okhttp3.Call localVarCall = getAntiFraudServiceCall(antiFraudServiceId, _callback);
        return localVarCall;

    }

    /**
     * Get anti-fraud service
     * Gets the information about an anti-fraud service.
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @return AntiFraudService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a anti-fraud service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public AntiFraudService getAntiFraudService(UUID antiFraudServiceId) throws ApiException {
        ApiResponse<AntiFraudService> localVarResp = getAntiFraudServiceWithHttpInfo(antiFraudServiceId);
        return localVarResp.getData();
    }

    /**
     * Get anti-fraud service
     * Gets the information about an anti-fraud service.
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @return ApiResponse&lt;AntiFraudService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a anti-fraud service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AntiFraudService> getAntiFraudServiceWithHttpInfo(UUID antiFraudServiceId) throws ApiException {
        okhttp3.Call localVarCall = getAntiFraudServiceValidateBeforeCall(antiFraudServiceId, null);
        Type localVarReturnType = new TypeToken<AntiFraudService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get anti-fraud service (asynchronously)
     * Gets the information about an anti-fraud service.
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a anti-fraud service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAntiFraudServiceAsync(UUID antiFraudServiceId, final ApiCallback<AntiFraudService> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAntiFraudServiceValidateBeforeCall(antiFraudServiceId, _callback);
        Type localVarReturnType = new TypeToken<AntiFraudService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAntiFraudService
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param antiFraudServiceUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAntiFraudServiceCall(UUID antiFraudServiceId, AntiFraudServiceUpdate antiFraudServiceUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = antiFraudServiceUpdate;

        // create path and map variables
        String localVarPath = "/anti-fraud-services/{anti_fraud_service_id}"
            .replaceAll("\\{" + "anti_fraud_service_id" + "\\}", localVarApiClient.escapeString(antiFraudServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAntiFraudServiceValidateBeforeCall(UUID antiFraudServiceId, AntiFraudServiceUpdate antiFraudServiceUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'antiFraudServiceId' is set
        if (antiFraudServiceId == null) {
            throw new ApiException("Missing the required parameter 'antiFraudServiceId' when calling updateAntiFraudService(Async)");
        }
        

        okhttp3.Call localVarCall = updateAntiFraudServiceCall(antiFraudServiceId, antiFraudServiceUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update anti-fraud service
     * Update an anti-fraud service, enabling merchants to determine risky transactions and prevent chargebacks. 
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param antiFraudServiceUpdate  (optional)
     * @return AntiFraudService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public AntiFraudService updateAntiFraudService(UUID antiFraudServiceId, AntiFraudServiceUpdate antiFraudServiceUpdate) throws ApiException {
        ApiResponse<AntiFraudService> localVarResp = updateAntiFraudServiceWithHttpInfo(antiFraudServiceId, antiFraudServiceUpdate);
        return localVarResp.getData();
    }

    /**
     * Update anti-fraud service
     * Update an anti-fraud service, enabling merchants to determine risky transactions and prevent chargebacks. 
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param antiFraudServiceUpdate  (optional)
     * @return ApiResponse&lt;AntiFraudService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AntiFraudService> updateAntiFraudServiceWithHttpInfo(UUID antiFraudServiceId, AntiFraudServiceUpdate antiFraudServiceUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateAntiFraudServiceValidateBeforeCall(antiFraudServiceId, antiFraudServiceUpdate, null);
        Type localVarReturnType = new TypeToken<AntiFraudService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update anti-fraud service (asynchronously)
     * Update an anti-fraud service, enabling merchants to determine risky transactions and prevent chargebacks. 
     * @param antiFraudServiceId The unique ID for an anti-fraud service. (required)
     * @param antiFraudServiceUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the anti-fraud service that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAntiFraudServiceAsync(UUID antiFraudServiceId, AntiFraudServiceUpdate antiFraudServiceUpdate, final ApiCallback<AntiFraudService> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAntiFraudServiceValidateBeforeCall(antiFraudServiceId, antiFraudServiceUpdate, _callback);
        Type localVarReturnType = new TypeToken<AntiFraudService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
