/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.Buyer;
import com.gr4vy.api.model.BuyerRequest;
import com.gr4vy.api.model.BuyerUpdate;
import com.gr4vy.api.model.Buyers;
import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.Error404NotFound;
import com.gr4vy.api.model.Error409DuplicateRecord;
import com.gr4vy.api.model.ErrorGeneric;
import com.gr4vy.api.model.ShippingDetail;
import com.gr4vy.api.model.ShippingDetailRequest;
import com.gr4vy.api.model.ShippingDetailUpdateRequest;
import com.gr4vy.api.model.ShippingDetails;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuyersApi {
    private ApiClient localVarApiClient;

    public BuyersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuyersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteBuyer
     * @param buyerId The unique ID for a buyer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuyerCall(UUID buyerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buyers/{buyer_id}"
            .replaceAll("\\{" + "buyer_id" + "\\}", localVarApiClient.escapeString(buyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBuyerValidateBeforeCall(UUID buyerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'buyerId' is set
        if (buyerId == null) {
            throw new ApiException("Missing the required parameter 'buyerId' when calling deleteBuyer(Async)");
        }
        

        okhttp3.Call localVarCall = deleteBuyerCall(buyerId, _callback);
        return localVarCall;

    }

    /**
     * Delete buyer
     * Deletes a buyer record. Any associated stored payment methods will remain in the system but no longer associated to the buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBuyer(UUID buyerId) throws ApiException {
        deleteBuyerWithHttpInfo(buyerId);
    }

    /**
     * Delete buyer
     * Deletes a buyer record. Any associated stored payment methods will remain in the system but no longer associated to the buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBuyerWithHttpInfo(UUID buyerId) throws ApiException {
        okhttp3.Call localVarCall = deleteBuyerValidateBeforeCall(buyerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete buyer (asynchronously)
     * Deletes a buyer record. Any associated stored payment methods will remain in the system but no longer associated to the buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuyerAsync(UUID buyerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBuyerValidateBeforeCall(buyerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBuyerShippingDetail
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuyerShippingDetailCall(UUID buyerId, UUID shippingDetailId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buyers/{buyer_id}/shipping-details/{shipping_detail_id}"
            .replaceAll("\\{" + "buyer_id" + "\\}", localVarApiClient.escapeString(buyerId.toString()))
            .replaceAll("\\{" + "shipping_detail_id" + "\\}", localVarApiClient.escapeString(shippingDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBuyerShippingDetailValidateBeforeCall(UUID buyerId, UUID shippingDetailId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'buyerId' is set
        if (buyerId == null) {
            throw new ApiException("Missing the required parameter 'buyerId' when calling deleteBuyerShippingDetail(Async)");
        }
        
        // verify the required parameter 'shippingDetailId' is set
        if (shippingDetailId == null) {
            throw new ApiException("Missing the required parameter 'shippingDetailId' when calling deleteBuyerShippingDetail(Async)");
        }
        

        okhttp3.Call localVarCall = deleteBuyerShippingDetailCall(buyerId, shippingDetailId, _callback);
        return localVarCall;

    }

    /**
     * Delete buyer shipping detail
     * Deletes a buyer shipping detail.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBuyerShippingDetail(UUID buyerId, UUID shippingDetailId) throws ApiException {
        deleteBuyerShippingDetailWithHttpInfo(buyerId, shippingDetailId);
    }

    /**
     * Delete buyer shipping detail
     * Deletes a buyer shipping detail.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBuyerShippingDetailWithHttpInfo(UUID buyerId, UUID shippingDetailId) throws ApiException {
        okhttp3.Call localVarCall = deleteBuyerShippingDetailValidateBeforeCall(buyerId, shippingDetailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete buyer shipping detail (asynchronously)
     * Deletes a buyer shipping detail.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuyerShippingDetailAsync(UUID buyerId, UUID shippingDetailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBuyerShippingDetailValidateBeforeCall(buyerId, shippingDetailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBuyer
     * @param buyerId The unique ID for a buyer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a buyer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBuyerCall(UUID buyerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buyers/{buyer_id}"
            .replaceAll("\\{" + "buyer_id" + "\\}", localVarApiClient.escapeString(buyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuyerValidateBeforeCall(UUID buyerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'buyerId' is set
        if (buyerId == null) {
            throw new ApiException("Missing the required parameter 'buyerId' when calling getBuyer(Async)");
        }
        

        okhttp3.Call localVarCall = getBuyerCall(buyerId, _callback);
        return localVarCall;

    }

    /**
     * Get buyer
     * Gets the information about a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @return Buyer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a buyer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public Buyer getBuyer(UUID buyerId) throws ApiException {
        ApiResponse<Buyer> localVarResp = getBuyerWithHttpInfo(buyerId);
        return localVarResp.getData();
    }

    /**
     * Get buyer
     * Gets the information about a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @return ApiResponse&lt;Buyer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a buyer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Buyer> getBuyerWithHttpInfo(UUID buyerId) throws ApiException {
        okhttp3.Call localVarCall = getBuyerValidateBeforeCall(buyerId, null);
        Type localVarReturnType = new TypeToken<Buyer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get buyer (asynchronously)
     * Gets the information about a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information about a buyer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBuyerAsync(UUID buyerId, final ApiCallback<Buyer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuyerValidateBeforeCall(buyerId, _callback);
        Type localVarReturnType = new TypeToken<Buyer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBuyerShippingDetails
     * @param buyerId The unique ID for a buyer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all associated shipping details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBuyerShippingDetailsCall(UUID buyerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buyers/{buyer_id}/shipping-details"
            .replaceAll("\\{" + "buyer_id" + "\\}", localVarApiClient.escapeString(buyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBuyerShippingDetailsValidateBeforeCall(UUID buyerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'buyerId' is set
        if (buyerId == null) {
            throw new ApiException("Missing the required parameter 'buyerId' when calling listBuyerShippingDetails(Async)");
        }
        

        okhttp3.Call localVarCall = listBuyerShippingDetailsCall(buyerId, _callback);
        return localVarCall;

    }

    /**
     * List buyer shipping details
     * Retrieve all shipping details for a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @return ShippingDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all associated shipping details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ShippingDetails listBuyerShippingDetails(UUID buyerId) throws ApiException {
        ApiResponse<ShippingDetails> localVarResp = listBuyerShippingDetailsWithHttpInfo(buyerId);
        return localVarResp.getData();
    }

    /**
     * List buyer shipping details
     * Retrieve all shipping details for a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @return ApiResponse&lt;ShippingDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all associated shipping details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingDetails> listBuyerShippingDetailsWithHttpInfo(UUID buyerId) throws ApiException {
        okhttp3.Call localVarCall = listBuyerShippingDetailsValidateBeforeCall(buyerId, null);
        Type localVarReturnType = new TypeToken<ShippingDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List buyer shipping details (asynchronously)
     * Retrieve all shipping details for a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all associated shipping details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBuyerShippingDetailsAsync(UUID buyerId, final ApiCallback<ShippingDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBuyerShippingDetailsValidateBeforeCall(buyerId, _callback);
        Type localVarReturnType = new TypeToken<ShippingDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBuyers
     * @param search Filters the results to only the buyers for which the &#x60;display_name&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any buyer for which either of the fields partially or completely matches. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of buyers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBuyersCall(String search, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buyers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBuyersValidateBeforeCall(String search, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listBuyersCall(search, limit, cursor, _callback);
        return localVarCall;

    }

    /**
     * List buyers
     * Returns a list of buyers.
     * @param search Filters the results to only the buyers for which the &#x60;display_name&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any buyer for which either of the fields partially or completely matches. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @return Buyers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of buyers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public Buyers listBuyers(String search, Integer limit, String cursor) throws ApiException {
        ApiResponse<Buyers> localVarResp = listBuyersWithHttpInfo(search, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * List buyers
     * Returns a list of buyers.
     * @param search Filters the results to only the buyers for which the &#x60;display_name&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any buyer for which either of the fields partially or completely matches. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @return ApiResponse&lt;Buyers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of buyers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Buyers> listBuyersWithHttpInfo(String search, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listBuyersValidateBeforeCall(search, limit, cursor, null);
        Type localVarReturnType = new TypeToken<Buyers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List buyers (asynchronously)
     * Returns a list of buyers.
     * @param search Filters the results to only the buyers for which the &#x60;display_name&#x60; or &#x60;external_identifier&#x60; matches this value. This field allows for a partial match, matching any buyer for which either of the fields partially or completely matches. (optional)
     * @param limit Defines the maximum number of items to return for this request. (optional, default to 20)
     * @param cursor A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the &#x60;next_cursor&#x60; field. Similarly the &#x60;previous_cursor&#x60; can be used to reverse backwards in the list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of buyers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBuyersAsync(String search, Integer limit, String cursor, final ApiCallback<Buyers> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBuyersValidateBeforeCall(search, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<Buyers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newBuyer
     * @param buyerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the buyer that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newBuyerCall(BuyerRequest buyerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = buyerRequest;

        // create path and map variables
        String localVarPath = "/buyers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newBuyerValidateBeforeCall(BuyerRequest buyerRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = newBuyerCall(buyerRequest, _callback);
        return localVarCall;

    }

    /**
     * New buyer
     * Adds a buyer, allowing for payment methods and transactions to be associated to this buyer. 
     * @param buyerRequest  (optional)
     * @return Buyer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the buyer that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public Buyer newBuyer(BuyerRequest buyerRequest) throws ApiException {
        ApiResponse<Buyer> localVarResp = newBuyerWithHttpInfo(buyerRequest);
        return localVarResp.getData();
    }

    /**
     * New buyer
     * Adds a buyer, allowing for payment methods and transactions to be associated to this buyer. 
     * @param buyerRequest  (optional)
     * @return ApiResponse&lt;Buyer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the buyer that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Buyer> newBuyerWithHttpInfo(BuyerRequest buyerRequest) throws ApiException {
        okhttp3.Call localVarCall = newBuyerValidateBeforeCall(buyerRequest, null);
        Type localVarReturnType = new TypeToken<Buyer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * New buyer (asynchronously)
     * Adds a buyer, allowing for payment methods and transactions to be associated to this buyer. 
     * @param buyerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the buyer that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newBuyerAsync(BuyerRequest buyerRequest, final ApiCallback<Buyer> _callback) throws ApiException {

        okhttp3.Call localVarCall = newBuyerValidateBeforeCall(buyerRequest, _callback);
        Type localVarReturnType = new TypeToken<Buyer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newBuyerShippingDetail
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the shipping detail that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newBuyerShippingDetailCall(UUID buyerId, ShippingDetailRequest shippingDetailRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingDetailRequest;

        // create path and map variables
        String localVarPath = "/buyers/{buyer_id}/shipping-details"
            .replaceAll("\\{" + "buyer_id" + "\\}", localVarApiClient.escapeString(buyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newBuyerShippingDetailValidateBeforeCall(UUID buyerId, ShippingDetailRequest shippingDetailRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'buyerId' is set
        if (buyerId == null) {
            throw new ApiException("Missing the required parameter 'buyerId' when calling newBuyerShippingDetail(Async)");
        }
        

        okhttp3.Call localVarCall = newBuyerShippingDetailCall(buyerId, shippingDetailRequest, _callback);
        return localVarCall;

    }

    /**
     * New buyer shipping detail
     * Adds a buyer shipping detail.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailRequest  (optional)
     * @return ShippingDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the shipping detail that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ShippingDetail newBuyerShippingDetail(UUID buyerId, ShippingDetailRequest shippingDetailRequest) throws ApiException {
        ApiResponse<ShippingDetail> localVarResp = newBuyerShippingDetailWithHttpInfo(buyerId, shippingDetailRequest);
        return localVarResp.getData();
    }

    /**
     * New buyer shipping detail
     * Adds a buyer shipping detail.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailRequest  (optional)
     * @return ApiResponse&lt;ShippingDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the shipping detail that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingDetail> newBuyerShippingDetailWithHttpInfo(UUID buyerId, ShippingDetailRequest shippingDetailRequest) throws ApiException {
        okhttp3.Call localVarCall = newBuyerShippingDetailValidateBeforeCall(buyerId, shippingDetailRequest, null);
        Type localVarReturnType = new TypeToken<ShippingDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * New buyer shipping detail (asynchronously)
     * Adds a buyer shipping detail.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the shipping detail that was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newBuyerShippingDetailAsync(UUID buyerId, ShippingDetailRequest shippingDetailRequest, final ApiCallback<ShippingDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = newBuyerShippingDetailValidateBeforeCall(buyerId, shippingDetailRequest, _callback);
        Type localVarReturnType = new TypeToken<ShippingDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBuyer
     * @param buyerId The unique ID for a buyer. (required)
     * @param buyerUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated buyer record. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBuyerCall(UUID buyerId, BuyerUpdate buyerUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = buyerUpdate;

        // create path and map variables
        String localVarPath = "/buyers/{buyer_id}"
            .replaceAll("\\{" + "buyer_id" + "\\}", localVarApiClient.escapeString(buyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBuyerValidateBeforeCall(UUID buyerId, BuyerUpdate buyerUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'buyerId' is set
        if (buyerId == null) {
            throw new ApiException("Missing the required parameter 'buyerId' when calling updateBuyer(Async)");
        }
        

        okhttp3.Call localVarCall = updateBuyerCall(buyerId, buyerUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update buyer
     * Updates a buyer&#39;s details. 
     * @param buyerId The unique ID for a buyer. (required)
     * @param buyerUpdate  (optional)
     * @return Buyer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated buyer record. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public Buyer updateBuyer(UUID buyerId, BuyerUpdate buyerUpdate) throws ApiException {
        ApiResponse<Buyer> localVarResp = updateBuyerWithHttpInfo(buyerId, buyerUpdate);
        return localVarResp.getData();
    }

    /**
     * Update buyer
     * Updates a buyer&#39;s details. 
     * @param buyerId The unique ID for a buyer. (required)
     * @param buyerUpdate  (optional)
     * @return ApiResponse&lt;Buyer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated buyer record. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Buyer> updateBuyerWithHttpInfo(UUID buyerId, BuyerUpdate buyerUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateBuyerValidateBeforeCall(buyerId, buyerUpdate, null);
        Type localVarReturnType = new TypeToken<Buyer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update buyer (asynchronously)
     * Updates a buyer&#39;s details. 
     * @param buyerId The unique ID for a buyer. (required)
     * @param buyerUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated buyer record. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBuyerAsync(UUID buyerId, BuyerUpdate buyerUpdate, final ApiCallback<Buyer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBuyerValidateBeforeCall(buyerId, buyerUpdate, _callback);
        Type localVarReturnType = new TypeToken<Buyer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBuyerShippingDetail
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @param shippingDetailUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated shipping detail. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBuyerShippingDetailCall(UUID buyerId, UUID shippingDetailId, ShippingDetailUpdateRequest shippingDetailUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingDetailUpdateRequest;

        // create path and map variables
        String localVarPath = "/buyers/{buyer_id}/shipping-details/{shipping_detail_id}"
            .replaceAll("\\{" + "buyer_id" + "\\}", localVarApiClient.escapeString(buyerId.toString()))
            .replaceAll("\\{" + "shipping_detail_id" + "\\}", localVarApiClient.escapeString(shippingDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBuyerShippingDetailValidateBeforeCall(UUID buyerId, UUID shippingDetailId, ShippingDetailUpdateRequest shippingDetailUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'buyerId' is set
        if (buyerId == null) {
            throw new ApiException("Missing the required parameter 'buyerId' when calling updateBuyerShippingDetail(Async)");
        }
        
        // verify the required parameter 'shippingDetailId' is set
        if (shippingDetailId == null) {
            throw new ApiException("Missing the required parameter 'shippingDetailId' when calling updateBuyerShippingDetail(Async)");
        }
        

        okhttp3.Call localVarCall = updateBuyerShippingDetailCall(buyerId, shippingDetailId, shippingDetailUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update buyer shipping details
     * Updates shipping detail for a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @param shippingDetailUpdateRequest  (optional)
     * @return ShippingDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated shipping detail. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ShippingDetail updateBuyerShippingDetail(UUID buyerId, UUID shippingDetailId, ShippingDetailUpdateRequest shippingDetailUpdateRequest) throws ApiException {
        ApiResponse<ShippingDetail> localVarResp = updateBuyerShippingDetailWithHttpInfo(buyerId, shippingDetailId, shippingDetailUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update buyer shipping details
     * Updates shipping detail for a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @param shippingDetailUpdateRequest  (optional)
     * @return ApiResponse&lt;ShippingDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated shipping detail. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingDetail> updateBuyerShippingDetailWithHttpInfo(UUID buyerId, UUID shippingDetailId, ShippingDetailUpdateRequest shippingDetailUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBuyerShippingDetailValidateBeforeCall(buyerId, shippingDetailId, shippingDetailUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ShippingDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update buyer shipping details (asynchronously)
     * Updates shipping detail for a buyer.
     * @param buyerId The unique ID for a buyer. (required)
     * @param shippingDetailId The unique ID for a buyer&#39;s shipping detail. (required)
     * @param shippingDetailUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated shipping detail. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBuyerShippingDetailAsync(UUID buyerId, UUID shippingDetailId, ShippingDetailUpdateRequest shippingDetailUpdateRequest, final ApiCallback<ShippingDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBuyerShippingDetailValidateBeforeCall(buyerId, shippingDetailId, shippingDetailUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ShippingDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
