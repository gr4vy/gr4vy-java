/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.DigitalWallet;
import com.gr4vy.api.model.DigitalWalletRequest;
import com.gr4vy.api.model.DigitalWalletUpdate;
import com.gr4vy.api.model.DigitalWallets;
import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.Error404NotFound;
import com.gr4vy.api.model.ErrorGeneric;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DigitalWalletsApi {
    private ApiClient localVarApiClient;

    public DigitalWalletsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DigitalWalletsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deregisterDigitalWallet
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterDigitalWalletCall(String digitalWalletId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital-wallets/{digital_wallet_id}"
            .replaceAll("\\{" + "digital_wallet_id" + "\\}", localVarApiClient.escapeString(digitalWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deregisterDigitalWalletValidateBeforeCall(String digitalWalletId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'digitalWalletId' is set
        if (digitalWalletId == null) {
            throw new ApiException("Missing the required parameter 'digitalWalletId' when calling deregisterDigitalWallet(Async)");
        }
        

        okhttp3.Call localVarCall = deregisterDigitalWalletCall(digitalWalletId, _callback);
        return localVarCall;

    }

    /**
     * De-register digital wallet
     * De-registers a digital wallet with a provider. Upon successful de-registration, the digital wallet&#39;s record is deleted and will no longer be available.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deregisterDigitalWallet(String digitalWalletId) throws ApiException {
        deregisterDigitalWalletWithHttpInfo(digitalWalletId);
    }

    /**
     * De-register digital wallet
     * De-registers a digital wallet with a provider. Upon successful de-registration, the digital wallet&#39;s record is deleted and will no longer be available.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deregisterDigitalWalletWithHttpInfo(String digitalWalletId) throws ApiException {
        okhttp3.Call localVarCall = deregisterDigitalWalletValidateBeforeCall(digitalWalletId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * De-register digital wallet (asynchronously)
     * De-registers a digital wallet with a provider. Upon successful de-registration, the digital wallet&#39;s record is deleted and will no longer be available.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterDigitalWalletAsync(String digitalWalletId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deregisterDigitalWalletValidateBeforeCall(digitalWalletId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDigitalWallet
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDigitalWalletCall(String digitalWalletId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital-wallets/{digital_wallet_id}"
            .replaceAll("\\{" + "digital_wallet_id" + "\\}", localVarApiClient.escapeString(digitalWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDigitalWalletValidateBeforeCall(String digitalWalletId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'digitalWalletId' is set
        if (digitalWalletId == null) {
            throw new ApiException("Missing the required parameter 'digitalWalletId' when calling getDigitalWallet(Async)");
        }
        

        okhttp3.Call localVarCall = getDigitalWalletCall(digitalWalletId, _callback);
        return localVarCall;

    }

    /**
     * Get digital wallet
     * Returns a registered digital wallet.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @return DigitalWallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalWallet getDigitalWallet(String digitalWalletId) throws ApiException {
        ApiResponse<DigitalWallet> localVarResp = getDigitalWalletWithHttpInfo(digitalWalletId);
        return localVarResp.getData();
    }

    /**
     * Get digital wallet
     * Returns a registered digital wallet.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @return ApiResponse&lt;DigitalWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalWallet> getDigitalWalletWithHttpInfo(String digitalWalletId) throws ApiException {
        okhttp3.Call localVarCall = getDigitalWalletValidateBeforeCall(digitalWalletId, null);
        Type localVarReturnType = new TypeToken<DigitalWallet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get digital wallet (asynchronously)
     * Returns a registered digital wallet.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDigitalWalletAsync(String digitalWalletId, final ApiCallback<DigitalWallet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDigitalWalletValidateBeforeCall(digitalWalletId, _callback);
        Type localVarReturnType = new TypeToken<DigitalWallet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDigitalWallets
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of registered digital wallets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDigitalWalletsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital-wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDigitalWalletsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listDigitalWalletsCall(_callback);
        return localVarCall;

    }

    /**
     * List digital wallets
     * Returns a list of all registered digital wallets.
     * @return DigitalWallets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of registered digital wallets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalWallets listDigitalWallets() throws ApiException {
        ApiResponse<DigitalWallets> localVarResp = listDigitalWalletsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List digital wallets
     * Returns a list of all registered digital wallets.
     * @return ApiResponse&lt;DigitalWallets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of registered digital wallets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalWallets> listDigitalWalletsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDigitalWalletsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DigitalWallets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List digital wallets (asynchronously)
     * Returns a list of all registered digital wallets.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of registered digital wallets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDigitalWalletsAsync(final ApiCallback<DigitalWallets> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDigitalWalletsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DigitalWallets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerDigitalWallet
     * @param digitalWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDigitalWalletCall(DigitalWalletRequest digitalWalletRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = digitalWalletRequest;

        // create path and map variables
        String localVarPath = "/digital-wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDigitalWalletValidateBeforeCall(DigitalWalletRequest digitalWalletRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = registerDigitalWalletCall(digitalWalletRequest, _callback);
        return localVarCall;

    }

    /**
     * Register digital wallet
     * Register with a digital wallet provider.
     * @param digitalWalletRequest  (optional)
     * @return DigitalWallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalWallet registerDigitalWallet(DigitalWalletRequest digitalWalletRequest) throws ApiException {
        ApiResponse<DigitalWallet> localVarResp = registerDigitalWalletWithHttpInfo(digitalWalletRequest);
        return localVarResp.getData();
    }

    /**
     * Register digital wallet
     * Register with a digital wallet provider.
     * @param digitalWalletRequest  (optional)
     * @return ApiResponse&lt;DigitalWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalWallet> registerDigitalWalletWithHttpInfo(DigitalWalletRequest digitalWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = registerDigitalWalletValidateBeforeCall(digitalWalletRequest, null);
        Type localVarReturnType = new TypeToken<DigitalWallet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register digital wallet (asynchronously)
     * Register with a digital wallet provider.
     * @param digitalWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly registered digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDigitalWalletAsync(DigitalWalletRequest digitalWalletRequest, final ApiCallback<DigitalWallet> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDigitalWalletValidateBeforeCall(digitalWalletRequest, _callback);
        Type localVarReturnType = new TypeToken<DigitalWallet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDigitalWallet
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param digitalWalletUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDigitalWalletCall(String digitalWalletId, DigitalWalletUpdate digitalWalletUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = digitalWalletUpdate;

        // create path and map variables
        String localVarPath = "/digital-wallets/{digital_wallet_id}"
            .replaceAll("\\{" + "digital_wallet_id" + "\\}", localVarApiClient.escapeString(digitalWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDigitalWalletValidateBeforeCall(String digitalWalletId, DigitalWalletUpdate digitalWalletUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'digitalWalletId' is set
        if (digitalWalletId == null) {
            throw new ApiException("Missing the required parameter 'digitalWalletId' when calling updateDigitalWallet(Async)");
        }
        

        okhttp3.Call localVarCall = updateDigitalWalletCall(digitalWalletId, digitalWalletUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update digital wallet
     * Updates the values a digital wallet was registered with.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param digitalWalletUpdate  (optional)
     * @return DigitalWallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalWallet updateDigitalWallet(String digitalWalletId, DigitalWalletUpdate digitalWalletUpdate) throws ApiException {
        ApiResponse<DigitalWallet> localVarResp = updateDigitalWalletWithHttpInfo(digitalWalletId, digitalWalletUpdate);
        return localVarResp.getData();
    }

    /**
     * Update digital wallet
     * Updates the values a digital wallet was registered with.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param digitalWalletUpdate  (optional)
     * @return ApiResponse&lt;DigitalWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalWallet> updateDigitalWalletWithHttpInfo(String digitalWalletId, DigitalWalletUpdate digitalWalletUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateDigitalWalletValidateBeforeCall(digitalWalletId, digitalWalletUpdate, null);
        Type localVarReturnType = new TypeToken<DigitalWallet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update digital wallet (asynchronously)
     * Updates the values a digital wallet was registered with.
     * @param digitalWalletId The ID of the registered digital wallet. (required)
     * @param digitalWalletUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated digital wallet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDigitalWalletAsync(String digitalWalletId, DigitalWalletUpdate digitalWalletUpdate, final ApiCallback<DigitalWallet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDigitalWalletValidateBeforeCall(digitalWalletId, digitalWalletUpdate, _callback);
        Type localVarReturnType = new TypeToken<DigitalWallet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
