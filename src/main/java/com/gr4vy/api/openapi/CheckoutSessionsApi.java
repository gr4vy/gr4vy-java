/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.CheckoutSession;
import com.gr4vy.api.model.CheckoutSessionSecureFieldsUpdate;
import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.Error404NotFound;
import com.gr4vy.api.model.Error409DuplicateRecord;
import com.gr4vy.api.model.ErrorGeneric;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheckoutSessionsApi {
    private ApiClient localVarApiClient;

    public CheckoutSessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckoutSessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCheckoutSession
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the new Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCheckoutSessionCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkout/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCheckoutSessionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCheckoutSessionCall(_callback);
        return localVarCall;

    }

    /**
     * Create a new Checkout Session
     * Creates a new Checkout Session.
     * @return CheckoutSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the new Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutSession addCheckoutSession() throws ApiException {
        ApiResponse<CheckoutSession> localVarResp = addCheckoutSessionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Create a new Checkout Session
     * Creates a new Checkout Session.
     * @return ApiResponse&lt;CheckoutSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the new Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutSession> addCheckoutSessionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addCheckoutSessionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Checkout Session (asynchronously)
     * Creates a new Checkout Session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the new Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returns an error if duplicate resource has been found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCheckoutSessionAsync(final ApiCallback<CheckoutSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCheckoutSessionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCheckoutSession
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCheckoutSessionCall(UUID checkoutSessionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkout/sessions/{checkout_session_id}"
            .replaceAll("\\{" + "checkout_session_id" + "\\}", localVarApiClient.escapeString(checkoutSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCheckoutSessionValidateBeforeCall(UUID checkoutSessionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutSessionId' is set
        if (checkoutSessionId == null) {
            throw new ApiException("Missing the required parameter 'checkoutSessionId' when calling deleteCheckoutSession(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCheckoutSessionCall(checkoutSessionId, _callback);
        return localVarCall;

    }

    /**
     * Delete a Checkout Session
     * Deletes a Checkout Session.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCheckoutSession(UUID checkoutSessionId) throws ApiException {
        deleteCheckoutSessionWithHttpInfo(checkoutSessionId);
    }

    /**
     * Delete a Checkout Session
     * Deletes a Checkout Session.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCheckoutSessionWithHttpInfo(UUID checkoutSessionId) throws ApiException {
        okhttp3.Call localVarCall = deleteCheckoutSessionValidateBeforeCall(checkoutSessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Checkout Session (asynchronously)
     * Deletes a Checkout Session.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCheckoutSessionAsync(UUID checkoutSessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCheckoutSessionValidateBeforeCall(checkoutSessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCheckoutSession
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns details about a current Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutSessionCall(UUID checkoutSessionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkout/sessions/{checkout_session_id}"
            .replaceAll("\\{" + "checkout_session_id" + "\\}", localVarApiClient.escapeString(checkoutSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckoutSessionValidateBeforeCall(UUID checkoutSessionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutSessionId' is set
        if (checkoutSessionId == null) {
            throw new ApiException("Missing the required parameter 'checkoutSessionId' when calling getCheckoutSession(Async)");
        }
        

        okhttp3.Call localVarCall = getCheckoutSessionCall(checkoutSessionId, _callback);
        return localVarCall;

    }

    /**
     * Get a Checkout Session
     * Gets details about a current Checkout Session.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @return CheckoutSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns details about a current Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutSession getCheckoutSession(UUID checkoutSessionId) throws ApiException {
        ApiResponse<CheckoutSession> localVarResp = getCheckoutSessionWithHttpInfo(checkoutSessionId);
        return localVarResp.getData();
    }

    /**
     * Get a Checkout Session
     * Gets details about a current Checkout Session.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @return ApiResponse&lt;CheckoutSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns details about a current Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutSession> getCheckoutSessionWithHttpInfo(UUID checkoutSessionId) throws ApiException {
        okhttp3.Call localVarCall = getCheckoutSessionValidateBeforeCall(checkoutSessionId, null);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Checkout Session (asynchronously)
     * Gets details about a current Checkout Session.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns details about a current Checkout Session. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutSessionAsync(UUID checkoutSessionId, final ApiCallback<CheckoutSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckoutSessionValidateBeforeCall(checkoutSessionId, _callback);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCheckoutSessionFields
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param checkoutSessionSecureFieldsUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns when the Checkout Session was updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCheckoutSessionFieldsCall(UUID checkoutSessionId, CheckoutSessionSecureFieldsUpdate checkoutSessionSecureFieldsUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = checkoutSessionSecureFieldsUpdate;

        // create path and map variables
        String localVarPath = "/checkout/sessions/{checkout_session_id}/fields"
            .replaceAll("\\{" + "checkout_session_id" + "\\}", localVarApiClient.escapeString(checkoutSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCheckoutSessionFieldsValidateBeforeCall(UUID checkoutSessionId, CheckoutSessionSecureFieldsUpdate checkoutSessionSecureFieldsUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutSessionId' is set
        if (checkoutSessionId == null) {
            throw new ApiException("Missing the required parameter 'checkoutSessionId' when calling updateCheckoutSessionFields(Async)");
        }
        

        okhttp3.Call localVarCall = updateCheckoutSessionFieldsCall(checkoutSessionId, checkoutSessionSecureFieldsUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update a Checkout Session&#39;s Secure Fields
     * Updates the Secure Fields of the Checkout Session. Once the fields have been received the &#x60;expires_at&#x60; will be updated to 5 minutes from the time of receipt.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param checkoutSessionSecureFieldsUpdate  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns when the Checkout Session was updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateCheckoutSessionFields(UUID checkoutSessionId, CheckoutSessionSecureFieldsUpdate checkoutSessionSecureFieldsUpdate) throws ApiException {
        updateCheckoutSessionFieldsWithHttpInfo(checkoutSessionId, checkoutSessionSecureFieldsUpdate);
    }

    /**
     * Update a Checkout Session&#39;s Secure Fields
     * Updates the Secure Fields of the Checkout Session. Once the fields have been received the &#x60;expires_at&#x60; will be updated to 5 minutes from the time of receipt.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param checkoutSessionSecureFieldsUpdate  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns when the Checkout Session was updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCheckoutSessionFieldsWithHttpInfo(UUID checkoutSessionId, CheckoutSessionSecureFieldsUpdate checkoutSessionSecureFieldsUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateCheckoutSessionFieldsValidateBeforeCall(checkoutSessionId, checkoutSessionSecureFieldsUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a Checkout Session&#39;s Secure Fields (asynchronously)
     * Updates the Secure Fields of the Checkout Session. Once the fields have been received the &#x60;expires_at&#x60; will be updated to 5 minutes from the time of receipt.
     * @param checkoutSessionId The unique ID for a Checkout Session. (required)
     * @param checkoutSessionSecureFieldsUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns when the Checkout Session was updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the Checkout Session can not be found or has expired. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returns a generic error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCheckoutSessionFieldsAsync(UUID checkoutSessionId, CheckoutSessionSecureFieldsUpdate checkoutSessionSecureFieldsUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCheckoutSessionFieldsValidateBeforeCall(checkoutSessionId, checkoutSessionSecureFieldsUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
