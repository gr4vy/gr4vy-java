/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.Cryptogram;
import com.gr4vy.api.model.Error400BadRequest;
import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.Error404NotFound;
import com.gr4vy.api.model.ErrorGeneric;
import com.gr4vy.api.model.IssueCryptogramRequest;
import com.gr4vy.api.model.NetworkToken;
import com.gr4vy.api.model.NetworkTokenRequest;
import com.gr4vy.api.model.NetworkTokens;
import com.gr4vy.api.model.PaymentServiceToken;
import com.gr4vy.api.model.PaymentServiceTokenRequest;
import com.gr4vy.api.model.PaymentServiceTokens;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokensApi {
    private ApiClient localVarApiClient;

    public TokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteNetworkToken
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkTokenCall(UUID paymentMethodId, UUID networkTokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()))
            .replaceAll("\\{" + "network_token_id" + "\\}", localVarApiClient.escapeString(networkTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkTokenValidateBeforeCall(UUID paymentMethodId, UUID networkTokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling deleteNetworkToken(Async)");
        }
        
        // verify the required parameter 'networkTokenId' is set
        if (networkTokenId == null) {
            throw new ApiException("Missing the required parameter 'networkTokenId' when calling deleteNetworkToken(Async)");
        }
        

        okhttp3.Call localVarCall = deleteNetworkTokenCall(paymentMethodId, networkTokenId, _callback);
        return localVarCall;

    }

    /**
     * Delete network token
     * Deletes a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkToken(UUID paymentMethodId, UUID networkTokenId) throws ApiException {
        deleteNetworkTokenWithHttpInfo(paymentMethodId, networkTokenId);
    }

    /**
     * Delete network token
     * Deletes a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkTokenWithHttpInfo(UUID paymentMethodId, UUID networkTokenId) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete network token (asynchronously)
     * Deletes a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkTokenAsync(UUID paymentMethodId, UUID networkTokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePaymentServiceToken
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenId The ID of the payment service token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentServiceTokenCall(UUID paymentMethodId, UUID paymentServiceTokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/payment-service-tokens/{payment_service_token_id}"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()))
            .replaceAll("\\{" + "payment_service_token_id" + "\\}", localVarApiClient.escapeString(paymentServiceTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePaymentServiceTokenValidateBeforeCall(UUID paymentMethodId, UUID paymentServiceTokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling deletePaymentServiceToken(Async)");
        }
        
        // verify the required parameter 'paymentServiceTokenId' is set
        if (paymentServiceTokenId == null) {
            throw new ApiException("Missing the required parameter 'paymentServiceTokenId' when calling deletePaymentServiceToken(Async)");
        }
        

        okhttp3.Call localVarCall = deletePaymentServiceTokenCall(paymentMethodId, paymentServiceTokenId, _callback);
        return localVarCall;

    }

    /**
     * Delete payment service token
     * Deletes a specific payment service token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenId The ID of the payment service token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePaymentServiceToken(UUID paymentMethodId, UUID paymentServiceTokenId) throws ApiException {
        deletePaymentServiceTokenWithHttpInfo(paymentMethodId, paymentServiceTokenId);
    }

    /**
     * Delete payment service token
     * Deletes a specific payment service token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenId The ID of the payment service token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePaymentServiceTokenWithHttpInfo(UUID paymentMethodId, UUID paymentServiceTokenId) throws ApiException {
        okhttp3.Call localVarCall = deletePaymentServiceTokenValidateBeforeCall(paymentMethodId, paymentServiceTokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete payment service token (asynchronously)
     * Deletes a specific payment service token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenId The ID of the payment service token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentServiceTokenAsync(UUID paymentMethodId, UUID paymentServiceTokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePaymentServiceTokenValidateBeforeCall(paymentMethodId, paymentServiceTokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkTokens
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of network tokens (empty list if there aren&#39;t any). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTokensCall(UUID paymentMethodId, UUID paymentMethodId2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/network-tokens"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paymentMethodId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_method_id", paymentMethodId2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkTokensValidateBeforeCall(UUID paymentMethodId, UUID paymentMethodId2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling getNetworkTokens(Async)");
        }
        

        okhttp3.Call localVarCall = getNetworkTokensCall(paymentMethodId, paymentMethodId2, _callback);
        return localVarCall;

    }

    /**
     * Get network tokens
     * Get stored network tokens for the given payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @return NetworkTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of network tokens (empty list if there aren&#39;t any). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkTokens getNetworkTokens(UUID paymentMethodId, UUID paymentMethodId2) throws ApiException {
        ApiResponse<NetworkTokens> localVarResp = getNetworkTokensWithHttpInfo(paymentMethodId, paymentMethodId2);
        return localVarResp.getData();
    }

    /**
     * Get network tokens
     * Get stored network tokens for the given payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @return ApiResponse&lt;NetworkTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of network tokens (empty list if there aren&#39;t any). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkTokens> getNetworkTokensWithHttpInfo(UUID paymentMethodId, UUID paymentMethodId2) throws ApiException {
        okhttp3.Call localVarCall = getNetworkTokensValidateBeforeCall(paymentMethodId, paymentMethodId2, null);
        Type localVarReturnType = new TypeToken<NetworkTokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get network tokens (asynchronously)
     * Get stored network tokens for the given payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of network tokens (empty list if there aren&#39;t any). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkTokensAsync(UUID paymentMethodId, UUID paymentMethodId2, final ApiCallback<NetworkTokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkTokensValidateBeforeCall(paymentMethodId, paymentMethodId2, _callback);
        Type localVarReturnType = new TypeToken<NetworkTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentServiceTokens
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list payment service tokens of the specified payment method and payment service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentServiceTokensCall(UUID paymentMethodId, UUID paymentMethodId2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/payment-service-tokens"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paymentMethodId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_method_id", paymentMethodId2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentServiceTokensValidateBeforeCall(UUID paymentMethodId, UUID paymentMethodId2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling getPaymentServiceTokens(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentServiceTokensCall(paymentMethodId, paymentMethodId2, _callback);
        return localVarCall;

    }

    /**
     * Get payment service tokens
     * Get all payment service tokens for a given payment method and payment service.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @return PaymentServiceTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list payment service tokens of the specified payment method and payment service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentServiceTokens getPaymentServiceTokens(UUID paymentMethodId, UUID paymentMethodId2) throws ApiException {
        ApiResponse<PaymentServiceTokens> localVarResp = getPaymentServiceTokensWithHttpInfo(paymentMethodId, paymentMethodId2);
        return localVarResp.getData();
    }

    /**
     * Get payment service tokens
     * Get all payment service tokens for a given payment method and payment service.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @return ApiResponse&lt;PaymentServiceTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list payment service tokens of the specified payment method and payment service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentServiceTokens> getPaymentServiceTokensWithHttpInfo(UUID paymentMethodId, UUID paymentMethodId2) throws ApiException {
        okhttp3.Call localVarCall = getPaymentServiceTokensValidateBeforeCall(paymentMethodId, paymentMethodId2, null);
        Type localVarReturnType = new TypeToken<PaymentServiceTokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment service tokens (asynchronously)
     * Get all payment service tokens for a given payment method and payment service.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentMethodId2 Filters for transactions that have a payment method with an ID that matches exactly with the provided value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list payment service tokens of the specified payment method and payment service. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentServiceTokensAsync(UUID paymentMethodId, UUID paymentMethodId2, final ApiCallback<PaymentServiceTokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentServiceTokensValidateBeforeCall(paymentMethodId, paymentMethodId2, _callback);
        Type localVarReturnType = new TypeToken<PaymentServiceTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCryptogram
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param issueCryptogramRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. It also returns an error if the requested network token has a status other than &#x60;active&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCryptogramCall(UUID paymentMethodId, UUID networkTokenId, IssueCryptogramRequest issueCryptogramRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = issueCryptogramRequest;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/cryptogram"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()))
            .replaceAll("\\{" + "network_token_id" + "\\}", localVarApiClient.escapeString(networkTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCryptogramValidateBeforeCall(UUID paymentMethodId, UUID networkTokenId, IssueCryptogramRequest issueCryptogramRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling issueCryptogram(Async)");
        }
        
        // verify the required parameter 'networkTokenId' is set
        if (networkTokenId == null) {
            throw new ApiException("Missing the required parameter 'networkTokenId' when calling issueCryptogram(Async)");
        }
        

        okhttp3.Call localVarCall = issueCryptogramCall(paymentMethodId, networkTokenId, issueCryptogramRequest, _callback);
        return localVarCall;

    }

    /**
     * Issue cryptogram
     * Issue a cryptogram for a stored network token of a stored card. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param issueCryptogramRequest  (optional)
     * @return Cryptogram
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. It also returns an error if the requested network token has a status other than &#x60;active&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Cryptogram issueCryptogram(UUID paymentMethodId, UUID networkTokenId, IssueCryptogramRequest issueCryptogramRequest) throws ApiException {
        ApiResponse<Cryptogram> localVarResp = issueCryptogramWithHttpInfo(paymentMethodId, networkTokenId, issueCryptogramRequest);
        return localVarResp.getData();
    }

    /**
     * Issue cryptogram
     * Issue a cryptogram for a stored network token of a stored card. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param issueCryptogramRequest  (optional)
     * @return ApiResponse&lt;Cryptogram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. It also returns an error if the requested network token has a status other than &#x60;active&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cryptogram> issueCryptogramWithHttpInfo(UUID paymentMethodId, UUID networkTokenId, IssueCryptogramRequest issueCryptogramRequest) throws ApiException {
        okhttp3.Call localVarCall = issueCryptogramValidateBeforeCall(paymentMethodId, networkTokenId, issueCryptogramRequest, null);
        Type localVarReturnType = new TypeToken<Cryptogram>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Issue cryptogram (asynchronously)
     * Issue a cryptogram for a stored network token of a stored card. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param issueCryptogramRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. It also returns an error if the requested network token has a status other than &#x60;active&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCryptogramAsync(UUID paymentMethodId, UUID networkTokenId, IssueCryptogramRequest issueCryptogramRequest, final ApiCallback<Cryptogram> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCryptogramValidateBeforeCall(paymentMethodId, networkTokenId, issueCryptogramRequest, _callback);
        Type localVarReturnType = new TypeToken<Cryptogram>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionNetworkToken
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - network token already exists for the &#x60;payment_method_id&#x60;. - &#x60;security_code&#x60; or &#x60;merchant_initiated&#x60; or &#x60;is_subsequent_payment&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;false&#x60; but &#x60;security_code&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;true&#x60; but &#x60;is_subsequent_payment&#x60; is set to &#x60;false&#x60;. - payment method is not a card. - Network token provider responds with an error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkTokenCall(UUID paymentMethodId, NetworkTokenRequest networkTokenRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = networkTokenRequest;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/network-tokens"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionNetworkTokenValidateBeforeCall(UUID paymentMethodId, NetworkTokenRequest networkTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling provisionNetworkToken(Async)");
        }
        

        okhttp3.Call localVarCall = provisionNetworkTokenCall(paymentMethodId, networkTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * Provision network token
     * Provision a network token for a stored card. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenRequest  (optional)
     * @return NetworkToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - network token already exists for the &#x60;payment_method_id&#x60;. - &#x60;security_code&#x60; or &#x60;merchant_initiated&#x60; or &#x60;is_subsequent_payment&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;false&#x60; but &#x60;security_code&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;true&#x60; but &#x60;is_subsequent_payment&#x60; is set to &#x60;false&#x60;. - payment method is not a card. - Network token provider responds with an error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkToken provisionNetworkToken(UUID paymentMethodId, NetworkTokenRequest networkTokenRequest) throws ApiException {
        ApiResponse<NetworkToken> localVarResp = provisionNetworkTokenWithHttpInfo(paymentMethodId, networkTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Provision network token
     * Provision a network token for a stored card. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenRequest  (optional)
     * @return ApiResponse&lt;NetworkToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - network token already exists for the &#x60;payment_method_id&#x60;. - &#x60;security_code&#x60; or &#x60;merchant_initiated&#x60; or &#x60;is_subsequent_payment&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;false&#x60; but &#x60;security_code&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;true&#x60; but &#x60;is_subsequent_payment&#x60; is set to &#x60;false&#x60;. - payment method is not a card. - Network token provider responds with an error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkToken> provisionNetworkTokenWithHttpInfo(UUID paymentMethodId, NetworkTokenRequest networkTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenRequest, null);
        Type localVarReturnType = new TypeToken<NetworkToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provision network token (asynchronously)
     * Provision a network token for a stored card. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - network token already exists for the &#x60;payment_method_id&#x60;. - &#x60;security_code&#x60; or &#x60;merchant_initiated&#x60; or &#x60;is_subsequent_payment&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;false&#x60; but &#x60;security_code&#x60; is not provided. - &#x60;merchant_initiated&#x60; is set to &#x60;true&#x60; but &#x60;is_subsequent_payment&#x60; is set to &#x60;false&#x60;. - payment method is not a card. - Network token provider responds with an error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionNetworkTokenAsync(UUID paymentMethodId, NetworkTokenRequest networkTokenRequest, final ApiCallback<NetworkToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionPaymentServiceToken
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment service token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - payment method is not card. - payment service doesn&#39;t support &#x60;payment_method_tokenization&#x60;. - active token already exists for the &#x60;payment_service_id&#x60;. - invalid request payload. - &#x60;payment_service_id&#x60; is not a &#x60;uuid&#x60; or is not set. - &#x60;security_code&#x60; is not set. - &#x60;redirect_url&#x60; is not set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionPaymentServiceTokenCall(UUID paymentMethodId, PaymentServiceTokenRequest paymentServiceTokenRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentServiceTokenRequest;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/payment-service-tokens"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionPaymentServiceTokenValidateBeforeCall(UUID paymentMethodId, PaymentServiceTokenRequest paymentServiceTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling provisionPaymentServiceToken(Async)");
        }
        

        okhttp3.Call localVarCall = provisionPaymentServiceTokenCall(paymentMethodId, paymentServiceTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * Provision payment service token
     * Tokenize stored card against a payment service. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenRequest  (optional)
     * @return PaymentServiceToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment service token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - payment method is not card. - payment service doesn&#39;t support &#x60;payment_method_tokenization&#x60;. - active token already exists for the &#x60;payment_service_id&#x60;. - invalid request payload. - &#x60;payment_service_id&#x60; is not a &#x60;uuid&#x60; or is not set. - &#x60;security_code&#x60; is not set. - &#x60;redirect_url&#x60; is not set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentServiceToken provisionPaymentServiceToken(UUID paymentMethodId, PaymentServiceTokenRequest paymentServiceTokenRequest) throws ApiException {
        ApiResponse<PaymentServiceToken> localVarResp = provisionPaymentServiceTokenWithHttpInfo(paymentMethodId, paymentServiceTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Provision payment service token
     * Tokenize stored card against a payment service. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenRequest  (optional)
     * @return ApiResponse&lt;PaymentServiceToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment service token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - payment method is not card. - payment service doesn&#39;t support &#x60;payment_method_tokenization&#x60;. - active token already exists for the &#x60;payment_service_id&#x60;. - invalid request payload. - &#x60;payment_service_id&#x60; is not a &#x60;uuid&#x60; or is not set. - &#x60;security_code&#x60; is not set. - &#x60;redirect_url&#x60; is not set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentServiceToken> provisionPaymentServiceTokenWithHttpInfo(UUID paymentMethodId, PaymentServiceTokenRequest paymentServiceTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionPaymentServiceTokenValidateBeforeCall(paymentMethodId, paymentServiceTokenRequest, null);
        Type localVarReturnType = new TypeToken<PaymentServiceToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provision payment service token (asynchronously)
     * Tokenize stored card against a payment service. 
     * @param paymentMethodId The ID of the payment method. (required)
     * @param paymentServiceTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created payment service token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns if any of the validations below fails: - payment method is not card. - payment service doesn&#39;t support &#x60;payment_method_tokenization&#x60;. - active token already exists for the &#x60;payment_service_id&#x60;. - invalid request payload. - &#x60;payment_service_id&#x60; is not a &#x60;uuid&#x60; or is not set. - &#x60;security_code&#x60; is not set. - &#x60;redirect_url&#x60; is not set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionPaymentServiceTokenAsync(UUID paymentMethodId, PaymentServiceTokenRequest paymentServiceTokenRequest, final ApiCallback<PaymentServiceToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionPaymentServiceTokenValidateBeforeCall(paymentMethodId, paymentServiceTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentServiceToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeNetworkToken
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns resumed network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;suspended&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeNetworkTokenCall(UUID paymentMethodId, UUID networkTokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/resume"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()))
            .replaceAll("\\{" + "network_token_id" + "\\}", localVarApiClient.escapeString(networkTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeNetworkTokenValidateBeforeCall(UUID paymentMethodId, UUID networkTokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling resumeNetworkToken(Async)");
        }
        
        // verify the required parameter 'networkTokenId' is set
        if (networkTokenId == null) {
            throw new ApiException("Missing the required parameter 'networkTokenId' when calling resumeNetworkToken(Async)");
        }
        

        okhttp3.Call localVarCall = resumeNetworkTokenCall(paymentMethodId, networkTokenId, _callback);
        return localVarCall;

    }

    /**
     * Resume network token
     * Resumes a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @return NetworkToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns resumed network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;suspended&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkToken resumeNetworkToken(UUID paymentMethodId, UUID networkTokenId) throws ApiException {
        ApiResponse<NetworkToken> localVarResp = resumeNetworkTokenWithHttpInfo(paymentMethodId, networkTokenId);
        return localVarResp.getData();
    }

    /**
     * Resume network token
     * Resumes a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @return ApiResponse&lt;NetworkToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns resumed network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;suspended&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkToken> resumeNetworkTokenWithHttpInfo(UUID paymentMethodId, UUID networkTokenId) throws ApiException {
        okhttp3.Call localVarCall = resumeNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenId, null);
        Type localVarReturnType = new TypeToken<NetworkToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resume network token (asynchronously)
     * Resumes a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns resumed network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;suspended&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeNetworkTokenAsync(UUID paymentMethodId, UUID networkTokenId, final ApiCallback<NetworkToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenId, _callback);
        Type localVarReturnType = new TypeToken<NetworkToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendNetworkToken
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns suspended network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;active&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendNetworkTokenCall(UUID paymentMethodId, UUID networkTokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/suspend"
            .replaceAll("\\{" + "payment_method_id" + "\\}", localVarApiClient.escapeString(paymentMethodId.toString()))
            .replaceAll("\\{" + "network_token_id" + "\\}", localVarApiClient.escapeString(networkTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendNetworkTokenValidateBeforeCall(UUID paymentMethodId, UUID networkTokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling suspendNetworkToken(Async)");
        }
        
        // verify the required parameter 'networkTokenId' is set
        if (networkTokenId == null) {
            throw new ApiException("Missing the required parameter 'networkTokenId' when calling suspendNetworkToken(Async)");
        }
        

        okhttp3.Call localVarCall = suspendNetworkTokenCall(paymentMethodId, networkTokenId, _callback);
        return localVarCall;

    }

    /**
     * Suspend network token
     * Suspends a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @return NetworkToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns suspended network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;active&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkToken suspendNetworkToken(UUID paymentMethodId, UUID networkTokenId) throws ApiException {
        ApiResponse<NetworkToken> localVarResp = suspendNetworkTokenWithHttpInfo(paymentMethodId, networkTokenId);
        return localVarResp.getData();
    }

    /**
     * Suspend network token
     * Suspends a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @return ApiResponse&lt;NetworkToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns suspended network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;active&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkToken> suspendNetworkTokenWithHttpInfo(UUID paymentMethodId, UUID networkTokenId) throws ApiException {
        okhttp3.Call localVarCall = suspendNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenId, null);
        Type localVarReturnType = new TypeToken<NetworkToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suspend network token (asynchronously)
     * Suspends a specific network token.
     * @param paymentMethodId The ID of the payment method. (required)
     * @param networkTokenId The ID of the network token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns suspended network token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if: - network token&#39;s status is not &#x60;active&#x60;. - network tokens feature is not enabled. - if payment method&#39;s scheme is not &#x60;Visa&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns an error if the resource can not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendNetworkTokenAsync(UUID paymentMethodId, UUID networkTokenId, final ApiCallback<NetworkToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendNetworkTokenValidateBeforeCall(paymentMethodId, networkTokenId, _callback);
        Type localVarReturnType = new TypeToken<NetworkToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
