/*
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gr4vy.api.openapi;

import com.gr4vy.api.ApiCallback;
import com.gr4vy.api.ApiClient;
import com.gr4vy.api.ApiException;
import com.gr4vy.api.ApiResponse;
import com.gr4vy.api.Configuration;
import com.gr4vy.api.Pair;
import com.gr4vy.api.ProgressRequestBody;
import com.gr4vy.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gr4vy.api.model.Error401Unauthorized;
import com.gr4vy.api.model.ErrorGeneric;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VaultForwardApi {
    private ApiClient localVarApiClient;

    public VaultForwardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VaultForwardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for makeVaultForward
     * @param xVaultForwardPaymentMethods A comma-separated list of Payment Method IDs that can be used to fill in the request template. At least 1 must be given, and a maximum of 100 are accepted. (required)
     * @param xVaultForwardUrl The URL to forward card data to. (required)
     * @param xVaultForwardHttpMethod The HTTP method that is used when forwarding the request to the &#x60;x-vault-forward-url&#x60;. (required)
     * @param xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket A header that is forwarded to the &#x60;x-vault-forward-url&#x60;. The header will be forwarded without the &#x60;x-vault-forward-header&#x60; part. For example, &#x60;x-vault-forward-header-x-frame-options: SAMEORIGIN&#x60; is forwarded as &#x60;x-frame-options: SAMEORIGIN&#x60;. (optional)
     * @param xVaultForwardTimeout The number of seconds to wait before timing out when forwarding the request. (optional, default to 30)
     * @param body Payload to forward in the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the payload received from the forwarded request. If the request timed out or there was a network error, the payload will be empty instead. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeVaultForwardCall(String xVaultForwardPaymentMethods, String xVaultForwardUrl, String xVaultForwardHttpMethod, String xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, Integer xVaultForwardTimeout, String body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vault-forward";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVaultForwardPaymentMethods != null) {
            localVarHeaderParams.put("x-vault-forward-payment-methods", localVarApiClient.parameterToString(xVaultForwardPaymentMethods));
        }

        if (xVaultForwardUrl != null) {
            localVarHeaderParams.put("x-vault-forward-url", localVarApiClient.parameterToString(xVaultForwardUrl));
        }

        if (xVaultForwardHttpMethod != null) {
            localVarHeaderParams.put("x-vault-forward-http-method", localVarApiClient.parameterToString(xVaultForwardHttpMethod));
        }

        if (xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket != null) {
            localVarHeaderParams.put("x-vault-forward-header-{HEADER_NAME}", localVarApiClient.parameterToString(xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket));
        }

        if (xVaultForwardTimeout != null) {
            localVarHeaderParams.put("x-vault-forward-timeout", localVarApiClient.parameterToString(xVaultForwardTimeout));
        }

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeVaultForwardValidateBeforeCall(String xVaultForwardPaymentMethods, String xVaultForwardUrl, String xVaultForwardHttpMethod, String xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, Integer xVaultForwardTimeout, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVaultForwardPaymentMethods' is set
        if (xVaultForwardPaymentMethods == null) {
            throw new ApiException("Missing the required parameter 'xVaultForwardPaymentMethods' when calling makeVaultForward(Async)");
        }
        
        // verify the required parameter 'xVaultForwardUrl' is set
        if (xVaultForwardUrl == null) {
            throw new ApiException("Missing the required parameter 'xVaultForwardUrl' when calling makeVaultForward(Async)");
        }
        
        // verify the required parameter 'xVaultForwardHttpMethod' is set
        if (xVaultForwardHttpMethod == null) {
            throw new ApiException("Missing the required parameter 'xVaultForwardHttpMethod' when calling makeVaultForward(Async)");
        }
        

        okhttp3.Call localVarCall = makeVaultForwardCall(xVaultForwardPaymentMethods, xVaultForwardUrl, xVaultForwardHttpMethod, xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, xVaultForwardTimeout, body, _callback);
        return localVarCall;

    }

    /**
     * Forward PCI data
     * Forward an API call to a PCI endpoint. The request body is evaluated and any template fields are replaced by the card data before the request is sent to the given destination.
     * @param xVaultForwardPaymentMethods A comma-separated list of Payment Method IDs that can be used to fill in the request template. At least 1 must be given, and a maximum of 100 are accepted. (required)
     * @param xVaultForwardUrl The URL to forward card data to. (required)
     * @param xVaultForwardHttpMethod The HTTP method that is used when forwarding the request to the &#x60;x-vault-forward-url&#x60;. (required)
     * @param xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket A header that is forwarded to the &#x60;x-vault-forward-url&#x60;. The header will be forwarded without the &#x60;x-vault-forward-header&#x60; part. For example, &#x60;x-vault-forward-header-x-frame-options: SAMEORIGIN&#x60; is forwarded as &#x60;x-frame-options: SAMEORIGIN&#x60;. (optional)
     * @param xVaultForwardTimeout The number of seconds to wait before timing out when forwarding the request. (optional, default to 30)
     * @param body Payload to forward in the request. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the payload received from the forwarded request. If the request timed out or there was a network error, the payload will be empty instead. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public String makeVaultForward(String xVaultForwardPaymentMethods, String xVaultForwardUrl, String xVaultForwardHttpMethod, String xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, Integer xVaultForwardTimeout, String body) throws ApiException {
        ApiResponse<String> localVarResp = makeVaultForwardWithHttpInfo(xVaultForwardPaymentMethods, xVaultForwardUrl, xVaultForwardHttpMethod, xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, xVaultForwardTimeout, body);
        return localVarResp.getData();
    }

    /**
     * Forward PCI data
     * Forward an API call to a PCI endpoint. The request body is evaluated and any template fields are replaced by the card data before the request is sent to the given destination.
     * @param xVaultForwardPaymentMethods A comma-separated list of Payment Method IDs that can be used to fill in the request template. At least 1 must be given, and a maximum of 100 are accepted. (required)
     * @param xVaultForwardUrl The URL to forward card data to. (required)
     * @param xVaultForwardHttpMethod The HTTP method that is used when forwarding the request to the &#x60;x-vault-forward-url&#x60;. (required)
     * @param xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket A header that is forwarded to the &#x60;x-vault-forward-url&#x60;. The header will be forwarded without the &#x60;x-vault-forward-header&#x60; part. For example, &#x60;x-vault-forward-header-x-frame-options: SAMEORIGIN&#x60; is forwarded as &#x60;x-frame-options: SAMEORIGIN&#x60;. (optional)
     * @param xVaultForwardTimeout The number of seconds to wait before timing out when forwarding the request. (optional, default to 30)
     * @param body Payload to forward in the request. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the payload received from the forwarded request. If the request timed out or there was a network error, the payload will be empty instead. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> makeVaultForwardWithHttpInfo(String xVaultForwardPaymentMethods, String xVaultForwardUrl, String xVaultForwardHttpMethod, String xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, Integer xVaultForwardTimeout, String body) throws ApiException {
        okhttp3.Call localVarCall = makeVaultForwardValidateBeforeCall(xVaultForwardPaymentMethods, xVaultForwardUrl, xVaultForwardHttpMethod, xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, xVaultForwardTimeout, body, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forward PCI data (asynchronously)
     * Forward an API call to a PCI endpoint. The request body is evaluated and any template fields are replaced by the card data before the request is sent to the given destination.
     * @param xVaultForwardPaymentMethods A comma-separated list of Payment Method IDs that can be used to fill in the request template. At least 1 must be given, and a maximum of 100 are accepted. (required)
     * @param xVaultForwardUrl The URL to forward card data to. (required)
     * @param xVaultForwardHttpMethod The HTTP method that is used when forwarding the request to the &#x60;x-vault-forward-url&#x60;. (required)
     * @param xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket A header that is forwarded to the &#x60;x-vault-forward-url&#x60;. The header will be forwarded without the &#x60;x-vault-forward-header&#x60; part. For example, &#x60;x-vault-forward-header-x-frame-options: SAMEORIGIN&#x60; is forwarded as &#x60;x-frame-options: SAMEORIGIN&#x60;. (optional)
     * @param xVaultForwardTimeout The number of seconds to wait before timing out when forwarding the request. (optional, default to 30)
     * @param body Payload to forward in the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the payload received from the forwarded request. If the request timed out or there was a network error, the payload will be empty instead. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns an error if the request was badly formatted or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns an error if no valid authentication was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeVaultForwardAsync(String xVaultForwardPaymentMethods, String xVaultForwardUrl, String xVaultForwardHttpMethod, String xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, Integer xVaultForwardTimeout, String body, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeVaultForwardValidateBeforeCall(xVaultForwardPaymentMethods, xVaultForwardUrl, xVaultForwardHttpMethod, xVaultForwardHeaderLeftCurlyBracketHEADERNAMERightCurlyBracket, xVaultForwardTimeout, body, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
