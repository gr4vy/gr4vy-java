/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.operations.GetTransactionSettlementRequest;
import com.gr4vy.sdk.models.operations.ListTransactionSettlementsRequest;
import com.gr4vy.sdk.models.operations.async.GetTransactionSettlementRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetTransactionSettlementResponse;
import com.gr4vy.sdk.models.operations.async.ListTransactionSettlementsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListTransactionSettlementsResponse;
import com.gr4vy.sdk.operations.GetTransactionSettlement;
import com.gr4vy.sdk.operations.ListTransactionSettlements;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncSettlements {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Settlements syncSDK;

    AsyncSettlements(Settlements syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Settlements sync() {
        return syncSDK;
    }


    /**
     * Get transaction settlement
     * 
     * <p>Retrieve a specific settlement for a transaction by its unique identifier.
     * 
     * @return The async call builder
     */
    public GetTransactionSettlementRequestBuilder get() {
        return new GetTransactionSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction settlement
     * 
     * <p>Retrieve a specific settlement for a transaction by its unique identifier.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @param settlementId The unique identifier of the settlement.
     * @return {@code CompletableFuture<GetTransactionSettlementResponse>} - The async response
     */
    public CompletableFuture<GetTransactionSettlementResponse> get(String transactionId, String settlementId) {
        return get(
                transactionId, settlementId, JsonNullable.undefined(),
                Optional.empty());
    }

    /**
     * Get transaction settlement
     * 
     * <p>Retrieve a specific settlement for a transaction by its unique identifier.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @param settlementId The unique identifier of the settlement.
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<GetTransactionSettlementResponse>} - The async response
     */
    public CompletableFuture<GetTransactionSettlementResponse> get(
            String transactionId, String settlementId,
            JsonNullable<String> merchantAccountId, Optional<Options> options) {
        GetTransactionSettlementRequest request =
            GetTransactionSettlementRequest
                .builder()
                .transactionId(transactionId)
                .settlementId(settlementId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetTransactionSettlementRequest, GetTransactionSettlementResponse> operation
              = new GetTransactionSettlement.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List transaction settlements
     * 
     * <p>List all settlements for a specific transaction.
     * 
     * @return The async call builder
     */
    public ListTransactionSettlementsRequestBuilder list() {
        return new ListTransactionSettlementsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transaction settlements
     * 
     * <p>List all settlements for a specific transaction.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @return {@code CompletableFuture<ListTransactionSettlementsResponse>} - The async response
     */
    public CompletableFuture<ListTransactionSettlementsResponse> list(String transactionId) {
        return list(transactionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List transaction settlements
     * 
     * <p>List all settlements for a specific transaction.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<ListTransactionSettlementsResponse>} - The async response
     */
    public CompletableFuture<ListTransactionSettlementsResponse> list(
            String transactionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        ListTransactionSettlementsRequest request =
            ListTransactionSettlementsRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListTransactionSettlementsRequest, ListTransactionSettlementsResponse> operation
              = new ListTransactionSettlements.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
