/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.MerchantAccountCreate;
import com.gr4vy.sdk.models.components.MerchantAccountUpdate;
import com.gr4vy.sdk.models.operations.CreateMerchantAccountRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateMerchantAccountResponse;
import com.gr4vy.sdk.models.operations.GetMerchantAccountRequest;
import com.gr4vy.sdk.models.operations.GetMerchantAccountRequestBuilder;
import com.gr4vy.sdk.models.operations.GetMerchantAccountResponse;
import com.gr4vy.sdk.models.operations.ListMerchantAccountsRequest;
import com.gr4vy.sdk.models.operations.ListMerchantAccountsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListMerchantAccountsResponse;
import com.gr4vy.sdk.models.operations.UpdateMerchantAccountRequest;
import com.gr4vy.sdk.models.operations.UpdateMerchantAccountRequestBuilder;
import com.gr4vy.sdk.models.operations.UpdateMerchantAccountResponse;
import com.gr4vy.sdk.operations.CreateMerchantAccountOperation;
import com.gr4vy.sdk.operations.GetMerchantAccountOperation;
import com.gr4vy.sdk.operations.ListMerchantAccountsOperation;
import com.gr4vy.sdk.operations.UpdateMerchantAccountOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class MerchantAccounts {
    private final SDKConfiguration sdkConfiguration;

    MerchantAccounts(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List all merchant accounts
     * 
     * <p>List all merchant accounts in an instance.
     * 
     * @return The call builder
     */
    public ListMerchantAccountsRequestBuilder list() {
        return new ListMerchantAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all merchant accounts
     * 
     * <p>List all merchant accounts in an instance.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListMerchantAccountsResponse listDirect() throws Exception {
        return list(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List all merchant accounts
     * 
     * <p>List all merchant accounts in an instance.
     * 
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are at returned.
     * @param search The search term to filter merchant accounts by.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListMerchantAccountsResponse list(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<String> search,
            Optional<Options> options) throws Exception {
        ListMerchantAccountsRequest request =
            ListMerchantAccountsRequest
                .builder()
                .cursor(cursor)
                .limit(limit)
                .search(search)
                .build();
        RequestOperation<ListMerchantAccountsRequest, ListMerchantAccountsResponse> operation
              = new ListMerchantAccountsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create a merchant account
     * 
     * <p>Create a new merchant account in an instance.
     * 
     * @return The call builder
     */
    public CreateMerchantAccountRequestBuilder create() {
        return new CreateMerchantAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a merchant account
     * 
     * <p>Create a new merchant account in an instance.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateMerchantAccountResponse create(
            MerchantAccountCreate request) throws Exception {
        RequestOperation<MerchantAccountCreate, CreateMerchantAccountResponse> operation
              = new CreateMerchantAccountOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get a merchant account
     * 
     * <p>Get info about a merchant account in an instance.
     * 
     * @return The call builder
     */
    public GetMerchantAccountRequestBuilder get() {
        return new GetMerchantAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a merchant account
     * 
     * <p>Get info about a merchant account in an instance.
     * 
     * @param merchantAccountId The ID of the merchant account
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMerchantAccountResponse get(String merchantAccountId) throws Exception {
        return get(merchantAccountId, Optional.empty());
    }

    /**
     * Get a merchant account
     * 
     * <p>Get info about a merchant account in an instance.
     * 
     * @param merchantAccountId The ID of the merchant account
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMerchantAccountResponse get(
            String merchantAccountId,
            Optional<Options> options) throws Exception {
        GetMerchantAccountRequest request =
            GetMerchantAccountRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetMerchantAccountRequest, GetMerchantAccountResponse> operation
              = new GetMerchantAccountOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a merchant account
     * 
     * <p>Update info for a merchant account in an instance.
     * 
     * @return The call builder
     */
    public UpdateMerchantAccountRequestBuilder update() {
        return new UpdateMerchantAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a merchant account
     * 
     * <p>Update info for a merchant account in an instance.
     * 
     * @param merchantAccountId The ID of the merchant account
     * @param merchantAccountUpdate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateMerchantAccountResponse update(
            String merchantAccountId,
            MerchantAccountUpdate merchantAccountUpdate) throws Exception {
        UpdateMerchantAccountRequest request =
            UpdateMerchantAccountRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .merchantAccountUpdate(merchantAccountUpdate)
                .build();
        RequestOperation<UpdateMerchantAccountRequest, UpdateMerchantAccountResponse> operation
              = new UpdateMerchantAccountOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
