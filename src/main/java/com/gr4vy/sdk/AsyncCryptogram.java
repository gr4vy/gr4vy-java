/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.CryptogramCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenCryptogramRequest;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodNetworkTokenCryptogramRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodNetworkTokenCryptogramResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethodNetworkTokenCryptogram;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncCryptogram {
    private final SDKConfiguration sdkConfiguration;
    private final Cryptogram syncSDK;

    AsyncCryptogram(Cryptogram syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Cryptogram sync() {
        return syncSDK;
    }


    /**
     * Provision network token cryptogram
     * 
     * <p>Provision a cryptogram for a network token.
     * 
     * @return The async call builder
     */
    public CreatePaymentMethodNetworkTokenCryptogramRequestBuilder create() {
        return new CreatePaymentMethodNetworkTokenCryptogramRequestBuilder(sdkConfiguration);
    }

    /**
     * Provision network token cryptogram
     * 
     * <p>Provision a cryptogram for a network token.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param cryptogramCreate 
     * @return CompletableFuture&lt;CreatePaymentMethodNetworkTokenCryptogramResponse&gt; - The async response
     */
    public CompletableFuture<CreatePaymentMethodNetworkTokenCryptogramResponse> create(
            String paymentMethodId, String networkTokenId,
            CryptogramCreate cryptogramCreate) {
        return create(
                paymentMethodId, networkTokenId, JsonNullable.undefined(),
                cryptogramCreate);
    }

    /**
     * Provision network token cryptogram
     * 
     * <p>Provision a cryptogram for a network token.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @param cryptogramCreate 
     * @return CompletableFuture&lt;CreatePaymentMethodNetworkTokenCryptogramResponse&gt; - The async response
     */
    public CompletableFuture<CreatePaymentMethodNetworkTokenCryptogramResponse> create(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId, CryptogramCreate cryptogramCreate) {
        CreatePaymentMethodNetworkTokenCryptogramRequest request =
            CreatePaymentMethodNetworkTokenCryptogramRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .cryptogramCreate(cryptogramCreate)
                .build();
        AsyncRequestOperation<CreatePaymentMethodNetworkTokenCryptogramRequest, CreatePaymentMethodNetworkTokenCryptogramResponse> operation
              = new CreatePaymentMethodNetworkTokenCryptogram.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
