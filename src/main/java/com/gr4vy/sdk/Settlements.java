/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.operations.GetTransactionSettlementRequest;
import com.gr4vy.sdk.models.operations.GetTransactionSettlementRequestBuilder;
import com.gr4vy.sdk.models.operations.GetTransactionSettlementResponse;
import com.gr4vy.sdk.models.operations.ListTransactionSettlementsRequest;
import com.gr4vy.sdk.models.operations.ListTransactionSettlementsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListTransactionSettlementsResponse;
import com.gr4vy.sdk.operations.GetTransactionSettlement;
import com.gr4vy.sdk.operations.ListTransactionSettlements;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Settlements {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncSettlements asyncSDK;

    Settlements(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncSettlements(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncSettlements async() {
        return asyncSDK;
    }

    /**
     * Get transaction settlement
     * 
     * <p>Retrieve a specific settlement for a transaction by its unique identifier.
     * 
     * @return The call builder
     */
    public GetTransactionSettlementRequestBuilder get() {
        return new GetTransactionSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction settlement
     * 
     * <p>Retrieve a specific settlement for a transaction by its unique identifier.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @param settlementId The unique identifier of the settlement.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionSettlementResponse get(String transactionId, String settlementId) throws Exception {
        return get(transactionId, settlementId, JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Get transaction settlement
     * 
     * <p>Retrieve a specific settlement for a transaction by its unique identifier.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @param settlementId The unique identifier of the settlement.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionSettlementResponse get(
            String transactionId, String settlementId,
            JsonNullable<String> merchantAccountId, Optional<Options> options) throws Exception {
        GetTransactionSettlementRequest request =
            GetTransactionSettlementRequest
                .builder()
                .transactionId(transactionId)
                .settlementId(settlementId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetTransactionSettlementRequest, GetTransactionSettlementResponse> operation
              = new GetTransactionSettlement.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List transaction settlements
     * 
     * <p>List all settlements for a specific transaction.
     * 
     * @return The call builder
     */
    public ListTransactionSettlementsRequestBuilder list() {
        return new ListTransactionSettlementsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transaction settlements
     * 
     * <p>List all settlements for a specific transaction.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransactionSettlementsResponse list(String transactionId) throws Exception {
        return list(transactionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List transaction settlements
     * 
     * <p>List all settlements for a specific transaction.
     * 
     * @param transactionId The unique identifier of the transaction.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransactionSettlementsResponse list(
            String transactionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        ListTransactionSettlementsRequest request =
            ListTransactionSettlementsRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ListTransactionSettlementsRequest, ListTransactionSettlementsResponse> operation
              = new ListTransactionSettlements.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
