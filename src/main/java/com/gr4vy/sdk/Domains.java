/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.DigitalWalletDomain;
import com.gr4vy.sdk.models.operations.RegisterDigitalWalletDomainRequest;
import com.gr4vy.sdk.models.operations.RegisterDigitalWalletDomainRequestBuilder;
import com.gr4vy.sdk.models.operations.RegisterDigitalWalletDomainResponse;
import com.gr4vy.sdk.models.operations.UnregisterDigitalWalletDomainRequest;
import com.gr4vy.sdk.models.operations.UnregisterDigitalWalletDomainRequestBuilder;
import com.gr4vy.sdk.models.operations.UnregisterDigitalWalletDomainResponse;
import com.gr4vy.sdk.operations.RegisterDigitalWalletDomainOperation;
import com.gr4vy.sdk.operations.UnregisterDigitalWalletDomainOperation;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Domains {
    private final SDKConfiguration sdkConfiguration;

    Domains(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Register a digital wallet domain
     * 
     * <p>Register a digital wallet domain (Apple Pay only).
     * 
     * @return The call builder
     */
    public RegisterDigitalWalletDomainRequestBuilder create() {
        return new RegisterDigitalWalletDomainRequestBuilder(sdkConfiguration);
    }

    /**
     * Register a digital wallet domain
     * 
     * <p>Register a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId The ID of the digital wallet to remove a domain for.
     * @param digitalWalletDomain 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RegisterDigitalWalletDomainResponse create(
            String digitalWalletId,
            DigitalWalletDomain digitalWalletDomain) throws Exception {
        return create(digitalWalletId, JsonNullable.undefined(), digitalWalletDomain);
    }

    /**
     * Register a digital wallet domain
     * 
     * <p>Register a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId The ID of the digital wallet to remove a domain for.
     * @param merchantAccountId 
     * @param digitalWalletDomain 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RegisterDigitalWalletDomainResponse create(
            String digitalWalletId,
            JsonNullable<String> merchantAccountId,
            DigitalWalletDomain digitalWalletDomain) throws Exception {
        RegisterDigitalWalletDomainRequest request =
            RegisterDigitalWalletDomainRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .digitalWalletDomain(digitalWalletDomain)
                .build();
        RequestOperation<RegisterDigitalWalletDomainRequest, RegisterDigitalWalletDomainResponse> operation
              = new RegisterDigitalWalletDomainOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a digital wallet domain
     * 
     * <p>Remove a digital wallet domain (Apple Pay only).
     * 
     * @return The call builder
     */
    public UnregisterDigitalWalletDomainRequestBuilder delete() {
        return new UnregisterDigitalWalletDomainRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a digital wallet domain
     * 
     * <p>Remove a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId 
     * @param digitalWalletDomain 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UnregisterDigitalWalletDomainResponse delete(
            String digitalWalletId,
            DigitalWalletDomain digitalWalletDomain) throws Exception {
        return delete(digitalWalletId, JsonNullable.undefined(), digitalWalletDomain);
    }

    /**
     * Remove a digital wallet domain
     * 
     * <p>Remove a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId 
     * @param merchantAccountId 
     * @param digitalWalletDomain 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UnregisterDigitalWalletDomainResponse delete(
            String digitalWalletId,
            JsonNullable<String> merchantAccountId,
            DigitalWalletDomain digitalWalletDomain) throws Exception {
        UnregisterDigitalWalletDomainRequest request =
            UnregisterDigitalWalletDomainRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .digitalWalletDomain(digitalWalletDomain)
                .build();
        RequestOperation<UnregisterDigitalWalletDomainRequest, UnregisterDigitalWalletDomainResponse> operation
              = new UnregisterDigitalWalletDomainOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
