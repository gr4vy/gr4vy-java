/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.TransactionRefundCreate;
import com.gr4vy.sdk.models.operations.CreateTransactionRefundRequest;
import com.gr4vy.sdk.models.operations.GetTransactionRefundRequest;
import com.gr4vy.sdk.models.operations.ListTransactionRefundsRequest;
import com.gr4vy.sdk.models.operations.async.CreateTransactionRefundRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateTransactionRefundResponse;
import com.gr4vy.sdk.models.operations.async.GetTransactionRefundRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetTransactionRefundResponse;
import com.gr4vy.sdk.models.operations.async.ListTransactionRefundsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListTransactionRefundsResponse;
import com.gr4vy.sdk.operations.CreateTransactionRefund;
import com.gr4vy.sdk.operations.GetTransactionRefund;
import com.gr4vy.sdk.operations.ListTransactionRefunds;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncTransactionsRefunds {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncAll all;
    private final TransactionsRefunds syncSDK;

    AsyncTransactionsRefunds(TransactionsRefunds syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.all = new AsyncAll(syncSDK.all(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncAll all() {
        return all;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public TransactionsRefunds sync() {
        return syncSDK;
    }


    /**
     * List transaction refunds
     * 
     * <p>List refunds for a transaction.
     * 
     * @return The async call builder
     */
    public ListTransactionRefundsRequestBuilder list() {
        return new ListTransactionRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transaction refunds
     * 
     * <p>List refunds for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @return {@code CompletableFuture<ListTransactionRefundsResponse>} - The async response
     */
    public CompletableFuture<ListTransactionRefundsResponse> list(String transactionId) {
        return list(transactionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List transaction refunds
     * 
     * <p>List refunds for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<ListTransactionRefundsResponse>} - The async response
     */
    public CompletableFuture<ListTransactionRefundsResponse> list(
            String transactionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        ListTransactionRefundsRequest request =
            ListTransactionRefundsRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListTransactionRefundsRequest, ListTransactionRefundsResponse> operation
              = new ListTransactionRefunds.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create transaction refund
     * 
     * <p>Create a refund for a transaction.
     * 
     * @return The async call builder
     */
    public CreateTransactionRefundRequestBuilder create() {
        return new CreateTransactionRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Create transaction refund
     * 
     * <p>Create a refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param transactionRefundCreate 
     * @return {@code CompletableFuture<CreateTransactionRefundResponse>} - The async response
     */
    public CompletableFuture<CreateTransactionRefundResponse> create(String transactionId, TransactionRefundCreate transactionRefundCreate) {
        return create(transactionId, JsonNullable.undefined(), transactionRefundCreate);
    }

    /**
     * Create transaction refund
     * 
     * <p>Create a refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param transactionRefundCreate 
     * @return {@code CompletableFuture<CreateTransactionRefundResponse>} - The async response
     */
    public CompletableFuture<CreateTransactionRefundResponse> create(
            String transactionId, JsonNullable<String> merchantAccountId,
            TransactionRefundCreate transactionRefundCreate) {
        CreateTransactionRefundRequest request =
            CreateTransactionRefundRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .transactionRefundCreate(transactionRefundCreate)
                .build();
        AsyncRequestOperation<CreateTransactionRefundRequest, CreateTransactionRefundResponse> operation
              = new CreateTransactionRefund.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get transaction refund
     * 
     * <p>Fetch refund for a transaction.
     * 
     * @return The async call builder
     */
    public GetTransactionRefundRequestBuilder get() {
        return new GetTransactionRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction refund
     * 
     * <p>Fetch refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param refundId The ID of the refund
     * @return {@code CompletableFuture<GetTransactionRefundResponse>} - The async response
     */
    public CompletableFuture<GetTransactionRefundResponse> get(String transactionId, String refundId) {
        return get(
                transactionId, refundId, JsonNullable.undefined(),
                Optional.empty());
    }

    /**
     * Get transaction refund
     * 
     * <p>Fetch refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param refundId The ID of the refund
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<GetTransactionRefundResponse>} - The async response
     */
    public CompletableFuture<GetTransactionRefundResponse> get(
            String transactionId, String refundId,
            JsonNullable<String> merchantAccountId, Optional<Options> options) {
        GetTransactionRefundRequest request =
            GetTransactionRefundRequest
                .builder()
                .transactionId(transactionId)
                .refundId(refundId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetTransactionRefundRequest, GetTransactionRefundResponse> operation
              = new GetTransactionRefund.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
