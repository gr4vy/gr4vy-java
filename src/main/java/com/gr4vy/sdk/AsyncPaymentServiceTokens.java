/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.PaymentServiceTokenCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodPaymentServiceTokenRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodPaymentServiceTokenRequest;
import com.gr4vy.sdk.models.operations.ListPaymentMethodPaymentServiceTokensRequest;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodPaymentServiceTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodPaymentServiceTokenResponse;
import com.gr4vy.sdk.models.operations.async.DeletePaymentMethodPaymentServiceTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeletePaymentMethodPaymentServiceTokenResponse;
import com.gr4vy.sdk.models.operations.async.ListPaymentMethodPaymentServiceTokensRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListPaymentMethodPaymentServiceTokensResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethodPaymentServiceToken;
import com.gr4vy.sdk.operations.DeletePaymentMethodPaymentServiceToken;
import com.gr4vy.sdk.operations.ListPaymentMethodPaymentServiceTokens;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncPaymentServiceTokens {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final PaymentServiceTokens syncSDK;

    AsyncPaymentServiceTokens(PaymentServiceTokens syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public PaymentServiceTokens sync() {
        return syncSDK;
    }


    /**
     * List payment service tokens
     * 
     * <p>List all gateway tokens stored for a payment method.
     * 
     * @return The async call builder
     */
    public ListPaymentMethodPaymentServiceTokensRequestBuilder list() {
        return new ListPaymentMethodPaymentServiceTokensRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment service tokens
     * 
     * <p>List all gateway tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return {@code CompletableFuture<ListPaymentMethodPaymentServiceTokensResponse>} - The async response
     */
    public CompletableFuture<ListPaymentMethodPaymentServiceTokensResponse> list(String paymentMethodId) {
        return list(
                paymentMethodId, JsonNullable.undefined(), JsonNullable.undefined(),
                Optional.empty());
    }

    /**
     * List payment service tokens
     * 
     * <p>List all gateway tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceId The ID of the payment service
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<ListPaymentMethodPaymentServiceTokensResponse>} - The async response
     */
    public CompletableFuture<ListPaymentMethodPaymentServiceTokensResponse> list(
            String paymentMethodId, JsonNullable<String> paymentServiceId,
            JsonNullable<String> merchantAccountId, Optional<Options> options) {
        ListPaymentMethodPaymentServiceTokensRequest request =
            ListPaymentMethodPaymentServiceTokensRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListPaymentMethodPaymentServiceTokensRequest, ListPaymentMethodPaymentServiceTokensResponse> operation
              = new ListPaymentMethodPaymentServiceTokens.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create payment service token
     * 
     * <p>Create a gateway tokens for a payment method.
     * 
     * @return The async call builder
     */
    public CreatePaymentMethodPaymentServiceTokenRequestBuilder create() {
        return new CreatePaymentMethodPaymentServiceTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment service token
     * 
     * <p>Create a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceTokenCreate 
     * @return {@code CompletableFuture<CreatePaymentMethodPaymentServiceTokenResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentMethodPaymentServiceTokenResponse> create(String paymentMethodId, PaymentServiceTokenCreate paymentServiceTokenCreate) {
        return create(paymentMethodId, JsonNullable.undefined(), paymentServiceTokenCreate);
    }

    /**
     * Create payment service token
     * 
     * <p>Create a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param paymentServiceTokenCreate 
     * @return {@code CompletableFuture<CreatePaymentMethodPaymentServiceTokenResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentMethodPaymentServiceTokenResponse> create(
            String paymentMethodId, JsonNullable<String> merchantAccountId,
            PaymentServiceTokenCreate paymentServiceTokenCreate) {
        CreatePaymentMethodPaymentServiceTokenRequest request =
            CreatePaymentMethodPaymentServiceTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .paymentServiceTokenCreate(paymentServiceTokenCreate)
                .build();
        AsyncRequestOperation<CreatePaymentMethodPaymentServiceTokenRequest, CreatePaymentMethodPaymentServiceTokenResponse> operation
              = new CreatePaymentMethodPaymentServiceToken.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete payment service token
     * 
     * <p>Delete a gateway tokens for a payment method.
     * 
     * @return The async call builder
     */
    public DeletePaymentMethodPaymentServiceTokenRequestBuilder delete() {
        return new DeletePaymentMethodPaymentServiceTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete payment service token
     * 
     * <p>Delete a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceTokenId The ID of the payment service token
     * @return {@code CompletableFuture<DeletePaymentMethodPaymentServiceTokenResponse>} - The async response
     */
    public CompletableFuture<DeletePaymentMethodPaymentServiceTokenResponse> delete(String paymentMethodId, String paymentServiceTokenId) {
        return delete(paymentMethodId, paymentServiceTokenId, JsonNullable.undefined());
    }

    /**
     * Delete payment service token
     * 
     * <p>Delete a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceTokenId The ID of the payment service token
     * @param merchantAccountId 
     * @return {@code CompletableFuture<DeletePaymentMethodPaymentServiceTokenResponse>} - The async response
     */
    public CompletableFuture<DeletePaymentMethodPaymentServiceTokenResponse> delete(
            String paymentMethodId, String paymentServiceTokenId,
            JsonNullable<String> merchantAccountId) {
        DeletePaymentMethodPaymentServiceTokenRequest request =
            DeletePaymentMethodPaymentServiceTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .paymentServiceTokenId(paymentServiceTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeletePaymentMethodPaymentServiceTokenRequest, DeletePaymentMethodPaymentServiceTokenResponse> operation
              = new DeletePaymentMethodPaymentServiceToken.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
