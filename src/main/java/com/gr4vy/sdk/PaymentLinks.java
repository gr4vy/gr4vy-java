/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.PaymentLinkCreate;
import com.gr4vy.sdk.models.operations.AddPaymentLinkRequest;
import com.gr4vy.sdk.models.operations.AddPaymentLinkRequestBuilder;
import com.gr4vy.sdk.models.operations.AddPaymentLinkResponse;
import com.gr4vy.sdk.models.operations.ExpirePaymentLinkRequest;
import com.gr4vy.sdk.models.operations.ExpirePaymentLinkRequestBuilder;
import com.gr4vy.sdk.models.operations.ExpirePaymentLinkResponse;
import com.gr4vy.sdk.models.operations.GetPaymentLinkRequest;
import com.gr4vy.sdk.models.operations.GetPaymentLinkRequestBuilder;
import com.gr4vy.sdk.models.operations.GetPaymentLinkResponse;
import com.gr4vy.sdk.models.operations.ListPaymentLinksRequest;
import com.gr4vy.sdk.models.operations.ListPaymentLinksRequestBuilder;
import com.gr4vy.sdk.models.operations.ListPaymentLinksResponse;
import com.gr4vy.sdk.operations.AddPaymentLinkOperation;
import com.gr4vy.sdk.operations.ExpirePaymentLinkOperation;
import com.gr4vy.sdk.operations.GetPaymentLinkOperation;
import com.gr4vy.sdk.operations.ListPaymentLinksOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentLinks {
    private final SDKConfiguration sdkConfiguration;

    PaymentLinks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Add a payment link
     * 
     * <p>Create a new payment link.
     * 
     * @return The call builder
     */
    public AddPaymentLinkRequestBuilder create() {
        return new AddPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a payment link
     * 
     * <p>Create a new payment link.
     * 
     * @param paymentLinkCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddPaymentLinkResponse create(PaymentLinkCreate paymentLinkCreate) throws Exception {
        return create(JsonNullable.undefined(), paymentLinkCreate);
    }

    /**
     * Add a payment link
     * 
     * <p>Create a new payment link.
     * 
     * @param merchantAccountId 
     * @param paymentLinkCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddPaymentLinkResponse create(JsonNullable<String> merchantAccountId, PaymentLinkCreate paymentLinkCreate) throws Exception {
        AddPaymentLinkRequest request =
            AddPaymentLinkRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .paymentLinkCreate(paymentLinkCreate)
                .build();
        RequestOperation<AddPaymentLinkRequest, AddPaymentLinkResponse> operation
              = new AddPaymentLinkOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all payment links
     * 
     * <p>List all created payment links.
     * 
     * @return The call builder
     */
    public ListPaymentLinksRequestBuilder list() {
        return new ListPaymentLinksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment links
     * 
     * <p>List all created payment links.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentLinksResponse listDirect() throws Exception {
        return list(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * List all payment links
     * 
     * <p>List all created payment links.
     * 
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are returned.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentLinksResponse list(
            JsonNullable<String> cursor, Optional<Long> limit,
            JsonNullable<String> merchantAccountId, Optional<Options> options) throws Exception {
        ListPaymentLinksRequest request =
            ListPaymentLinksRequest
                .builder()
                .cursor(cursor)
                .limit(limit)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ListPaymentLinksRequest, ListPaymentLinksResponse> operation
              = new ListPaymentLinksOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Expire a payment link
     * 
     * <p>Expire an existing payment link.
     * 
     * @return The call builder
     */
    public ExpirePaymentLinkRequestBuilder expire() {
        return new ExpirePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Expire a payment link
     * 
     * <p>Expire an existing payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ExpirePaymentLinkResponse expire(String paymentLinkId) throws Exception {
        return expire(paymentLinkId, JsonNullable.undefined());
    }

    /**
     * Expire a payment link
     * 
     * <p>Expire an existing payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ExpirePaymentLinkResponse expire(String paymentLinkId, JsonNullable<String> merchantAccountId) throws Exception {
        ExpirePaymentLinkRequest request =
            ExpirePaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ExpirePaymentLinkRequest, ExpirePaymentLinkResponse> operation
              = new ExpirePaymentLinkOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment link
     * 
     * <p>Fetch the details for a payment link.
     * 
     * @return The call builder
     */
    public GetPaymentLinkRequestBuilder get() {
        return new GetPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment link
     * 
     * <p>Fetch the details for a payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentLinkResponse get(String paymentLinkId) throws Exception {
        return get(paymentLinkId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment link
     * 
     * <p>Fetch the details for a payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentLinkResponse get(
            String paymentLinkId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetPaymentLinkRequest request =
            GetPaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetPaymentLinkRequest, GetPaymentLinkResponse> operation
              = new GetPaymentLinkOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
