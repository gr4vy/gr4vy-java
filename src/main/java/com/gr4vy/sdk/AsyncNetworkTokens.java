/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.NetworkTokenCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.ListPaymentMethodNetworkTokensRequest;
import com.gr4vy.sdk.models.operations.ResumePaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.SuspendPaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.models.operations.async.DeletePaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeletePaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.models.operations.async.ListPaymentMethodNetworkTokensRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListPaymentMethodNetworkTokensResponse;
import com.gr4vy.sdk.models.operations.async.ResumePaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ResumePaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.models.operations.async.SuspendPaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.async.SuspendPaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethodNetworkToken;
import com.gr4vy.sdk.operations.DeletePaymentMethodNetworkToken;
import com.gr4vy.sdk.operations.ListPaymentMethodNetworkTokens;
import com.gr4vy.sdk.operations.ResumePaymentMethodNetworkToken;
import com.gr4vy.sdk.operations.SuspendPaymentMethodNetworkToken;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncNetworkTokens {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncCryptogram cryptogram;
    private final NetworkTokens syncSDK;

    AsyncNetworkTokens(NetworkTokens syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.cryptogram = new AsyncCryptogram(syncSDK.cryptogram(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncCryptogram cryptogram() {
        return cryptogram;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public NetworkTokens sync() {
        return syncSDK;
    }


    /**
     * List network tokens
     * 
     * <p>List all network tokens stored for a payment method.
     * 
     * @return The async call builder
     */
    public ListPaymentMethodNetworkTokensRequestBuilder list() {
        return new ListPaymentMethodNetworkTokensRequestBuilder(sdkConfiguration);
    }

    /**
     * List network tokens
     * 
     * <p>List all network tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return {@code CompletableFuture<ListPaymentMethodNetworkTokensResponse>} - The async response
     */
    public CompletableFuture<ListPaymentMethodNetworkTokensResponse> list(String paymentMethodId) {
        return list(paymentMethodId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List network tokens
     * 
     * <p>List all network tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<ListPaymentMethodNetworkTokensResponse>} - The async response
     */
    public CompletableFuture<ListPaymentMethodNetworkTokensResponse> list(
            String paymentMethodId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        ListPaymentMethodNetworkTokensRequest request =
            ListPaymentMethodNetworkTokensRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListPaymentMethodNetworkTokensRequest, ListPaymentMethodNetworkTokensResponse> operation
              = new ListPaymentMethodNetworkTokens.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Provision network token
     * 
     * <p>Provision a network token for a payment method.
     * 
     * @return The async call builder
     */
    public CreatePaymentMethodNetworkTokenRequestBuilder create() {
        return new CreatePaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Provision network token
     * 
     * <p>Provision a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenCreate 
     * @return {@code CompletableFuture<CreatePaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentMethodNetworkTokenResponse> create(String paymentMethodId, NetworkTokenCreate networkTokenCreate) {
        return create(paymentMethodId, JsonNullable.undefined(), networkTokenCreate);
    }

    /**
     * Provision network token
     * 
     * <p>Provision a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param networkTokenCreate 
     * @return {@code CompletableFuture<CreatePaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentMethodNetworkTokenResponse> create(
            String paymentMethodId, JsonNullable<String> merchantAccountId,
            NetworkTokenCreate networkTokenCreate) {
        CreatePaymentMethodNetworkTokenRequest request =
            CreatePaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .networkTokenCreate(networkTokenCreate)
                .build();
        AsyncRequestOperation<CreatePaymentMethodNetworkTokenRequest, CreatePaymentMethodNetworkTokenResponse> operation
              = new CreatePaymentMethodNetworkToken.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Suspend network token
     * 
     * <p>Suspend a network token for a payment method.
     * 
     * @return The async call builder
     */
    public SuspendPaymentMethodNetworkTokenRequestBuilder suspend() {
        return new SuspendPaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Suspend network token
     * 
     * <p>Suspend a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @return {@code CompletableFuture<SuspendPaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<SuspendPaymentMethodNetworkTokenResponse> suspend(String paymentMethodId, String networkTokenId) {
        return suspend(paymentMethodId, networkTokenId, JsonNullable.undefined());
    }

    /**
     * Suspend network token
     * 
     * <p>Suspend a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @return {@code CompletableFuture<SuspendPaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<SuspendPaymentMethodNetworkTokenResponse> suspend(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId) {
        SuspendPaymentMethodNetworkTokenRequest request =
            SuspendPaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<SuspendPaymentMethodNetworkTokenRequest, SuspendPaymentMethodNetworkTokenResponse> operation
              = new SuspendPaymentMethodNetworkToken.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Resume network token
     * 
     * <p>Resume a suspended network token for a payment method.
     * 
     * @return The async call builder
     */
    public ResumePaymentMethodNetworkTokenRequestBuilder resume() {
        return new ResumePaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Resume network token
     * 
     * <p>Resume a suspended network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @return {@code CompletableFuture<ResumePaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<ResumePaymentMethodNetworkTokenResponse> resume(String paymentMethodId, String networkTokenId) {
        return resume(paymentMethodId, networkTokenId, JsonNullable.undefined());
    }

    /**
     * Resume network token
     * 
     * <p>Resume a suspended network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @return {@code CompletableFuture<ResumePaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<ResumePaymentMethodNetworkTokenResponse> resume(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId) {
        ResumePaymentMethodNetworkTokenRequest request =
            ResumePaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ResumePaymentMethodNetworkTokenRequest, ResumePaymentMethodNetworkTokenResponse> operation
              = new ResumePaymentMethodNetworkToken.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete network token
     * 
     * <p>Delete a network token for a payment method.
     * 
     * @return The async call builder
     */
    public DeletePaymentMethodNetworkTokenRequestBuilder delete() {
        return new DeletePaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete network token
     * 
     * <p>Delete a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @return {@code CompletableFuture<DeletePaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<DeletePaymentMethodNetworkTokenResponse> delete(String paymentMethodId, String networkTokenId) {
        return delete(paymentMethodId, networkTokenId, JsonNullable.undefined());
    }

    /**
     * Delete network token
     * 
     * <p>Delete a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @return {@code CompletableFuture<DeletePaymentMethodNetworkTokenResponse>} - The async response
     */
    public CompletableFuture<DeletePaymentMethodNetworkTokenResponse> delete(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId) {
        DeletePaymentMethodNetworkTokenRequest request =
            DeletePaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeletePaymentMethodNetworkTokenRequest, DeletePaymentMethodNetworkTokenResponse> operation
              = new DeletePaymentMethodNetworkToken.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
