/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.PaymentServiceCreate;
import com.gr4vy.sdk.models.components.PaymentServiceUpdate;
import com.gr4vy.sdk.models.components.VerifyCredentials;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceRequest;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceResponse;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceSessionRequest;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceSessionResponse;
import com.gr4vy.sdk.models.operations.DeletePaymentServiceRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.DeletePaymentServiceResponse;
import com.gr4vy.sdk.models.operations.GetPaymentServiceRequest;
import com.gr4vy.sdk.models.operations.GetPaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.GetPaymentServiceResponse;
import com.gr4vy.sdk.models.operations.ListPaymentServicesRequest;
import com.gr4vy.sdk.models.operations.ListPaymentServicesRequestBuilder;
import com.gr4vy.sdk.models.operations.ListPaymentServicesResponse;
import com.gr4vy.sdk.models.operations.UpdatePaymentServiceRequest;
import com.gr4vy.sdk.models.operations.UpdatePaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.UpdatePaymentServiceResponse;
import com.gr4vy.sdk.models.operations.VerifyPaymentServiceCredentialsRequest;
import com.gr4vy.sdk.models.operations.VerifyPaymentServiceCredentialsRequestBuilder;
import com.gr4vy.sdk.models.operations.VerifyPaymentServiceCredentialsResponse;
import com.gr4vy.sdk.operations.CreatePaymentService;
import com.gr4vy.sdk.operations.CreatePaymentServiceSession;
import com.gr4vy.sdk.operations.DeletePaymentService;
import com.gr4vy.sdk.operations.GetPaymentService;
import com.gr4vy.sdk.operations.ListPaymentServices;
import com.gr4vy.sdk.operations.UpdatePaymentService;
import com.gr4vy.sdk.operations.VerifyPaymentServiceCredentials;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentServices {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncPaymentServices asyncSDK;

    PaymentServices(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncPaymentServices(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncPaymentServices async() {
        return asyncSDK;
    }

    /**
     * List payment services
     * 
     * <p>List the configured payment services.
     * 
     * @return The call builder
     */
    public ListPaymentServicesRequestBuilder list() {
        return new ListPaymentServicesRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment services
     * 
     * <p>List the configured payment services.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentServicesResponse list(ListPaymentServicesRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List payment services
     * 
     * <p>List the configured payment services.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentServicesResponse list(ListPaymentServicesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListPaymentServicesRequest, ListPaymentServicesResponse> operation
              = new ListPaymentServices.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a configured payment service
     * 
     * <p>Updates the configuration of a payment service.
     * 
     * @return The call builder
     */
    public UpdatePaymentServiceRequestBuilder create() {
        return new UpdatePaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a configured payment service
     * 
     * <p>Updates the configuration of a payment service.
     * 
     * @param paymentServiceCreate Request body for activating a payment service
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePaymentServiceResponse create(PaymentServiceCreate paymentServiceCreate) throws Exception {
        return create(JsonNullable.undefined(), paymentServiceCreate);
    }

    /**
     * Update a configured payment service
     * 
     * <p>Updates the configuration of a payment service.
     * 
     * @param merchantAccountId 
     * @param paymentServiceCreate Request body for activating a payment service
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePaymentServiceResponse create(JsonNullable<String> merchantAccountId, PaymentServiceCreate paymentServiceCreate) throws Exception {
        UpdatePaymentServiceRequest request =
            UpdatePaymentServiceRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .paymentServiceCreate(paymentServiceCreate)
                .build();
        RequestOperation<UpdatePaymentServiceRequest, UpdatePaymentServiceResponse> operation
              = new UpdatePaymentService.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment service
     * 
     * <p>Get the details of a configured payment service.
     * 
     * @return The call builder
     */
    public GetPaymentServiceRequestBuilder get() {
        return new GetPaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment service
     * 
     * <p>Get the details of a configured payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentServiceResponse get(String paymentServiceId) throws Exception {
        return get(paymentServiceId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment service
     * 
     * <p>Get the details of a configured payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentServiceResponse get(
            String paymentServiceId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetPaymentServiceRequest request =
            GetPaymentServiceRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetPaymentServiceRequest, GetPaymentServiceResponse> operation
              = new GetPaymentService.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Configure a payment service
     * 
     * <p>Configures a new payment service for use by merchants.
     * 
     * @return The call builder
     */
    public CreatePaymentServiceRequestBuilder update() {
        return new CreatePaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Configure a payment service
     * 
     * <p>Configures a new payment service for use by merchants.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param paymentServiceUpdate Request body for updating a Payment Service
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentServiceResponse update(String paymentServiceId, PaymentServiceUpdate paymentServiceUpdate) throws Exception {
        return update(paymentServiceId, JsonNullable.undefined(), paymentServiceUpdate);
    }

    /**
     * Configure a payment service
     * 
     * <p>Configures a new payment service for use by merchants.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @param paymentServiceUpdate Request body for updating a Payment Service
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentServiceResponse update(
            String paymentServiceId, JsonNullable<String> merchantAccountId,
            PaymentServiceUpdate paymentServiceUpdate) throws Exception {
        CreatePaymentServiceRequest request =
            CreatePaymentServiceRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .paymentServiceUpdate(paymentServiceUpdate)
                .build();
        RequestOperation<CreatePaymentServiceRequest, CreatePaymentServiceResponse> operation
              = new CreatePaymentService.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a configured payment service
     * 
     * <p>Deletes all the configuration of a payment service.
     * 
     * @return The call builder
     */
    public DeletePaymentServiceRequestBuilder delete() {
        return new DeletePaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a configured payment service
     * 
     * <p>Deletes all the configuration of a payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentServiceResponse delete(String paymentServiceId) throws Exception {
        return delete(paymentServiceId, JsonNullable.undefined());
    }

    /**
     * Delete a configured payment service
     * 
     * <p>Deletes all the configuration of a payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentServiceResponse delete(String paymentServiceId, JsonNullable<String> merchantAccountId) throws Exception {
        DeletePaymentServiceRequest request =
            DeletePaymentServiceRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeletePaymentServiceRequest, DeletePaymentServiceResponse> operation
              = new DeletePaymentService.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Verify payment service credentials
     * 
     * <p>Verify the credentials of a configured payment service
     * 
     * @return The call builder
     */
    public VerifyPaymentServiceCredentialsRequestBuilder verify() {
        return new VerifyPaymentServiceCredentialsRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify payment service credentials
     * 
     * <p>Verify the credentials of a configured payment service
     * 
     * @param verifyCredentials 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyPaymentServiceCredentialsResponse verify(VerifyCredentials verifyCredentials) throws Exception {
        return verify(JsonNullable.undefined(), verifyCredentials);
    }

    /**
     * Verify payment service credentials
     * 
     * <p>Verify the credentials of a configured payment service
     * 
     * @param merchantAccountId 
     * @param verifyCredentials 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyPaymentServiceCredentialsResponse verify(JsonNullable<String> merchantAccountId, VerifyCredentials verifyCredentials) throws Exception {
        VerifyPaymentServiceCredentialsRequest request =
            VerifyPaymentServiceCredentialsRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .verifyCredentials(verifyCredentials)
                .build();
        RequestOperation<VerifyPaymentServiceCredentialsRequest, VerifyPaymentServiceCredentialsResponse> operation
              = new VerifyPaymentServiceCredentials.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a session for a payment service definition
     * 
     * <p>Creates a session for a payment service that supports sessions.
     * 
     * @return The call builder
     */
    public CreatePaymentServiceSessionRequestBuilder session() {
        return new CreatePaymentServiceSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a session for a payment service definition
     * 
     * <p>Creates a session for a payment service that supports sessions.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentServiceSessionResponse session(String paymentServiceId, Map<String, Object> requestBody) throws Exception {
        return session(paymentServiceId, JsonNullable.undefined(), requestBody);
    }

    /**
     * Create a session for a payment service definition
     * 
     * <p>Creates a session for a payment service that supports sessions.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentServiceSessionResponse session(
            String paymentServiceId, JsonNullable<String> merchantAccountId,
            Map<String, Object> requestBody) throws Exception {
        CreatePaymentServiceSessionRequest request =
            CreatePaymentServiceSessionRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreatePaymentServiceSessionRequest, CreatePaymentServiceSessionResponse> operation
              = new CreatePaymentServiceSession.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
