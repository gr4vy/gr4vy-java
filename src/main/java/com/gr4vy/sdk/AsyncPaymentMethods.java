/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.operations.Body;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodRequest;
import com.gr4vy.sdk.models.operations.GetPaymentMethodRequest;
import com.gr4vy.sdk.models.operations.ListPaymentMethodsRequest;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreatePaymentMethodResponse;
import com.gr4vy.sdk.models.operations.async.DeletePaymentMethodRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeletePaymentMethodResponse;
import com.gr4vy.sdk.models.operations.async.GetPaymentMethodRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetPaymentMethodResponse;
import com.gr4vy.sdk.models.operations.async.ListPaymentMethodsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListPaymentMethodsResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethod;
import com.gr4vy.sdk.operations.DeletePaymentMethod;
import com.gr4vy.sdk.operations.GetPaymentMethod;
import com.gr4vy.sdk.operations.ListPaymentMethods;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncPaymentMethods {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncPaymentServiceTokens paymentServiceTokens;
    private final AsyncNetworkTokens networkTokens;
    private final PaymentMethods syncSDK;

    AsyncPaymentMethods(PaymentMethods syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.paymentServiceTokens = new AsyncPaymentServiceTokens(syncSDK.paymentServiceTokens(), this.sdkConfiguration);
        this.networkTokens = new AsyncNetworkTokens(syncSDK.networkTokens(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncPaymentServiceTokens paymentServiceTokens() {
        return paymentServiceTokens;
    }

    public final AsyncNetworkTokens networkTokens() {
        return networkTokens;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public PaymentMethods sync() {
        return syncSDK;
    }


    /**
     * List all payment methods
     * 
     * <p>List all stored payment method.
     * 
     * @return The async call builder
     */
    public ListPaymentMethodsRequestBuilder list() {
        return new ListPaymentMethodsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment methods
     * 
     * <p>List all stored payment method.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListPaymentMethodsResponse&gt; - The async response
     */
    public CompletableFuture<ListPaymentMethodsResponse> list(ListPaymentMethodsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List all payment methods
     * 
     * <p>List all stored payment method.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListPaymentMethodsResponse&gt; - The async response
     */
    public CompletableFuture<ListPaymentMethodsResponse> list(ListPaymentMethodsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListPaymentMethodsRequest, ListPaymentMethodsResponse> operation
              = new ListPaymentMethods.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create payment method
     * 
     * <p>Store a new payment method.
     * 
     * @return The async call builder
     */
    public CreatePaymentMethodRequestBuilder create() {
        return new CreatePaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment method
     * 
     * <p>Store a new payment method.
     * 
     * @param requestBody 
     * @return CompletableFuture&lt;CreatePaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<CreatePaymentMethodResponse> create(Body requestBody) {
        return create(JsonNullable.undefined(), requestBody);
    }

    /**
     * Create payment method
     * 
     * <p>Store a new payment method.
     * 
     * @param merchantAccountId 
     * @param requestBody 
     * @return CompletableFuture&lt;CreatePaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<CreatePaymentMethodResponse> create(JsonNullable<String> merchantAccountId, Body requestBody) {
        CreatePaymentMethodRequest request =
            CreatePaymentMethodRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<CreatePaymentMethodRequest, CreatePaymentMethodResponse> operation
              = new CreatePaymentMethod.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get payment method
     * 
     * <p>Retrieve a payment method.
     * 
     * @return The async call builder
     */
    public GetPaymentMethodRequestBuilder get() {
        return new GetPaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment method
     * 
     * <p>Retrieve a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return CompletableFuture&lt;GetPaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<GetPaymentMethodResponse> get(String paymentMethodId) {
        return get(paymentMethodId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment method
     * 
     * <p>Retrieve a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetPaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<GetPaymentMethodResponse> get(
            String paymentMethodId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetPaymentMethodRequest request =
            GetPaymentMethodRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetPaymentMethodRequest, GetPaymentMethodResponse> operation
              = new GetPaymentMethod.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete payment method
     * 
     * <p>Delete a payment method.
     * 
     * @return The async call builder
     */
    public DeletePaymentMethodRequestBuilder delete() {
        return new DeletePaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete payment method
     * 
     * <p>Delete a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return CompletableFuture&lt;DeletePaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<DeletePaymentMethodResponse> delete(String paymentMethodId) {
        return delete(paymentMethodId, JsonNullable.undefined());
    }

    /**
     * Delete payment method
     * 
     * <p>Delete a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @return CompletableFuture&lt;DeletePaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<DeletePaymentMethodResponse> delete(String paymentMethodId, JsonNullable<String> merchantAccountId) {
        DeletePaymentMethodRequest request =
            DeletePaymentMethodRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeletePaymentMethodRequest, DeletePaymentMethodResponse> operation
              = new DeletePaymentMethod.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
