/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.TransactionRefundAllCreate;
import com.gr4vy.sdk.models.operations.CreateFullTransactionRefundRequest;
import com.gr4vy.sdk.models.operations.CreateFullTransactionRefundRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateFullTransactionRefundResponse;
import com.gr4vy.sdk.operations.CreateFullTransactionRefund;
import com.gr4vy.sdk.utils.Headers;
import java.lang.Exception;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class All {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncAll asyncSDK;

    All(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncAll(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncAll async() {
        return asyncSDK;
    }

    /**
     * Create batch transaction refund
     * 
     * <p>Create a refund for all instruments on a transaction.
     * 
     * @return The call builder
     */
    public CreateFullTransactionRefundRequestBuilder create() {
        return new CreateFullTransactionRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Create batch transaction refund
     * 
     * <p>Create a refund for all instruments on a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateFullTransactionRefundResponse create(String transactionId) throws Exception {
        return create(transactionId, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Create batch transaction refund
     * 
     * <p>Create a refund for all instruments on a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param transactionRefundAllCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateFullTransactionRefundResponse create(
            String transactionId, JsonNullable<String> merchantAccountId,
            JsonNullable<? extends TransactionRefundAllCreate> transactionRefundAllCreate) throws Exception {
        CreateFullTransactionRefundRequest request =
            CreateFullTransactionRefundRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .transactionRefundAllCreate(transactionRefundAllCreate)
                .build();
        RequestOperation<CreateFullTransactionRefundRequest, CreateFullTransactionRefundResponse> operation
              = new CreateFullTransactionRefund.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
