/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.operations.ListAllReportExecutionsRequest;
import com.gr4vy.sdk.models.operations.async.ListAllReportExecutionsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListAllReportExecutionsResponse;
import com.gr4vy.sdk.operations.ListAllReportExecutions;
import com.gr4vy.sdk.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncReportExecutions {
    private final SDKConfiguration sdkConfiguration;
    private final ReportExecutions syncSDK;

    AsyncReportExecutions(ReportExecutions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ReportExecutions sync() {
        return syncSDK;
    }


    /**
     * List executed reports
     * 
     * <p>List all executed reports that have been generated.
     * 
     * @return The async call builder
     */
    public ListAllReportExecutionsRequestBuilder list() {
        return new ListAllReportExecutionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List executed reports
     * 
     * <p>List all executed reports that have been generated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAllReportExecutionsResponse&gt; - The async response
     */
    public CompletableFuture<ListAllReportExecutionsResponse> list(ListAllReportExecutionsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List executed reports
     * 
     * <p>List all executed reports that have been generated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListAllReportExecutionsResponse&gt; - The async response
     */
    public CompletableFuture<ListAllReportExecutionsResponse> list(ListAllReportExecutionsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListAllReportExecutionsRequest, ListAllReportExecutionsResponse> operation
              = new ListAllReportExecutions.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
