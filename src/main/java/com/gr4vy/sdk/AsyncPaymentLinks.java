/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.PaymentLinkCreate;
import com.gr4vy.sdk.models.operations.AddPaymentLinkRequest;
import com.gr4vy.sdk.models.operations.ExpirePaymentLinkRequest;
import com.gr4vy.sdk.models.operations.GetPaymentLinkRequest;
import com.gr4vy.sdk.models.operations.ListPaymentLinksRequest;
import com.gr4vy.sdk.models.operations.async.AddPaymentLinkRequestBuilder;
import com.gr4vy.sdk.models.operations.async.AddPaymentLinkResponse;
import com.gr4vy.sdk.models.operations.async.ExpirePaymentLinkRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ExpirePaymentLinkResponse;
import com.gr4vy.sdk.models.operations.async.GetPaymentLinkRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetPaymentLinkResponse;
import com.gr4vy.sdk.models.operations.async.ListPaymentLinksRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListPaymentLinksResponse;
import com.gr4vy.sdk.operations.AddPaymentLink;
import com.gr4vy.sdk.operations.ExpirePaymentLink;
import com.gr4vy.sdk.operations.GetPaymentLink;
import com.gr4vy.sdk.operations.ListPaymentLinks;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncPaymentLinks {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final PaymentLinks syncSDK;

    AsyncPaymentLinks(PaymentLinks syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public PaymentLinks sync() {
        return syncSDK;
    }


    /**
     * Add a payment link
     * 
     * <p>Create a new payment link.
     * 
     * @return The async call builder
     */
    public AddPaymentLinkRequestBuilder create() {
        return new AddPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a payment link
     * 
     * <p>Create a new payment link.
     * 
     * @param paymentLinkCreate 
     * @return CompletableFuture&lt;AddPaymentLinkResponse&gt; - The async response
     */
    public CompletableFuture<AddPaymentLinkResponse> create(PaymentLinkCreate paymentLinkCreate) {
        return create(JsonNullable.undefined(), paymentLinkCreate);
    }

    /**
     * Add a payment link
     * 
     * <p>Create a new payment link.
     * 
     * @param merchantAccountId 
     * @param paymentLinkCreate 
     * @return CompletableFuture&lt;AddPaymentLinkResponse&gt; - The async response
     */
    public CompletableFuture<AddPaymentLinkResponse> create(JsonNullable<String> merchantAccountId, PaymentLinkCreate paymentLinkCreate) {
        AddPaymentLinkRequest request =
            AddPaymentLinkRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .paymentLinkCreate(paymentLinkCreate)
                .build();
        AsyncRequestOperation<AddPaymentLinkRequest, AddPaymentLinkResponse> operation
              = new AddPaymentLink.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all payment links
     * 
     * <p>List all created payment links.
     * 
     * @return The async call builder
     */
    public ListPaymentLinksRequestBuilder list() {
        return new ListPaymentLinksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment links
     * 
     * <p>List all created payment links.
     * 
     * @return CompletableFuture&lt;ListPaymentLinksResponse&gt; - The async response
     */
    public CompletableFuture<ListPaymentLinksResponse> listDirect() {
        return list(
                JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
                JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List all payment links
     * 
     * <p>List all created payment links.
     * 
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are returned.
     * @param buyerSearch Filters the results to only get the items for which some of the buyer data contains exactly the provided `buyer_search` values.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;ListPaymentLinksResponse&gt; - The async response
     */
    public CompletableFuture<ListPaymentLinksResponse> list(
            JsonNullable<String> cursor, Optional<Long> limit,
            JsonNullable<? extends List<String>> buyerSearch, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        ListPaymentLinksRequest request =
            ListPaymentLinksRequest
                .builder()
                .cursor(cursor)
                .limit(limit)
                .buyerSearch(buyerSearch)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListPaymentLinksRequest, ListPaymentLinksResponse> operation
              = new ListPaymentLinks.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Expire a payment link
     * 
     * <p>Expire an existing payment link.
     * 
     * @return The async call builder
     */
    public ExpirePaymentLinkRequestBuilder expire() {
        return new ExpirePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Expire a payment link
     * 
     * <p>Expire an existing payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @return CompletableFuture&lt;ExpirePaymentLinkResponse&gt; - The async response
     */
    public CompletableFuture<ExpirePaymentLinkResponse> expire(String paymentLinkId) {
        return expire(paymentLinkId, JsonNullable.undefined());
    }

    /**
     * Expire a payment link
     * 
     * <p>Expire an existing payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @param merchantAccountId 
     * @return CompletableFuture&lt;ExpirePaymentLinkResponse&gt; - The async response
     */
    public CompletableFuture<ExpirePaymentLinkResponse> expire(String paymentLinkId, JsonNullable<String> merchantAccountId) {
        ExpirePaymentLinkRequest request =
            ExpirePaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ExpirePaymentLinkRequest, ExpirePaymentLinkResponse> operation
              = new ExpirePaymentLink.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get payment link
     * 
     * <p>Fetch the details for a payment link.
     * 
     * @return The async call builder
     */
    public GetPaymentLinkRequestBuilder get() {
        return new GetPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment link
     * 
     * <p>Fetch the details for a payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @return CompletableFuture&lt;GetPaymentLinkResponse&gt; - The async response
     */
    public CompletableFuture<GetPaymentLinkResponse> get(String paymentLinkId) {
        return get(paymentLinkId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment link
     * 
     * <p>Fetch the details for a payment link.
     * 
     * @param paymentLinkId The unique identifier for the payment link.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetPaymentLinkResponse&gt; - The async response
     */
    public CompletableFuture<GetPaymentLinkResponse> get(
            String paymentLinkId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetPaymentLinkRequest request =
            GetPaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetPaymentLinkRequest, GetPaymentLinkResponse> operation
              = new GetPaymentLink.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
