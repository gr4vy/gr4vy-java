/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.DigitalWalletDomain;
import com.gr4vy.sdk.models.operations.RegisterDigitalWalletDomainRequest;
import com.gr4vy.sdk.models.operations.UnregisterDigitalWalletDomainRequest;
import com.gr4vy.sdk.models.operations.async.RegisterDigitalWalletDomainRequestBuilder;
import com.gr4vy.sdk.models.operations.async.RegisterDigitalWalletDomainResponse;
import com.gr4vy.sdk.models.operations.async.UnregisterDigitalWalletDomainRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UnregisterDigitalWalletDomainResponse;
import com.gr4vy.sdk.operations.RegisterDigitalWalletDomain;
import com.gr4vy.sdk.operations.UnregisterDigitalWalletDomain;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncDomains {
    private final SDKConfiguration sdkConfiguration;
    private final Domains syncSDK;

    AsyncDomains(Domains syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Domains sync() {
        return syncSDK;
    }


    /**
     * Register a digital wallet domain
     * 
     * <p>Register a digital wallet domain (Apple Pay only).
     * 
     * @return The async call builder
     */
    public RegisterDigitalWalletDomainRequestBuilder create() {
        return new RegisterDigitalWalletDomainRequestBuilder(sdkConfiguration);
    }

    /**
     * Register a digital wallet domain
     * 
     * <p>Register a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId The ID of the digital wallet to remove a domain for.
     * @param digitalWalletDomain 
     * @return CompletableFuture&lt;RegisterDigitalWalletDomainResponse&gt; - The async response
     */
    public CompletableFuture<RegisterDigitalWalletDomainResponse> create(String digitalWalletId, DigitalWalletDomain digitalWalletDomain) {
        return create(digitalWalletId, JsonNullable.undefined(), digitalWalletDomain);
    }

    /**
     * Register a digital wallet domain
     * 
     * <p>Register a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId The ID of the digital wallet to remove a domain for.
     * @param merchantAccountId 
     * @param digitalWalletDomain 
     * @return CompletableFuture&lt;RegisterDigitalWalletDomainResponse&gt; - The async response
     */
    public CompletableFuture<RegisterDigitalWalletDomainResponse> create(
            String digitalWalletId, JsonNullable<String> merchantAccountId,
            DigitalWalletDomain digitalWalletDomain) {
        RegisterDigitalWalletDomainRequest request =
            RegisterDigitalWalletDomainRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .digitalWalletDomain(digitalWalletDomain)
                .build();
        AsyncRequestOperation<RegisterDigitalWalletDomainRequest, RegisterDigitalWalletDomainResponse> operation
              = new RegisterDigitalWalletDomain.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a digital wallet domain
     * 
     * <p>Remove a digital wallet domain (Apple Pay only).
     * 
     * @return The async call builder
     */
    public UnregisterDigitalWalletDomainRequestBuilder delete() {
        return new UnregisterDigitalWalletDomainRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a digital wallet domain
     * 
     * <p>Remove a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId 
     * @param digitalWalletDomain 
     * @return CompletableFuture&lt;UnregisterDigitalWalletDomainResponse&gt; - The async response
     */
    public CompletableFuture<UnregisterDigitalWalletDomainResponse> delete(String digitalWalletId, DigitalWalletDomain digitalWalletDomain) {
        return delete(digitalWalletId, JsonNullable.undefined(), digitalWalletDomain);
    }

    /**
     * Remove a digital wallet domain
     * 
     * <p>Remove a digital wallet domain (Apple Pay only).
     * 
     * @param digitalWalletId 
     * @param merchantAccountId 
     * @param digitalWalletDomain 
     * @return CompletableFuture&lt;UnregisterDigitalWalletDomainResponse&gt; - The async response
     */
    public CompletableFuture<UnregisterDigitalWalletDomainResponse> delete(
            String digitalWalletId, JsonNullable<String> merchantAccountId,
            DigitalWalletDomain digitalWalletDomain) {
        UnregisterDigitalWalletDomainRequest request =
            UnregisterDigitalWalletDomainRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .digitalWalletDomain(digitalWalletDomain)
                .build();
        AsyncRequestOperation<UnregisterDigitalWalletDomainRequest, UnregisterDigitalWalletDomainResponse> operation
              = new UnregisterDigitalWalletDomain.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
