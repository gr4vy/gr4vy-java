/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.TransactionRefundCreate;
import com.gr4vy.sdk.models.operations.CreateTransactionRefundRequest;
import com.gr4vy.sdk.models.operations.CreateTransactionRefundRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateTransactionRefundResponse;
import com.gr4vy.sdk.models.operations.GetTransactionRefundRequest;
import com.gr4vy.sdk.models.operations.GetTransactionRefundRequestBuilder;
import com.gr4vy.sdk.models.operations.GetTransactionRefundResponse;
import com.gr4vy.sdk.models.operations.ListTransactionRefundsRequest;
import com.gr4vy.sdk.models.operations.ListTransactionRefundsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListTransactionRefundsResponse;
import com.gr4vy.sdk.operations.CreateTransactionRefundOperation;
import com.gr4vy.sdk.operations.GetTransactionRefundOperation;
import com.gr4vy.sdk.operations.ListTransactionRefundsOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionsRefunds {
    private final SDKConfiguration sdkConfiguration;
    private final All all;

    TransactionsRefunds(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.all = new All(this.sdkConfiguration);
    }

    public final All all() {
        return all;
    }

    /**
     * List transaction refunds
     * 
     * <p>List refunds for a transaction.
     * 
     * @return The call builder
     */
    public ListTransactionRefundsRequestBuilder list() {
        return new ListTransactionRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transaction refunds
     * 
     * <p>List refunds for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransactionRefundsResponse list(String transactionId) throws Exception {
        return list(transactionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List transaction refunds
     * 
     * <p>List refunds for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransactionRefundsResponse list(
            String transactionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        ListTransactionRefundsRequest request =
            ListTransactionRefundsRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ListTransactionRefundsRequest, ListTransactionRefundsResponse> operation
              = new ListTransactionRefundsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create transaction refund
     * 
     * <p>Create a refund for a transaction.
     * 
     * @return The call builder
     */
    public CreateTransactionRefundRequestBuilder create() {
        return new CreateTransactionRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Create transaction refund
     * 
     * <p>Create a refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param transactionRefundCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionRefundResponse create(String transactionId, TransactionRefundCreate transactionRefundCreate) throws Exception {
        return create(transactionId, JsonNullable.undefined(), transactionRefundCreate);
    }

    /**
     * Create transaction refund
     * 
     * <p>Create a refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param transactionRefundCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionRefundResponse create(
            String transactionId, JsonNullable<String> merchantAccountId,
            TransactionRefundCreate transactionRefundCreate) throws Exception {
        CreateTransactionRefundRequest request =
            CreateTransactionRefundRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .transactionRefundCreate(transactionRefundCreate)
                .build();
        RequestOperation<CreateTransactionRefundRequest, CreateTransactionRefundResponse> operation
              = new CreateTransactionRefundOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get transaction refund
     * 
     * <p>Fetch refund for a transaction.
     * 
     * @return The call builder
     */
    public GetTransactionRefundRequestBuilder get() {
        return new GetTransactionRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction refund
     * 
     * <p>Fetch refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param refundId The ID of the refund
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionRefundResponse get(String transactionId, String refundId) throws Exception {
        return get(transactionId, refundId, JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Get transaction refund
     * 
     * <p>Fetch refund for a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param refundId The ID of the refund
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionRefundResponse get(
            String transactionId, String refundId,
            JsonNullable<String> merchantAccountId, Optional<Options> options) throws Exception {
        GetTransactionRefundRequest request =
            GetTransactionRefundRequest
                .builder()
                .transactionId(transactionId)
                .refundId(refundId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetTransactionRefundRequest, GetTransactionRefundResponse> operation
              = new GetTransactionRefundOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
