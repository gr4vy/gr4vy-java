/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.TransactionCaptureCreate;
import com.gr4vy.sdk.models.components.TransactionCreate;
import com.gr4vy.sdk.models.components.TransactionUpdate;
import com.gr4vy.sdk.models.operations.CancelTransactionRequest;
import com.gr4vy.sdk.models.operations.CancelTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.CancelTransactionResponse;
import com.gr4vy.sdk.models.operations.CaptureTransactionRequest;
import com.gr4vy.sdk.models.operations.CaptureTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.CaptureTransactionResponse;
import com.gr4vy.sdk.models.operations.CreateTransactionRequest;
import com.gr4vy.sdk.models.operations.CreateTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateTransactionResponse;
import com.gr4vy.sdk.models.operations.GetTransactionRequest;
import com.gr4vy.sdk.models.operations.GetTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.GetTransactionResponse;
import com.gr4vy.sdk.models.operations.ListTransactionsRequest;
import com.gr4vy.sdk.models.operations.ListTransactionsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListTransactionsResponse;
import com.gr4vy.sdk.models.operations.SyncTransactionRequest;
import com.gr4vy.sdk.models.operations.SyncTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.SyncTransactionResponse;
import com.gr4vy.sdk.models.operations.UpdateTransactionRequest;
import com.gr4vy.sdk.models.operations.UpdateTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.UpdateTransactionResponse;
import com.gr4vy.sdk.models.operations.VoidTransactionRequest;
import com.gr4vy.sdk.models.operations.VoidTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.VoidTransactionResponse;
import com.gr4vy.sdk.operations.CancelTransaction;
import com.gr4vy.sdk.operations.CaptureTransaction;
import com.gr4vy.sdk.operations.CreateTransaction;
import com.gr4vy.sdk.operations.GetTransaction;
import com.gr4vy.sdk.operations.ListTransactions;
import com.gr4vy.sdk.operations.SyncTransaction;
import com.gr4vy.sdk.operations.UpdateTransaction;
import com.gr4vy.sdk.operations.VoidTransaction;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Transactions {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncTransactions asyncSDK;
    private final TransactionsRefunds refunds;
    private final Events events;
    private final Settlements settlements;

    Transactions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.refunds = new TransactionsRefunds(this.sdkConfiguration);
        this.events = new Events(this.sdkConfiguration);
        this.settlements = new Settlements(this.sdkConfiguration);
        this.asyncSDK = new AsyncTransactions(this, sdkConfiguration);
    }

    public final TransactionsRefunds refunds() {
        return refunds;
    }

    public final Events events() {
        return events;
    }

    public final Settlements settlements() {
        return settlements;
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncTransactions async() {
        return asyncSDK;
    }

    /**
     * List transactions
     * 
     * <p>Returns a paginated list of transactions for the merchant account, sorted by most recently updated. You can filter, sort, and search transactions using query parameters.
     * 
     * @return The call builder
     */
    public ListTransactionsRequestBuilder list() {
        return new ListTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transactions
     * 
     * <p>Returns a paginated list of transactions for the merchant account, sorted by most recently updated. You can filter, sort, and search transactions using query parameters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransactionsResponse list(ListTransactionsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List transactions
     * 
     * <p>Returns a paginated list of transactions for the merchant account, sorted by most recently updated. You can filter, sort, and search transactions using query parameters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransactionsResponse list(ListTransactionsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListTransactionsRequest, ListTransactionsResponse> operation
              = new ListTransactions.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create transaction
     * 
     * <p>Create a new transaction using a supported payment method. If additional buyer authorization is required, an approval URL will be returned. Duplicated gift card numbers are not supported.
     * 
     * @return The call builder
     */
    public CreateTransactionRequestBuilder create() {
        return new CreateTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create transaction
     * 
     * <p>Create a new transaction using a supported payment method. If additional buyer authorization is required, an approval URL will be returned. Duplicated gift card numbers are not supported.
     * 
     * @param transactionCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionResponse create(TransactionCreate transactionCreate) throws Exception {
        return create(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            transactionCreate);
    }

    /**
     * Create transaction
     * 
     * <p>Create a new transaction using a supported payment method. If additional buyer authorization is required, an approval URL will be returned. Duplicated gift card numbers are not supported.
     * 
     * @param merchantAccountId 
     * @param idempotencyKey A unique key that identifies this request. Providing this header will make this an idempotent request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid collisions.
     * @param xForwardedFor The IP address to forward from the customer. Use this when calling
     *         our API from the server side to ensure the customer's address is
     *         passed to downstream services, rather than your server IP.
     * @param transactionCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionResponse create(
            JsonNullable<String> merchantAccountId, JsonNullable<String> idempotencyKey,
            Optional<String> xForwardedFor, TransactionCreate transactionCreate) throws Exception {
        CreateTransactionRequest request =
            CreateTransactionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .idempotencyKey(idempotencyKey)
                .xForwardedFor(xForwardedFor)
                .transactionCreate(transactionCreate)
                .build();
        RequestOperation<CreateTransactionRequest, CreateTransactionResponse> operation
              = new CreateTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get transaction
     * 
     * <p>Retrieve the details of a transaction by its unique identifier.
     * 
     * @return The call builder
     */
    public GetTransactionRequestBuilder get() {
        return new GetTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction
     * 
     * <p>Retrieve the details of a transaction by its unique identifier.
     * 
     * @param transactionId The ID of the transaction
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionResponse get(String transactionId) throws Exception {
        return get(transactionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get transaction
     * 
     * <p>Retrieve the details of a transaction by its unique identifier.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionResponse get(
            String transactionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetTransactionRequest request =
            GetTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetTransactionRequest, GetTransactionResponse> operation
              = new GetTransaction.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Manually update a transaction
     * 
     * <p>Manually updates a transaction.
     * 
     * @return The call builder
     */
    public UpdateTransactionRequestBuilder update() {
        return new UpdateTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Manually update a transaction
     * 
     * <p>Manually updates a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param transactionUpdate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTransactionResponse update(String transactionId, TransactionUpdate transactionUpdate) throws Exception {
        return update(transactionId, JsonNullable.undefined(), transactionUpdate);
    }

    /**
     * Manually update a transaction
     * 
     * <p>Manually updates a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param transactionUpdate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTransactionResponse update(
            String transactionId, JsonNullable<String> merchantAccountId,
            TransactionUpdate transactionUpdate) throws Exception {
        UpdateTransactionRequest request =
            UpdateTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .transactionUpdate(transactionUpdate)
                .build();
        RequestOperation<UpdateTransactionRequest, UpdateTransactionResponse> operation
              = new UpdateTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Capture transaction
     * 
     * <p>Captures a previously authorized transaction. You can capture the full or a partial amount, as long as it does not exceed the authorized amount (unless over-capture is enabled).
     * 
     * @return The call builder
     */
    public CaptureTransactionRequestBuilder capture() {
        return new CaptureTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Capture transaction
     * 
     * <p>Captures a previously authorized transaction. You can capture the full or a partial amount, as long as it does not exceed the authorized amount (unless over-capture is enabled).
     * 
     * @param transactionId The ID of the transaction
     * @param transactionCaptureCreate Request body for capturing an authorized transaction.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CaptureTransactionResponse capture(String transactionId, TransactionCaptureCreate transactionCaptureCreate) throws Exception {
        return capture(transactionId, JsonNullable.undefined(), JsonNullable.undefined(),
            transactionCaptureCreate);
    }

    /**
     * Capture transaction
     * 
     * <p>Captures a previously authorized transaction. You can capture the full or a partial amount, as long as it does not exceed the authorized amount (unless over-capture is enabled).
     * 
     * @param transactionId The ID of the transaction
     * @param prefer The preferred resource type in the response.
     * @param merchantAccountId 
     * @param transactionCaptureCreate Request body for capturing an authorized transaction.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CaptureTransactionResponse capture(
            String transactionId, JsonNullable<? extends List<String>> prefer,
            JsonNullable<String> merchantAccountId, TransactionCaptureCreate transactionCaptureCreate) throws Exception {
        CaptureTransactionRequest request =
            CaptureTransactionRequest
                .builder()
                .transactionId(transactionId)
                .prefer(prefer)
                .merchantAccountId(merchantAccountId)
                .transactionCaptureCreate(transactionCaptureCreate)
                .build();
        RequestOperation<CaptureTransactionRequest, CaptureTransactionResponse> operation
              = new CaptureTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Void transaction
     * 
     * <p>Voids a previously authorized transaction. If the transaction was not yet successfully authorized, or was already captured, the void will not be processed. This operation releases the hold on the buyer's funds. Captured transactions can be refunded instead.
     * 
     * @return The call builder
     */
    public VoidTransactionRequestBuilder void_() {
        return new VoidTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Void transaction
     * 
     * <p>Voids a previously authorized transaction. If the transaction was not yet successfully authorized, or was already captured, the void will not be processed. This operation releases the hold on the buyer's funds. Captured transactions can be refunded instead.
     * 
     * @param transactionId The ID of the transaction
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VoidTransactionResponse void_(String transactionId) throws Exception {
        return void_(transactionId, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Void transaction
     * 
     * <p>Voids a previously authorized transaction. If the transaction was not yet successfully authorized, or was already captured, the void will not be processed. This operation releases the hold on the buyer's funds. Captured transactions can be refunded instead.
     * 
     * @param transactionId The ID of the transaction
     * @param prefer The preferred resource type in the response.
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VoidTransactionResponse void_(
            String transactionId, JsonNullable<? extends List<String>> prefer,
            JsonNullable<String> merchantAccountId) throws Exception {
        VoidTransactionRequest request =
            VoidTransactionRequest
                .builder()
                .transactionId(transactionId)
                .prefer(prefer)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<VoidTransactionRequest, VoidTransactionResponse> operation
              = new VoidTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel transaction
     * 
     * <p>Cancels a pending transaction. If the transaction was successfully authorized, or was already captured, the cancel will not be processed.
     * 
     * @return The call builder
     */
    public CancelTransactionRequestBuilder cancel() {
        return new CancelTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel transaction
     * 
     * <p>Cancels a pending transaction. If the transaction was successfully authorized, or was already captured, the cancel will not be processed.
     * 
     * @param transactionId The ID of the transaction
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelTransactionResponse cancel(String transactionId) throws Exception {
        return cancel(transactionId, JsonNullable.undefined());
    }

    /**
     * Cancel transaction
     * 
     * <p>Cancels a pending transaction. If the transaction was successfully authorized, or was already captured, the cancel will not be processed.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelTransactionResponse cancel(String transactionId, JsonNullable<String> merchantAccountId) throws Exception {
        CancelTransactionRequest request =
            CancelTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<CancelTransactionRequest, CancelTransactionResponse> operation
              = new CancelTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Sync transaction
     * 
     * <p>Synchronizes the status of a transaction with the underlying payment service provider. This is useful for transactions in a pending state to check if they've been completed or failed. Only available for some payment service providers.
     * 
     * @return The call builder
     */
    public SyncTransactionRequestBuilder sync() {
        return new SyncTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Sync transaction
     * 
     * <p>Synchronizes the status of a transaction with the underlying payment service provider. This is useful for transactions in a pending state to check if they've been completed or failed. Only available for some payment service providers.
     * 
     * @param transactionId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SyncTransactionResponse sync(String transactionId) throws Exception {
        return sync(transactionId, JsonNullable.undefined());
    }

    /**
     * Sync transaction
     * 
     * <p>Synchronizes the status of a transaction with the underlying payment service provider. This is useful for transactions in a pending state to check if they've been completed or failed. Only available for some payment service providers.
     * 
     * @param transactionId 
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SyncTransactionResponse sync(String transactionId, JsonNullable<String> merchantAccountId) throws Exception {
        SyncTransactionRequest request =
            SyncTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<SyncTransactionRequest, SyncTransactionResponse> operation
              = new SyncTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
