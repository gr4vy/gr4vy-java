/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.ReportCreate;
import com.gr4vy.sdk.models.components.ReportUpdate;
import com.gr4vy.sdk.models.operations.AddReportRequest;
import com.gr4vy.sdk.models.operations.GetReportRequest;
import com.gr4vy.sdk.models.operations.ListReportsRequest;
import com.gr4vy.sdk.models.operations.UpdateReportRequest;
import com.gr4vy.sdk.models.operations.async.AddReportRequestBuilder;
import com.gr4vy.sdk.models.operations.async.AddReportResponse;
import com.gr4vy.sdk.models.operations.async.GetReportRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetReportResponse;
import com.gr4vy.sdk.models.operations.async.ListReportsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListReportsResponse;
import com.gr4vy.sdk.models.operations.async.UpdateReportRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UpdateReportResponse;
import com.gr4vy.sdk.operations.AddReport;
import com.gr4vy.sdk.operations.GetReport;
import com.gr4vy.sdk.operations.ListReports;
import com.gr4vy.sdk.operations.UpdateReport;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncReports {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncExecutions executions;
    private final Reports syncSDK;

    AsyncReports(Reports syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.executions = new AsyncExecutions(syncSDK.executions(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncExecutions executions() {
        return executions;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Reports sync() {
        return syncSDK;
    }


    /**
     * List configured reports
     * 
     * <p>List all configured reports that can be generated.
     * 
     * @return The async call builder
     */
    public ListReportsRequestBuilder list() {
        return new ListReportsRequestBuilder(sdkConfiguration);
    }

    /**
     * List configured reports
     * 
     * <p>List all configured reports that can be generated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListReportsResponse&gt; - The async response
     */
    public CompletableFuture<ListReportsResponse> list(ListReportsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List configured reports
     * 
     * <p>List all configured reports that can be generated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListReportsResponse&gt; - The async response
     */
    public CompletableFuture<ListReportsResponse> list(ListReportsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListReportsRequest, ListReportsResponse> operation
              = new ListReports.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add a report
     * 
     * <p>Create a new report.
     * 
     * @return The async call builder
     */
    public AddReportRequestBuilder create() {
        return new AddReportRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a report
     * 
     * <p>Create a new report.
     * 
     * @param reportCreate 
     * @return CompletableFuture&lt;AddReportResponse&gt; - The async response
     */
    public CompletableFuture<AddReportResponse> create(ReportCreate reportCreate) {
        return create(JsonNullable.undefined(), reportCreate);
    }

    /**
     * Add a report
     * 
     * <p>Create a new report.
     * 
     * @param merchantAccountId 
     * @param reportCreate 
     * @return CompletableFuture&lt;AddReportResponse&gt; - The async response
     */
    public CompletableFuture<AddReportResponse> create(JsonNullable<String> merchantAccountId, ReportCreate reportCreate) {
        AddReportRequest request =
            AddReportRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .reportCreate(reportCreate)
                .build();
        AsyncRequestOperation<AddReportRequest, AddReportResponse> operation
              = new AddReport.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get a report
     * 
     * <p>Fetches a report by its ID.
     * 
     * @return The async call builder
     */
    public GetReportRequestBuilder get() {
        return new GetReportRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a report
     * 
     * <p>Fetches a report by its ID.
     * 
     * @param reportId The ID of the report to retrieve details for.
     * @return CompletableFuture&lt;GetReportResponse&gt; - The async response
     */
    public CompletableFuture<GetReportResponse> get(String reportId) {
        return get(reportId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get a report
     * 
     * <p>Fetches a report by its ID.
     * 
     * @param reportId The ID of the report to retrieve details for.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetReportResponse&gt; - The async response
     */
    public CompletableFuture<GetReportResponse> get(
            String reportId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetReportRequest request =
            GetReportRequest
                .builder()
                .reportId(reportId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetReportRequest, GetReportResponse> operation
              = new GetReport.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a report
     * 
     * <p>Updates the configuration of a report.
     * 
     * @return The async call builder
     */
    public UpdateReportRequestBuilder put() {
        return new UpdateReportRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a report
     * 
     * <p>Updates the configuration of a report.
     * 
     * @param reportId The ID of the report to edit.
     * @param reportUpdate 
     * @return CompletableFuture&lt;UpdateReportResponse&gt; - The async response
     */
    public CompletableFuture<UpdateReportResponse> put(String reportId, ReportUpdate reportUpdate) {
        return put(reportId, JsonNullable.undefined(), reportUpdate);
    }

    /**
     * Update a report
     * 
     * <p>Updates the configuration of a report.
     * 
     * @param reportId The ID of the report to edit.
     * @param merchantAccountId 
     * @param reportUpdate 
     * @return CompletableFuture&lt;UpdateReportResponse&gt; - The async response
     */
    public CompletableFuture<UpdateReportResponse> put(
            String reportId, JsonNullable<String> merchantAccountId,
            ReportUpdate reportUpdate) {
        UpdateReportRequest request =
            UpdateReportRequest
                .builder()
                .reportId(reportId)
                .merchantAccountId(merchantAccountId)
                .reportUpdate(reportUpdate)
                .build();
        AsyncRequestOperation<UpdateReportRequest, UpdateReportResponse> operation
              = new UpdateReport.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
