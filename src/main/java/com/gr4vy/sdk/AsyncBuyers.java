/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.BuyerCreate;
import com.gr4vy.sdk.models.components.BuyerUpdate;
import com.gr4vy.sdk.models.operations.AddBuyerRequest;
import com.gr4vy.sdk.models.operations.DeleteBuyerRequest;
import com.gr4vy.sdk.models.operations.GetBuyerRequest;
import com.gr4vy.sdk.models.operations.ListBuyersRequest;
import com.gr4vy.sdk.models.operations.UpdateBuyerRequest;
import com.gr4vy.sdk.models.operations.async.AddBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.async.AddBuyerResponse;
import com.gr4vy.sdk.models.operations.async.DeleteBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeleteBuyerResponse;
import com.gr4vy.sdk.models.operations.async.GetBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetBuyerResponse;
import com.gr4vy.sdk.models.operations.async.ListBuyersRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListBuyersResponse;
import com.gr4vy.sdk.models.operations.async.UpdateBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UpdateBuyerResponse;
import com.gr4vy.sdk.operations.AddBuyer;
import com.gr4vy.sdk.operations.DeleteBuyer;
import com.gr4vy.sdk.operations.GetBuyer;
import com.gr4vy.sdk.operations.ListBuyers;
import com.gr4vy.sdk.operations.UpdateBuyer;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncBuyers {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncBuyersPaymentMethods paymentMethods;
    private final AsyncBuyersGiftCards giftCards;
    private final AsyncShippingDetails shippingDetails;
    private final Buyers syncSDK;

    AsyncBuyers(Buyers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.paymentMethods = new AsyncBuyersPaymentMethods(syncSDK.paymentMethods(), this.sdkConfiguration);
        this.giftCards = new AsyncBuyersGiftCards(syncSDK.giftCards(), this.sdkConfiguration);
        this.shippingDetails = new AsyncShippingDetails(syncSDK.shippingDetails(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncBuyersPaymentMethods paymentMethods() {
        return paymentMethods;
    }

    public final AsyncBuyersGiftCards giftCards() {
        return giftCards;
    }

    public final AsyncShippingDetails shippingDetails() {
        return shippingDetails;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Buyers sync() {
        return syncSDK;
    }


    /**
     * List all buyers
     * 
     * <p>List all buyers or search for a specific buyer.
     * 
     * @return The async call builder
     */
    public ListBuyersRequestBuilder list() {
        return new ListBuyersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all buyers
     * 
     * <p>List all buyers or search for a specific buyer.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListBuyersResponse&gt; - The async response
     */
    public CompletableFuture<ListBuyersResponse> list(ListBuyersRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List all buyers
     * 
     * <p>List all buyers or search for a specific buyer.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListBuyersResponse&gt; - The async response
     */
    public CompletableFuture<ListBuyersResponse> list(ListBuyersRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListBuyersRequest, ListBuyersResponse> operation
              = new ListBuyers.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add a buyer
     * 
     * <p>Create a new buyer record.
     * 
     * @return The async call builder
     */
    public AddBuyerRequestBuilder create() {
        return new AddBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a buyer
     * 
     * <p>Create a new buyer record.
     * 
     * @param buyerCreate Request body for creating a new buyer
     * @return CompletableFuture&lt;AddBuyerResponse&gt; - The async response
     */
    public CompletableFuture<AddBuyerResponse> create(BuyerCreate buyerCreate) {
        return create(JsonNullable.undefined(), buyerCreate);
    }

    /**
     * Add a buyer
     * 
     * <p>Create a new buyer record.
     * 
     * @param merchantAccountId 
     * @param buyerCreate Request body for creating a new buyer
     * @return CompletableFuture&lt;AddBuyerResponse&gt; - The async response
     */
    public CompletableFuture<AddBuyerResponse> create(JsonNullable<String> merchantAccountId, BuyerCreate buyerCreate) {
        AddBuyerRequest request =
            AddBuyerRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .buyerCreate(buyerCreate)
                .build();
        AsyncRequestOperation<AddBuyerRequest, AddBuyerResponse> operation
              = new AddBuyer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get a buyer
     * 
     * <p>Fetches a buyer by its ID.
     * 
     * @return The async call builder
     */
    public GetBuyerRequestBuilder get() {
        return new GetBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a buyer
     * 
     * <p>Fetches a buyer by its ID.
     * 
     * @param buyerId The ID of the buyer to retrieve.
     * @return CompletableFuture&lt;GetBuyerResponse&gt; - The async response
     */
    public CompletableFuture<GetBuyerResponse> get(String buyerId) {
        return get(buyerId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get a buyer
     * 
     * <p>Fetches a buyer by its ID.
     * 
     * @param buyerId The ID of the buyer to retrieve.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetBuyerResponse&gt; - The async response
     */
    public CompletableFuture<GetBuyerResponse> get(
            String buyerId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetBuyerRequest request =
            GetBuyerRequest
                .builder()
                .buyerId(buyerId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetBuyerRequest, GetBuyerResponse> operation
              = new GetBuyer.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a buyer
     * 
     * <p>Updates a buyer record.
     * 
     * @return The async call builder
     */
    public UpdateBuyerRequestBuilder update() {
        return new UpdateBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a buyer
     * 
     * <p>Updates a buyer record.
     * 
     * @param buyerId The ID of the buyer to edit.
     * @param buyerUpdate Request body for updating an existing buyer
     * @return CompletableFuture&lt;UpdateBuyerResponse&gt; - The async response
     */
    public CompletableFuture<UpdateBuyerResponse> update(String buyerId, BuyerUpdate buyerUpdate) {
        return update(buyerId, JsonNullable.undefined(), buyerUpdate);
    }

    /**
     * Update a buyer
     * 
     * <p>Updates a buyer record.
     * 
     * @param buyerId The ID of the buyer to edit.
     * @param merchantAccountId 
     * @param buyerUpdate Request body for updating an existing buyer
     * @return CompletableFuture&lt;UpdateBuyerResponse&gt; - The async response
     */
    public CompletableFuture<UpdateBuyerResponse> update(
            String buyerId, JsonNullable<String> merchantAccountId,
            BuyerUpdate buyerUpdate) {
        UpdateBuyerRequest request =
            UpdateBuyerRequest
                .builder()
                .buyerId(buyerId)
                .merchantAccountId(merchantAccountId)
                .buyerUpdate(buyerUpdate)
                .build();
        AsyncRequestOperation<UpdateBuyerRequest, UpdateBuyerResponse> operation
              = new UpdateBuyer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a buyer
     * 
     * <p>Permanently removes a buyer record.
     * 
     * @return The async call builder
     */
    public DeleteBuyerRequestBuilder delete() {
        return new DeleteBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a buyer
     * 
     * <p>Permanently removes a buyer record.
     * 
     * @param buyerId The ID of the buyer to delete.
     * @return CompletableFuture&lt;DeleteBuyerResponse&gt; - The async response
     */
    public CompletableFuture<DeleteBuyerResponse> delete(String buyerId) {
        return delete(buyerId, JsonNullable.undefined());
    }

    /**
     * Delete a buyer
     * 
     * <p>Permanently removes a buyer record.
     * 
     * @param buyerId The ID of the buyer to delete.
     * @param merchantAccountId 
     * @return CompletableFuture&lt;DeleteBuyerResponse&gt; - The async response
     */
    public CompletableFuture<DeleteBuyerResponse> delete(String buyerId, JsonNullable<String> merchantAccountId) {
        DeleteBuyerRequest request =
            DeleteBuyerRequest
                .builder()
                .buyerId(buyerId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeleteBuyerRequest, DeleteBuyerResponse> operation
              = new DeleteBuyer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
