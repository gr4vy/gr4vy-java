/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.ApplePaySessionRequest;
import com.gr4vy.sdk.models.components.ClickToPaySessionRequest;
import com.gr4vy.sdk.models.components.GooglePaySessionRequest;
import com.gr4vy.sdk.models.operations.CreateApplePayDigitalWalletSessionRequest;
import com.gr4vy.sdk.models.operations.CreateGooglePayDigitalWalletSessionRequest;
import com.gr4vy.sdk.models.operations.async.CreateApplePayDigitalWalletSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateApplePayDigitalWalletSessionResponse;
import com.gr4vy.sdk.models.operations.async.CreateClickToPayDigitalWalletSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateClickToPayDigitalWalletSessionResponse;
import com.gr4vy.sdk.models.operations.async.CreateGooglePayDigitalWalletSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateGooglePayDigitalWalletSessionResponse;
import com.gr4vy.sdk.operations.CreateApplePayDigitalWalletSession;
import com.gr4vy.sdk.operations.CreateClickToPayDigitalWalletSession;
import com.gr4vy.sdk.operations.CreateGooglePayDigitalWalletSession;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncSessions {
    private final SDKConfiguration sdkConfiguration;
    private final Sessions syncSDK;

    AsyncSessions(Sessions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Sessions sync() {
        return syncSDK;
    }


    /**
     * Create a Google Pay session
     * 
     * <p>Create a session for use with Google Pay.
     * 
     * @return The async call builder
     */
    public CreateGooglePayDigitalWalletSessionRequestBuilder googlePay() {
        return new CreateGooglePayDigitalWalletSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Google Pay session
     * 
     * <p>Create a session for use with Google Pay.
     * 
     * @param googlePaySessionRequest 
     * @return CompletableFuture&lt;CreateGooglePayDigitalWalletSessionResponse&gt; - The async response
     */
    public CompletableFuture<CreateGooglePayDigitalWalletSessionResponse> googlePay(GooglePaySessionRequest googlePaySessionRequest) {
        return googlePay(JsonNullable.undefined(), googlePaySessionRequest);
    }

    /**
     * Create a Google Pay session
     * 
     * <p>Create a session for use with Google Pay.
     * 
     * @param merchantAccountId 
     * @param googlePaySessionRequest 
     * @return CompletableFuture&lt;CreateGooglePayDigitalWalletSessionResponse&gt; - The async response
     */
    public CompletableFuture<CreateGooglePayDigitalWalletSessionResponse> googlePay(JsonNullable<String> merchantAccountId, GooglePaySessionRequest googlePaySessionRequest) {
        CreateGooglePayDigitalWalletSessionRequest request =
            CreateGooglePayDigitalWalletSessionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .googlePaySessionRequest(googlePaySessionRequest)
                .build();
        AsyncRequestOperation<CreateGooglePayDigitalWalletSessionRequest, CreateGooglePayDigitalWalletSessionResponse> operation
              = new CreateGooglePayDigitalWalletSession.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a Apple Pay session
     * 
     * <p>Create a session for use with Apple Pay.
     * 
     * @return The async call builder
     */
    public CreateApplePayDigitalWalletSessionRequestBuilder applePay() {
        return new CreateApplePayDigitalWalletSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Apple Pay session
     * 
     * <p>Create a session for use with Apple Pay.
     * 
     * @param applePaySessionRequest 
     * @return CompletableFuture&lt;CreateApplePayDigitalWalletSessionResponse&gt; - The async response
     */
    public CompletableFuture<CreateApplePayDigitalWalletSessionResponse> applePay(ApplePaySessionRequest applePaySessionRequest) {
        return applePay(JsonNullable.undefined(), applePaySessionRequest);
    }

    /**
     * Create a Apple Pay session
     * 
     * <p>Create a session for use with Apple Pay.
     * 
     * @param merchantAccountId 
     * @param applePaySessionRequest 
     * @return CompletableFuture&lt;CreateApplePayDigitalWalletSessionResponse&gt; - The async response
     */
    public CompletableFuture<CreateApplePayDigitalWalletSessionResponse> applePay(JsonNullable<String> merchantAccountId, ApplePaySessionRequest applePaySessionRequest) {
        CreateApplePayDigitalWalletSessionRequest request =
            CreateApplePayDigitalWalletSessionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .applePaySessionRequest(applePaySessionRequest)
                .build();
        AsyncRequestOperation<CreateApplePayDigitalWalletSessionRequest, CreateApplePayDigitalWalletSessionResponse> operation
              = new CreateApplePayDigitalWalletSession.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a Click to Pay session
     * 
     * <p>Create a session for use with Click to Pay.
     * 
     * @return The async call builder
     */
    public CreateClickToPayDigitalWalletSessionRequestBuilder clickToPay() {
        return new CreateClickToPayDigitalWalletSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Click to Pay session
     * 
     * <p>Create a session for use with Click to Pay.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateClickToPayDigitalWalletSessionResponse&gt; - The async response
     */
    public CompletableFuture<CreateClickToPayDigitalWalletSessionResponse> clickToPay(ClickToPaySessionRequest request) {
        AsyncRequestOperation<ClickToPaySessionRequest, CreateClickToPayDigitalWalletSessionResponse> operation
              = new CreateClickToPayDigitalWalletSession.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
