/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.NetworkTokenCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.models.operations.ListPaymentMethodNetworkTokensRequest;
import com.gr4vy.sdk.models.operations.ListPaymentMethodNetworkTokensRequestBuilder;
import com.gr4vy.sdk.models.operations.ListPaymentMethodNetworkTokensResponse;
import com.gr4vy.sdk.models.operations.ResumePaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.ResumePaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.ResumePaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.models.operations.SuspendPaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.models.operations.SuspendPaymentMethodNetworkTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.SuspendPaymentMethodNetworkTokenResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethodNetworkTokenOperation;
import com.gr4vy.sdk.operations.DeletePaymentMethodNetworkTokenOperation;
import com.gr4vy.sdk.operations.ListPaymentMethodNetworkTokensOperation;
import com.gr4vy.sdk.operations.ResumePaymentMethodNetworkTokenOperation;
import com.gr4vy.sdk.operations.SuspendPaymentMethodNetworkTokenOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class NetworkTokens {
    private final SDKConfiguration sdkConfiguration;
    private final Cryptogram cryptogram;

    NetworkTokens(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.cryptogram = new Cryptogram(this.sdkConfiguration);
    }

    public final Cryptogram cryptogram() {
        return cryptogram;
    }

    /**
     * List network tokens
     * 
     * <p>List all network tokens stored for a payment method.
     * 
     * @return The call builder
     */
    public ListPaymentMethodNetworkTokensRequestBuilder list() {
        return new ListPaymentMethodNetworkTokensRequestBuilder(sdkConfiguration);
    }

    /**
     * List network tokens
     * 
     * <p>List all network tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentMethodNetworkTokensResponse list(String paymentMethodId) throws Exception {
        return list(paymentMethodId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List network tokens
     * 
     * <p>List all network tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentMethodNetworkTokensResponse list(
            String paymentMethodId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        ListPaymentMethodNetworkTokensRequest request =
            ListPaymentMethodNetworkTokensRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ListPaymentMethodNetworkTokensRequest, ListPaymentMethodNetworkTokensResponse> operation
              = new ListPaymentMethodNetworkTokensOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Provision network token
     * 
     * <p>Provision a network token for a payment method.
     * 
     * @return The call builder
     */
    public CreatePaymentMethodNetworkTokenRequestBuilder create() {
        return new CreatePaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Provision network token
     * 
     * <p>Provision a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodNetworkTokenResponse create(String paymentMethodId, NetworkTokenCreate networkTokenCreate) throws Exception {
        return create(paymentMethodId, JsonNullable.undefined(), networkTokenCreate);
    }

    /**
     * Provision network token
     * 
     * <p>Provision a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param networkTokenCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodNetworkTokenResponse create(
            String paymentMethodId, JsonNullable<String> merchantAccountId,
            NetworkTokenCreate networkTokenCreate) throws Exception {
        CreatePaymentMethodNetworkTokenRequest request =
            CreatePaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .networkTokenCreate(networkTokenCreate)
                .build();
        RequestOperation<CreatePaymentMethodNetworkTokenRequest, CreatePaymentMethodNetworkTokenResponse> operation
              = new CreatePaymentMethodNetworkTokenOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Suspend network token
     * 
     * <p>Suspend a network token for a payment method.
     * 
     * @return The call builder
     */
    public SuspendPaymentMethodNetworkTokenRequestBuilder suspend() {
        return new SuspendPaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Suspend network token
     * 
     * <p>Suspend a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SuspendPaymentMethodNetworkTokenResponse suspend(String paymentMethodId, String networkTokenId) throws Exception {
        return suspend(paymentMethodId, networkTokenId, JsonNullable.undefined());
    }

    /**
     * Suspend network token
     * 
     * <p>Suspend a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SuspendPaymentMethodNetworkTokenResponse suspend(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId) throws Exception {
        SuspendPaymentMethodNetworkTokenRequest request =
            SuspendPaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<SuspendPaymentMethodNetworkTokenRequest, SuspendPaymentMethodNetworkTokenResponse> operation
              = new SuspendPaymentMethodNetworkTokenOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Resume network token
     * 
     * <p>Resume a suspended network token for a payment method.
     * 
     * @return The call builder
     */
    public ResumePaymentMethodNetworkTokenRequestBuilder resume() {
        return new ResumePaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Resume network token
     * 
     * <p>Resume a suspended network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ResumePaymentMethodNetworkTokenResponse resume(String paymentMethodId, String networkTokenId) throws Exception {
        return resume(paymentMethodId, networkTokenId, JsonNullable.undefined());
    }

    /**
     * Resume network token
     * 
     * <p>Resume a suspended network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ResumePaymentMethodNetworkTokenResponse resume(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId) throws Exception {
        ResumePaymentMethodNetworkTokenRequest request =
            ResumePaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ResumePaymentMethodNetworkTokenRequest, ResumePaymentMethodNetworkTokenResponse> operation
              = new ResumePaymentMethodNetworkTokenOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete network token
     * 
     * <p>Delete a network token for a payment method.
     * 
     * @return The call builder
     */
    public DeletePaymentMethodNetworkTokenRequestBuilder delete() {
        return new DeletePaymentMethodNetworkTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete network token
     * 
     * <p>Delete a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentMethodNetworkTokenResponse delete(String paymentMethodId, String networkTokenId) throws Exception {
        return delete(paymentMethodId, networkTokenId, JsonNullable.undefined());
    }

    /**
     * Delete network token
     * 
     * <p>Delete a network token for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentMethodNetworkTokenResponse delete(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId) throws Exception {
        DeletePaymentMethodNetworkTokenRequest request =
            DeletePaymentMethodNetworkTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeletePaymentMethodNetworkTokenRequest, DeletePaymentMethodNetworkTokenResponse> operation
              = new DeletePaymentMethodNetworkTokenOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
