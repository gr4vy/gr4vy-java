/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.GiftCardCreate;
import com.gr4vy.sdk.models.operations.CreateGiftCardRequest;
import com.gr4vy.sdk.models.operations.CreateGiftCardRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateGiftCardResponse;
import com.gr4vy.sdk.models.operations.DeleteGiftCardRequest;
import com.gr4vy.sdk.models.operations.DeleteGiftCardRequestBuilder;
import com.gr4vy.sdk.models.operations.DeleteGiftCardResponse;
import com.gr4vy.sdk.models.operations.GetGiftCardRequest;
import com.gr4vy.sdk.models.operations.GetGiftCardRequestBuilder;
import com.gr4vy.sdk.models.operations.GetGiftCardResponse;
import com.gr4vy.sdk.models.operations.ListGiftCardsRequest;
import com.gr4vy.sdk.models.operations.ListGiftCardsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListGiftCardsResponse;
import com.gr4vy.sdk.operations.CreateGiftCardOperation;
import com.gr4vy.sdk.operations.DeleteGiftCardOperation;
import com.gr4vy.sdk.operations.GetGiftCardOperation;
import com.gr4vy.sdk.operations.ListGiftCardsOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GiftCards {
    private final SDKConfiguration sdkConfiguration;
private final Balances balances;

    GiftCards(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.balances = new Balances(this.sdkConfiguration);
    }
public final Balances balances() {
        return balances;
    }
    /**
     * Get gift card
     * 
     * <p>Fetch details about a gift card.
     * 
     * @return The call builder
     */
    public GetGiftCardRequestBuilder get() {
        return new GetGiftCardRequestBuilder(sdkConfiguration);
    }

    /**
     * Get gift card
     * 
     * <p>Fetch details about a gift card.
     * 
     * @param giftCardId The ID of the gift card.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGiftCardResponse get(String giftCardId) throws Exception {
        return get(giftCardId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get gift card
     * 
     * <p>Fetch details about a gift card.
     * 
     * @param giftCardId The ID of the gift card.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGiftCardResponse get(
            String giftCardId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetGiftCardRequest request =
            GetGiftCardRequest
                .builder()
                .giftCardId(giftCardId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetGiftCardRequest, GetGiftCardResponse> operation
              = new GetGiftCardOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a gift card
     * 
     * <p>Removes a gift card from our system.
     * 
     * @return The call builder
     */
    public DeleteGiftCardRequestBuilder delete() {
        return new DeleteGiftCardRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a gift card
     * 
     * <p>Removes a gift card from our system.
     * 
     * @param giftCardId The ID of the gift card.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteGiftCardResponse delete(String giftCardId) throws Exception {
        return delete(giftCardId, JsonNullable.undefined());
    }

    /**
     * Delete a gift card
     * 
     * <p>Removes a gift card from our system.
     * 
     * @param giftCardId The ID of the gift card.
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteGiftCardResponse delete(String giftCardId, JsonNullable<String> merchantAccountId) throws Exception {
        DeleteGiftCardRequest request =
            DeleteGiftCardRequest
                .builder()
                .giftCardId(giftCardId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeleteGiftCardRequest, DeleteGiftCardResponse> operation
              = new DeleteGiftCardOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create gift card
     * 
     * <p>Store a new gift card in the vault.
     * 
     * @return The call builder
     */
    public CreateGiftCardRequestBuilder create() {
        return new CreateGiftCardRequestBuilder(sdkConfiguration);
    }

    /**
     * Create gift card
     * 
     * <p>Store a new gift card in the vault.
     * 
     * @param giftCardCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateGiftCardResponse create(GiftCardCreate giftCardCreate) throws Exception {
        return create(JsonNullable.undefined(), giftCardCreate);
    }

    /**
     * Create gift card
     * 
     * <p>Store a new gift card in the vault.
     * 
     * @param merchantAccountId 
     * @param giftCardCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateGiftCardResponse create(JsonNullable<String> merchantAccountId, GiftCardCreate giftCardCreate) throws Exception {
        CreateGiftCardRequest request =
            CreateGiftCardRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .giftCardCreate(giftCardCreate)
                .build();
        RequestOperation<CreateGiftCardRequest, CreateGiftCardResponse> operation
              = new CreateGiftCardOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List gift cards
     * 
     * <p>Browser all gift cards.
     * 
     * @return The call builder
     */
    public ListGiftCardsRequestBuilder list() {
        return new ListGiftCardsRequestBuilder(sdkConfiguration);
    }

    /**
     * List gift cards
     * 
     * <p>Browser all gift cards.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListGiftCardsResponse list(ListGiftCardsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List gift cards
     * 
     * <p>Browser all gift cards.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListGiftCardsResponse list(ListGiftCardsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListGiftCardsRequest, ListGiftCardsResponse> operation
              = new ListGiftCardsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
