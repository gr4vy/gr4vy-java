/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.operations.Body;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodRequest;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodRequestBuilder;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodResponse;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodRequestBuilder;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodResponse;
import com.gr4vy.sdk.models.operations.GetPaymentMethodRequest;
import com.gr4vy.sdk.models.operations.GetPaymentMethodRequestBuilder;
import com.gr4vy.sdk.models.operations.GetPaymentMethodResponse;
import com.gr4vy.sdk.models.operations.ListPaymentMethodsRequest;
import com.gr4vy.sdk.models.operations.ListPaymentMethodsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListPaymentMethodsResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethodOperation;
import com.gr4vy.sdk.operations.DeletePaymentMethodOperation;
import com.gr4vy.sdk.operations.GetPaymentMethodOperation;
import com.gr4vy.sdk.operations.ListPaymentMethodsOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentMethods {
    private final SDKConfiguration sdkConfiguration;
private final PaymentServiceTokens paymentServiceTokens;
private final NetworkTokens networkTokens;

    PaymentMethods(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.paymentServiceTokens = new PaymentServiceTokens(this.sdkConfiguration);
        this.networkTokens = new NetworkTokens(this.sdkConfiguration);
    }
public final PaymentServiceTokens paymentServiceTokens() {
        return paymentServiceTokens;
    }
public final NetworkTokens networkTokens() {
        return networkTokens;
    }
    /**
     * List all payment methods
     * 
     * <p>List all stored payment method.
     * 
     * @return The call builder
     */
    public ListPaymentMethodsRequestBuilder list() {
        return new ListPaymentMethodsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment methods
     * 
     * <p>List all stored payment method.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentMethodsResponse list(ListPaymentMethodsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List all payment methods
     * 
     * <p>List all stored payment method.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentMethodsResponse list(
            ListPaymentMethodsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<ListPaymentMethodsRequest, ListPaymentMethodsResponse> operation
              = new ListPaymentMethodsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create payment method
     * 
     * <p>Store a new payment method.
     * 
     * @return The call builder
     */
    public CreatePaymentMethodRequestBuilder create() {
        return new CreatePaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment method
     * 
     * <p>Store a new payment method.
     * 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodResponse create(Body requestBody) throws Exception {
        return create(JsonNullable.undefined(), requestBody);
    }

    /**
     * Create payment method
     * 
     * <p>Store a new payment method.
     * 
     * @param merchantAccountId 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodResponse create(
            JsonNullable<String> merchantAccountId,
            Body requestBody) throws Exception {
        CreatePaymentMethodRequest request =
            CreatePaymentMethodRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreatePaymentMethodRequest, CreatePaymentMethodResponse> operation
              = new CreatePaymentMethodOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment method
     * 
     * <p>Retrieve a payment method.
     * 
     * @return The call builder
     */
    public GetPaymentMethodRequestBuilder get() {
        return new GetPaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment method
     * 
     * <p>Retrieve a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentMethodResponse get(String paymentMethodId) throws Exception {
        return get(paymentMethodId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment method
     * 
     * <p>Retrieve a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentMethodResponse get(
            String paymentMethodId,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetPaymentMethodRequest request =
            GetPaymentMethodRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetPaymentMethodRequest, GetPaymentMethodResponse> operation
              = new GetPaymentMethodOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete payment method
     * 
     * <p>Delete a payment method.
     * 
     * @return The call builder
     */
    public DeletePaymentMethodRequestBuilder delete() {
        return new DeletePaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete payment method
     * 
     * <p>Delete a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentMethodResponse delete(String paymentMethodId) throws Exception {
        return delete(paymentMethodId, JsonNullable.undefined());
    }

    /**
     * Delete payment method
     * 
     * <p>Delete a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentMethodResponse delete(
            String paymentMethodId,
            JsonNullable<String> merchantAccountId) throws Exception {
        DeletePaymentMethodRequest request =
            DeletePaymentMethodRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeletePaymentMethodRequest, DeletePaymentMethodResponse> operation
              = new DeletePaymentMethodOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
