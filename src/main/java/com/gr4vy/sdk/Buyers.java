/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.BuyerCreate;
import com.gr4vy.sdk.models.components.BuyerUpdate;
import com.gr4vy.sdk.models.operations.AddBuyerRequest;
import com.gr4vy.sdk.models.operations.AddBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.AddBuyerResponse;
import com.gr4vy.sdk.models.operations.DeleteBuyerRequest;
import com.gr4vy.sdk.models.operations.DeleteBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.DeleteBuyerResponse;
import com.gr4vy.sdk.models.operations.GetBuyerRequest;
import com.gr4vy.sdk.models.operations.GetBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.GetBuyerResponse;
import com.gr4vy.sdk.models.operations.ListBuyersRequest;
import com.gr4vy.sdk.models.operations.ListBuyersRequestBuilder;
import com.gr4vy.sdk.models.operations.ListBuyersResponse;
import com.gr4vy.sdk.models.operations.UpdateBuyerRequest;
import com.gr4vy.sdk.models.operations.UpdateBuyerRequestBuilder;
import com.gr4vy.sdk.models.operations.UpdateBuyerResponse;
import com.gr4vy.sdk.operations.AddBuyer;
import com.gr4vy.sdk.operations.DeleteBuyer;
import com.gr4vy.sdk.operations.GetBuyer;
import com.gr4vy.sdk.operations.ListBuyers;
import com.gr4vy.sdk.operations.UpdateBuyer;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Buyers {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncBuyers asyncSDK;
    private final BuyersPaymentMethods paymentMethods;
    private final BuyersGiftCards giftCards;
    private final ShippingDetails shippingDetails;

    Buyers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.paymentMethods = new BuyersPaymentMethods(this.sdkConfiguration);
        this.giftCards = new BuyersGiftCards(this.sdkConfiguration);
        this.shippingDetails = new ShippingDetails(this.sdkConfiguration);
        this.asyncSDK = new AsyncBuyers(this, sdkConfiguration);
    }

    public final BuyersPaymentMethods paymentMethods() {
        return paymentMethods;
    }

    public final BuyersGiftCards giftCards() {
        return giftCards;
    }

    public final ShippingDetails shippingDetails() {
        return shippingDetails;
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncBuyers async() {
        return asyncSDK;
    }

    /**
     * List all buyers
     * 
     * <p>List all buyers or search for a specific buyer.
     * 
     * @return The call builder
     */
    public ListBuyersRequestBuilder list() {
        return new ListBuyersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all buyers
     * 
     * <p>List all buyers or search for a specific buyer.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListBuyersResponse list(ListBuyersRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List all buyers
     * 
     * <p>List all buyers or search for a specific buyer.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListBuyersResponse list(ListBuyersRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListBuyersRequest, ListBuyersResponse> operation
              = new ListBuyers.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add a buyer
     * 
     * <p>Create a new buyer record.
     * 
     * @return The call builder
     */
    public AddBuyerRequestBuilder create() {
        return new AddBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a buyer
     * 
     * <p>Create a new buyer record.
     * 
     * @param buyerCreate Request body for creating a new buyer
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddBuyerResponse create(BuyerCreate buyerCreate) throws Exception {
        return create(JsonNullable.undefined(), buyerCreate);
    }

    /**
     * Add a buyer
     * 
     * <p>Create a new buyer record.
     * 
     * @param merchantAccountId 
     * @param buyerCreate Request body for creating a new buyer
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddBuyerResponse create(JsonNullable<String> merchantAccountId, BuyerCreate buyerCreate) throws Exception {
        AddBuyerRequest request =
            AddBuyerRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .buyerCreate(buyerCreate)
                .build();
        RequestOperation<AddBuyerRequest, AddBuyerResponse> operation
              = new AddBuyer.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a buyer
     * 
     * <p>Fetches a buyer by its ID.
     * 
     * @return The call builder
     */
    public GetBuyerRequestBuilder get() {
        return new GetBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a buyer
     * 
     * <p>Fetches a buyer by its ID.
     * 
     * @param buyerId The ID of the buyer to retrieve.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBuyerResponse get(String buyerId) throws Exception {
        return get(buyerId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get a buyer
     * 
     * <p>Fetches a buyer by its ID.
     * 
     * @param buyerId The ID of the buyer to retrieve.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBuyerResponse get(
            String buyerId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetBuyerRequest request =
            GetBuyerRequest
                .builder()
                .buyerId(buyerId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetBuyerRequest, GetBuyerResponse> operation
              = new GetBuyer.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a buyer
     * 
     * <p>Updates a buyer record.
     * 
     * @return The call builder
     */
    public UpdateBuyerRequestBuilder update() {
        return new UpdateBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a buyer
     * 
     * <p>Updates a buyer record.
     * 
     * @param buyerId The ID of the buyer to edit.
     * @param buyerUpdate Request body for updating an existing buyer
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateBuyerResponse update(String buyerId, BuyerUpdate buyerUpdate) throws Exception {
        return update(buyerId, JsonNullable.undefined(), buyerUpdate);
    }

    /**
     * Update a buyer
     * 
     * <p>Updates a buyer record.
     * 
     * @param buyerId The ID of the buyer to edit.
     * @param merchantAccountId 
     * @param buyerUpdate Request body for updating an existing buyer
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateBuyerResponse update(
            String buyerId, JsonNullable<String> merchantAccountId,
            BuyerUpdate buyerUpdate) throws Exception {
        UpdateBuyerRequest request =
            UpdateBuyerRequest
                .builder()
                .buyerId(buyerId)
                .merchantAccountId(merchantAccountId)
                .buyerUpdate(buyerUpdate)
                .build();
        RequestOperation<UpdateBuyerRequest, UpdateBuyerResponse> operation
              = new UpdateBuyer.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a buyer
     * 
     * <p>Permanently removes a buyer record.
     * 
     * @return The call builder
     */
    public DeleteBuyerRequestBuilder delete() {
        return new DeleteBuyerRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a buyer
     * 
     * <p>Permanently removes a buyer record.
     * 
     * @param buyerId The ID of the buyer to delete.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteBuyerResponse delete(String buyerId) throws Exception {
        return delete(buyerId, JsonNullable.undefined());
    }

    /**
     * Delete a buyer
     * 
     * <p>Permanently removes a buyer record.
     * 
     * @param buyerId The ID of the buyer to delete.
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteBuyerResponse delete(String buyerId, JsonNullable<String> merchantAccountId) throws Exception {
        DeleteBuyerRequest request =
            DeleteBuyerRequest
                .builder()
                .buyerId(buyerId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeleteBuyerRequest, DeleteBuyerResponse> operation
              = new DeleteBuyer.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
