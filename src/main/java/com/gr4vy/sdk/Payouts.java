/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.PayoutCreate;
import com.gr4vy.sdk.models.operations.CreatePayoutRequest;
import com.gr4vy.sdk.models.operations.CreatePayoutRequestBuilder;
import com.gr4vy.sdk.models.operations.CreatePayoutResponse;
import com.gr4vy.sdk.models.operations.GetPayoutRequest;
import com.gr4vy.sdk.models.operations.GetPayoutRequestBuilder;
import com.gr4vy.sdk.models.operations.GetPayoutResponse;
import com.gr4vy.sdk.models.operations.ListPayoutsRequest;
import com.gr4vy.sdk.models.operations.ListPayoutsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListPayoutsResponse;
import com.gr4vy.sdk.operations.CreatePayoutOperation;
import com.gr4vy.sdk.operations.GetPayoutOperation;
import com.gr4vy.sdk.operations.ListPayoutsOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Payouts {
    private final SDKConfiguration sdkConfiguration;

    Payouts(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List payouts created.
     * 
     * <p>Returns a list of payouts made.
     * 
     * @return The call builder
     */
    public ListPayoutsRequestBuilder list() {
        return new ListPayoutsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payouts created.
     * 
     * <p>Returns a list of payouts made.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPayoutsResponse listDirect() throws Exception {
        return list(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List payouts created.
     * 
     * <p>Returns a list of payouts made.
     * 
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are at returned.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPayoutsResponse list(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        ListPayoutsRequest request =
            ListPayoutsRequest
                .builder()
                .cursor(cursor)
                .limit(limit)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ListPayoutsRequest, ListPayoutsResponse> operation
              = new ListPayoutsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create a payout.
     * 
     * <p>Creates a new payout.
     * 
     * @return The call builder
     */
    public CreatePayoutRequestBuilder create() {
        return new CreatePayoutRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a payout.
     * 
     * <p>Creates a new payout.
     * 
     * @param payoutCreate PayoutCreate
     *         
     *         Represents the data required to create a new payout.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePayoutResponse create(PayoutCreate payoutCreate) throws Exception {
        return create(JsonNullable.undefined(), payoutCreate);
    }

    /**
     * Create a payout.
     * 
     * <p>Creates a new payout.
     * 
     * @param merchantAccountId 
     * @param payoutCreate PayoutCreate
     *         
     *         Represents the data required to create a new payout.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePayoutResponse create(
            JsonNullable<String> merchantAccountId,
            PayoutCreate payoutCreate) throws Exception {
        CreatePayoutRequest request =
            CreatePayoutRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .payoutCreate(payoutCreate)
                .build();
        RequestOperation<CreatePayoutRequest, CreatePayoutResponse> operation
              = new CreatePayoutOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get a payout.
     * 
     * <p>Retreives a payout.
     * 
     * @return The call builder
     */
    public GetPayoutRequestBuilder get() {
        return new GetPayoutRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a payout.
     * 
     * <p>Retreives a payout.
     * 
     * @param payoutId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPayoutResponse get(String payoutId) throws Exception {
        return get(payoutId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get a payout.
     * 
     * <p>Retreives a payout.
     * 
     * @param payoutId 
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPayoutResponse get(
            String payoutId,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetPayoutRequest request =
            GetPayoutRequest
                .builder()
                .payoutId(payoutId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetPayoutRequest, GetPayoutResponse> operation
              = new GetPayoutOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
