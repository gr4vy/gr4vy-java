/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.DigitalWalletCreate;
import com.gr4vy.sdk.models.components.DigitalWalletUpdate;
import com.gr4vy.sdk.models.operations.ConfigureDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.ConfigureDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.ConfigureDigitalWalletResponse;
import com.gr4vy.sdk.models.operations.DeleteDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.DeleteDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.DeleteDigitalWalletResponse;
import com.gr4vy.sdk.models.operations.GetDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.GetDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.GetDigitalWalletResponse;
import com.gr4vy.sdk.models.operations.ListDigitalWalletsRequest;
import com.gr4vy.sdk.models.operations.ListDigitalWalletsRequestBuilder;
import com.gr4vy.sdk.models.operations.ListDigitalWalletsResponse;
import com.gr4vy.sdk.models.operations.UpdateDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.UpdateDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.UpdateDigitalWalletResponse;
import com.gr4vy.sdk.operations.ConfigureDigitalWalletOperation;
import com.gr4vy.sdk.operations.DeleteDigitalWalletOperation;
import com.gr4vy.sdk.operations.GetDigitalWalletOperation;
import com.gr4vy.sdk.operations.ListDigitalWalletsOperation;
import com.gr4vy.sdk.operations.UpdateDigitalWalletOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class DigitalWallets {
    private final SDKConfiguration sdkConfiguration;
private final Sessions sessions;
private final Domains domains;

    DigitalWallets(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sessions = new Sessions(this.sdkConfiguration);
        this.domains = new Domains(this.sdkConfiguration);
    }
public final Sessions sessions() {
        return sessions;
    }
public final Domains domains() {
        return domains;
    }

    /**
     * Register digital wallet
     * 
     * <p>Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.
     * 
     * @return The call builder
     */
    public ConfigureDigitalWalletRequestBuilder create() {
        return new ConfigureDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Register digital wallet
     * 
     * <p>Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.
     * 
     * @param digitalWalletCreate Request body for registering a new digital wallet
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ConfigureDigitalWalletResponse create(DigitalWalletCreate digitalWalletCreate) throws Exception {
        return create(JsonNullable.undefined(), digitalWalletCreate);
    }

    /**
     * Register digital wallet
     * 
     * <p>Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.
     * 
     * @param merchantAccountId 
     * @param digitalWalletCreate Request body for registering a new digital wallet
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ConfigureDigitalWalletResponse create(
            JsonNullable<String> merchantAccountId,
            DigitalWalletCreate digitalWalletCreate) throws Exception {
        ConfigureDigitalWalletRequest request =
            ConfigureDigitalWalletRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .digitalWalletCreate(digitalWalletCreate)
                .build();
        RequestOperation<ConfigureDigitalWalletRequest, ConfigureDigitalWalletResponse> operation
              = new ConfigureDigitalWalletOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List digital wallets
     * 
     * <p>List configured digital wallets.
     * 
     * @return The call builder
     */
    public ListDigitalWalletsRequestBuilder list() {
        return new ListDigitalWalletsRequestBuilder(sdkConfiguration);
    }

    /**
     * List digital wallets
     * 
     * <p>List configured digital wallets.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListDigitalWalletsResponse listDirect() throws Exception {
        return list(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List digital wallets
     * 
     * <p>List configured digital wallets.
     * 
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListDigitalWalletsResponse list(
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        ListDigitalWalletsRequest request =
            ListDigitalWalletsRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ListDigitalWalletsRequest, ListDigitalWalletsResponse> operation
              = new ListDigitalWalletsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get digital wallet
     * 
     * <p>Fetch the details a digital wallet.
     * 
     * @return The call builder
     */
    public GetDigitalWalletRequestBuilder get() {
        return new GetDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Get digital wallet
     * 
     * <p>Fetch the details a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to read.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDigitalWalletResponse get(String digitalWalletId) throws Exception {
        return get(digitalWalletId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get digital wallet
     * 
     * <p>Fetch the details a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to read.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDigitalWalletResponse get(
            String digitalWalletId,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetDigitalWalletRequest request =
            GetDigitalWalletRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetDigitalWalletRequest, GetDigitalWalletResponse> operation
              = new GetDigitalWalletOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete digital wallet
     * 
     * <p>Delete a configured digital wallet.
     * 
     * @return The call builder
     */
    public DeleteDigitalWalletRequestBuilder delete() {
        return new DeleteDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete digital wallet
     * 
     * <p>Delete a configured digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to delete.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteDigitalWalletResponse delete(String digitalWalletId) throws Exception {
        return delete(digitalWalletId, JsonNullable.undefined());
    }

    /**
     * Delete digital wallet
     * 
     * <p>Delete a configured digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to delete.
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteDigitalWalletResponse delete(
            String digitalWalletId,
            JsonNullable<String> merchantAccountId) throws Exception {
        DeleteDigitalWalletRequest request =
            DeleteDigitalWalletRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeleteDigitalWalletRequest, DeleteDigitalWalletResponse> operation
              = new DeleteDigitalWalletOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update digital wallet
     * 
     * <p>Update a digital wallet.
     * 
     * @return The call builder
     */
    public UpdateDigitalWalletRequestBuilder update() {
        return new UpdateDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Update digital wallet
     * 
     * <p>Update a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to edit.
     * @param digitalWalletUpdate Request body for editing a registered digital wallet
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateDigitalWalletResponse update(
            String digitalWalletId,
            DigitalWalletUpdate digitalWalletUpdate) throws Exception {
        return update(digitalWalletId, JsonNullable.undefined(), digitalWalletUpdate);
    }

    /**
     * Update digital wallet
     * 
     * <p>Update a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to edit.
     * @param merchantAccountId 
     * @param digitalWalletUpdate Request body for editing a registered digital wallet
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateDigitalWalletResponse update(
            String digitalWalletId,
            JsonNullable<String> merchantAccountId,
            DigitalWalletUpdate digitalWalletUpdate) throws Exception {
        UpdateDigitalWalletRequest request =
            UpdateDigitalWalletRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .digitalWalletUpdate(digitalWalletUpdate)
                .build();
        RequestOperation<UpdateDigitalWalletRequest, UpdateDigitalWalletResponse> operation
              = new UpdateDigitalWalletOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
