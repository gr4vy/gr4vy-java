/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.DigitalWalletCreate;
import com.gr4vy.sdk.models.components.DigitalWalletUpdate;
import com.gr4vy.sdk.models.operations.ConfigureDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.DeleteDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.GetDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.ListDigitalWalletsRequest;
import com.gr4vy.sdk.models.operations.UpdateDigitalWalletRequest;
import com.gr4vy.sdk.models.operations.async.ConfigureDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ConfigureDigitalWalletResponse;
import com.gr4vy.sdk.models.operations.async.DeleteDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeleteDigitalWalletResponse;
import com.gr4vy.sdk.models.operations.async.GetDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetDigitalWalletResponse;
import com.gr4vy.sdk.models.operations.async.ListDigitalWalletsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListDigitalWalletsResponse;
import com.gr4vy.sdk.models.operations.async.UpdateDigitalWalletRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UpdateDigitalWalletResponse;
import com.gr4vy.sdk.operations.ConfigureDigitalWallet;
import com.gr4vy.sdk.operations.DeleteDigitalWallet;
import com.gr4vy.sdk.operations.GetDigitalWallet;
import com.gr4vy.sdk.operations.ListDigitalWallets;
import com.gr4vy.sdk.operations.UpdateDigitalWallet;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncDigitalWallets {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncSessions sessions;
    private final AsyncDomains domains;
    private final DigitalWallets syncSDK;

    AsyncDigitalWallets(DigitalWallets syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sessions = new AsyncSessions(syncSDK.sessions(), this.sdkConfiguration);
        this.domains = new AsyncDomains(syncSDK.domains(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncSessions sessions() {
        return sessions;
    }

    public final AsyncDomains domains() {
        return domains;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public DigitalWallets sync() {
        return syncSDK;
    }


    /**
     * Register digital wallet
     * 
     * <p>Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.
     * 
     * @return The async call builder
     */
    public ConfigureDigitalWalletRequestBuilder create() {
        return new ConfigureDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Register digital wallet
     * 
     * <p>Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.
     * 
     * @param digitalWalletCreate Request body for registering a new digital wallet
     * @return {@code CompletableFuture<ConfigureDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<ConfigureDigitalWalletResponse> create(DigitalWalletCreate digitalWalletCreate) {
        return create(JsonNullable.undefined(), digitalWalletCreate);
    }

    /**
     * Register digital wallet
     * 
     * <p>Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.
     * 
     * @param merchantAccountId 
     * @param digitalWalletCreate Request body for registering a new digital wallet
     * @return {@code CompletableFuture<ConfigureDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<ConfigureDigitalWalletResponse> create(JsonNullable<String> merchantAccountId, DigitalWalletCreate digitalWalletCreate) {
        ConfigureDigitalWalletRequest request =
            ConfigureDigitalWalletRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .digitalWalletCreate(digitalWalletCreate)
                .build();
        AsyncRequestOperation<ConfigureDigitalWalletRequest, ConfigureDigitalWalletResponse> operation
              = new ConfigureDigitalWallet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List digital wallets
     * 
     * <p>List configured digital wallets.
     * 
     * @return The async call builder
     */
    public ListDigitalWalletsRequestBuilder list() {
        return new ListDigitalWalletsRequestBuilder(sdkConfiguration);
    }

    /**
     * List digital wallets
     * 
     * <p>List configured digital wallets.
     * 
     * @return {@code CompletableFuture<ListDigitalWalletsResponse>} - The async response
     */
    public CompletableFuture<ListDigitalWalletsResponse> listDirect() {
        return list(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List digital wallets
     * 
     * <p>List configured digital wallets.
     * 
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<ListDigitalWalletsResponse>} - The async response
     */
    public CompletableFuture<ListDigitalWalletsResponse> list(JsonNullable<String> merchantAccountId, Optional<Options> options) {
        ListDigitalWalletsRequest request =
            ListDigitalWalletsRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListDigitalWalletsRequest, ListDigitalWalletsResponse> operation
              = new ListDigitalWallets.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get digital wallet
     * 
     * <p>Fetch the details a digital wallet.
     * 
     * @return The async call builder
     */
    public GetDigitalWalletRequestBuilder get() {
        return new GetDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Get digital wallet
     * 
     * <p>Fetch the details a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to read.
     * @return {@code CompletableFuture<GetDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<GetDigitalWalletResponse> get(String digitalWalletId) {
        return get(digitalWalletId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get digital wallet
     * 
     * <p>Fetch the details a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to read.
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<GetDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<GetDigitalWalletResponse> get(
            String digitalWalletId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetDigitalWalletRequest request =
            GetDigitalWalletRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetDigitalWalletRequest, GetDigitalWalletResponse> operation
              = new GetDigitalWallet.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete digital wallet
     * 
     * <p>Delete a configured digital wallet.
     * 
     * @return The async call builder
     */
    public DeleteDigitalWalletRequestBuilder delete() {
        return new DeleteDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete digital wallet
     * 
     * <p>Delete a configured digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to delete.
     * @return {@code CompletableFuture<DeleteDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<DeleteDigitalWalletResponse> delete(String digitalWalletId) {
        return delete(digitalWalletId, JsonNullable.undefined());
    }

    /**
     * Delete digital wallet
     * 
     * <p>Delete a configured digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to delete.
     * @param merchantAccountId 
     * @return {@code CompletableFuture<DeleteDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<DeleteDigitalWalletResponse> delete(String digitalWalletId, JsonNullable<String> merchantAccountId) {
        DeleteDigitalWalletRequest request =
            DeleteDigitalWalletRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeleteDigitalWalletRequest, DeleteDigitalWalletResponse> operation
              = new DeleteDigitalWallet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update digital wallet
     * 
     * <p>Update a digital wallet.
     * 
     * @return The async call builder
     */
    public UpdateDigitalWalletRequestBuilder update() {
        return new UpdateDigitalWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Update digital wallet
     * 
     * <p>Update a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to edit.
     * @param digitalWalletUpdate Request body for editing a registered digital wallet
     * @return {@code CompletableFuture<UpdateDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<UpdateDigitalWalletResponse> update(String digitalWalletId, DigitalWalletUpdate digitalWalletUpdate) {
        return update(digitalWalletId, JsonNullable.undefined(), digitalWalletUpdate);
    }

    /**
     * Update digital wallet
     * 
     * <p>Update a digital wallet.
     * 
     * @param digitalWalletId The ID of the digital wallet to edit.
     * @param merchantAccountId 
     * @param digitalWalletUpdate Request body for editing a registered digital wallet
     * @return {@code CompletableFuture<UpdateDigitalWalletResponse>} - The async response
     */
    public CompletableFuture<UpdateDigitalWalletResponse> update(
            String digitalWalletId, JsonNullable<String> merchantAccountId,
            DigitalWalletUpdate digitalWalletUpdate) {
        UpdateDigitalWalletRequest request =
            UpdateDigitalWalletRequest
                .builder()
                .digitalWalletId(digitalWalletId)
                .merchantAccountId(merchantAccountId)
                .digitalWalletUpdate(digitalWalletUpdate)
                .build();
        AsyncRequestOperation<UpdateDigitalWalletRequest, UpdateDigitalWalletResponse> operation
              = new UpdateDigitalWallet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
