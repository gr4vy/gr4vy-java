/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import com.gr4vy.sdk.utils.HTTPClient;
import com.gr4vy.sdk.utils.RetryConfig;
import com.gr4vy.sdk.utils.Utils;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Map;
import java.util.Optional;

/**
 * Gr4vy: The Gr4vy API.
 */
public class Gr4vy {

  
    /**
     * AvailableServers contains identifiers for the servers available to the SDK.
     */
    public enum AvailableServers {
      PRODUCTION("production"),
      SANDBOX("sandbox");

        private final String server;

        private AvailableServers(String server) {
            this.server = server;
        }

        public String server() {
           return server;
        }
    }

    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    @SuppressWarnings("serial")
    public static final Map<AvailableServers, String> SERVERS = new HashMap<>() { {
    put(AvailableServers.PRODUCTION, "https://api.{id}.gr4vy.app");
    put(AvailableServers.SANDBOX, "https://api.sandbox.{id}.gr4vy.app");
    }};

    private final AccountUpdater accountUpdater;

    private final Buyers buyers;

    private final PaymentMethods paymentMethods;

    private final GiftCards giftCards;

    private final CardSchemeDefinitions cardSchemeDefinitions;

    private final DigitalWallets digitalWallets;

    private final Transactions transactions;

    private final Refunds refunds;

    private final PaymentOptions paymentOptions;

    private final PaymentServiceDefinitions paymentServiceDefinitions;

    private final PaymentServices paymentServices;

    private final AuditLogs auditLogs;

    private final Reports reports;

    private final ReportsExecutions reportsExecutions;

    private final CheckoutSessions checkoutSessions;

    private final MerchantAccounts merchantAccounts;

    private final Payouts payouts;

    private final PaymentLinks paymentLinks;

    public AccountUpdater accountUpdater() {
        return accountUpdater;
    }

    public Buyers buyers() {
        return buyers;
    }

    public PaymentMethods paymentMethods() {
        return paymentMethods;
    }

    public GiftCards giftCards() {
        return giftCards;
    }

    public CardSchemeDefinitions cardSchemeDefinitions() {
        return cardSchemeDefinitions;
    }

    public DigitalWallets digitalWallets() {
        return digitalWallets;
    }

    public Transactions transactions() {
        return transactions;
    }

    public Refunds refunds() {
        return refunds;
    }

    public PaymentOptions paymentOptions() {
        return paymentOptions;
    }

    public PaymentServiceDefinitions paymentServiceDefinitions() {
        return paymentServiceDefinitions;
    }

    public PaymentServices paymentServices() {
        return paymentServices;
    }

    public AuditLogs auditLogs() {
        return auditLogs;
    }

    public Reports reports() {
        return reports;
    }

    public ReportsExecutions reportsExecutions() {
        return reportsExecutions;
    }

    public CheckoutSessions checkoutSessions() {
        return checkoutSessions;
    }

    public MerchantAccounts merchantAccounts() {
        return merchantAccounts;
    }

    public Payouts payouts() {
        return payouts;
    }

    public PaymentLinks paymentLinks() {
        return paymentLinks;
    }

    private SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param bearerAuth The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder bearerAuth(String bearerAuth) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(com.gr4vy.sdk.models.components.Security.builder()
              .bearerAuth(bearerAuth)
              .build()));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by name.
         *
         * @param server The server to use for all requests.
         * @return The builder instance.
         */
        public Builder server(AvailableServers server) {
            this.server = server.server();
            this.serverUrl = SERVERS.get(server);
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }
        /**
         * Sets the id variable for url substitution.
         *
         * @param id The value to set.
         * @return The builder instance.
         */
        public Builder id(String id) {
            for (Entry<String, Map<String, String>> entry : this.sdkConfiguration.serverVariables().entrySet()) {
                Map<String, String> server = entry.getValue();

                if (!server.containsKey("id")) {
                    continue;
                }
                server.put("id", id.toString());
            }

            return this;
        }
        
        /**
         * Allows setting the merchantAccountId parameter for all supported operations.
         *
         * @param merchantAccountId The value to set.
         * @return The builder instance.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            if (!this.sdkConfiguration.globals.get("parameters").containsKey("header")) {
                this.sdkConfiguration.globals.get("parameters").put("header", new HashMap<>());
            }

            this.sdkConfiguration.globals.get("parameters").get("header").put("merchantAccountId", merchantAccountId);

            return this;
        }
        
        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public Gr4vy build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS.get(AvailableServers.PRODUCTION);
                server = AvailableServers.PRODUCTION.server();
            }
            sdkConfiguration.setServerUrl(serverUrl);
            if (server != null) {
                sdkConfiguration.setServer(server);
            }
            return new Gr4vy(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Gr4vy(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sdkConfiguration.initialize();
        this.accountUpdater = new AccountUpdater(sdkConfiguration);
        this.buyers = new Buyers(sdkConfiguration);
        this.paymentMethods = new PaymentMethods(sdkConfiguration);
        this.giftCards = new GiftCards(sdkConfiguration);
        this.cardSchemeDefinitions = new CardSchemeDefinitions(sdkConfiguration);
        this.digitalWallets = new DigitalWallets(sdkConfiguration);
        this.transactions = new Transactions(sdkConfiguration);
        this.refunds = new Refunds(sdkConfiguration);
        this.paymentOptions = new PaymentOptions(sdkConfiguration);
        this.paymentServiceDefinitions = new PaymentServiceDefinitions(sdkConfiguration);
        this.paymentServices = new PaymentServices(sdkConfiguration);
        this.auditLogs = new AuditLogs(sdkConfiguration);
        this.reports = new Reports(sdkConfiguration);
        this.reportsExecutions = new ReportsExecutions(sdkConfiguration);
        this.checkoutSessions = new CheckoutSessions(sdkConfiguration);
        this.merchantAccounts = new MerchantAccounts(sdkConfiguration);
        this.payouts = new Payouts(sdkConfiguration);
        this.paymentLinks = new PaymentLinks(sdkConfiguration);
        
    }
}
