/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.CheckoutSessionCreate;
import com.gr4vy.sdk.models.operations.CreateCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.DeleteCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.GetCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.UpdateCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.async.CreateCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateCheckoutSessionResponse;
import com.gr4vy.sdk.models.operations.async.DeleteCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeleteCheckoutSessionResponse;
import com.gr4vy.sdk.models.operations.async.GetCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetCheckoutSessionResponse;
import com.gr4vy.sdk.models.operations.async.UpdateCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UpdateCheckoutSessionResponse;
import com.gr4vy.sdk.operations.CreateCheckoutSession;
import com.gr4vy.sdk.operations.DeleteCheckoutSession;
import com.gr4vy.sdk.operations.GetCheckoutSession;
import com.gr4vy.sdk.operations.UpdateCheckoutSession;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncCheckoutSessions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final CheckoutSessions syncSDK;

    AsyncCheckoutSessions(CheckoutSessions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public CheckoutSessions sync() {
        return syncSDK;
    }


    /**
     * Create checkout session
     * 
     * <p>Create a new checkout session.
     * 
     * @return The async call builder
     */
    public CreateCheckoutSessionRequestBuilder create() {
        return new CreateCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create checkout session
     * 
     * <p>Create a new checkout session.
     * 
     * @return CompletableFuture&lt;CreateCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<CreateCheckoutSessionResponse> createDirect() {
        return create(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Create checkout session
     * 
     * <p>Create a new checkout session.
     * 
     * @param merchantAccountId 
     * @param checkoutSessionCreate 
     * @return CompletableFuture&lt;CreateCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<CreateCheckoutSessionResponse> create(JsonNullable<String> merchantAccountId, Optional<? extends CheckoutSessionCreate> checkoutSessionCreate) {
        CreateCheckoutSessionRequest request =
            CreateCheckoutSessionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .checkoutSessionCreate(checkoutSessionCreate)
                .build();
        AsyncRequestOperation<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse> operation
              = new CreateCheckoutSession.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update checkout session
     * 
     * <p>Update the information stored on a checkout session.
     * 
     * @return The async call builder
     */
    public UpdateCheckoutSessionRequestBuilder update() {
        return new UpdateCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update checkout session
     * 
     * <p>Update the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @param checkoutSessionCreate 
     * @return CompletableFuture&lt;UpdateCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<UpdateCheckoutSessionResponse> update(String sessionId, CheckoutSessionCreate checkoutSessionCreate) {
        return update(sessionId, JsonNullable.undefined(), checkoutSessionCreate);
    }

    /**
     * Update checkout session
     * 
     * <p>Update the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @param merchantAccountId 
     * @param checkoutSessionCreate 
     * @return CompletableFuture&lt;UpdateCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<UpdateCheckoutSessionResponse> update(
            String sessionId, JsonNullable<String> merchantAccountId,
            CheckoutSessionCreate checkoutSessionCreate) {
        UpdateCheckoutSessionRequest request =
            UpdateCheckoutSessionRequest
                .builder()
                .sessionId(sessionId)
                .merchantAccountId(merchantAccountId)
                .checkoutSessionCreate(checkoutSessionCreate)
                .build();
        AsyncRequestOperation<UpdateCheckoutSessionRequest, UpdateCheckoutSessionResponse> operation
              = new UpdateCheckoutSession.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get checkout session
     * 
     * <p>Retrieve the information stored on a checkout session.
     * 
     * @return The async call builder
     */
    public GetCheckoutSessionRequestBuilder get() {
        return new GetCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get checkout session
     * 
     * <p>Retrieve the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @return CompletableFuture&lt;GetCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<GetCheckoutSessionResponse> get(String sessionId) {
        return get(sessionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get checkout session
     * 
     * <p>Retrieve the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<GetCheckoutSessionResponse> get(
            String sessionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetCheckoutSessionRequest request =
            GetCheckoutSessionRequest
                .builder()
                .sessionId(sessionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetCheckoutSessionRequest, GetCheckoutSessionResponse> operation
              = new GetCheckoutSession.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete checkout session
     * 
     * <p>Delete a checkout session and all of its (PCI) data.
     * 
     * @return The async call builder
     */
    public DeleteCheckoutSessionRequestBuilder delete() {
        return new DeleteCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete checkout session
     * 
     * <p>Delete a checkout session and all of its (PCI) data.
     * 
     * @param sessionId The ID of the checkout session.
     * @return CompletableFuture&lt;DeleteCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<DeleteCheckoutSessionResponse> delete(String sessionId) {
        return delete(sessionId, JsonNullable.undefined());
    }

    /**
     * Delete checkout session
     * 
     * <p>Delete a checkout session and all of its (PCI) data.
     * 
     * @param sessionId The ID of the checkout session.
     * @param merchantAccountId 
     * @return CompletableFuture&lt;DeleteCheckoutSessionResponse&gt; - The async response
     */
    public CompletableFuture<DeleteCheckoutSessionResponse> delete(String sessionId, JsonNullable<String> merchantAccountId) {
        DeleteCheckoutSessionRequest request =
            DeleteCheckoutSessionRequest
                .builder()
                .sessionId(sessionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeleteCheckoutSessionRequest, DeleteCheckoutSessionResponse> operation
              = new DeleteCheckoutSession.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
