/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.PaymentServiceTokenCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodPaymentServiceTokenRequest;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodPaymentServiceTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodPaymentServiceTokenResponse;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodPaymentServiceTokenRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodPaymentServiceTokenRequestBuilder;
import com.gr4vy.sdk.models.operations.DeletePaymentMethodPaymentServiceTokenResponse;
import com.gr4vy.sdk.models.operations.ListPaymentMethodPaymentServiceTokensRequest;
import com.gr4vy.sdk.models.operations.ListPaymentMethodPaymentServiceTokensRequestBuilder;
import com.gr4vy.sdk.models.operations.ListPaymentMethodPaymentServiceTokensResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethodPaymentServiceToken;
import com.gr4vy.sdk.operations.DeletePaymentMethodPaymentServiceToken;
import com.gr4vy.sdk.operations.ListPaymentMethodPaymentServiceTokens;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentServiceTokens {
    private final SDKConfiguration sdkConfiguration;

    PaymentServiceTokens(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List payment service tokens
     * 
     * <p>List all gateway tokens stored for a payment method.
     * 
     * @return The call builder
     */
    public ListPaymentMethodPaymentServiceTokensRequestBuilder list() {
        return new ListPaymentMethodPaymentServiceTokensRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment service tokens
     * 
     * <p>List all gateway tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentMethodPaymentServiceTokensResponse list(String paymentMethodId) throws Exception {
        return list(paymentMethodId, JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * List payment service tokens
     * 
     * <p>List all gateway tokens stored for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceId The ID of the payment service
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentMethodPaymentServiceTokensResponse list(
            String paymentMethodId, JsonNullable<String> paymentServiceId,
            JsonNullable<String> merchantAccountId, Optional<Options> options) throws Exception {
        ListPaymentMethodPaymentServiceTokensRequest request =
            ListPaymentMethodPaymentServiceTokensRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<ListPaymentMethodPaymentServiceTokensRequest, ListPaymentMethodPaymentServiceTokensResponse> operation
              = new ListPaymentMethodPaymentServiceTokens.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create payment service token
     * 
     * <p>Create a gateway tokens for a payment method.
     * 
     * @return The call builder
     */
    public CreatePaymentMethodPaymentServiceTokenRequestBuilder create() {
        return new CreatePaymentMethodPaymentServiceTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment service token
     * 
     * <p>Create a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceTokenCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodPaymentServiceTokenResponse create(String paymentMethodId, PaymentServiceTokenCreate paymentServiceTokenCreate) throws Exception {
        return create(paymentMethodId, JsonNullable.undefined(), paymentServiceTokenCreate);
    }

    /**
     * Create payment service token
     * 
     * <p>Create a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param merchantAccountId 
     * @param paymentServiceTokenCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodPaymentServiceTokenResponse create(
            String paymentMethodId, JsonNullable<String> merchantAccountId,
            PaymentServiceTokenCreate paymentServiceTokenCreate) throws Exception {
        CreatePaymentMethodPaymentServiceTokenRequest request =
            CreatePaymentMethodPaymentServiceTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .merchantAccountId(merchantAccountId)
                .paymentServiceTokenCreate(paymentServiceTokenCreate)
                .build();
        RequestOperation<CreatePaymentMethodPaymentServiceTokenRequest, CreatePaymentMethodPaymentServiceTokenResponse> operation
              = new CreatePaymentMethodPaymentServiceToken.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete payment service token
     * 
     * <p>Delete a gateway tokens for a payment method.
     * 
     * @return The call builder
     */
    public DeletePaymentMethodPaymentServiceTokenRequestBuilder delete() {
        return new DeletePaymentMethodPaymentServiceTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete payment service token
     * 
     * <p>Delete a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceTokenId The ID of the payment service token
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentMethodPaymentServiceTokenResponse delete(String paymentMethodId, String paymentServiceTokenId) throws Exception {
        return delete(paymentMethodId, paymentServiceTokenId, JsonNullable.undefined());
    }

    /**
     * Delete payment service token
     * 
     * <p>Delete a gateway tokens for a payment method.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param paymentServiceTokenId The ID of the payment service token
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentMethodPaymentServiceTokenResponse delete(
            String paymentMethodId, String paymentServiceTokenId,
            JsonNullable<String> merchantAccountId) throws Exception {
        DeletePaymentMethodPaymentServiceTokenRequest request =
            DeletePaymentMethodPaymentServiceTokenRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .paymentServiceTokenId(paymentServiceTokenId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeletePaymentMethodPaymentServiceTokenRequest, DeletePaymentMethodPaymentServiceTokenResponse> operation
              = new DeletePaymentMethodPaymentServiceToken.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
