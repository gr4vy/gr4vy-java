/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.TransactionRefundAllCreate;
import com.gr4vy.sdk.models.operations.CreateFullTransactionRefundRequest;
import com.gr4vy.sdk.models.operations.async.CreateFullTransactionRefundRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateFullTransactionRefundResponse;
import com.gr4vy.sdk.operations.CreateFullTransactionRefund;
import com.gr4vy.sdk.utils.Headers;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncAll {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final All syncSDK;

    AsyncAll(All syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public All sync() {
        return syncSDK;
    }


    /**
     * Create batch transaction refund
     * 
     * <p>Create a refund for all instruments on a transaction.
     * 
     * @return The async call builder
     */
    public CreateFullTransactionRefundRequestBuilder create() {
        return new CreateFullTransactionRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Create batch transaction refund
     * 
     * <p>Create a refund for all instruments on a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @return {@code CompletableFuture<CreateFullTransactionRefundResponse>} - The async response
     */
    public CompletableFuture<CreateFullTransactionRefundResponse> create(String transactionId) {
        return create(transactionId, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Create batch transaction refund
     * 
     * <p>Create a refund for all instruments on a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param transactionRefundAllCreate 
     * @return {@code CompletableFuture<CreateFullTransactionRefundResponse>} - The async response
     */
    public CompletableFuture<CreateFullTransactionRefundResponse> create(
            String transactionId, JsonNullable<String> merchantAccountId,
            JsonNullable<? extends TransactionRefundAllCreate> transactionRefundAllCreate) {
        CreateFullTransactionRefundRequest request =
            CreateFullTransactionRefundRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .transactionRefundAllCreate(transactionRefundAllCreate)
                .build();
        AsyncRequestOperation<CreateFullTransactionRefundRequest, CreateFullTransactionRefundResponse> operation
              = new CreateFullTransactionRefund.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
