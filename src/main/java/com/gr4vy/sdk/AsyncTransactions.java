/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.TransactionCaptureCreate;
import com.gr4vy.sdk.models.components.TransactionCreate;
import com.gr4vy.sdk.models.components.TransactionUpdate;
import com.gr4vy.sdk.models.operations.CancelTransactionRequest;
import com.gr4vy.sdk.models.operations.CaptureTransactionRequest;
import com.gr4vy.sdk.models.operations.CreateTransactionRequest;
import com.gr4vy.sdk.models.operations.GetTransactionRequest;
import com.gr4vy.sdk.models.operations.ListTransactionsRequest;
import com.gr4vy.sdk.models.operations.SyncTransactionRequest;
import com.gr4vy.sdk.models.operations.UpdateTransactionRequest;
import com.gr4vy.sdk.models.operations.VoidTransactionRequest;
import com.gr4vy.sdk.models.operations.async.CancelTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CancelTransactionResponse;
import com.gr4vy.sdk.models.operations.async.CaptureTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CaptureTransactionResponse;
import com.gr4vy.sdk.models.operations.async.CreateTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateTransactionResponse;
import com.gr4vy.sdk.models.operations.async.GetTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetTransactionResponse;
import com.gr4vy.sdk.models.operations.async.ListTransactionsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListTransactionsResponse;
import com.gr4vy.sdk.models.operations.async.SyncTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.SyncTransactionResponse;
import com.gr4vy.sdk.models.operations.async.UpdateTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UpdateTransactionResponse;
import com.gr4vy.sdk.models.operations.async.VoidTransactionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.VoidTransactionResponse;
import com.gr4vy.sdk.operations.CancelTransaction;
import com.gr4vy.sdk.operations.CaptureTransaction;
import com.gr4vy.sdk.operations.CreateTransaction;
import com.gr4vy.sdk.operations.GetTransaction;
import com.gr4vy.sdk.operations.ListTransactions;
import com.gr4vy.sdk.operations.SyncTransaction;
import com.gr4vy.sdk.operations.UpdateTransaction;
import com.gr4vy.sdk.operations.VoidTransaction;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncTransactions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncTransactionsRefunds refunds;
    private final AsyncEvents events;
    private final AsyncSettlements settlements;
    private final Transactions syncSDK;

    AsyncTransactions(Transactions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.refunds = new AsyncTransactionsRefunds(syncSDK.refunds(), this.sdkConfiguration);
        this.events = new AsyncEvents(syncSDK.events(), this.sdkConfiguration);
        this.settlements = new AsyncSettlements(syncSDK.settlements(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncTransactionsRefunds refunds() {
        return refunds;
    }

    public final AsyncEvents events() {
        return events;
    }

    public final AsyncSettlements settlements() {
        return settlements;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Transactions _sync() {
        return syncSDK;
    }


    /**
     * List transactions
     * 
     * <p>Returns a paginated list of transactions for the merchant account, sorted by most recently updated. You can filter, sort, and search transactions using query parameters.
     * 
     * @return The async call builder
     */
    public ListTransactionsRequestBuilder list() {
        return new ListTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transactions
     * 
     * <p>Returns a paginated list of transactions for the merchant account, sorted by most recently updated. You can filter, sort, and search transactions using query parameters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTransactionsResponse&gt; - The async response
     */
    public CompletableFuture<ListTransactionsResponse> list(ListTransactionsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List transactions
     * 
     * <p>Returns a paginated list of transactions for the merchant account, sorted by most recently updated. You can filter, sort, and search transactions using query parameters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListTransactionsResponse&gt; - The async response
     */
    public CompletableFuture<ListTransactionsResponse> list(ListTransactionsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListTransactionsRequest, ListTransactionsResponse> operation
              = new ListTransactions.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create transaction
     * 
     * <p>Create a new transaction using a supported payment method. If additional buyer authorization is required, an approval URL will be returned. Duplicated gift card numbers are not supported.
     * 
     * @return The async call builder
     */
    public CreateTransactionRequestBuilder create() {
        return new CreateTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create transaction
     * 
     * <p>Create a new transaction using a supported payment method. If additional buyer authorization is required, an approval URL will be returned. Duplicated gift card numbers are not supported.
     * 
     * @param transactionCreate 
     * @return CompletableFuture&lt;CreateTransactionResponse&gt; - The async response
     */
    public CompletableFuture<CreateTransactionResponse> create(TransactionCreate transactionCreate) {
        return create(
                JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
                transactionCreate);
    }

    /**
     * Create transaction
     * 
     * <p>Create a new transaction using a supported payment method. If additional buyer authorization is required, an approval URL will be returned. Duplicated gift card numbers are not supported.
     * 
     * @param merchantAccountId 
     * @param idempotencyKey A unique key that identifies this request. Providing this header will make this an idempotent request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid collisions.
     * @param xForwardedFor The IP address to forward from the customer. Use this when calling
     *         our API from the server side to ensure the customer's address is
     *         passed to downstream services, rather than your server IP.
     * @param transactionCreate 
     * @return CompletableFuture&lt;CreateTransactionResponse&gt; - The async response
     */
    public CompletableFuture<CreateTransactionResponse> create(
            JsonNullable<String> merchantAccountId, JsonNullable<String> idempotencyKey,
            Optional<String> xForwardedFor, TransactionCreate transactionCreate) {
        CreateTransactionRequest request =
            CreateTransactionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .idempotencyKey(idempotencyKey)
                .xForwardedFor(xForwardedFor)
                .transactionCreate(transactionCreate)
                .build();
        AsyncRequestOperation<CreateTransactionRequest, CreateTransactionResponse> operation
              = new CreateTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get transaction
     * 
     * <p>Retrieve the details of a transaction by its unique identifier.
     * 
     * @return The async call builder
     */
    public GetTransactionRequestBuilder get() {
        return new GetTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction
     * 
     * <p>Retrieve the details of a transaction by its unique identifier.
     * 
     * @param transactionId The ID of the transaction
     * @return CompletableFuture&lt;GetTransactionResponse&gt; - The async response
     */
    public CompletableFuture<GetTransactionResponse> get(String transactionId) {
        return get(transactionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get transaction
     * 
     * <p>Retrieve the details of a transaction by its unique identifier.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetTransactionResponse&gt; - The async response
     */
    public CompletableFuture<GetTransactionResponse> get(
            String transactionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetTransactionRequest request =
            GetTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetTransactionRequest, GetTransactionResponse> operation
              = new GetTransaction.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Manually update a transaction
     * 
     * <p>Manually updates a transaction.
     * 
     * @return The async call builder
     */
    public UpdateTransactionRequestBuilder update() {
        return new UpdateTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Manually update a transaction
     * 
     * <p>Manually updates a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param transactionUpdate 
     * @return CompletableFuture&lt;UpdateTransactionResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTransactionResponse> update(String transactionId, TransactionUpdate transactionUpdate) {
        return update(transactionId, JsonNullable.undefined(), transactionUpdate);
    }

    /**
     * Manually update a transaction
     * 
     * <p>Manually updates a transaction.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @param transactionUpdate 
     * @return CompletableFuture&lt;UpdateTransactionResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTransactionResponse> update(
            String transactionId, JsonNullable<String> merchantAccountId,
            TransactionUpdate transactionUpdate) {
        UpdateTransactionRequest request =
            UpdateTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .transactionUpdate(transactionUpdate)
                .build();
        AsyncRequestOperation<UpdateTransactionRequest, UpdateTransactionResponse> operation
              = new UpdateTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Capture transaction
     * 
     * <p>Captures a previously authorized transaction. You can capture the full or a partial amount, as long as it does not exceed the authorized amount (unless over-capture is enabled).
     * 
     * @return The async call builder
     */
    public CaptureTransactionRequestBuilder capture() {
        return new CaptureTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Capture transaction
     * 
     * <p>Captures a previously authorized transaction. You can capture the full or a partial amount, as long as it does not exceed the authorized amount (unless over-capture is enabled).
     * 
     * @param transactionId The ID of the transaction
     * @param transactionCaptureCreate Request body for capturing an authorized transaction.
     * @return CompletableFuture&lt;CaptureTransactionResponse&gt; - The async response
     */
    public CompletableFuture<CaptureTransactionResponse> capture(String transactionId, TransactionCaptureCreate transactionCaptureCreate) {
        return capture(
                transactionId, JsonNullable.undefined(), JsonNullable.undefined(),
                transactionCaptureCreate);
    }

    /**
     * Capture transaction
     * 
     * <p>Captures a previously authorized transaction. You can capture the full or a partial amount, as long as it does not exceed the authorized amount (unless over-capture is enabled).
     * 
     * @param transactionId The ID of the transaction
     * @param prefer The preferred resource type in the response.
     * @param merchantAccountId 
     * @param transactionCaptureCreate Request body for capturing an authorized transaction.
     * @return CompletableFuture&lt;CaptureTransactionResponse&gt; - The async response
     */
    public CompletableFuture<CaptureTransactionResponse> capture(
            String transactionId, JsonNullable<? extends List<String>> prefer,
            JsonNullable<String> merchantAccountId, TransactionCaptureCreate transactionCaptureCreate) {
        CaptureTransactionRequest request =
            CaptureTransactionRequest
                .builder()
                .transactionId(transactionId)
                .prefer(prefer)
                .merchantAccountId(merchantAccountId)
                .transactionCaptureCreate(transactionCaptureCreate)
                .build();
        AsyncRequestOperation<CaptureTransactionRequest, CaptureTransactionResponse> operation
              = new CaptureTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Void transaction
     * 
     * <p>Voids a previously authorized transaction. If the transaction was not yet successfully authorized, or was already captured, the void will not be processed. This operation releases the hold on the buyer's funds. Captured transactions can be refunded instead.
     * 
     * @return The async call builder
     */
    public VoidTransactionRequestBuilder void_() {
        return new VoidTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Void transaction
     * 
     * <p>Voids a previously authorized transaction. If the transaction was not yet successfully authorized, or was already captured, the void will not be processed. This operation releases the hold on the buyer's funds. Captured transactions can be refunded instead.
     * 
     * @param transactionId The ID of the transaction
     * @return CompletableFuture&lt;VoidTransactionResponse&gt; - The async response
     */
    public CompletableFuture<VoidTransactionResponse> void_(String transactionId) {
        return void_(transactionId, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Void transaction
     * 
     * <p>Voids a previously authorized transaction. If the transaction was not yet successfully authorized, or was already captured, the void will not be processed. This operation releases the hold on the buyer's funds. Captured transactions can be refunded instead.
     * 
     * @param transactionId The ID of the transaction
     * @param prefer The preferred resource type in the response.
     * @param merchantAccountId 
     * @return CompletableFuture&lt;VoidTransactionResponse&gt; - The async response
     */
    public CompletableFuture<VoidTransactionResponse> void_(
            String transactionId, JsonNullable<? extends List<String>> prefer,
            JsonNullable<String> merchantAccountId) {
        VoidTransactionRequest request =
            VoidTransactionRequest
                .builder()
                .transactionId(transactionId)
                .prefer(prefer)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<VoidTransactionRequest, VoidTransactionResponse> operation
              = new VoidTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Cancel transaction
     * 
     * <p>Cancels a pending transaction. If the transaction was successfully authorized, or was already captured, the cancel will not be processed.
     * 
     * @return The async call builder
     */
    public CancelTransactionRequestBuilder cancel() {
        return new CancelTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel transaction
     * 
     * <p>Cancels a pending transaction. If the transaction was successfully authorized, or was already captured, the cancel will not be processed.
     * 
     * @param transactionId The ID of the transaction
     * @return CompletableFuture&lt;CancelTransactionResponse&gt; - The async response
     */
    public CompletableFuture<CancelTransactionResponse> cancel(String transactionId) {
        return cancel(transactionId, JsonNullable.undefined());
    }

    /**
     * Cancel transaction
     * 
     * <p>Cancels a pending transaction. If the transaction was successfully authorized, or was already captured, the cancel will not be processed.
     * 
     * @param transactionId The ID of the transaction
     * @param merchantAccountId 
     * @return CompletableFuture&lt;CancelTransactionResponse&gt; - The async response
     */
    public CompletableFuture<CancelTransactionResponse> cancel(String transactionId, JsonNullable<String> merchantAccountId) {
        CancelTransactionRequest request =
            CancelTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<CancelTransactionRequest, CancelTransactionResponse> operation
              = new CancelTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Sync transaction
     * 
     * <p>Synchronizes the status of a transaction with the underlying payment service provider. This is useful for transactions in a pending state to check if they've been completed or failed. Only available for some payment service providers.
     * 
     * @return The async call builder
     */
    public SyncTransactionRequestBuilder sync() {
        return new SyncTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Sync transaction
     * 
     * <p>Synchronizes the status of a transaction with the underlying payment service provider. This is useful for transactions in a pending state to check if they've been completed or failed. Only available for some payment service providers.
     * 
     * @param transactionId 
     * @return CompletableFuture&lt;SyncTransactionResponse&gt; - The async response
     */
    public CompletableFuture<SyncTransactionResponse> sync(String transactionId) {
        return sync(transactionId, JsonNullable.undefined());
    }

    /**
     * Sync transaction
     * 
     * <p>Synchronizes the status of a transaction with the underlying payment service provider. This is useful for transactions in a pending state to check if they've been completed or failed. Only available for some payment service providers.
     * 
     * @param transactionId 
     * @param merchantAccountId 
     * @return CompletableFuture&lt;SyncTransactionResponse&gt; - The async response
     */
    public CompletableFuture<SyncTransactionResponse> sync(String transactionId, JsonNullable<String> merchantAccountId) {
        SyncTransactionRequest request =
            SyncTransactionRequest
                .builder()
                .transactionId(transactionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<SyncTransactionRequest, SyncTransactionResponse> operation
              = new SyncTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
