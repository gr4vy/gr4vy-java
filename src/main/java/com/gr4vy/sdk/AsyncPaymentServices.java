/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.PaymentServiceCreate;
import com.gr4vy.sdk.models.components.PaymentServiceUpdate;
import com.gr4vy.sdk.models.components.VerifyCredentials;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceRequest;
import com.gr4vy.sdk.models.operations.CreatePaymentServiceSessionRequest;
import com.gr4vy.sdk.models.operations.DeletePaymentServiceRequest;
import com.gr4vy.sdk.models.operations.GetPaymentServiceRequest;
import com.gr4vy.sdk.models.operations.ListPaymentServicesRequest;
import com.gr4vy.sdk.models.operations.UpdatePaymentServiceRequest;
import com.gr4vy.sdk.models.operations.VerifyPaymentServiceCredentialsRequest;
import com.gr4vy.sdk.models.operations.async.CreatePaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreatePaymentServiceResponse;
import com.gr4vy.sdk.models.operations.async.CreatePaymentServiceSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreatePaymentServiceSessionResponse;
import com.gr4vy.sdk.models.operations.async.DeletePaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeletePaymentServiceResponse;
import com.gr4vy.sdk.models.operations.async.GetPaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetPaymentServiceResponse;
import com.gr4vy.sdk.models.operations.async.ListPaymentServicesRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListPaymentServicesResponse;
import com.gr4vy.sdk.models.operations.async.UpdatePaymentServiceRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UpdatePaymentServiceResponse;
import com.gr4vy.sdk.models.operations.async.VerifyPaymentServiceCredentialsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.VerifyPaymentServiceCredentialsResponse;
import com.gr4vy.sdk.operations.CreatePaymentService;
import com.gr4vy.sdk.operations.CreatePaymentServiceSession;
import com.gr4vy.sdk.operations.DeletePaymentService;
import com.gr4vy.sdk.operations.GetPaymentService;
import com.gr4vy.sdk.operations.ListPaymentServices;
import com.gr4vy.sdk.operations.UpdatePaymentService;
import com.gr4vy.sdk.operations.VerifyPaymentServiceCredentials;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncPaymentServices {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final PaymentServices syncSDK;

    AsyncPaymentServices(PaymentServices syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public PaymentServices sync() {
        return syncSDK;
    }


    /**
     * List payment services
     * 
     * <p>List the configured payment services.
     * 
     * @return The async call builder
     */
    public ListPaymentServicesRequestBuilder list() {
        return new ListPaymentServicesRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment services
     * 
     * <p>List the configured payment services.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListPaymentServicesResponse>} - The async response
     */
    public CompletableFuture<ListPaymentServicesResponse> list(ListPaymentServicesRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List payment services
     * 
     * <p>List the configured payment services.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<ListPaymentServicesResponse>} - The async response
     */
    public CompletableFuture<ListPaymentServicesResponse> list(ListPaymentServicesRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListPaymentServicesRequest, ListPaymentServicesResponse> operation
              = new ListPaymentServices.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a configured payment service
     * 
     * <p>Updates the configuration of a payment service.
     * 
     * @return The async call builder
     */
    public UpdatePaymentServiceRequestBuilder create() {
        return new UpdatePaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a configured payment service
     * 
     * <p>Updates the configuration of a payment service.
     * 
     * @param paymentServiceCreate Request body for activating a payment service
     * @return {@code CompletableFuture<UpdatePaymentServiceResponse>} - The async response
     */
    public CompletableFuture<UpdatePaymentServiceResponse> create(PaymentServiceCreate paymentServiceCreate) {
        return create(JsonNullable.undefined(), paymentServiceCreate);
    }

    /**
     * Update a configured payment service
     * 
     * <p>Updates the configuration of a payment service.
     * 
     * @param merchantAccountId 
     * @param paymentServiceCreate Request body for activating a payment service
     * @return {@code CompletableFuture<UpdatePaymentServiceResponse>} - The async response
     */
    public CompletableFuture<UpdatePaymentServiceResponse> create(JsonNullable<String> merchantAccountId, PaymentServiceCreate paymentServiceCreate) {
        UpdatePaymentServiceRequest request =
            UpdatePaymentServiceRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .paymentServiceCreate(paymentServiceCreate)
                .build();
        AsyncRequestOperation<UpdatePaymentServiceRequest, UpdatePaymentServiceResponse> operation
              = new UpdatePaymentService.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get payment service
     * 
     * <p>Get the details of a configured payment service.
     * 
     * @return The async call builder
     */
    public GetPaymentServiceRequestBuilder get() {
        return new GetPaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment service
     * 
     * <p>Get the details of a configured payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @return {@code CompletableFuture<GetPaymentServiceResponse>} - The async response
     */
    public CompletableFuture<GetPaymentServiceResponse> get(String paymentServiceId) {
        return get(paymentServiceId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment service
     * 
     * <p>Get the details of a configured payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<GetPaymentServiceResponse>} - The async response
     */
    public CompletableFuture<GetPaymentServiceResponse> get(
            String paymentServiceId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetPaymentServiceRequest request =
            GetPaymentServiceRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetPaymentServiceRequest, GetPaymentServiceResponse> operation
              = new GetPaymentService.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Configure a payment service
     * 
     * <p>Configures a new payment service for use by merchants.
     * 
     * @return The async call builder
     */
    public CreatePaymentServiceRequestBuilder update() {
        return new CreatePaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Configure a payment service
     * 
     * <p>Configures a new payment service for use by merchants.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param paymentServiceUpdate Request body for updating a Payment Service
     * @return {@code CompletableFuture<CreatePaymentServiceResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentServiceResponse> update(String paymentServiceId, PaymentServiceUpdate paymentServiceUpdate) {
        return update(paymentServiceId, JsonNullable.undefined(), paymentServiceUpdate);
    }

    /**
     * Configure a payment service
     * 
     * <p>Configures a new payment service for use by merchants.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @param paymentServiceUpdate Request body for updating a Payment Service
     * @return {@code CompletableFuture<CreatePaymentServiceResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentServiceResponse> update(
            String paymentServiceId, JsonNullable<String> merchantAccountId,
            PaymentServiceUpdate paymentServiceUpdate) {
        CreatePaymentServiceRequest request =
            CreatePaymentServiceRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .paymentServiceUpdate(paymentServiceUpdate)
                .build();
        AsyncRequestOperation<CreatePaymentServiceRequest, CreatePaymentServiceResponse> operation
              = new CreatePaymentService.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a configured payment service
     * 
     * <p>Deletes all the configuration of a payment service.
     * 
     * @return The async call builder
     */
    public DeletePaymentServiceRequestBuilder delete() {
        return new DeletePaymentServiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a configured payment service
     * 
     * <p>Deletes all the configuration of a payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @return {@code CompletableFuture<DeletePaymentServiceResponse>} - The async response
     */
    public CompletableFuture<DeletePaymentServiceResponse> delete(String paymentServiceId) {
        return delete(paymentServiceId, JsonNullable.undefined());
    }

    /**
     * Delete a configured payment service
     * 
     * <p>Deletes all the configuration of a payment service.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @return {@code CompletableFuture<DeletePaymentServiceResponse>} - The async response
     */
    public CompletableFuture<DeletePaymentServiceResponse> delete(String paymentServiceId, JsonNullable<String> merchantAccountId) {
        DeletePaymentServiceRequest request =
            DeletePaymentServiceRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeletePaymentServiceRequest, DeletePaymentServiceResponse> operation
              = new DeletePaymentService.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Verify payment service credentials
     * 
     * <p>Verify the credentials of a configured payment service
     * 
     * @return The async call builder
     */
    public VerifyPaymentServiceCredentialsRequestBuilder verify() {
        return new VerifyPaymentServiceCredentialsRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify payment service credentials
     * 
     * <p>Verify the credentials of a configured payment service
     * 
     * @param verifyCredentials 
     * @return {@code CompletableFuture<VerifyPaymentServiceCredentialsResponse>} - The async response
     */
    public CompletableFuture<VerifyPaymentServiceCredentialsResponse> verify(VerifyCredentials verifyCredentials) {
        return verify(JsonNullable.undefined(), verifyCredentials);
    }

    /**
     * Verify payment service credentials
     * 
     * <p>Verify the credentials of a configured payment service
     * 
     * @param merchantAccountId 
     * @param verifyCredentials 
     * @return {@code CompletableFuture<VerifyPaymentServiceCredentialsResponse>} - The async response
     */
    public CompletableFuture<VerifyPaymentServiceCredentialsResponse> verify(JsonNullable<String> merchantAccountId, VerifyCredentials verifyCredentials) {
        VerifyPaymentServiceCredentialsRequest request =
            VerifyPaymentServiceCredentialsRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .verifyCredentials(verifyCredentials)
                .build();
        AsyncRequestOperation<VerifyPaymentServiceCredentialsRequest, VerifyPaymentServiceCredentialsResponse> operation
              = new VerifyPaymentServiceCredentials.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a session for a payment service definition
     * 
     * <p>Creates a session for a payment service that supports sessions.
     * 
     * @return The async call builder
     */
    public CreatePaymentServiceSessionRequestBuilder session() {
        return new CreatePaymentServiceSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a session for a payment service definition
     * 
     * <p>Creates a session for a payment service that supports sessions.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param requestBody 
     * @return {@code CompletableFuture<CreatePaymentServiceSessionResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentServiceSessionResponse> session(String paymentServiceId, Map<String, Object> requestBody) {
        return session(paymentServiceId, JsonNullable.undefined(), requestBody);
    }

    /**
     * Create a session for a payment service definition
     * 
     * <p>Creates a session for a payment service that supports sessions.
     * 
     * @param paymentServiceId the ID of the payment service
     * @param merchantAccountId 
     * @param requestBody 
     * @return {@code CompletableFuture<CreatePaymentServiceSessionResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentServiceSessionResponse> session(
            String paymentServiceId, JsonNullable<String> merchantAccountId,
            Map<String, Object> requestBody) {
        CreatePaymentServiceSessionRequest request =
            CreatePaymentServiceSessionRequest
                .builder()
                .paymentServiceId(paymentServiceId)
                .merchantAccountId(merchantAccountId)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<CreatePaymentServiceSessionRequest, CreatePaymentServiceSessionResponse> operation
              = new CreatePaymentServiceSession.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
