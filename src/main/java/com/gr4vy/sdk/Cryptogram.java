/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.CryptogramCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenCryptogramRequest;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenCryptogramRequestBuilder;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenCryptogramResponse;
import com.gr4vy.sdk.operations.CreatePaymentMethodNetworkTokenCryptogram;
import java.lang.Exception;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class Cryptogram {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncCryptogram asyncSDK;

    Cryptogram(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncCryptogram(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncCryptogram async() {
        return asyncSDK;
    }

    /**
     * Provision network token cryptogram
     * 
     * <p>Provision a cryptogram for a network token.
     * 
     * @return The call builder
     */
    public CreatePaymentMethodNetworkTokenCryptogramRequestBuilder create() {
        return new CreatePaymentMethodNetworkTokenCryptogramRequestBuilder(sdkConfiguration);
    }

    /**
     * Provision network token cryptogram
     * 
     * <p>Provision a cryptogram for a network token.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param cryptogramCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodNetworkTokenCryptogramResponse create(
            String paymentMethodId, String networkTokenId,
            CryptogramCreate cryptogramCreate) throws Exception {
        return create(paymentMethodId, networkTokenId, JsonNullable.undefined(),
            cryptogramCreate);
    }

    /**
     * Provision network token cryptogram
     * 
     * <p>Provision a cryptogram for a network token.
     * 
     * @param paymentMethodId The ID of the payment method
     * @param networkTokenId The ID of the network token
     * @param merchantAccountId 
     * @param cryptogramCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentMethodNetworkTokenCryptogramResponse create(
            String paymentMethodId, String networkTokenId,
            JsonNullable<String> merchantAccountId, CryptogramCreate cryptogramCreate) throws Exception {
        CreatePaymentMethodNetworkTokenCryptogramRequest request =
            CreatePaymentMethodNetworkTokenCryptogramRequest
                .builder()
                .paymentMethodId(paymentMethodId)
                .networkTokenId(networkTokenId)
                .merchantAccountId(merchantAccountId)
                .cryptogramCreate(cryptogramCreate)
                .build();
        RequestOperation<CreatePaymentMethodNetworkTokenCryptogramRequest, CreatePaymentMethodNetworkTokenCryptogramResponse> operation
              = new CreatePaymentMethodNetworkTokenCryptogram.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
