/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.operations.CreateReportExecutionUrlRequest;
import com.gr4vy.sdk.models.operations.GetReportExecutionRequest;
import com.gr4vy.sdk.models.operations.ListReportExecutionsRequest;
import com.gr4vy.sdk.models.operations.async.CreateReportExecutionUrlRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateReportExecutionUrlResponse;
import com.gr4vy.sdk.models.operations.async.GetReportExecutionRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetReportExecutionResponse;
import com.gr4vy.sdk.models.operations.async.ListReportExecutionsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListReportExecutionsResponse;
import com.gr4vy.sdk.operations.CreateReportExecutionUrl;
import com.gr4vy.sdk.operations.GetReportExecution;
import com.gr4vy.sdk.operations.ListReportExecutions;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncExecutions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Executions syncSDK;

    AsyncExecutions(Executions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Executions sync() {
        return syncSDK;
    }


    /**
     * List executions for report
     * 
     * <p>List all executions of a specific report.
     * 
     * @return The async call builder
     */
    public ListReportExecutionsRequestBuilder list() {
        return new ListReportExecutionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List executions for report
     * 
     * <p>List all executions of a specific report.
     * 
     * @param reportId The ID of the report to retrieve details for.
     * @return CompletableFuture&lt;ListReportExecutionsResponse&gt; - The async response
     */
    public CompletableFuture<ListReportExecutionsResponse> list(String reportId) {
        return list(
                reportId, JsonNullable.undefined(), Optional.empty(),
                JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List executions for report
     * 
     * <p>List all executions of a specific report.
     * 
     * @param reportId The ID of the report to retrieve details for.
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are at returned.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;ListReportExecutionsResponse&gt; - The async response
     */
    public CompletableFuture<ListReportExecutionsResponse> list(
            String reportId, JsonNullable<String> cursor,
            Optional<Long> limit, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        ListReportExecutionsRequest request =
            ListReportExecutionsRequest
                .builder()
                .reportId(reportId)
                .cursor(cursor)
                .limit(limit)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListReportExecutionsRequest, ListReportExecutionsResponse> operation
              = new ListReportExecutions.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create URL for executed report
     * 
     * <p>Creates a download URL for a specific execution of a report.
     * 
     * @return The async call builder
     */
    public CreateReportExecutionUrlRequestBuilder url() {
        return new CreateReportExecutionUrlRequestBuilder(sdkConfiguration);
    }

    /**
     * Create URL for executed report
     * 
     * <p>Creates a download URL for a specific execution of a report.
     * 
     * @param reportId The ID of the report to retrieve a URL for.
     * @param reportExecutionId The ID of the execution of a report to retrieve a URL for.
     * @return CompletableFuture&lt;CreateReportExecutionUrlResponse&gt; - The async response
     */
    public CompletableFuture<CreateReportExecutionUrlResponse> url(String reportId, String reportExecutionId) {
        return url(reportId, reportExecutionId, JsonNullable.undefined());
    }

    /**
     * Create URL for executed report
     * 
     * <p>Creates a download URL for a specific execution of a report.
     * 
     * @param reportId The ID of the report to retrieve a URL for.
     * @param reportExecutionId The ID of the execution of a report to retrieve a URL for.
     * @param merchantAccountId 
     * @return CompletableFuture&lt;CreateReportExecutionUrlResponse&gt; - The async response
     */
    public CompletableFuture<CreateReportExecutionUrlResponse> url(
            String reportId, String reportExecutionId,
            JsonNullable<String> merchantAccountId) {
        CreateReportExecutionUrlRequest request =
            CreateReportExecutionUrlRequest
                .builder()
                .reportId(reportId)
                .reportExecutionId(reportExecutionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<CreateReportExecutionUrlRequest, CreateReportExecutionUrlResponse> operation
              = new CreateReportExecutionUrl.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get executed report
     * 
     * <p>Fetch a specific executed report.
     * 
     * @return The async call builder
     */
    public GetReportExecutionRequestBuilder get() {
        return new GetReportExecutionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get executed report
     * 
     * <p>Fetch a specific executed report.
     * 
     * @param reportExecutionId The ID of the execution of a report to retrieve details for.
     * @return CompletableFuture&lt;GetReportExecutionResponse&gt; - The async response
     */
    public CompletableFuture<GetReportExecutionResponse> get(String reportExecutionId) {
        return get(reportExecutionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get executed report
     * 
     * <p>Fetch a specific executed report.
     * 
     * @param reportExecutionId The ID of the execution of a report to retrieve details for.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetReportExecutionResponse&gt; - The async response
     */
    public CompletableFuture<GetReportExecutionResponse> get(
            String reportExecutionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetReportExecutionRequest request =
            GetReportExecutionRequest
                .builder()
                .reportExecutionId(reportExecutionId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetReportExecutionRequest, GetReportExecutionResponse> operation
              = new GetReportExecution.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
