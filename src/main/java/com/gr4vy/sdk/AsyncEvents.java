/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.operations.ListTransactionEventsRequest;
import com.gr4vy.sdk.models.operations.async.ListTransactionEventsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListTransactionEventsResponse;
import com.gr4vy.sdk.operations.ListTransactionEvents;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncEvents {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Events syncSDK;

    AsyncEvents(Events syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Events sync() {
        return syncSDK;
    }


    /**
     * List transaction events
     * 
     * <p>Retrieve a paginated list of events related to processing a transaction, including status changes,
     * API requests, and webhook delivery attempts. Events are listed in chronological order, with the most
     * recent events first.
     * 
     * @return The async call builder
     */
    public ListTransactionEventsRequestBuilder list() {
        return new ListTransactionEventsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transaction events
     * 
     * <p>Retrieve a paginated list of events related to processing a transaction, including status changes,
     * API requests, and webhook delivery attempts. Events are listed in chronological order, with the most
     * recent events first.
     * 
     * @param transactionId The ID of the transaction
     * @return {@code CompletableFuture<ListTransactionEventsResponse>} - The async response
     */
    public CompletableFuture<ListTransactionEventsResponse> list(String transactionId) {
        return list(
                transactionId, JsonNullable.undefined(), Optional.empty(),
                JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List transaction events
     * 
     * <p>Retrieve a paginated list of events related to processing a transaction, including status changes,
     * API requests, and webhook delivery attempts. Events are listed in chronological order, with the most
     * recent events first.
     * 
     * @param transactionId The ID of the transaction
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are at returned.
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<ListTransactionEventsResponse>} - The async response
     */
    public CompletableFuture<ListTransactionEventsResponse> list(
            String transactionId, JsonNullable<String> cursor,
            Optional<Long> limit, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        ListTransactionEventsRequest request =
            ListTransactionEventsRequest
                .builder()
                .transactionId(transactionId)
                .cursor(cursor)
                .limit(limit)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListTransactionEventsRequest, ListTransactionEventsResponse> operation
              = new ListTransactionEvents.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
