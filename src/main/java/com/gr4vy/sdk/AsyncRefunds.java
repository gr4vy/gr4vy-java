/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.operations.GetRefundRequest;
import com.gr4vy.sdk.models.operations.async.GetRefundRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetRefundResponse;
import com.gr4vy.sdk.operations.GetRefund;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncRefunds {
    private final SDKConfiguration sdkConfiguration;
    private final Refunds syncSDK;

    AsyncRefunds(Refunds syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Refunds sync() {
        return syncSDK;
    }


    /**
     * Get refund
     * 
     * <p>Fetch a refund.
     * 
     * @return The async call builder
     */
    public GetRefundRequestBuilder get() {
        return new GetRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Get refund
     * 
     * <p>Fetch a refund.
     * 
     * @param refundId The ID of the refund
     * @return CompletableFuture&lt;GetRefundResponse&gt; - The async response
     */
    public CompletableFuture<GetRefundResponse> get(String refundId) {
        return get(refundId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get refund
     * 
     * <p>Fetch a refund.
     * 
     * @param refundId The ID of the refund
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetRefundResponse&gt; - The async response
     */
    public CompletableFuture<GetRefundResponse> get(
            String refundId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetRefundRequest request =
            GetRefundRequest
                .builder()
                .refundId(refundId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetRefundRequest, GetRefundResponse> operation
              = new GetRefund.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
