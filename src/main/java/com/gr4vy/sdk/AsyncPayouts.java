/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.PayoutCreate;
import com.gr4vy.sdk.models.operations.CreatePayoutRequest;
import com.gr4vy.sdk.models.operations.GetPayoutRequest;
import com.gr4vy.sdk.models.operations.ListPayoutsRequest;
import com.gr4vy.sdk.models.operations.async.CreatePayoutRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreatePayoutResponse;
import com.gr4vy.sdk.models.operations.async.GetPayoutRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetPayoutResponse;
import com.gr4vy.sdk.models.operations.async.ListPayoutsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListPayoutsResponse;
import com.gr4vy.sdk.operations.CreatePayout;
import com.gr4vy.sdk.operations.GetPayout;
import com.gr4vy.sdk.operations.ListPayouts;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Options;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncPayouts {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Payouts syncSDK;

    AsyncPayouts(Payouts syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Payouts sync() {
        return syncSDK;
    }


    /**
     * List payouts created
     * 
     * <p>Returns a list of payouts made.
     * 
     * @return The async call builder
     */
    public ListPayoutsRequestBuilder list() {
        return new ListPayoutsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payouts created
     * 
     * <p>Returns a list of payouts made.
     * 
     * @return {@code CompletableFuture<ListPayoutsResponse>} - The async response
     */
    public CompletableFuture<ListPayoutsResponse> listDirect() {
        return list(
                JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
                Optional.empty());
    }

    /**
     * List payouts created
     * 
     * <p>Returns a list of payouts made.
     * 
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are at returned.
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<ListPayoutsResponse>} - The async response
     */
    public CompletableFuture<ListPayoutsResponse> list(
            JsonNullable<String> cursor, Optional<Long> limit,
            JsonNullable<String> merchantAccountId, Optional<Options> options) {
        ListPayoutsRequest request =
            ListPayoutsRequest
                .builder()
                .cursor(cursor)
                .limit(limit)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<ListPayoutsRequest, ListPayoutsResponse> operation
              = new ListPayouts.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a payout
     * 
     * <p>Creates a new payout.
     * 
     * @return The async call builder
     */
    public CreatePayoutRequestBuilder create() {
        return new CreatePayoutRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a payout
     * 
     * <p>Creates a new payout.
     * 
     * @param payoutCreate PayoutCreate
     *         
     *         Represents the data required to create a new payout.
     * @return {@code CompletableFuture<CreatePayoutResponse>} - The async response
     */
    public CompletableFuture<CreatePayoutResponse> create(PayoutCreate payoutCreate) {
        return create(JsonNullable.undefined(), payoutCreate);
    }

    /**
     * Create a payout
     * 
     * <p>Creates a new payout.
     * 
     * @param merchantAccountId 
     * @param payoutCreate PayoutCreate
     *         
     *         Represents the data required to create a new payout.
     * @return {@code CompletableFuture<CreatePayoutResponse>} - The async response
     */
    public CompletableFuture<CreatePayoutResponse> create(JsonNullable<String> merchantAccountId, PayoutCreate payoutCreate) {
        CreatePayoutRequest request =
            CreatePayoutRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .payoutCreate(payoutCreate)
                .build();
        AsyncRequestOperation<CreatePayoutRequest, CreatePayoutResponse> operation
              = new CreatePayout.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get a payout
     * 
     * <p>Retrieves a payout.
     * 
     * @return The async call builder
     */
    public GetPayoutRequestBuilder get() {
        return new GetPayoutRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a payout
     * 
     * <p>Retrieves a payout.
     * 
     * @param payoutId 
     * @return {@code CompletableFuture<GetPayoutResponse>} - The async response
     */
    public CompletableFuture<GetPayoutResponse> get(String payoutId) {
        return get(payoutId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get a payout
     * 
     * <p>Retrieves a payout.
     * 
     * @param payoutId 
     * @param merchantAccountId 
     * @param options additional options
     * @return {@code CompletableFuture<GetPayoutResponse>} - The async response
     */
    public CompletableFuture<GetPayoutResponse> get(
            String payoutId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetPayoutRequest request =
            GetPayoutRequest
                .builder()
                .payoutId(payoutId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetPayoutRequest, GetPayoutResponse> operation
              = new GetPayout.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
