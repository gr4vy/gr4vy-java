/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.CheckoutSessionCreate;
import com.gr4vy.sdk.models.operations.CreateCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.CreateCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateCheckoutSessionResponse;
import com.gr4vy.sdk.models.operations.DeleteCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.DeleteCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.DeleteCheckoutSessionResponse;
import com.gr4vy.sdk.models.operations.GetCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.GetCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.GetCheckoutSessionResponse;
import com.gr4vy.sdk.models.operations.UpdateCheckoutSessionRequest;
import com.gr4vy.sdk.models.operations.UpdateCheckoutSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.UpdateCheckoutSessionResponse;
import com.gr4vy.sdk.operations.CreateCheckoutSessionOperation;
import com.gr4vy.sdk.operations.DeleteCheckoutSessionOperation;
import com.gr4vy.sdk.operations.GetCheckoutSessionOperation;
import com.gr4vy.sdk.operations.UpdateCheckoutSessionOperation;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CheckoutSessions {
    private final SDKConfiguration sdkConfiguration;

    CheckoutSessions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Create checkout session
     * 
     * <p>Create a new checkout session.
     * 
     * @return The call builder
     */
    public CreateCheckoutSessionRequestBuilder create() {
        return new CreateCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create checkout session
     * 
     * <p>Create a new checkout session.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCheckoutSessionResponse createDirect() throws Exception {
        return create(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Create checkout session
     * 
     * <p>Create a new checkout session.
     * 
     * @param merchantAccountId 
     * @param checkoutSessionCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCheckoutSessionResponse create(JsonNullable<String> merchantAccountId, Optional<? extends CheckoutSessionCreate> checkoutSessionCreate) throws Exception {
        CreateCheckoutSessionRequest request =
            CreateCheckoutSessionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .checkoutSessionCreate(checkoutSessionCreate)
                .build();
        RequestOperation<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse> operation
              = new CreateCheckoutSessionOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update checkout session
     * 
     * <p>Update the information stored on a checkout session.
     * 
     * @return The call builder
     */
    public UpdateCheckoutSessionRequestBuilder update() {
        return new UpdateCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update checkout session
     * 
     * <p>Update the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @param checkoutSessionCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCheckoutSessionResponse update(String sessionId, CheckoutSessionCreate checkoutSessionCreate) throws Exception {
        return update(sessionId, JsonNullable.undefined(), checkoutSessionCreate);
    }

    /**
     * Update checkout session
     * 
     * <p>Update the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @param merchantAccountId 
     * @param checkoutSessionCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCheckoutSessionResponse update(
            String sessionId, JsonNullable<String> merchantAccountId,
            CheckoutSessionCreate checkoutSessionCreate) throws Exception {
        UpdateCheckoutSessionRequest request =
            UpdateCheckoutSessionRequest
                .builder()
                .sessionId(sessionId)
                .merchantAccountId(merchantAccountId)
                .checkoutSessionCreate(checkoutSessionCreate)
                .build();
        RequestOperation<UpdateCheckoutSessionRequest, UpdateCheckoutSessionResponse> operation
              = new UpdateCheckoutSessionOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get checkout session
     * 
     * <p>Retrieve the information stored on a checkout session.
     * 
     * @return The call builder
     */
    public GetCheckoutSessionRequestBuilder get() {
        return new GetCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get checkout session
     * 
     * <p>Retrieve the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCheckoutSessionResponse get(String sessionId) throws Exception {
        return get(sessionId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get checkout session
     * 
     * <p>Retrieve the information stored on a checkout session.
     * 
     * @param sessionId The ID of the checkout session.
     * @param merchantAccountId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCheckoutSessionResponse get(
            String sessionId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception {
        GetCheckoutSessionRequest request =
            GetCheckoutSessionRequest
                .builder()
                .sessionId(sessionId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<GetCheckoutSessionRequest, GetCheckoutSessionResponse> operation
              = new GetCheckoutSessionOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete checkout session
     * 
     * <p>Delete a checkout session and all of its (PCI) data.
     * 
     * @return The call builder
     */
    public DeleteCheckoutSessionRequestBuilder delete() {
        return new DeleteCheckoutSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete checkout session
     * 
     * <p>Delete a checkout session and all of its (PCI) data.
     * 
     * @param sessionId The ID of the checkout session.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteCheckoutSessionResponse delete(String sessionId) throws Exception {
        return delete(sessionId, JsonNullable.undefined());
    }

    /**
     * Delete checkout session
     * 
     * <p>Delete a checkout session and all of its (PCI) data.
     * 
     * @param sessionId The ID of the checkout session.
     * @param merchantAccountId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteCheckoutSessionResponse delete(String sessionId, JsonNullable<String> merchantAccountId) throws Exception {
        DeleteCheckoutSessionRequest request =
            DeleteCheckoutSessionRequest
                .builder()
                .sessionId(sessionId)
                .merchantAccountId(merchantAccountId)
                .build();
        RequestOperation<DeleteCheckoutSessionRequest, DeleteCheckoutSessionResponse> operation
              = new DeleteCheckoutSessionOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
