/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.MerchantAccountCreate;
import com.gr4vy.sdk.models.components.MerchantAccountUpdate;
import com.gr4vy.sdk.models.operations.GetMerchantAccountRequest;
import com.gr4vy.sdk.models.operations.ListMerchantAccountsRequest;
import com.gr4vy.sdk.models.operations.UpdateMerchantAccountRequest;
import com.gr4vy.sdk.models.operations.async.CreateMerchantAccountRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateMerchantAccountResponse;
import com.gr4vy.sdk.models.operations.async.GetMerchantAccountRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetMerchantAccountResponse;
import com.gr4vy.sdk.models.operations.async.ListMerchantAccountsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListMerchantAccountsResponse;
import com.gr4vy.sdk.models.operations.async.UpdateMerchantAccountRequestBuilder;
import com.gr4vy.sdk.models.operations.async.UpdateMerchantAccountResponse;
import com.gr4vy.sdk.operations.CreateMerchantAccount;
import com.gr4vy.sdk.operations.GetMerchantAccount;
import com.gr4vy.sdk.operations.ListMerchantAccounts;
import com.gr4vy.sdk.operations.UpdateMerchantAccount;
import com.gr4vy.sdk.utils.Options;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncMerchantAccounts {
    private final SDKConfiguration sdkConfiguration;
    private final MerchantAccounts syncSDK;

    AsyncMerchantAccounts(MerchantAccounts syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public MerchantAccounts sync() {
        return syncSDK;
    }


    /**
     * List all merchant accounts
     * 
     * <p>List all merchant accounts in an instance.
     * 
     * @return The async call builder
     */
    public ListMerchantAccountsRequestBuilder list() {
        return new ListMerchantAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all merchant accounts
     * 
     * <p>List all merchant accounts in an instance.
     * 
     * @return CompletableFuture&lt;ListMerchantAccountsResponse&gt; - The async response
     */
    public CompletableFuture<ListMerchantAccountsResponse> listDirect() {
        return list(
                JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
                Optional.empty());
    }

    /**
     * List all merchant accounts
     * 
     * <p>List all merchant accounts in an instance.
     * 
     * @param cursor A pointer to the page of results to return.
     * @param limit The maximum number of items that are at returned.
     * @param search The search term to filter merchant accounts by.
     * @param options additional options
     * @return CompletableFuture&lt;ListMerchantAccountsResponse&gt; - The async response
     */
    public CompletableFuture<ListMerchantAccountsResponse> list(
            JsonNullable<String> cursor, Optional<Long> limit,
            JsonNullable<String> search, Optional<Options> options) {
        ListMerchantAccountsRequest request =
            ListMerchantAccountsRequest
                .builder()
                .cursor(cursor)
                .limit(limit)
                .search(search)
                .build();
        AsyncRequestOperation<ListMerchantAccountsRequest, ListMerchantAccountsResponse> operation
              = new ListMerchantAccounts.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a merchant account
     * 
     * <p>Create a new merchant account in an instance.
     * 
     * @return The async call builder
     */
    public CreateMerchantAccountRequestBuilder create() {
        return new CreateMerchantAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a merchant account
     * 
     * <p>Create a new merchant account in an instance.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateMerchantAccountResponse&gt; - The async response
     */
    public CompletableFuture<CreateMerchantAccountResponse> create(MerchantAccountCreate request) {
        AsyncRequestOperation<MerchantAccountCreate, CreateMerchantAccountResponse> operation
              = new CreateMerchantAccount.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get a merchant account
     * 
     * <p>Get info about a merchant account in an instance.
     * 
     * @return The async call builder
     */
    public GetMerchantAccountRequestBuilder get() {
        return new GetMerchantAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a merchant account
     * 
     * <p>Get info about a merchant account in an instance.
     * 
     * @param merchantAccountId The ID of the merchant account
     * @return CompletableFuture&lt;GetMerchantAccountResponse&gt; - The async response
     */
    public CompletableFuture<GetMerchantAccountResponse> get(String merchantAccountId) {
        return get(merchantAccountId, Optional.empty());
    }

    /**
     * Get a merchant account
     * 
     * <p>Get info about a merchant account in an instance.
     * 
     * @param merchantAccountId The ID of the merchant account
     * @param options additional options
     * @return CompletableFuture&lt;GetMerchantAccountResponse&gt; - The async response
     */
    public CompletableFuture<GetMerchantAccountResponse> get(String merchantAccountId, Optional<Options> options) {
        GetMerchantAccountRequest request =
            GetMerchantAccountRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetMerchantAccountRequest, GetMerchantAccountResponse> operation
              = new GetMerchantAccount.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a merchant account
     * 
     * <p>Update info for a merchant account in an instance.
     * 
     * @return The async call builder
     */
    public UpdateMerchantAccountRequestBuilder update() {
        return new UpdateMerchantAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a merchant account
     * 
     * <p>Update info for a merchant account in an instance.
     * 
     * @param merchantAccountId The ID of the merchant account
     * @param merchantAccountUpdate 
     * @return CompletableFuture&lt;UpdateMerchantAccountResponse&gt; - The async response
     */
    public CompletableFuture<UpdateMerchantAccountResponse> update(String merchantAccountId, MerchantAccountUpdate merchantAccountUpdate) {
        UpdateMerchantAccountRequest request =
            UpdateMerchantAccountRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .merchantAccountUpdate(merchantAccountUpdate)
                .build();
        AsyncRequestOperation<UpdateMerchantAccountRequest, UpdateMerchantAccountResponse> operation
              = new UpdateMerchantAccount.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
