/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.models.components.ApplePaySessionRequest;
import com.gr4vy.sdk.models.components.ClickToPaySessionRequest;
import com.gr4vy.sdk.models.components.GooglePaySessionRequest;
import com.gr4vy.sdk.models.operations.CreateApplePayDigitalWalletSessionRequest;
import com.gr4vy.sdk.models.operations.CreateApplePayDigitalWalletSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateApplePayDigitalWalletSessionResponse;
import com.gr4vy.sdk.models.operations.CreateClickToPayDigitalWalletSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateClickToPayDigitalWalletSessionResponse;
import com.gr4vy.sdk.models.operations.CreateGooglePayDigitalWalletSessionRequest;
import com.gr4vy.sdk.models.operations.CreateGooglePayDigitalWalletSessionRequestBuilder;
import com.gr4vy.sdk.models.operations.CreateGooglePayDigitalWalletSessionResponse;
import com.gr4vy.sdk.operations.CreateApplePayDigitalWalletSession;
import com.gr4vy.sdk.operations.CreateClickToPayDigitalWalletSession;
import com.gr4vy.sdk.operations.CreateGooglePayDigitalWalletSession;
import com.gr4vy.sdk.utils.Headers;
import java.lang.Exception;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class Sessions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncSessions asyncSDK;

    Sessions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncSessions(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncSessions async() {
        return asyncSDK;
    }

    /**
     * Create a Google Pay session
     * 
     * <p>Create a session for use with Google Pay.
     * 
     * @return The call builder
     */
    public CreateGooglePayDigitalWalletSessionRequestBuilder googlePay() {
        return new CreateGooglePayDigitalWalletSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Google Pay session
     * 
     * <p>Create a session for use with Google Pay.
     * 
     * @param googlePaySessionRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateGooglePayDigitalWalletSessionResponse googlePay(GooglePaySessionRequest googlePaySessionRequest) throws Exception {
        return googlePay(JsonNullable.undefined(), googlePaySessionRequest);
    }

    /**
     * Create a Google Pay session
     * 
     * <p>Create a session for use with Google Pay.
     * 
     * @param merchantAccountId 
     * @param googlePaySessionRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateGooglePayDigitalWalletSessionResponse googlePay(JsonNullable<String> merchantAccountId, GooglePaySessionRequest googlePaySessionRequest) throws Exception {
        CreateGooglePayDigitalWalletSessionRequest request =
            CreateGooglePayDigitalWalletSessionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .googlePaySessionRequest(googlePaySessionRequest)
                .build();
        RequestOperation<CreateGooglePayDigitalWalletSessionRequest, CreateGooglePayDigitalWalletSessionResponse> operation
              = new CreateGooglePayDigitalWalletSession.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a Apple Pay session
     * 
     * <p>Create a session for use with Apple Pay.
     * 
     * @return The call builder
     */
    public CreateApplePayDigitalWalletSessionRequestBuilder applePay() {
        return new CreateApplePayDigitalWalletSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Apple Pay session
     * 
     * <p>Create a session for use with Apple Pay.
     * 
     * @param applePaySessionRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateApplePayDigitalWalletSessionResponse applePay(ApplePaySessionRequest applePaySessionRequest) throws Exception {
        return applePay(JsonNullable.undefined(), applePaySessionRequest);
    }

    /**
     * Create a Apple Pay session
     * 
     * <p>Create a session for use with Apple Pay.
     * 
     * @param merchantAccountId 
     * @param applePaySessionRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateApplePayDigitalWalletSessionResponse applePay(JsonNullable<String> merchantAccountId, ApplePaySessionRequest applePaySessionRequest) throws Exception {
        CreateApplePayDigitalWalletSessionRequest request =
            CreateApplePayDigitalWalletSessionRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .applePaySessionRequest(applePaySessionRequest)
                .build();
        RequestOperation<CreateApplePayDigitalWalletSessionRequest, CreateApplePayDigitalWalletSessionResponse> operation
              = new CreateApplePayDigitalWalletSession.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a Click to Pay session
     * 
     * <p>Create a session for use with Click to Pay.
     * 
     * @return The call builder
     */
    public CreateClickToPayDigitalWalletSessionRequestBuilder clickToPay() {
        return new CreateClickToPayDigitalWalletSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Click to Pay session
     * 
     * <p>Create a session for use with Click to Pay.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateClickToPayDigitalWalletSessionResponse clickToPay(ClickToPaySessionRequest request) throws Exception {
        RequestOperation<ClickToPaySessionRequest, CreateClickToPayDigitalWalletSessionResponse> operation
              = new CreateClickToPayDigitalWalletSession.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
