/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.models.components.GiftCardCreate;
import com.gr4vy.sdk.models.operations.CreateGiftCardRequest;
import com.gr4vy.sdk.models.operations.DeleteGiftCardRequest;
import com.gr4vy.sdk.models.operations.GetGiftCardRequest;
import com.gr4vy.sdk.models.operations.ListGiftCardsRequest;
import com.gr4vy.sdk.models.operations.async.CreateGiftCardRequestBuilder;
import com.gr4vy.sdk.models.operations.async.CreateGiftCardResponse;
import com.gr4vy.sdk.models.operations.async.DeleteGiftCardRequestBuilder;
import com.gr4vy.sdk.models.operations.async.DeleteGiftCardResponse;
import com.gr4vy.sdk.models.operations.async.GetGiftCardRequestBuilder;
import com.gr4vy.sdk.models.operations.async.GetGiftCardResponse;
import com.gr4vy.sdk.models.operations.async.ListGiftCardsRequestBuilder;
import com.gr4vy.sdk.models.operations.async.ListGiftCardsResponse;
import com.gr4vy.sdk.operations.CreateGiftCard;
import com.gr4vy.sdk.operations.DeleteGiftCard;
import com.gr4vy.sdk.operations.GetGiftCard;
import com.gr4vy.sdk.operations.ListGiftCards;
import com.gr4vy.sdk.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncGiftCards {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncBalances balances;
    private final GiftCards syncSDK;

    AsyncGiftCards(GiftCards syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.balances = new AsyncBalances(syncSDK.balances(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncBalances balances() {
        return balances;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public GiftCards sync() {
        return syncSDK;
    }


    /**
     * Get gift card
     * 
     * <p>Fetch details about a gift card.
     * 
     * @return The async call builder
     */
    public GetGiftCardRequestBuilder get() {
        return new GetGiftCardRequestBuilder(sdkConfiguration);
    }

    /**
     * Get gift card
     * 
     * <p>Fetch details about a gift card.
     * 
     * @param giftCardId The ID of the gift card.
     * @return CompletableFuture&lt;GetGiftCardResponse&gt; - The async response
     */
    public CompletableFuture<GetGiftCardResponse> get(String giftCardId) {
        return get(giftCardId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get gift card
     * 
     * <p>Fetch details about a gift card.
     * 
     * @param giftCardId The ID of the gift card.
     * @param merchantAccountId 
     * @param options additional options
     * @return CompletableFuture&lt;GetGiftCardResponse&gt; - The async response
     */
    public CompletableFuture<GetGiftCardResponse> get(
            String giftCardId, JsonNullable<String> merchantAccountId,
            Optional<Options> options) {
        GetGiftCardRequest request =
            GetGiftCardRequest
                .builder()
                .giftCardId(giftCardId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<GetGiftCardRequest, GetGiftCardResponse> operation
              = new GetGiftCard.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a gift card
     * 
     * <p>Removes a gift card from our system.
     * 
     * @return The async call builder
     */
    public DeleteGiftCardRequestBuilder delete() {
        return new DeleteGiftCardRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a gift card
     * 
     * <p>Removes a gift card from our system.
     * 
     * @param giftCardId The ID of the gift card.
     * @return CompletableFuture&lt;DeleteGiftCardResponse&gt; - The async response
     */
    public CompletableFuture<DeleteGiftCardResponse> delete(String giftCardId) {
        return delete(giftCardId, JsonNullable.undefined());
    }

    /**
     * Delete a gift card
     * 
     * <p>Removes a gift card from our system.
     * 
     * @param giftCardId The ID of the gift card.
     * @param merchantAccountId 
     * @return CompletableFuture&lt;DeleteGiftCardResponse&gt; - The async response
     */
    public CompletableFuture<DeleteGiftCardResponse> delete(String giftCardId, JsonNullable<String> merchantAccountId) {
        DeleteGiftCardRequest request =
            DeleteGiftCardRequest
                .builder()
                .giftCardId(giftCardId)
                .merchantAccountId(merchantAccountId)
                .build();
        AsyncRequestOperation<DeleteGiftCardRequest, DeleteGiftCardResponse> operation
              = new DeleteGiftCard.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create gift card
     * 
     * <p>Store a new gift card in the vault.
     * 
     * @return The async call builder
     */
    public CreateGiftCardRequestBuilder create() {
        return new CreateGiftCardRequestBuilder(sdkConfiguration);
    }

    /**
     * Create gift card
     * 
     * <p>Store a new gift card in the vault.
     * 
     * @param giftCardCreate 
     * @return CompletableFuture&lt;CreateGiftCardResponse&gt; - The async response
     */
    public CompletableFuture<CreateGiftCardResponse> create(GiftCardCreate giftCardCreate) {
        return create(JsonNullable.undefined(), giftCardCreate);
    }

    /**
     * Create gift card
     * 
     * <p>Store a new gift card in the vault.
     * 
     * @param merchantAccountId 
     * @param giftCardCreate 
     * @return CompletableFuture&lt;CreateGiftCardResponse&gt; - The async response
     */
    public CompletableFuture<CreateGiftCardResponse> create(JsonNullable<String> merchantAccountId, GiftCardCreate giftCardCreate) {
        CreateGiftCardRequest request =
            CreateGiftCardRequest
                .builder()
                .merchantAccountId(merchantAccountId)
                .giftCardCreate(giftCardCreate)
                .build();
        AsyncRequestOperation<CreateGiftCardRequest, CreateGiftCardResponse> operation
              = new CreateGiftCard.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List gift cards
     * 
     * <p>Browser all gift cards.
     * 
     * @return The async call builder
     */
    public ListGiftCardsRequestBuilder list() {
        return new ListGiftCardsRequestBuilder(sdkConfiguration);
    }

    /**
     * List gift cards
     * 
     * <p>Browser all gift cards.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListGiftCardsResponse&gt; - The async response
     */
    public CompletableFuture<ListGiftCardsResponse> list(ListGiftCardsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List gift cards
     * 
     * <p>Browser all gift cards.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListGiftCardsResponse&gt; - The async response
     */
    public CompletableFuture<ListGiftCardsResponse> list(ListGiftCardsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListGiftCardsRequest, ListGiftCardsResponse> operation
              = new ListGiftCards.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
