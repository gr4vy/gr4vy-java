/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations.async;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.TransactionRefundAllCreate;
import com.gr4vy.sdk.models.operations.CreateFullTransactionRefundRequest;
import com.gr4vy.sdk.operations.CreateFullTransactionRefund;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateFullTransactionRefundRequestBuilder {

    private String transactionId;
    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private JsonNullable<? extends TransactionRefundAllCreate> transactionRefundAllCreate = JsonNullable.undefined();
    private final SDKConfiguration sdkConfiguration;

    public CreateFullTransactionRefundRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateFullTransactionRefundRequestBuilder transactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder transactionRefundAllCreate(TransactionRefundAllCreate transactionRefundAllCreate) {
        Utils.checkNotNull(transactionRefundAllCreate, "transactionRefundAllCreate");
        this.transactionRefundAllCreate = JsonNullable.of(transactionRefundAllCreate);
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder transactionRefundAllCreate(JsonNullable<? extends TransactionRefundAllCreate> transactionRefundAllCreate) {
        Utils.checkNotNull(transactionRefundAllCreate, "transactionRefundAllCreate");
        this.transactionRefundAllCreate = transactionRefundAllCreate;
        return this;
    }


    private CreateFullTransactionRefundRequest buildRequest() {

        CreateFullTransactionRefundRequest request = new CreateFullTransactionRefundRequest(transactionId,
            merchantAccountId,
            transactionRefundAllCreate);

        return request;
    }

    public CompletableFuture<CreateFullTransactionRefundResponse> call() throws Exception {
        
        AsyncRequestOperation<CreateFullTransactionRefundRequest, CreateFullTransactionRefundResponse> operation
              = new CreateFullTransactionRefund.Async(sdkConfiguration);
        CreateFullTransactionRefundRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
