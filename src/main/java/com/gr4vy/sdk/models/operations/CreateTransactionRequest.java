/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gr4vy.sdk.models.components.TransactionCreate;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateTransactionRequest {
    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    /**
     * A unique key that identifies this request. Providing this header will make this an idempotent
     * request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid
     * collisions.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private JsonNullable<String> idempotencyKey;

    /**
     * The IP address to forward from the customer. Use this when calling
     * our API from the server side to ensure the customer's address is
     * passed to downstream services, rather than your server IP.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Forwarded-For")
    private Optional<String> xForwardedFor;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private TransactionCreate transactionCreate;

    @JsonCreator
    public CreateTransactionRequest(
            JsonNullable<String> merchantAccountId,
            JsonNullable<String> idempotencyKey,
            Optional<String> xForwardedFor,
            TransactionCreate transactionCreate) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(xForwardedFor, "xForwardedFor");
        Utils.checkNotNull(transactionCreate, "transactionCreate");
        this.merchantAccountId = merchantAccountId;
        this.idempotencyKey = idempotencyKey;
        this.xForwardedFor = xForwardedFor;
        this.transactionCreate = transactionCreate;
    }
    
    public CreateTransactionRequest(
            TransactionCreate transactionCreate) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            transactionCreate);
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * A unique key that identifies this request. Providing this header will make this an idempotent
     * request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid
     * collisions.
     */
    @JsonIgnore
    public JsonNullable<String> idempotencyKey() {
        return idempotencyKey;
    }

    /**
     * The IP address to forward from the customer. Use this when calling
     * our API from the server side to ensure the customer's address is
     * passed to downstream services, rather than your server IP.
     */
    @JsonIgnore
    public Optional<String> xForwardedFor() {
        return xForwardedFor;
    }

    @JsonIgnore
    public TransactionCreate transactionCreate() {
        return transactionCreate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the merchant account to use for this request.
     */
    public CreateTransactionRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public CreateTransactionRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * A unique key that identifies this request. Providing this header will make this an idempotent
     * request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid
     * collisions.
     */
    public CreateTransactionRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = JsonNullable.of(idempotencyKey);
        return this;
    }

    /**
     * A unique key that identifies this request. Providing this header will make this an idempotent
     * request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid
     * collisions.
     */
    public CreateTransactionRequest withIdempotencyKey(JsonNullable<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    /**
     * The IP address to forward from the customer. Use this when calling
     * our API from the server side to ensure the customer's address is
     * passed to downstream services, rather than your server IP.
     */
    public CreateTransactionRequest withXForwardedFor(String xForwardedFor) {
        Utils.checkNotNull(xForwardedFor, "xForwardedFor");
        this.xForwardedFor = Optional.ofNullable(xForwardedFor);
        return this;
    }


    /**
     * The IP address to forward from the customer. Use this when calling
     * our API from the server side to ensure the customer's address is
     * passed to downstream services, rather than your server IP.
     */
    public CreateTransactionRequest withXForwardedFor(Optional<String> xForwardedFor) {
        Utils.checkNotNull(xForwardedFor, "xForwardedFor");
        this.xForwardedFor = xForwardedFor;
        return this;
    }

    public CreateTransactionRequest withTransactionCreate(TransactionCreate transactionCreate) {
        Utils.checkNotNull(transactionCreate, "transactionCreate");
        this.transactionCreate = transactionCreate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateTransactionRequest other = (CreateTransactionRequest) o;
        return 
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Utils.enhancedDeepEquals(this.xForwardedFor, other.xForwardedFor) &&
            Utils.enhancedDeepEquals(this.transactionCreate, other.transactionCreate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            merchantAccountId, idempotencyKey, xForwardedFor,
            transactionCreate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateTransactionRequest.class,
                "merchantAccountId", merchantAccountId,
                "idempotencyKey", idempotencyKey,
                "xForwardedFor", xForwardedFor,
                "transactionCreate", transactionCreate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();

        private JsonNullable<String> idempotencyKey = JsonNullable.undefined();

        private Optional<String> xForwardedFor = Optional.empty();

        private TransactionCreate transactionCreate;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }


        /**
         * A unique key that identifies this request. Providing this header will make this an idempotent
         * request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid
         * collisions.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = JsonNullable.of(idempotencyKey);
            return this;
        }

        /**
         * A unique key that identifies this request. Providing this header will make this an idempotent
         * request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid
         * collisions.
         */
        public Builder idempotencyKey(JsonNullable<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }


        /**
         * The IP address to forward from the customer. Use this when calling
         * our API from the server side to ensure the customer's address is
         * passed to downstream services, rather than your server IP.
         */
        public Builder xForwardedFor(String xForwardedFor) {
            Utils.checkNotNull(xForwardedFor, "xForwardedFor");
            this.xForwardedFor = Optional.ofNullable(xForwardedFor);
            return this;
        }

        /**
         * The IP address to forward from the customer. Use this when calling
         * our API from the server side to ensure the customer's address is
         * passed to downstream services, rather than your server IP.
         */
        public Builder xForwardedFor(Optional<String> xForwardedFor) {
            Utils.checkNotNull(xForwardedFor, "xForwardedFor");
            this.xForwardedFor = xForwardedFor;
            return this;
        }


        public Builder transactionCreate(TransactionCreate transactionCreate) {
            Utils.checkNotNull(transactionCreate, "transactionCreate");
            this.transactionCreate = transactionCreate;
            return this;
        }

        public CreateTransactionRequest build() {

            return new CreateTransactionRequest(
                merchantAccountId, idempotencyKey, xForwardedFor,
                transactionCreate);
        }

    }
}
