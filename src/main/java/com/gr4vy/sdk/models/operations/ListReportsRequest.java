/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.models.components.ReportSchedule;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListReportsRequest {

    /**
     * A pointer to the page of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    /**
     * The maximum number of items that are at returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * Filters the reports by the type of schedule at which they run.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=schedule")
    private JsonNullable<? extends List<ReportSchedule>> schedule;

    /**
     * Filters the reports by wether their schedule is enabled.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=schedule_enabled")
    private JsonNullable<Boolean> scheduleEnabled;

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    private JsonNullable<String> name;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public ListReportsRequest(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<? extends List<ReportSchedule>> schedule,
            JsonNullable<Boolean> scheduleEnabled,
            JsonNullable<String> name,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(schedule, "schedule");
        Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.cursor = cursor;
        this.limit = limit;
        this.schedule = schedule;
        this.scheduleEnabled = scheduleEnabled;
        this.name = name;
        this.merchantAccountId = merchantAccountId;
    }
    
    public ListReportsRequest() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A pointer to the page of results to return.
     */
    @JsonIgnore
    public JsonNullable<String> cursor() {
        return cursor;
    }

    /**
     * The maximum number of items that are at returned.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * Filters the reports by the type of schedule at which they run.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<ReportSchedule>> schedule() {
        return (JsonNullable<List<ReportSchedule>>) schedule;
    }

    /**
     * Filters the reports by wether their schedule is enabled.
     */
    @JsonIgnore
    public JsonNullable<Boolean> scheduleEnabled() {
        return scheduleEnabled;
    }

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A pointer to the page of results to return.
     */
    public ListReportsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    /**
     * A pointer to the page of results to return.
     */
    public ListReportsRequest withCursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListReportsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListReportsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Filters the reports by the type of schedule at which they run.
     */
    public ListReportsRequest withSchedule(List<ReportSchedule> schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = JsonNullable.of(schedule);
        return this;
    }

    /**
     * Filters the reports by the type of schedule at which they run.
     */
    public ListReportsRequest withSchedule(JsonNullable<? extends List<ReportSchedule>> schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = schedule;
        return this;
    }

    /**
     * Filters the reports by wether their schedule is enabled.
     */
    public ListReportsRequest withScheduleEnabled(boolean scheduleEnabled) {
        Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
        this.scheduleEnabled = JsonNullable.of(scheduleEnabled);
        return this;
    }

    /**
     * Filters the reports by wether their schedule is enabled.
     */
    public ListReportsRequest withScheduleEnabled(JsonNullable<Boolean> scheduleEnabled) {
        Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
        this.scheduleEnabled = scheduleEnabled;
        return this;
    }

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    public ListReportsRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    public ListReportsRequest withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListReportsRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListReportsRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListReportsRequest other = (ListReportsRequest) o;
        return 
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.schedule, other.schedule) &&
            Objects.deepEquals(this.scheduleEnabled, other.scheduleEnabled) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cursor,
            limit,
            schedule,
            scheduleEnabled,
            name,
            merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListReportsRequest.class,
                "cursor", cursor,
                "limit", limit,
                "schedule", schedule,
                "scheduleEnabled", scheduleEnabled,
                "name", name,
                "merchantAccountId", merchantAccountId);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> cursor = JsonNullable.undefined();
 
        private Optional<Long> limit;
 
        private JsonNullable<? extends List<ReportSchedule>> schedule = JsonNullable.undefined();
 
        private JsonNullable<Boolean> scheduleEnabled = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(JsonNullable<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Filters the reports by the type of schedule at which they run.
         */
        public Builder schedule(List<ReportSchedule> schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = JsonNullable.of(schedule);
            return this;
        }

        /**
         * Filters the reports by the type of schedule at which they run.
         */
        public Builder schedule(JsonNullable<? extends List<ReportSchedule>> schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = schedule;
            return this;
        }

        /**
         * Filters the reports by wether their schedule is enabled.
         */
        public Builder scheduleEnabled(boolean scheduleEnabled) {
            Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
            this.scheduleEnabled = JsonNullable.of(scheduleEnabled);
            return this;
        }

        /**
         * Filters the reports by wether their schedule is enabled.
         */
        public Builder scheduleEnabled(JsonNullable<Boolean> scheduleEnabled) {
            Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
            this.scheduleEnabled = scheduleEnabled;
            return this;
        }

        /**
         * Filters the reports by searching their name for (partial) matches.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Filters the reports by searching their name for (partial) matches.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }
        
        public ListReportsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            return new ListReportsRequest(
                cursor,
                limit,
                schedule,
                scheduleEnabled,
                name,
                merchantAccountId);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Long>>() {});
    }
}
