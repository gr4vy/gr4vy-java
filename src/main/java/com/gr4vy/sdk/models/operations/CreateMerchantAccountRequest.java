/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.models.components.MerchantAccountCreate;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class CreateMerchantAccountRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=application_name")
    private Optional<String> applicationName;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private MerchantAccountCreate merchantAccountCreate;

    @JsonCreator
    public CreateMerchantAccountRequest(
            Optional<String> applicationName,
            MerchantAccountCreate merchantAccountCreate) {
        Utils.checkNotNull(applicationName, "applicationName");
        Utils.checkNotNull(merchantAccountCreate, "merchantAccountCreate");
        this.applicationName = applicationName;
        this.merchantAccountCreate = merchantAccountCreate;
    }
    
    public CreateMerchantAccountRequest(
            MerchantAccountCreate merchantAccountCreate) {
        this(Optional.empty(), merchantAccountCreate);
    }

    @JsonIgnore
    public Optional<String> applicationName() {
        return applicationName;
    }

    @JsonIgnore
    public MerchantAccountCreate merchantAccountCreate() {
        return merchantAccountCreate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CreateMerchantAccountRequest withApplicationName(String applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = Optional.ofNullable(applicationName);
        return this;
    }

    public CreateMerchantAccountRequest withApplicationName(Optional<String> applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = applicationName;
        return this;
    }

    public CreateMerchantAccountRequest withMerchantAccountCreate(MerchantAccountCreate merchantAccountCreate) {
        Utils.checkNotNull(merchantAccountCreate, "merchantAccountCreate");
        this.merchantAccountCreate = merchantAccountCreate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMerchantAccountRequest other = (CreateMerchantAccountRequest) o;
        return 
            Objects.deepEquals(this.applicationName, other.applicationName) &&
            Objects.deepEquals(this.merchantAccountCreate, other.merchantAccountCreate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            applicationName,
            merchantAccountCreate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateMerchantAccountRequest.class,
                "applicationName", applicationName,
                "merchantAccountCreate", merchantAccountCreate);
    }
    
    public final static class Builder {
 
        private Optional<String> applicationName;
 
        private MerchantAccountCreate merchantAccountCreate;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder applicationName(String applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = Optional.ofNullable(applicationName);
            return this;
        }

        public Builder applicationName(Optional<String> applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = applicationName;
            return this;
        }

        public Builder merchantAccountCreate(MerchantAccountCreate merchantAccountCreate) {
            Utils.checkNotNull(merchantAccountCreate, "merchantAccountCreate");
            this.merchantAccountCreate = merchantAccountCreate;
            return this;
        }
        
        public CreateMerchantAccountRequest build() {
            if (applicationName == null) {
                applicationName = _SINGLETON_VALUE_ApplicationName.value();
            }
            return new CreateMerchantAccountRequest(
                applicationName,
                merchantAccountCreate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_ApplicationName =
                new LazySingletonValue<>(
                        "application_name",
                        "\"core-api\"",
                        new TypeReference<Optional<String>>() {});
    }
}
