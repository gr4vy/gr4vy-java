/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.operations.CreatePaymentServiceDefinitionSession;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;

public class CreatePaymentServiceDefinitionSessionRequestBuilder {

    private String paymentServiceDefinitionId;
    private Map<String, Object> requestBody = new HashMap<>();
    private final SDKConfiguration sdkConfiguration;

    public CreatePaymentServiceDefinitionSessionRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreatePaymentServiceDefinitionSessionRequestBuilder paymentServiceDefinitionId(String paymentServiceDefinitionId) {
        Utils.checkNotNull(paymentServiceDefinitionId, "paymentServiceDefinitionId");
        this.paymentServiceDefinitionId = paymentServiceDefinitionId;
        return this;
    }

    public CreatePaymentServiceDefinitionSessionRequestBuilder requestBody(Map<String, Object> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }


    private CreatePaymentServiceDefinitionSessionRequest buildRequest() {

        CreatePaymentServiceDefinitionSessionRequest request = new CreatePaymentServiceDefinitionSessionRequest(paymentServiceDefinitionId,
            requestBody);

        return request;
    }

    public CreatePaymentServiceDefinitionSessionResponse call() throws Exception {
        
        RequestOperation<CreatePaymentServiceDefinitionSessionRequest, CreatePaymentServiceDefinitionSessionResponse> operation
              = new CreatePaymentServiceDefinitionSession.Sync(sdkConfiguration);
        CreatePaymentServiceDefinitionSessionRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
