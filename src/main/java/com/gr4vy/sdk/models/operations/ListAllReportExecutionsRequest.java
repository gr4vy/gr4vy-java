/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.models.components.ReportExecutionStatus;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListAllReportExecutionsRequest {

    /**
     * A pointer to the page of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    /**
     * The maximum number of items that are at returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=report_name")
    private JsonNullable<String> reportName;

    /**
     * Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_lte")
    private JsonNullable<OffsetDateTime> createdAtLte;

    /**
     * Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_gte")
    private JsonNullable<OffsetDateTime> createdAtGte;

    /**
     * Filters the results to only the reports that have a `status` that matches with any of the provided status values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private JsonNullable<? extends List<ReportExecutionStatus>> status;

    /**
     * Filters the results to only the reports that were created by the users with these IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=creator_id")
    private JsonNullable<? extends List<String>> creatorId;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public ListAllReportExecutionsRequest(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<String> reportName,
            JsonNullable<OffsetDateTime> createdAtLte,
            JsonNullable<OffsetDateTime> createdAtGte,
            JsonNullable<? extends List<ReportExecutionStatus>> status,
            JsonNullable<? extends List<String>> creatorId,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(reportName, "reportName");
        Utils.checkNotNull(createdAtLte, "createdAtLte");
        Utils.checkNotNull(createdAtGte, "createdAtGte");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.cursor = cursor;
        this.limit = limit;
        this.reportName = reportName;
        this.createdAtLte = createdAtLte;
        this.createdAtGte = createdAtGte;
        this.status = status;
        this.creatorId = creatorId;
        this.merchantAccountId = merchantAccountId;
    }
    
    public ListAllReportExecutionsRequest() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A pointer to the page of results to return.
     */
    @JsonIgnore
    public JsonNullable<String> cursor() {
        return cursor;
    }

    /**
     * The maximum number of items that are at returned.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    @JsonIgnore
    public JsonNullable<String> reportName() {
        return reportName;
    }

    /**
     * Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAtLte() {
        return createdAtLte;
    }

    /**
     * Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAtGte() {
        return createdAtGte;
    }

    /**
     * Filters the results to only the reports that have a `status` that matches with any of the provided status values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<ReportExecutionStatus>> status() {
        return (JsonNullable<List<ReportExecutionStatus>>) status;
    }

    /**
     * Filters the results to only the reports that were created by the users with these IDs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> creatorId() {
        return (JsonNullable<List<String>>) creatorId;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A pointer to the page of results to return.
     */
    public ListAllReportExecutionsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    /**
     * A pointer to the page of results to return.
     */
    public ListAllReportExecutionsRequest withCursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListAllReportExecutionsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListAllReportExecutionsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    public ListAllReportExecutionsRequest withReportName(String reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = JsonNullable.of(reportName);
        return this;
    }

    /**
     * Filters the reports by searching their name for (partial) matches.
     */
    public ListAllReportExecutionsRequest withReportName(JsonNullable<String> reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = reportName;
        return this;
    }

    /**
     * Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListAllReportExecutionsRequest withCreatedAtLte(OffsetDateTime createdAtLte) {
        Utils.checkNotNull(createdAtLte, "createdAtLte");
        this.createdAtLte = JsonNullable.of(createdAtLte);
        return this;
    }

    /**
     * Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListAllReportExecutionsRequest withCreatedAtLte(JsonNullable<OffsetDateTime> createdAtLte) {
        Utils.checkNotNull(createdAtLte, "createdAtLte");
        this.createdAtLte = createdAtLte;
        return this;
    }

    /**
     * Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListAllReportExecutionsRequest withCreatedAtGte(OffsetDateTime createdAtGte) {
        Utils.checkNotNull(createdAtGte, "createdAtGte");
        this.createdAtGte = JsonNullable.of(createdAtGte);
        return this;
    }

    /**
     * Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListAllReportExecutionsRequest withCreatedAtGte(JsonNullable<OffsetDateTime> createdAtGte) {
        Utils.checkNotNull(createdAtGte, "createdAtGte");
        this.createdAtGte = createdAtGte;
        return this;
    }

    /**
     * Filters the results to only the reports that have a `status` that matches with any of the provided status values.
     */
    public ListAllReportExecutionsRequest withStatus(List<ReportExecutionStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Filters the results to only the reports that have a `status` that matches with any of the provided status values.
     */
    public ListAllReportExecutionsRequest withStatus(JsonNullable<? extends List<ReportExecutionStatus>> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Filters the results to only the reports that were created by the users with these IDs.
     */
    public ListAllReportExecutionsRequest withCreatorId(List<String> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = JsonNullable.of(creatorId);
        return this;
    }

    /**
     * Filters the results to only the reports that were created by the users with these IDs.
     */
    public ListAllReportExecutionsRequest withCreatorId(JsonNullable<? extends List<String>> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListAllReportExecutionsRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListAllReportExecutionsRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllReportExecutionsRequest other = (ListAllReportExecutionsRequest) o;
        return 
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.reportName, other.reportName) &&
            Objects.deepEquals(this.createdAtLte, other.createdAtLte) &&
            Objects.deepEquals(this.createdAtGte, other.createdAtGte) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.creatorId, other.creatorId) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cursor,
            limit,
            reportName,
            createdAtLte,
            createdAtGte,
            status,
            creatorId,
            merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllReportExecutionsRequest.class,
                "cursor", cursor,
                "limit", limit,
                "reportName", reportName,
                "createdAtLte", createdAtLte,
                "createdAtGte", createdAtGte,
                "status", status,
                "creatorId", creatorId,
                "merchantAccountId", merchantAccountId);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> cursor = JsonNullable.undefined();
 
        private Optional<Long> limit;
 
        private JsonNullable<String> reportName = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAtLte = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAtGte = JsonNullable.undefined();
 
        private JsonNullable<? extends List<ReportExecutionStatus>> status = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> creatorId = JsonNullable.undefined();
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(JsonNullable<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Filters the reports by searching their name for (partial) matches.
         */
        public Builder reportName(String reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = JsonNullable.of(reportName);
            return this;
        }

        /**
         * Filters the reports by searching their name for (partial) matches.
         */
        public Builder reportName(JsonNullable<String> reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = reportName;
            return this;
        }

        /**
         * Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtLte(OffsetDateTime createdAtLte) {
            Utils.checkNotNull(createdAtLte, "createdAtLte");
            this.createdAtLte = JsonNullable.of(createdAtLte);
            return this;
        }

        /**
         * Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtLte(JsonNullable<OffsetDateTime> createdAtLte) {
            Utils.checkNotNull(createdAtLte, "createdAtLte");
            this.createdAtLte = createdAtLte;
            return this;
        }

        /**
         * Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtGte(OffsetDateTime createdAtGte) {
            Utils.checkNotNull(createdAtGte, "createdAtGte");
            this.createdAtGte = JsonNullable.of(createdAtGte);
            return this;
        }

        /**
         * Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtGte(JsonNullable<OffsetDateTime> createdAtGte) {
            Utils.checkNotNull(createdAtGte, "createdAtGte");
            this.createdAtGte = createdAtGte;
            return this;
        }

        /**
         * Filters the results to only the reports that have a `status` that matches with any of the provided status values.
         */
        public Builder status(List<ReportExecutionStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Filters the results to only the reports that have a `status` that matches with any of the provided status values.
         */
        public Builder status(JsonNullable<? extends List<ReportExecutionStatus>> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Filters the results to only the reports that were created by the users with these IDs.
         */
        public Builder creatorId(List<String> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = JsonNullable.of(creatorId);
            return this;
        }

        /**
         * Filters the results to only the reports that were created by the users with these IDs.
         */
        public Builder creatorId(JsonNullable<? extends List<String>> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }
        
        public ListAllReportExecutionsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            return new ListAllReportExecutionsRequest(
                cursor,
                limit,
                reportName,
                createdAtLte,
                createdAtGte,
                status,
                creatorId,
                merchantAccountId);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Long>>() {});
    }
}
