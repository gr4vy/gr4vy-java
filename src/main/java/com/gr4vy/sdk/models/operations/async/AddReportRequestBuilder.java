/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations.async;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.ReportCreate;
import com.gr4vy.sdk.models.operations.AddReportRequest;
import com.gr4vy.sdk.operations.AddReport;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;

public class AddReportRequestBuilder {

    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private ReportCreate reportCreate;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public AddReportRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public AddReportRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public AddReportRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public AddReportRequestBuilder reportCreate(ReportCreate reportCreate) {
        Utils.checkNotNull(reportCreate, "reportCreate");
        this.reportCreate = reportCreate;
        return this;
    }


    private AddReportRequest buildRequest() {

        AddReportRequest request = new AddReportRequest(merchantAccountId,
            reportCreate);

        return request;
    }

    public CompletableFuture<AddReportResponse> call() throws Exception {
        
        AsyncRequestOperation<AddReportRequest, AddReportResponse> operation
              = new AddReport.Async(sdkConfiguration, _headers);
        AddReportRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
