/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.models.components.TransactionCapture;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CaptureTransactionRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=transaction_id")
    private String transactionId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeout_in_seconds")
    private Optional<Double> timeoutInSeconds;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private TransactionCapture transactionCapture;

    @JsonCreator
    public CaptureTransactionRequest(
            String transactionId,
            Optional<Double> timeoutInSeconds,
            JsonNullable<String> merchantAccountId,
            TransactionCapture transactionCapture) {
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(transactionCapture, "transactionCapture");
        this.transactionId = transactionId;
        this.timeoutInSeconds = timeoutInSeconds;
        this.merchantAccountId = merchantAccountId;
        this.transactionCapture = transactionCapture;
    }
    
    public CaptureTransactionRequest(
            String transactionId,
            TransactionCapture transactionCapture) {
        this(transactionId, Optional.empty(), JsonNullable.undefined(), transactionCapture);
    }

    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    @JsonIgnore
    public Optional<Double> timeoutInSeconds() {
        return timeoutInSeconds;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public TransactionCapture transactionCapture() {
        return transactionCapture;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CaptureTransactionRequest withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    public CaptureTransactionRequest withTimeoutInSeconds(double timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
        return this;
    }

    public CaptureTransactionRequest withTimeoutInSeconds(Optional<Double> timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public CaptureTransactionRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public CaptureTransactionRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CaptureTransactionRequest withTransactionCapture(TransactionCapture transactionCapture) {
        Utils.checkNotNull(transactionCapture, "transactionCapture");
        this.transactionCapture = transactionCapture;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CaptureTransactionRequest other = (CaptureTransactionRequest) o;
        return 
            Objects.deepEquals(this.transactionId, other.transactionId) &&
            Objects.deepEquals(this.timeoutInSeconds, other.timeoutInSeconds) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.transactionCapture, other.transactionCapture);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            transactionId,
            timeoutInSeconds,
            merchantAccountId,
            transactionCapture);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CaptureTransactionRequest.class,
                "transactionId", transactionId,
                "timeoutInSeconds", timeoutInSeconds,
                "merchantAccountId", merchantAccountId,
                "transactionCapture", transactionCapture);
    }
    
    public final static class Builder {
 
        private String transactionId;
 
        private Optional<Double> timeoutInSeconds;
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
 
        private TransactionCapture transactionCapture;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }

        public Builder timeoutInSeconds(double timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
            return this;
        }

        public Builder timeoutInSeconds(Optional<Double> timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public Builder transactionCapture(TransactionCapture transactionCapture) {
            Utils.checkNotNull(transactionCapture, "transactionCapture");
            this.transactionCapture = transactionCapture;
            return this;
        }
        
        public CaptureTransactionRequest build() {
            if (timeoutInSeconds == null) {
                timeoutInSeconds = _SINGLETON_VALUE_TimeoutInSeconds.value();
            }
            return new CaptureTransactionRequest(
                transactionId,
                timeoutInSeconds,
                merchantAccountId,
                transactionCapture);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TimeoutInSeconds =
                new LazySingletonValue<>(
                        "timeout_in_seconds",
                        "1",
                        new TypeReference<Optional<Double>>() {});
    }
}
