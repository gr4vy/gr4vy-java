/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class GetTransactionRefundRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=transaction_id")
    private String transactionId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=refund_id")
    private String refundId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=application_name")
    private Optional<String> applicationName;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public GetTransactionRefundRequest(
            String transactionId,
            String refundId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(refundId, "refundId");
        Utils.checkNotNull(applicationName, "applicationName");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.transactionId = transactionId;
        this.refundId = refundId;
        this.applicationName = applicationName;
        this.merchantAccountId = merchantAccountId;
    }
    
    public GetTransactionRefundRequest(
            String transactionId,
            String refundId) {
        this(transactionId, refundId, Optional.empty(), JsonNullable.undefined());
    }

    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    @JsonIgnore
    public String refundId() {
        return refundId;
    }

    @JsonIgnore
    public Optional<String> applicationName() {
        return applicationName;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetTransactionRefundRequest withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    public GetTransactionRefundRequest withRefundId(String refundId) {
        Utils.checkNotNull(refundId, "refundId");
        this.refundId = refundId;
        return this;
    }

    public GetTransactionRefundRequest withApplicationName(String applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = Optional.ofNullable(applicationName);
        return this;
    }

    public GetTransactionRefundRequest withApplicationName(Optional<String> applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = applicationName;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public GetTransactionRefundRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public GetTransactionRefundRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTransactionRefundRequest other = (GetTransactionRefundRequest) o;
        return 
            Objects.deepEquals(this.transactionId, other.transactionId) &&
            Objects.deepEquals(this.refundId, other.refundId) &&
            Objects.deepEquals(this.applicationName, other.applicationName) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            transactionId,
            refundId,
            applicationName,
            merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTransactionRefundRequest.class,
                "transactionId", transactionId,
                "refundId", refundId,
                "applicationName", applicationName,
                "merchantAccountId", merchantAccountId);
    }
    
    public final static class Builder {
 
        private String transactionId;
 
        private String refundId;
 
        private Optional<String> applicationName;
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }

        public Builder refundId(String refundId) {
            Utils.checkNotNull(refundId, "refundId");
            this.refundId = refundId;
            return this;
        }

        public Builder applicationName(String applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = Optional.ofNullable(applicationName);
            return this;
        }

        public Builder applicationName(Optional<String> applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = applicationName;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }
        
        public GetTransactionRefundRequest build() {
            if (applicationName == null) {
                applicationName = _SINGLETON_VALUE_ApplicationName.value();
            }
            return new GetTransactionRefundRequest(
                transactionId,
                refundId,
                applicationName,
                merchantAccountId);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_ApplicationName =
                new LazySingletonValue<>(
                        "application_name",
                        "\"core-api\"",
                        new TypeReference<Optional<String>>() {});
    }
}
