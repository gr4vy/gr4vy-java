/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListBuyerPaymentMethodsRequest {

    /**
     * The ID of the buyer to query payment methods for.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_id")
    private JsonNullable<String> buyerId;

    /**
     * The external identifier of the buyer to query payment methods for.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_external_identifier")
    private JsonNullable<String> buyerExternalIdentifier;

    /**
     * The field to sort the payment methods by.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    private JsonNullable<String> sortBy;

    /**
     * The direction to sort the payment methods in.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<? extends OrderBy> orderBy;

    /**
     * The country code to filter payment methods by. This only applies to payment methods with a `country` value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    private JsonNullable<String> country;

    /**
     * The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=currency")
    private JsonNullable<String> currency;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public ListBuyerPaymentMethodsRequest(
            JsonNullable<String> buyerId,
            JsonNullable<String> buyerExternalIdentifier,
            Optional<? extends OrderBy> orderBy,
            JsonNullable<String> country,
            JsonNullable<String> currency,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.buyerId = buyerId;
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        this.sortBy = Builder._SINGLETON_VALUE_SortBy.value();
        this.orderBy = orderBy;
        this.country = country;
        this.currency = currency;
        this.merchantAccountId = merchantAccountId;
    }
    
    public ListBuyerPaymentMethodsRequest() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the buyer to query payment methods for.
     */
    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    /**
     * The external identifier of the buyer to query payment methods for.
     */
    @JsonIgnore
    public JsonNullable<String> buyerExternalIdentifier() {
        return buyerExternalIdentifier;
    }

    /**
     * The field to sort the payment methods by.
     */
    @JsonIgnore
    public JsonNullable<String> sortBy() {
        return sortBy;
    }

    /**
     * The direction to sort the payment methods in.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderBy> orderBy() {
        return (Optional<OrderBy>) orderBy;
    }

    /**
     * The country code to filter payment methods by. This only applies to payment methods with a `country` value.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.
     */
    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the buyer to query payment methods for.
     */
    public ListBuyerPaymentMethodsRequest withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    /**
     * The ID of the buyer to query payment methods for.
     */
    public ListBuyerPaymentMethodsRequest withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    /**
     * The external identifier of the buyer to query payment methods for.
     */
    public ListBuyerPaymentMethodsRequest withBuyerExternalIdentifier(String buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
        return this;
    }

    /**
     * The external identifier of the buyer to query payment methods for.
     */
    public ListBuyerPaymentMethodsRequest withBuyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        return this;
    }

    /**
     * The direction to sort the payment methods in.
     */
    public ListBuyerPaymentMethodsRequest withOrderBy(OrderBy orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }

    /**
     * The direction to sort the payment methods in.
     */
    public ListBuyerPaymentMethodsRequest withOrderBy(Optional<? extends OrderBy> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * The country code to filter payment methods by. This only applies to payment methods with a `country` value.
     */
    public ListBuyerPaymentMethodsRequest withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The country code to filter payment methods by. This only applies to payment methods with a `country` value.
     */
    public ListBuyerPaymentMethodsRequest withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.
     */
    public ListBuyerPaymentMethodsRequest withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.
     */
    public ListBuyerPaymentMethodsRequest withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListBuyerPaymentMethodsRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListBuyerPaymentMethodsRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListBuyerPaymentMethodsRequest other = (ListBuyerPaymentMethodsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.buyerId, other.buyerId) &&
            Utils.enhancedDeepEquals(this.buyerExternalIdentifier, other.buyerExternalIdentifier) &&
            Utils.enhancedDeepEquals(this.sortBy, other.sortBy) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            buyerId,
            buyerExternalIdentifier,
            sortBy,
            orderBy,
            country,
            currency,
            merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListBuyerPaymentMethodsRequest.class,
                "buyerId", buyerId,
                "buyerExternalIdentifier", buyerExternalIdentifier,
                "sortBy", sortBy,
                "orderBy", orderBy,
                "country", country,
                "currency", currency,
                "merchantAccountId", merchantAccountId);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> buyerId = JsonNullable.undefined();
 
        private JsonNullable<String> buyerExternalIdentifier = JsonNullable.undefined();
 
        private Optional<? extends OrderBy> orderBy;
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> currency = JsonNullable.undefined();
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the buyer to query payment methods for.
         */
        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        /**
         * The ID of the buyer to query payment methods for.
         */
        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }

        /**
         * The external identifier of the buyer to query payment methods for.
         */
        public Builder buyerExternalIdentifier(String buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
            return this;
        }

        /**
         * The external identifier of the buyer to query payment methods for.
         */
        public Builder buyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = buyerExternalIdentifier;
            return this;
        }

        /**
         * The direction to sort the payment methods in.
         */
        public Builder orderBy(OrderBy orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * The direction to sort the payment methods in.
         */
        public Builder orderBy(Optional<? extends OrderBy> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }

        /**
         * The country code to filter payment methods by. This only applies to payment methods with a `country` value.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The country code to filter payment methods by. This only applies to payment methods with a `country` value.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.
         */
        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }
        
        public ListBuyerPaymentMethodsRequest build() {
            if (orderBy == null) {
                orderBy = _SINGLETON_VALUE_OrderBy.value();
            }
            return new ListBuyerPaymentMethodsRequest(
                buyerId,
                buyerExternalIdentifier,
                orderBy,
                country,
                currency,
                merchantAccountId);
        }

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_SortBy =
                new LazySingletonValue<>(
                        "sort_by",
                        "\"last_used_at\"",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<Optional<? extends OrderBy>> _SINGLETON_VALUE_OrderBy =
                new LazySingletonValue<>(
                        "order_by",
                        "\"desc\"",
                        new TypeReference<Optional<? extends OrderBy>>() {});
    }
}
