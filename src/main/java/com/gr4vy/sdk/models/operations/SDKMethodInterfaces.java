/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.gr4vy.sdk.models.components.AccountUpdaterJobCreate;
import com.gr4vy.sdk.models.components.ApplePaySessionRequest;
import com.gr4vy.sdk.models.components.BuyerCreate;
import com.gr4vy.sdk.models.components.BuyerUpdate;
import com.gr4vy.sdk.models.components.CheckoutSessionCreate;
import com.gr4vy.sdk.models.components.ClickToPaySessionRequest;
import com.gr4vy.sdk.models.components.DigitalWalletCreate;
import com.gr4vy.sdk.models.components.DigitalWalletDomain;
import com.gr4vy.sdk.models.components.DigitalWalletUpdate;
import com.gr4vy.sdk.models.components.GiftCardBalanceRequest;
import com.gr4vy.sdk.models.components.GiftCardCreate;
import com.gr4vy.sdk.models.components.GooglePaySessionRequest;
import com.gr4vy.sdk.models.components.MerchantAccountCreate;
import com.gr4vy.sdk.models.components.MerchantAccountUpdate;
import com.gr4vy.sdk.models.components.NetworkTokenCreate;
import com.gr4vy.sdk.models.components.PaymentOptionRequest;
import com.gr4vy.sdk.models.components.PaymentServiceCreate;
import com.gr4vy.sdk.models.components.PaymentServiceTokenCreate;
import com.gr4vy.sdk.models.components.PaymentServiceUpdate;
import com.gr4vy.sdk.models.components.PayoutCreate;
import com.gr4vy.sdk.models.components.ShippingDetailsCreate;
import com.gr4vy.sdk.models.components.TransactionCapture;
import com.gr4vy.sdk.models.components.TransactionCreate;
import com.gr4vy.sdk.models.components.TransactionRefundAllCreate;
import com.gr4vy.sdk.models.components.TransactionRefundCreate;
import com.gr4vy.sdk.models.components.VerifyCredentials;
import com.gr4vy.sdk.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class SDKMethodInterfaces {

    public interface MethodCallCreateAccountUpdaterJob {
        CreateAccountUpdaterJobResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            AccountUpdaterJobCreate accountUpdaterJobCreate) throws Exception;
    }

    public interface MethodCallListBuyers {
        ListBuyersResponse list(
            ListBuyersRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallAddBuyer {
        AddBuyerResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            BuyerCreate buyerCreate) throws Exception;
    }

    public interface MethodCallGetBuyer {
        GetBuyerResponse get(
            String buyerId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallUpdateBuyer {
        UpdateBuyerResponse update(
            String buyerId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            BuyerUpdate buyerUpdate) throws Exception;
    }

    public interface MethodCallDeleteBuyer {
        DeleteBuyerResponse delete(
            String buyerId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallListBuyerPaymentMethods {
        ListBuyerPaymentMethodsResponse list(
            ListBuyerPaymentMethodsRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallListBuyerGiftCards {
        ListBuyerGiftCardsResponse list(
            JsonNullable<String> buyerExternalIdentifier,
            JsonNullable<String> buyerId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallAddBuyerShippingDetails {
        AddBuyerShippingDetailsResponse create(
            String buyerId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            ShippingDetailsCreate shippingDetailsCreate) throws Exception;
    }

    public interface MethodCallListBuyerShippingDetails {
        ListBuyerShippingDetailsResponse list(
            String buyerId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallGetBuyerShippingDetails {
        GetBuyerShippingDetailsResponse get(
            String buyerId,
            String shippingDetailsId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallUpdateBuyerShippingDetails {
        UpdateBuyerShippingDetailsResponse update(
            UpdateBuyerShippingDetailsRequest request) throws Exception;
    }

    public interface MethodCallDeleteBuyerShippingDetails {
        DeleteBuyerShippingDetailsResponse delete(
            String buyerId,
            String shippingDetailsId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallListPaymentMethods {
        ListPaymentMethodsResponse list(
            ListPaymentMethodsRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreatePaymentMethod {
        CreatePaymentMethodResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Body requestBody) throws Exception;
    }

    public interface MethodCallGetPaymentMethod {
        GetPaymentMethodResponse get(
            String paymentMethodId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallDeletePaymentMethod {
        DeletePaymentMethodResponse delete(
            String paymentMethodId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallListPaymentMethodPaymentServiceTokens {
        ListPaymentMethodPaymentServiceTokensResponse list(
            String paymentMethodId,
            JsonNullable<String> paymentServiceId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreatePaymentMethodPaymentServiceToken {
        CreatePaymentMethodPaymentServiceTokenResponse create(
            String paymentMethodId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            PaymentServiceTokenCreate paymentServiceTokenCreate) throws Exception;
    }

    public interface MethodCallDeletePaymentMethodPaymentServiceToken {
        DeletePaymentMethodPaymentServiceTokenResponse delete(
            String paymentMethodId,
            String paymentServiceTokenId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallListPaymentMethodNetworkTokens {
        ListPaymentMethodNetworkTokensResponse list(
            String paymentMethodId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreatePaymentMethodNetworkToken {
        CreatePaymentMethodNetworkTokenResponse create(
            String paymentMethodId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            NetworkTokenCreate networkTokenCreate) throws Exception;
    }

    public interface MethodCallSuspendPaymentMethodNetworkToken {
        SuspendPaymentMethodNetworkTokenResponse suspend(
            String paymentMethodId,
            String networkTokenId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallResumePaymentMethodNetworkToken {
        ResumePaymentMethodNetworkTokenResponse resume(
            String paymentMethodId,
            String networkTokenId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallDeletePaymentMethodNetworkToken {
        DeletePaymentMethodNetworkTokenResponse delete(
            String paymentMethodId,
            String networkTokenId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallCreatePaymentMethodNetworkTokenCryptogram {
        CreatePaymentMethodNetworkTokenCryptogramResponse create(
            CreatePaymentMethodNetworkTokenCryptogramRequest request) throws Exception;
    }

    public interface MethodCallGetGiftCard {
        GetGiftCardResponse get(
            String giftCardId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallDeleteGiftCard {
        DeleteGiftCardResponse delete(
            String giftCardId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallCreateGiftCard {
        CreateGiftCardResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            GiftCardCreate giftCardCreate) throws Exception;
    }

    public interface MethodCallListGiftCards {
        ListGiftCardsResponse list(
            ListGiftCardsRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallListGiftCardBalances {
        ListGiftCardBalancesResponse list(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            GiftCardBalanceRequest giftCardBalanceRequest) throws Exception;
    }

    public interface MethodCallListCardSchemeDefinitions {
        ListCardSchemeDefinitionsResponse list(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallConfigureDigitalWallet {
        ConfigureDigitalWalletResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            DigitalWalletCreate digitalWalletCreate) throws Exception;
    }

    public interface MethodCallListDigitalWallets {
        ListDigitalWalletsResponse list(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallGetDigitalWallet {
        GetDigitalWalletResponse get(
            String digitalWalletId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallDeleteDigitalWallet {
        DeleteDigitalWalletResponse delete(
            String digitalWalletId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallUpdateDigitalWallet {
        UpdateDigitalWalletResponse update(
            String digitalWalletId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            DigitalWalletUpdate digitalWalletUpdate) throws Exception;
    }

    public interface MethodCallCreateGooglePayDigitalWalletSession {
        CreateGooglePayDigitalWalletSessionResponse googlePay(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            GooglePaySessionRequest googlePaySessionRequest) throws Exception;
    }

    public interface MethodCallCreateApplePayDigitalWalletSession {
        CreateApplePayDigitalWalletSessionResponse applePay(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            ApplePaySessionRequest applePaySessionRequest) throws Exception;
    }

    public interface MethodCallCreateClickToPayDigitalWalletSession {
        CreateClickToPayDigitalWalletSessionResponse clickToPay(
            Optional<String> applicationName,
            ClickToPaySessionRequest clickToPaySessionRequest) throws Exception;
    }

    public interface MethodCallRegisterDigitalWalletDomain {
        RegisterDigitalWalletDomainResponse create(
            String digitalWalletId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            DigitalWalletDomain digitalWalletDomain) throws Exception;
    }

    public interface MethodCallUnregisterDigitalWalletDomain {
        UnregisterDigitalWalletDomainResponse delete(
            String digitalWalletId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            DigitalWalletDomain digitalWalletDomain) throws Exception;
    }

    public interface MethodCallListTransactions {
        ListTransactionsResponse list(
            ListTransactionsRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreateTransaction {
        CreateTransactionResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            JsonNullable<String> idempotencyKey,
            TransactionCreate transactionCreate) throws Exception;
    }

    public interface MethodCallGetTransaction {
        GetTransactionResponse get(
            String transactionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCaptureTransaction {
        CaptureTransactionResponse capture(
            String transactionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            TransactionCapture transactionCapture) throws Exception;
    }

    public interface MethodCallVoidTransaction {
        VoidTransactionResponse void_(
            String transactionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallSyncTransaction {
        SyncTransactionResponse sync(
            String transactionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallListTransactionRefunds {
        ListTransactionRefundsResponse list(
            String transactionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreateTransactionRefund {
        CreateTransactionRefundResponse create(
            String transactionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            TransactionRefundCreate transactionRefundCreate) throws Exception;
    }

    public interface MethodCallGetTransactionRefund {
        GetTransactionRefundResponse get(
            String transactionId,
            String refundId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreateFullTransactionRefund {
        CreateFullTransactionRefundResponse create(
            String transactionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            JsonNullable<? extends TransactionRefundAllCreate> transactionRefundAllCreate) throws Exception;
    }

    public interface MethodCallListTransactionEvents {
        ListTransactionEventsResponse list(
            ListTransactionEventsRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallGetRefund {
        GetRefundResponse get(
            String refundId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallListPaymentOptions {
        ListPaymentOptionsResponse list(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            PaymentOptionRequest paymentOptionRequest) throws Exception;
    }

    public interface MethodCallListPaymentServiceDefinitions {
        ListPaymentServiceDefinitionsResponse list(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<String> applicationName,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallGetPaymentServiceDefinition {
        GetPaymentServiceDefinitionResponse get(
            String paymentServiceDefinitionId,
            Optional<String> applicationName,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreatePaymentServiceDefinitionSession {
        CreatePaymentServiceDefinitionSessionResponse session(
            String paymentServiceDefinitionId,
            Optional<String> applicationName,
            Map<String, Object> requestBody) throws Exception;
    }

    public interface MethodCallListPaymentServices {
        ListPaymentServicesResponse list(
            ListPaymentServicesRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallUpdatePaymentService {
        UpdatePaymentServiceResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            PaymentServiceCreate paymentServiceCreate) throws Exception;
    }

    public interface MethodCallGetPaymentService {
        GetPaymentServiceResponse get(
            String paymentServiceId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreatePaymentService {
        CreatePaymentServiceResponse update(
            String paymentServiceId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            PaymentServiceUpdate paymentServiceUpdate) throws Exception;
    }

    public interface MethodCallDeletePaymentService {
        DeletePaymentServiceResponse delete(
            String paymentServiceId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallVerifyPaymentServiceCredentials {
        VerifyPaymentServiceCredentialsResponse verify(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            VerifyCredentials verifyCredentials) throws Exception;
    }

    public interface MethodCallCreatePaymentServiceSession {
        CreatePaymentServiceSessionResponse session(
            String paymentServiceId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Map<String, Object> requestBody) throws Exception;
    }

    public interface MethodCallListAuditLogs {
        ListAuditLogsResponse list(
            ListAuditLogsRequest request,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreateCheckoutSession {
        CreateCheckoutSessionResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<? extends CheckoutSessionCreate> checkoutSessionCreate) throws Exception;
    }

    public interface MethodCallUpdateCheckoutSession {
        UpdateCheckoutSessionResponse update(
            String sessionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            CheckoutSessionCreate checkoutSessionCreate) throws Exception;
    }

    public interface MethodCallGetCheckoutSession {
        GetCheckoutSessionResponse get(
            String sessionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallDeleteCheckoutSession {
        DeleteCheckoutSessionResponse delete(
            String sessionId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) throws Exception;
    }

    public interface MethodCallListMerchantAccounts {
        ListMerchantAccountsResponse list(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<String> search,
            Optional<String> applicationName,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreateMerchantAccount {
        CreateMerchantAccountResponse create(
            Optional<String> applicationName,
            MerchantAccountCreate merchantAccountCreate) throws Exception;
    }

    public interface MethodCallGetMerchantAccount {
        GetMerchantAccountResponse get(
            String merchantAccountId,
            Optional<String> applicationName,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallUpdateMerchantAccount {
        UpdateMerchantAccountResponse update(
            String merchantAccountId,
            Optional<String> applicationName,
            MerchantAccountUpdate merchantAccountUpdate) throws Exception;
    }

    public interface MethodCallListPayouts {
        ListPayoutsResponse list(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }

    public interface MethodCallCreatePayout {
        CreatePayoutResponse create(
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            PayoutCreate payoutCreate) throws Exception;
    }

    public interface MethodCallGetPayout {
        GetPayoutResponse get(
            String payoutId,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId,
            Optional<Options> options) throws Exception;
    }
}
