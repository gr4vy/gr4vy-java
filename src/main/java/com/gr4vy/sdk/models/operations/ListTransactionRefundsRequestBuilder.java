/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.operations.ListTransactionRefundsOperation;
import com.gr4vy.sdk.utils.Options;
import com.gr4vy.sdk.utils.RetryConfig;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListTransactionRefundsRequestBuilder {

    private String transactionId;
    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ListTransactionRefundsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public ListTransactionRefundsRequestBuilder transactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    public ListTransactionRefundsRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public ListTransactionRefundsRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }
                
    public ListTransactionRefundsRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ListTransactionRefundsRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private ListTransactionRefundsRequest buildRequest() {

        ListTransactionRefundsRequest request = new ListTransactionRefundsRequest(transactionId,
            merchantAccountId);

        return request;
    }

    public ListTransactionRefundsResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<ListTransactionRefundsRequest, ListTransactionRefundsResponse> operation
              = new ListTransactionRefundsOperation(
                 sdkConfiguration,
                 options);
        ListTransactionRefundsRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
