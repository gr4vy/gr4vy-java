/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations.async;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;
import static com.gr4vy.sdk.utils.reactive.ReactiveUtils.mapAsync;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.operations.ListPaymentServiceDefinitionsRequest;
import com.gr4vy.sdk.operations.ListPaymentServiceDefinitions;
import com.gr4vy.sdk.utils.Blob;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Options;
import com.gr4vy.sdk.utils.RetryConfig;
import com.gr4vy.sdk.utils.Utils;
import com.gr4vy.sdk.utils.pagination.AsyncPaginator;
import com.gr4vy.sdk.utils.pagination.CursorTracker;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Flow;
import org.openapitools.jackson.nullable.JsonNullable;
import org.reactivestreams.FlowAdapters;
import org.reactivestreams.Publisher;

public class ListPaymentServiceDefinitionsRequestBuilder {

    private JsonNullable<String> cursor = JsonNullable.undefined();
    private Optional<Long> limit = Utils.readDefaultOrConstValue(
                            "limit",
                            "20",
                            new TypeReference<Optional<Long>>() {});
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ListPaymentServiceDefinitionsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public ListPaymentServiceDefinitionsRequestBuilder cursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    public ListPaymentServiceDefinitionsRequestBuilder cursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }
                
    public ListPaymentServiceDefinitionsRequestBuilder limit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.of(limit);
        return this;
    }

    public ListPaymentServiceDefinitionsRequestBuilder limit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }
                
    public ListPaymentServiceDefinitionsRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ListPaymentServiceDefinitionsRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private ListPaymentServiceDefinitionsRequest buildRequest() {
        if (limit == null) {
            limit = _SINGLETON_VALUE_Limit.value();
        }

        ListPaymentServiceDefinitionsRequest request = new ListPaymentServiceDefinitionsRequest(cursor,
            limit);

        return request;
    }

    public CompletableFuture<ListPaymentServiceDefinitionsResponse> call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<ListPaymentServiceDefinitionsRequest, ListPaymentServiceDefinitionsResponse> operation
              = new ListPaymentServiceDefinitions.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        ListPaymentServiceDefinitionsRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

    /**
     * Returns a Publisher that performs next page calls till no more pages
     * are returned.
     *
     * <p>The returned publisher can be used with reactive frameworks:
     * <pre><code>
     * Publisher&lt;ListPaymentServiceDefinitionsResponse&gt; publisher = builder.callAsPublisher();
     * publisher.subscribe(new Subscriber&lt;ListPaymentServiceDefinitionsResponse&gt;() {
     *     // Handle onNext, onError, onComplete
     * });
     * </code></pre>
     *
     * @return A Publisher that emits pages asynchronously
     */
    public Publisher<ListPaymentServiceDefinitionsResponse> callAsPublisher() {
        ListPaymentServiceDefinitionsRequest request = this.buildRequest();
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<ListPaymentServiceDefinitionsRequest, ListPaymentServiceDefinitionsResponse> operation
              = new ListPaymentServiceDefinitions.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());

        Flow.Publisher<HttpResponse<Blob>> asyncPaginator = new AsyncPaginator<>(
            request,
            new CursorTracker<>("$.next_cursor", String.class),
                    ListPaymentServiceDefinitionsRequest::withCursor,
            operation::doRequest);

        Flow.Publisher<ListPaymentServiceDefinitionsResponse> flowPublisher = mapAsync(asyncPaginator, operation::handleResponse);

        // Convert Flow.Publisher to Reactive Streams Publisher at the last stage
        return FlowAdapters.toPublisher(flowPublisher);
    }


    private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
            new LazySingletonValue<>(
                    "limit",
                    "20",
                    new TypeReference<Optional<Long>>() {});
}
