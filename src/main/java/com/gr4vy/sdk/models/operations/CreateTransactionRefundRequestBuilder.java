/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.TransactionRefundCreate;
import com.gr4vy.sdk.operations.CreateTransactionRefund;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateTransactionRefundRequestBuilder {

    private String transactionId;
    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private TransactionRefundCreate transactionRefundCreate;
    private final SDKConfiguration sdkConfiguration;

    public CreateTransactionRefundRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateTransactionRefundRequestBuilder transactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    public CreateTransactionRefundRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreateTransactionRefundRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CreateTransactionRefundRequestBuilder transactionRefundCreate(TransactionRefundCreate transactionRefundCreate) {
        Utils.checkNotNull(transactionRefundCreate, "transactionRefundCreate");
        this.transactionRefundCreate = transactionRefundCreate;
        return this;
    }


    private CreateTransactionRefundRequest buildRequest() {

        CreateTransactionRefundRequest request = new CreateTransactionRefundRequest(transactionId,
            merchantAccountId,
            transactionRefundCreate);

        return request;
    }

    public CreateTransactionRefundResponse call() throws Exception {
        
        RequestOperation<CreateTransactionRefundRequest, CreateTransactionRefundResponse> operation
              = new CreateTransactionRefund.Sync(sdkConfiguration);
        CreateTransactionRefundRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
