/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListGiftCardsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_external_identifier")
    private JsonNullable<String> buyerExternalIdentifier;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_id")
    private JsonNullable<String> buyerId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=application_name")
    private Optional<String> applicationName;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public ListGiftCardsRequest(
            JsonNullable<String> buyerExternalIdentifier,
            JsonNullable<String> buyerId,
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<String> applicationName,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(applicationName, "applicationName");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        this.buyerId = buyerId;
        this.cursor = cursor;
        this.limit = limit;
        this.applicationName = applicationName;
        this.merchantAccountId = merchantAccountId;
    }
    
    public ListGiftCardsRequest() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> buyerExternalIdentifier() {
        return buyerExternalIdentifier;
    }

    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    @JsonIgnore
    public JsonNullable<String> cursor() {
        return cursor;
    }

    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<String> applicationName() {
        return applicationName;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListGiftCardsRequest withBuyerExternalIdentifier(String buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
        return this;
    }

    public ListGiftCardsRequest withBuyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        return this;
    }

    public ListGiftCardsRequest withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    public ListGiftCardsRequest withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    public ListGiftCardsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    public ListGiftCardsRequest withCursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    public ListGiftCardsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    public ListGiftCardsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListGiftCardsRequest withApplicationName(String applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = Optional.ofNullable(applicationName);
        return this;
    }

    public ListGiftCardsRequest withApplicationName(Optional<String> applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = applicationName;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListGiftCardsRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListGiftCardsRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListGiftCardsRequest other = (ListGiftCardsRequest) o;
        return 
            Objects.deepEquals(this.buyerExternalIdentifier, other.buyerExternalIdentifier) &&
            Objects.deepEquals(this.buyerId, other.buyerId) &&
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.applicationName, other.applicationName) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            buyerExternalIdentifier,
            buyerId,
            cursor,
            limit,
            applicationName,
            merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListGiftCardsRequest.class,
                "buyerExternalIdentifier", buyerExternalIdentifier,
                "buyerId", buyerId,
                "cursor", cursor,
                "limit", limit,
                "applicationName", applicationName,
                "merchantAccountId", merchantAccountId);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> buyerExternalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<String> buyerId = JsonNullable.undefined();
 
        private JsonNullable<String> cursor = JsonNullable.undefined();
 
        private Optional<Long> limit;
 
        private Optional<String> applicationName;
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder buyerExternalIdentifier(String buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
            return this;
        }

        public Builder buyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = buyerExternalIdentifier;
            return this;
        }

        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }

        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        public Builder cursor(JsonNullable<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder applicationName(String applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = Optional.ofNullable(applicationName);
            return this;
        }

        public Builder applicationName(Optional<String> applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = applicationName;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }
        
        public ListGiftCardsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (applicationName == null) {
                applicationName = _SINGLETON_VALUE_ApplicationName.value();
            }
            return new ListGiftCardsRequest(
                buyerExternalIdentifier,
                buyerId,
                cursor,
                limit,
                applicationName,
                merchantAccountId);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_ApplicationName =
                new LazySingletonValue<>(
                        "application_name",
                        "\"core-api\"",
                        new TypeReference<Optional<String>>() {});
    }
}
