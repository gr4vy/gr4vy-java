/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.models.components.AuditLogAction;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ListAuditLogsRequest {
    /**
     * A pointer to the page of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    /**
     * The maximum number of items that are at returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * Filters the results to only the items for which the `audit-log` has an `action` that matches this
     * value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=action")
    private JsonNullable<? extends AuditLogAction> action;

    /**
     * Filters the results to only the items for which the `user` has an `id` that matches this value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")
    private JsonNullable<String> userId;

    /**
     * Filters the results to only the items for which the `audit-log` has a `resource` that matches this
     * type value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=resource_type")
    private JsonNullable<String> resourceType;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public ListAuditLogsRequest(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<? extends AuditLogAction> action,
            JsonNullable<String> userId,
            JsonNullable<String> resourceType,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(resourceType, "resourceType");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.cursor = cursor;
        this.limit = limit;
        this.action = action;
        this.userId = userId;
        this.resourceType = resourceType;
        this.merchantAccountId = merchantAccountId;
    }
    
    public ListAuditLogsRequest() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A pointer to the page of results to return.
     */
    @JsonIgnore
    public JsonNullable<String> cursor() {
        return cursor;
    }

    /**
     * The maximum number of items that are at returned.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * Filters the results to only the items for which the `audit-log` has an `action` that matches this
     * value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AuditLogAction> action() {
        return (JsonNullable<AuditLogAction>) action;
    }

    /**
     * Filters the results to only the items for which the `user` has an `id` that matches this value.
     */
    @JsonIgnore
    public JsonNullable<String> userId() {
        return userId;
    }

    /**
     * Filters the results to only the items for which the `audit-log` has a `resource` that matches this
     * type value.
     */
    @JsonIgnore
    public JsonNullable<String> resourceType() {
        return resourceType;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A pointer to the page of results to return.
     */
    public ListAuditLogsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    /**
     * A pointer to the page of results to return.
     */
    public ListAuditLogsRequest withCursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListAuditLogsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    /**
     * The maximum number of items that are at returned.
     */
    public ListAuditLogsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Filters the results to only the items for which the `audit-log` has an `action` that matches this
     * value.
     */
    public ListAuditLogsRequest withAction(AuditLogAction action) {
        Utils.checkNotNull(action, "action");
        this.action = JsonNullable.of(action);
        return this;
    }

    /**
     * Filters the results to only the items for which the `audit-log` has an `action` that matches this
     * value.
     */
    public ListAuditLogsRequest withAction(JsonNullable<? extends AuditLogAction> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    /**
     * Filters the results to only the items for which the `user` has an `id` that matches this value.
     */
    public ListAuditLogsRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = JsonNullable.of(userId);
        return this;
    }

    /**
     * Filters the results to only the items for which the `user` has an `id` that matches this value.
     */
    public ListAuditLogsRequest withUserId(JsonNullable<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Filters the results to only the items for which the `audit-log` has a `resource` that matches this
     * type value.
     */
    public ListAuditLogsRequest withResourceType(String resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = JsonNullable.of(resourceType);
        return this;
    }

    /**
     * Filters the results to only the items for which the `audit-log` has a `resource` that matches this
     * type value.
     */
    public ListAuditLogsRequest withResourceType(JsonNullable<String> resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = resourceType;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListAuditLogsRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListAuditLogsRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAuditLogsRequest other = (ListAuditLogsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.resourceType, other.resourceType) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            cursor, limit, action,
            userId, resourceType, merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAuditLogsRequest.class,
                "cursor", cursor,
                "limit", limit,
                "action", action,
                "userId", userId,
                "resourceType", resourceType,
                "merchantAccountId", merchantAccountId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> cursor = JsonNullable.undefined();

        private Optional<Long> limit;

        private JsonNullable<? extends AuditLogAction> action = JsonNullable.undefined();

        private JsonNullable<String> userId = JsonNullable.undefined();

        private JsonNullable<String> resourceType = JsonNullable.undefined();

        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(JsonNullable<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }


        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        /**
         * Filters the results to only the items for which the `audit-log` has an `action` that matches this
         * value.
         */
        public Builder action(AuditLogAction action) {
            Utils.checkNotNull(action, "action");
            this.action = JsonNullable.of(action);
            return this;
        }

        /**
         * Filters the results to only the items for which the `audit-log` has an `action` that matches this
         * value.
         */
        public Builder action(JsonNullable<? extends AuditLogAction> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }


        /**
         * Filters the results to only the items for which the `user` has an `id` that matches this value.
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = JsonNullable.of(userId);
            return this;
        }

        /**
         * Filters the results to only the items for which the `user` has an `id` that matches this value.
         */
        public Builder userId(JsonNullable<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }


        /**
         * Filters the results to only the items for which the `audit-log` has a `resource` that matches this
         * type value.
         */
        public Builder resourceType(String resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = JsonNullable.of(resourceType);
            return this;
        }

        /**
         * Filters the results to only the items for which the `audit-log` has a `resource` that matches this
         * type value.
         */
        public Builder resourceType(JsonNullable<String> resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = resourceType;
            return this;
        }


        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public ListAuditLogsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }

            return new ListAuditLogsRequest(
                cursor, limit, action,
                userId, resourceType, merchantAccountId);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Long>>() {});
    }
}
