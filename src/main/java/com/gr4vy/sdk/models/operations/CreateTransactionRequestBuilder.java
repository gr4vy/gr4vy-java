/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.TransactionCreate;
import com.gr4vy.sdk.operations.CreateTransaction;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateTransactionRequestBuilder {

    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private JsonNullable<String> idempotencyKey = JsonNullable.undefined();
    private Optional<String> xForwardedFor = Optional.empty();
    private TransactionCreate transactionCreate;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public CreateTransactionRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateTransactionRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreateTransactionRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CreateTransactionRequestBuilder idempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = JsonNullable.of(idempotencyKey);
        return this;
    }

    public CreateTransactionRequestBuilder idempotencyKey(JsonNullable<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }
                
    public CreateTransactionRequestBuilder xForwardedFor(String xForwardedFor) {
        Utils.checkNotNull(xForwardedFor, "xForwardedFor");
        this.xForwardedFor = Optional.of(xForwardedFor);
        return this;
    }

    public CreateTransactionRequestBuilder xForwardedFor(Optional<String> xForwardedFor) {
        Utils.checkNotNull(xForwardedFor, "xForwardedFor");
        this.xForwardedFor = xForwardedFor;
        return this;
    }

    public CreateTransactionRequestBuilder transactionCreate(TransactionCreate transactionCreate) {
        Utils.checkNotNull(transactionCreate, "transactionCreate");
        this.transactionCreate = transactionCreate;
        return this;
    }


    private CreateTransactionRequest buildRequest() {

        CreateTransactionRequest request = new CreateTransactionRequest(merchantAccountId,
            idempotencyKey,
            xForwardedFor,
            transactionCreate);

        return request;
    }

    public CreateTransactionResponse call() throws Exception {
        
        RequestOperation<CreateTransactionRequest, CreateTransactionResponse> operation
              = new CreateTransaction.Sync(sdkConfiguration, _headers);
        CreateTransactionRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
