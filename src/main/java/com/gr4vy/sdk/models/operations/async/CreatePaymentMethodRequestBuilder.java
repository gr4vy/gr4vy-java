/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations.async;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.operations.Body;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodRequest;
import com.gr4vy.sdk.operations.CreatePaymentMethod;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreatePaymentMethodRequestBuilder {

    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private Body requestBody;
    private final SDKConfiguration sdkConfiguration;

    public CreatePaymentMethodRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreatePaymentMethodRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreatePaymentMethodRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CreatePaymentMethodRequestBuilder requestBody(Body requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }


    private CreatePaymentMethodRequest buildRequest() {

        CreatePaymentMethodRequest request = new CreatePaymentMethodRequest(merchantAccountId,
            requestBody);

        return request;
    }

    public CompletableFuture<CreatePaymentMethodResponse> call() throws Exception {
        
        AsyncRequestOperation<CreatePaymentMethodRequest, CreatePaymentMethodResponse> operation
              = new CreatePaymentMethod.Async(sdkConfiguration);
        CreatePaymentMethodRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
