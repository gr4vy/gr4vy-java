/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;

public class DeletePaymentMethodRequest {

    /**
     * The ID of the payment method
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=payment_method_id")
    private String paymentMethodId;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public DeletePaymentMethodRequest(
            String paymentMethodId,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.paymentMethodId = paymentMethodId;
        this.merchantAccountId = merchantAccountId;
    }
    
    public DeletePaymentMethodRequest(
            String paymentMethodId) {
        this(paymentMethodId, JsonNullable.undefined());
    }

    /**
     * The ID of the payment method
     */
    @JsonIgnore
    public String paymentMethodId() {
        return paymentMethodId;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the payment method
     */
    public DeletePaymentMethodRequest withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public DeletePaymentMethodRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public DeletePaymentMethodRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeletePaymentMethodRequest other = (DeletePaymentMethodRequest) o;
        return 
            Utils.enhancedDeepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            paymentMethodId,
            merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeletePaymentMethodRequest.class,
                "paymentMethodId", paymentMethodId,
                "merchantAccountId", merchantAccountId);
    }
    
    public final static class Builder {
 
        private String paymentMethodId;
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the payment method
         */
        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }
        
        public DeletePaymentMethodRequest build() {
            return new DeletePaymentMethodRequest(
                paymentMethodId,
                merchantAccountId);
        }
    }
}
