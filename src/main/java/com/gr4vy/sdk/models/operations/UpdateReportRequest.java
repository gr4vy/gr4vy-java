/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gr4vy.sdk.models.components.ReportUpdate;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateReportRequest {
    /**
     * The ID of the report to edit.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=report_id")
    private String reportId;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private ReportUpdate reportUpdate;

    @JsonCreator
    public UpdateReportRequest(
            String reportId,
            JsonNullable<String> merchantAccountId,
            ReportUpdate reportUpdate) {
        Utils.checkNotNull(reportId, "reportId");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(reportUpdate, "reportUpdate");
        this.reportId = reportId;
        this.merchantAccountId = merchantAccountId;
        this.reportUpdate = reportUpdate;
    }
    
    public UpdateReportRequest(
            String reportId,
            ReportUpdate reportUpdate) {
        this(reportId, JsonNullable.undefined(), reportUpdate);
    }

    /**
     * The ID of the report to edit.
     */
    @JsonIgnore
    public String reportId() {
        return reportId;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public ReportUpdate reportUpdate() {
        return reportUpdate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the report to edit.
     */
    public UpdateReportRequest withReportId(String reportId) {
        Utils.checkNotNull(reportId, "reportId");
        this.reportId = reportId;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public UpdateReportRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public UpdateReportRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public UpdateReportRequest withReportUpdate(ReportUpdate reportUpdate) {
        Utils.checkNotNull(reportUpdate, "reportUpdate");
        this.reportUpdate = reportUpdate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateReportRequest other = (UpdateReportRequest) o;
        return 
            Utils.enhancedDeepEquals(this.reportId, other.reportId) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Utils.enhancedDeepEquals(this.reportUpdate, other.reportUpdate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            reportId, merchantAccountId, reportUpdate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateReportRequest.class,
                "reportId", reportId,
                "merchantAccountId", merchantAccountId,
                "reportUpdate", reportUpdate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String reportId;

        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();

        private ReportUpdate reportUpdate;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the report to edit.
         */
        public Builder reportId(String reportId) {
            Utils.checkNotNull(reportId, "reportId");
            this.reportId = reportId;
            return this;
        }


        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }


        public Builder reportUpdate(ReportUpdate reportUpdate) {
            Utils.checkNotNull(reportUpdate, "reportUpdate");
            this.reportUpdate = reportUpdate;
            return this;
        }

        public UpdateReportRequest build() {

            return new UpdateReportRequest(
                reportId, merchantAccountId, reportUpdate);
        }

    }
}
