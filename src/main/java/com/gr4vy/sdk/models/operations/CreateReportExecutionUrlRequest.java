/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateReportExecutionUrlRequest {

    /**
     * The ID of the report to retrieve a URL for.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=report_id")
    private String reportId;

    /**
     * The ID of the execution of a report to retrieve a URL for.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=report_execution_id")
    private String reportExecutionId;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public CreateReportExecutionUrlRequest(
            String reportId,
            String reportExecutionId,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(reportId, "reportId");
        Utils.checkNotNull(reportExecutionId, "reportExecutionId");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.reportId = reportId;
        this.reportExecutionId = reportExecutionId;
        this.merchantAccountId = merchantAccountId;
    }
    
    public CreateReportExecutionUrlRequest(
            String reportId,
            String reportExecutionId) {
        this(reportId, reportExecutionId, JsonNullable.undefined());
    }

    /**
     * The ID of the report to retrieve a URL for.
     */
    @JsonIgnore
    public String reportId() {
        return reportId;
    }

    /**
     * The ID of the execution of a report to retrieve a URL for.
     */
    @JsonIgnore
    public String reportExecutionId() {
        return reportExecutionId;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the report to retrieve a URL for.
     */
    public CreateReportExecutionUrlRequest withReportId(String reportId) {
        Utils.checkNotNull(reportId, "reportId");
        this.reportId = reportId;
        return this;
    }

    /**
     * The ID of the execution of a report to retrieve a URL for.
     */
    public CreateReportExecutionUrlRequest withReportExecutionId(String reportExecutionId) {
        Utils.checkNotNull(reportExecutionId, "reportExecutionId");
        this.reportExecutionId = reportExecutionId;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public CreateReportExecutionUrlRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public CreateReportExecutionUrlRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateReportExecutionUrlRequest other = (CreateReportExecutionUrlRequest) o;
        return 
            Objects.deepEquals(this.reportId, other.reportId) &&
            Objects.deepEquals(this.reportExecutionId, other.reportExecutionId) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            reportId,
            reportExecutionId,
            merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateReportExecutionUrlRequest.class,
                "reportId", reportId,
                "reportExecutionId", reportExecutionId,
                "merchantAccountId", merchantAccountId);
    }
    
    public final static class Builder {
 
        private String reportId;
 
        private String reportExecutionId;
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the report to retrieve a URL for.
         */
        public Builder reportId(String reportId) {
            Utils.checkNotNull(reportId, "reportId");
            this.reportId = reportId;
            return this;
        }

        /**
         * The ID of the execution of a report to retrieve a URL for.
         */
        public Builder reportExecutionId(String reportExecutionId) {
            Utils.checkNotNull(reportExecutionId, "reportExecutionId");
            this.reportExecutionId = reportExecutionId;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }
        
        public CreateReportExecutionUrlRequest build() {
            return new CreateReportExecutionUrlRequest(
                reportId,
                reportExecutionId,
                merchantAccountId);
        }
    }
}
