/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.CheckoutSessionCreate;
import com.gr4vy.sdk.operations.CreateCheckoutSession;
import com.gr4vy.sdk.utils.Headers;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateCheckoutSessionRequestBuilder {

    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private Optional<? extends CheckoutSessionCreate> checkoutSessionCreate = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public CreateCheckoutSessionRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateCheckoutSessionRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreateCheckoutSessionRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }
                
    public CreateCheckoutSessionRequestBuilder checkoutSessionCreate(CheckoutSessionCreate checkoutSessionCreate) {
        Utils.checkNotNull(checkoutSessionCreate, "checkoutSessionCreate");
        this.checkoutSessionCreate = Optional.of(checkoutSessionCreate);
        return this;
    }

    public CreateCheckoutSessionRequestBuilder checkoutSessionCreate(Optional<? extends CheckoutSessionCreate> checkoutSessionCreate) {
        Utils.checkNotNull(checkoutSessionCreate, "checkoutSessionCreate");
        this.checkoutSessionCreate = checkoutSessionCreate;
        return this;
    }


    private CreateCheckoutSessionRequest buildRequest() {

        CreateCheckoutSessionRequest request = new CreateCheckoutSessionRequest(merchantAccountId,
            checkoutSessionCreate);

        return request;
    }

    public CreateCheckoutSessionResponse call() throws Exception {
        
        RequestOperation<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse> operation
              = new CreateCheckoutSession.Sync(sdkConfiguration, _headers);
        CreateCheckoutSessionRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
