/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations.async;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.NetworkTokenCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodNetworkTokenRequest;
import com.gr4vy.sdk.operations.CreatePaymentMethodNetworkToken;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreatePaymentMethodNetworkTokenRequestBuilder {

    private String paymentMethodId;
    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private NetworkTokenCreate networkTokenCreate;
    private final SDKConfiguration sdkConfiguration;

    public CreatePaymentMethodNetworkTokenRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreatePaymentMethodNetworkTokenRequestBuilder paymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    public CreatePaymentMethodNetworkTokenRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreatePaymentMethodNetworkTokenRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CreatePaymentMethodNetworkTokenRequestBuilder networkTokenCreate(NetworkTokenCreate networkTokenCreate) {
        Utils.checkNotNull(networkTokenCreate, "networkTokenCreate");
        this.networkTokenCreate = networkTokenCreate;
        return this;
    }


    private CreatePaymentMethodNetworkTokenRequest buildRequest() {

        CreatePaymentMethodNetworkTokenRequest request = new CreatePaymentMethodNetworkTokenRequest(paymentMethodId,
            merchantAccountId,
            networkTokenCreate);

        return request;
    }

    public CompletableFuture<CreatePaymentMethodNetworkTokenResponse> call() throws Exception {
        
        AsyncRequestOperation<CreatePaymentMethodNetworkTokenRequest, CreatePaymentMethodNetworkTokenResponse> operation
              = new CreatePaymentMethodNetworkToken.Async(sdkConfiguration);
        CreatePaymentMethodNetworkTokenRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
