/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations.async;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.ReportUpdate;
import com.gr4vy.sdk.models.operations.UpdateReportRequest;
import com.gr4vy.sdk.operations.UpdateReport;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateReportRequestBuilder {

    private String reportId;
    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private ReportUpdate reportUpdate;
    private final SDKConfiguration sdkConfiguration;

    public UpdateReportRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UpdateReportRequestBuilder reportId(String reportId) {
        Utils.checkNotNull(reportId, "reportId");
        this.reportId = reportId;
        return this;
    }

    public UpdateReportRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public UpdateReportRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public UpdateReportRequestBuilder reportUpdate(ReportUpdate reportUpdate) {
        Utils.checkNotNull(reportUpdate, "reportUpdate");
        this.reportUpdate = reportUpdate;
        return this;
    }


    private UpdateReportRequest buildRequest() {

        UpdateReportRequest request = new UpdateReportRequest(reportId,
            merchantAccountId,
            reportUpdate);

        return request;
    }

    public CompletableFuture<UpdateReportResponse> call() throws Exception {
        
        AsyncRequestOperation<UpdateReportRequest, UpdateReportResponse> operation
              = new UpdateReport.Async(sdkConfiguration);
        UpdateReportRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
