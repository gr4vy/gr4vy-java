/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import static com.gr4vy.sdk.operations.Operations.RequestOperation;
import static com.gr4vy.sdk.utils.Exceptions.unchecked;
import static com.gr4vy.sdk.utils.Utils.transform;
import static com.gr4vy.sdk.utils.Utils.toStream;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.operations.ListMerchantAccountsOperation;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Options;
import com.gr4vy.sdk.utils.RetryConfig;
import com.gr4vy.sdk.utils.Utils;
import com.gr4vy.sdk.utils.pagination.CursorTracker;
import com.gr4vy.sdk.utils.pagination.Paginator;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Iterable;
import java.lang.Long;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.Iterator;
import java.util.Optional;
import java.util.stream.Stream;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListMerchantAccountsRequestBuilder {

    private JsonNullable<String> cursor = JsonNullable.undefined();
    private Optional<Long> limit = Utils.readDefaultOrConstValue(
                            "limit",
                            "20",
                            new TypeReference<Optional<Long>>() {});
    private JsonNullable<String> search = JsonNullable.undefined();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ListMerchantAccountsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public ListMerchantAccountsRequestBuilder cursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    public ListMerchantAccountsRequestBuilder cursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }
                
    public ListMerchantAccountsRequestBuilder limit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.of(limit);
        return this;
    }

    public ListMerchantAccountsRequestBuilder limit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListMerchantAccountsRequestBuilder search(String search) {
        Utils.checkNotNull(search, "search");
        this.search = JsonNullable.of(search);
        return this;
    }

    public ListMerchantAccountsRequestBuilder search(JsonNullable<String> search) {
        Utils.checkNotNull(search, "search");
        this.search = search;
        return this;
    }
                
    public ListMerchantAccountsRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ListMerchantAccountsRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private ListMerchantAccountsRequest buildRequest() {
        if (limit == null) {
            limit = _SINGLETON_VALUE_Limit.value();
        }

        ListMerchantAccountsRequest request = new ListMerchantAccountsRequest(cursor,
            limit,
            search);

        return request;
    }

    public ListMerchantAccountsResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<ListMerchantAccountsRequest, ListMerchantAccountsResponse> operation
              = new ListMerchantAccountsOperation(sdkConfiguration, options);
        ListMerchantAccountsRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }

    /**
    * Returns an iterable that performs next page calls till no more pages
    * are returned.
    *
    * <p>The returned iterable can be used in a for-each loop:
    * <pre><code>
    * for (ListMerchantAccountsResponse page : builder.callAsIterable()) {
    *     // Process each page
    * }
    * </code></pre>
    * 
    * @return An iterable that can be used to iterate through all pages
    */
    public Iterable<ListMerchantAccountsResponse> callAsIterable() {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<ListMerchantAccountsRequest, ListMerchantAccountsResponse> operation
              = new ListMerchantAccountsOperation(sdkConfiguration, options);
        ListMerchantAccountsRequest request = buildRequest();
        Iterator<HttpResponse<InputStream>> iterator = new Paginator<>(
            request,
            new CursorTracker<>("$.next_cursor", String.class),
                ListMerchantAccountsRequest::withCursor,
            nextRequest -> unchecked(() -> operation.doRequest(request)).get());
        
        return () -> transform(iterator, operation::handleResponse);
    }

    /**
     * Returns a stream that performs next page calls till no more pages
     * are returned.
     **/  
    public Stream<ListMerchantAccountsResponse> callAsStream() {
        return toStream(callAsIterable());
    }


    private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
            new LazySingletonValue<>(
                    "limit",
                    "20",
                    new TypeReference<Optional<Long>>() {});
}
