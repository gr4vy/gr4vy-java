/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.models.components.Method;
import com.gr4vy.sdk.models.components.TransactionPaymentSource;
import com.gr4vy.sdk.models.components.TransactionStatus;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.SpeakeasyMetadata;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ListTransactionsRequest {
    /**
     * A pointer to the page of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    /**
     * The maximum number of items that are at returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * Filters the results to only transactions created before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_lte")
    private JsonNullable<OffsetDateTime> createdAtLte;

    /**
     * Filters the results to only transactions created after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_gte")
    private JsonNullable<OffsetDateTime> createdAtGte;

    /**
     * Filters the results to only transactions updated before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_at_lte")
    private JsonNullable<OffsetDateTime> updatedAtLte;

    /**
     * Filters the results to only transactions updated after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_at_gte")
    private JsonNullable<OffsetDateTime> updatedAtGte;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search")
    private JsonNullable<String> search;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_external_identifier")
    private JsonNullable<String> buyerExternalIdentifier;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_id")
    private JsonNullable<String> buyerId;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_email_address")
    private JsonNullable<String> buyerEmailAddress;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ip_address")
    private JsonNullable<String> ipAddress;

    /**
     * Filters the results to only the transactions that have a `status` that matches with any of the
     * provided status values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private JsonNullable<? extends List<TransactionStatus>> status;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=id")
    private JsonNullable<String> id;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_service_transaction_id")
    private JsonNullable<String> paymentServiceTransactionId;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * Filters for transactions where their `metadata` values contain all of the provided `metadata` keys.
     * The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be
     * strings. This value should also be URL encoded.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=metadata")
    private JsonNullable<? extends List<String>> metadata;

    /**
     * Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=amount_eq")
    private JsonNullable<Long> amountEq;

    /**
     * Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=amount_lte")
    private JsonNullable<Long> amountLte;

    /**
     * Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte`
     * value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=amount_gte")
    private JsonNullable<Long> amountGte;

    /**
     * Filters for transactions that have matching `currency` values. The `currency` values provided must
     * be formatted as 3-letter ISO currency code.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=currency")
    private JsonNullable<? extends List<String>> currency;

    /**
     * Filters for transactions that have matching `country` values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    private JsonNullable<? extends List<String>> country;

    /**
     * Filters for transactions that were processed by the provided `payment_service_id` values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_service_id")
    private JsonNullable<? extends List<String>> paymentServiceId;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_method_id")
    private JsonNullable<String> paymentMethodId;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_method_label")
    private JsonNullable<String> paymentMethodLabel;

    /**
     * Filters for transactions where the `payment_method_scheme` matches one of the provided values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_method_scheme")
    private JsonNullable<? extends List<String>> paymentMethodScheme;

    /**
     * Filters for transactions that have a payment method with a country that matches with the provided
     * value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_method_country")
    private JsonNullable<String> paymentMethodCountry;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_method_fingerprint")
    private JsonNullable<String> paymentMethodFingerprint;

    /**
     * Filters for transactions that have matching `method` values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=method")
    private JsonNullable<? extends List<Method>> method;

    /**
     * Filters for transactions where the `error_code` matches one for the provided values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=error_code")
    private JsonNullable<? extends List<String>> errorCode;

    /**
     * Filters for transactions with refunds.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=has_refunds")
    private JsonNullable<Boolean> hasRefunds;

    /**
     * Filters for transactions with a pending manual anti-fraud review.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pending_review")
    private JsonNullable<Boolean> pendingReview;

    /**
     * Filters for transactions where the `checkout_session_id` matches the provided value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=checkout_session_id")
    private JsonNullable<String> checkoutSessionId;

    /**
     * Filters for transactions where the `reconciliation_id` matches the provided value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=reconciliation_id")
    private JsonNullable<String> reconciliationId;

    /**
     * Filters for transactions with gift card redemptions.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=has_gift_card_redemptions")
    private JsonNullable<Boolean> hasGiftCardRedemptions;

    /**
     * Filters for transactions where a gift card used has an `id` that matches the provided value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=gift_card_id")
    private JsonNullable<String> giftCardId;

    /**
     * Filters for transactions that have at least one gift card redemption where the last 4 digits of its
     * gift card number matches exactly with the provided value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=gift_card_last4")
    private JsonNullable<String> giftCardLast4;

    /**
     * Filters for transactions that have at least one associated settlement record.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=has_settlements")
    private JsonNullable<Boolean> hasSettlements;

    /**
     * Filter for transactions that have a card with a BIN that matches exactly with the provided value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_method_bin")
    private JsonNullable<String> paymentMethodBin;

    /**
     * Filters the results to only the transactions that have a payment source that matches with any of the
     * provided values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_source")
    private JsonNullable<? extends List<TransactionPaymentSource>> paymentSource;

    /**
     * Filters for transactions where the `is_subsequent_payment` matches the provided value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_subsequent_payment")
    private JsonNullable<Boolean> isSubsequentPayment;

    /**
     * Filters for transactions where the `merchant_initiated` matches the provided value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=merchant_initiated")
    private JsonNullable<Boolean> merchantInitiated;

    /**
     * Filters for transactions that attempted 3DS authentication or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=used_3ds")
    private JsonNullable<Boolean> used3ds;

    /**
     * Filters for transactions that have been disputed.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=disputed")
    private JsonNullable<Boolean> disputed;

    /**
     * Filters the results to only get the items for which some of the buyer data contains exactly the
     * provided `buyer_search` values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buyer_search")
    private JsonNullable<? extends List<String>> buyerSearch;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @JsonCreator
    public ListTransactionsRequest(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<OffsetDateTime> createdAtLte,
            JsonNullable<OffsetDateTime> createdAtGte,
            JsonNullable<OffsetDateTime> updatedAtLte,
            JsonNullable<OffsetDateTime> updatedAtGte,
            JsonNullable<String> search,
            JsonNullable<String> buyerExternalIdentifier,
            JsonNullable<String> buyerId,
            JsonNullable<String> buyerEmailAddress,
            JsonNullable<String> ipAddress,
            JsonNullable<? extends List<TransactionStatus>> status,
            JsonNullable<String> id,
            JsonNullable<String> paymentServiceTransactionId,
            JsonNullable<String> externalIdentifier,
            JsonNullable<? extends List<String>> metadata,
            JsonNullable<Long> amountEq,
            JsonNullable<Long> amountLte,
            JsonNullable<Long> amountGte,
            JsonNullable<? extends List<String>> currency,
            JsonNullable<? extends List<String>> country,
            JsonNullable<? extends List<String>> paymentServiceId,
            JsonNullable<String> paymentMethodId,
            JsonNullable<String> paymentMethodLabel,
            JsonNullable<? extends List<String>> paymentMethodScheme,
            JsonNullable<String> paymentMethodCountry,
            JsonNullable<String> paymentMethodFingerprint,
            JsonNullable<? extends List<Method>> method,
            JsonNullable<? extends List<String>> errorCode,
            JsonNullable<Boolean> hasRefunds,
            JsonNullable<Boolean> pendingReview,
            JsonNullable<String> checkoutSessionId,
            JsonNullable<String> reconciliationId,
            JsonNullable<Boolean> hasGiftCardRedemptions,
            JsonNullable<String> giftCardId,
            JsonNullable<String> giftCardLast4,
            JsonNullable<Boolean> hasSettlements,
            JsonNullable<String> paymentMethodBin,
            JsonNullable<? extends List<TransactionPaymentSource>> paymentSource,
            JsonNullable<Boolean> isSubsequentPayment,
            JsonNullable<Boolean> merchantInitiated,
            JsonNullable<Boolean> used3ds,
            JsonNullable<Boolean> disputed,
            JsonNullable<? extends List<String>> buyerSearch,
            JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(createdAtLte, "createdAtLte");
        Utils.checkNotNull(createdAtGte, "createdAtGte");
        Utils.checkNotNull(updatedAtLte, "updatedAtLte");
        Utils.checkNotNull(updatedAtGte, "updatedAtGte");
        Utils.checkNotNull(search, "search");
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(buyerEmailAddress, "buyerEmailAddress");
        Utils.checkNotNull(ipAddress, "ipAddress");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(amountEq, "amountEq");
        Utils.checkNotNull(amountLte, "amountLte");
        Utils.checkNotNull(amountGte, "amountGte");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(paymentMethodLabel, "paymentMethodLabel");
        Utils.checkNotNull(paymentMethodScheme, "paymentMethodScheme");
        Utils.checkNotNull(paymentMethodCountry, "paymentMethodCountry");
        Utils.checkNotNull(paymentMethodFingerprint, "paymentMethodFingerprint");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(hasRefunds, "hasRefunds");
        Utils.checkNotNull(pendingReview, "pendingReview");
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        Utils.checkNotNull(hasGiftCardRedemptions, "hasGiftCardRedemptions");
        Utils.checkNotNull(giftCardId, "giftCardId");
        Utils.checkNotNull(giftCardLast4, "giftCardLast4");
        Utils.checkNotNull(hasSettlements, "hasSettlements");
        Utils.checkNotNull(paymentMethodBin, "paymentMethodBin");
        Utils.checkNotNull(paymentSource, "paymentSource");
        Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        Utils.checkNotNull(used3ds, "used3ds");
        Utils.checkNotNull(disputed, "disputed");
        Utils.checkNotNull(buyerSearch, "buyerSearch");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.cursor = cursor;
        this.limit = limit;
        this.createdAtLte = createdAtLte;
        this.createdAtGte = createdAtGte;
        this.updatedAtLte = updatedAtLte;
        this.updatedAtGte = updatedAtGte;
        this.search = search;
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        this.buyerId = buyerId;
        this.buyerEmailAddress = buyerEmailAddress;
        this.ipAddress = ipAddress;
        this.status = status;
        this.id = id;
        this.paymentServiceTransactionId = paymentServiceTransactionId;
        this.externalIdentifier = externalIdentifier;
        this.metadata = metadata;
        this.amountEq = amountEq;
        this.amountLte = amountLte;
        this.amountGte = amountGte;
        this.currency = currency;
        this.country = country;
        this.paymentServiceId = paymentServiceId;
        this.paymentMethodId = paymentMethodId;
        this.paymentMethodLabel = paymentMethodLabel;
        this.paymentMethodScheme = paymentMethodScheme;
        this.paymentMethodCountry = paymentMethodCountry;
        this.paymentMethodFingerprint = paymentMethodFingerprint;
        this.method = method;
        this.errorCode = errorCode;
        this.hasRefunds = hasRefunds;
        this.pendingReview = pendingReview;
        this.checkoutSessionId = checkoutSessionId;
        this.reconciliationId = reconciliationId;
        this.hasGiftCardRedemptions = hasGiftCardRedemptions;
        this.giftCardId = giftCardId;
        this.giftCardLast4 = giftCardLast4;
        this.hasSettlements = hasSettlements;
        this.paymentMethodBin = paymentMethodBin;
        this.paymentSource = paymentSource;
        this.isSubsequentPayment = isSubsequentPayment;
        this.merchantInitiated = merchantInitiated;
        this.used3ds = used3ds;
        this.disputed = disputed;
        this.buyerSearch = buyerSearch;
        this.merchantAccountId = merchantAccountId;
    }
    
    public ListTransactionsRequest() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A pointer to the page of results to return.
     */
    @JsonIgnore
    public JsonNullable<String> cursor() {
        return cursor;
    }

    /**
     * The maximum number of items that are at returned.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * Filters the results to only transactions created before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAtLte() {
        return createdAtLte;
    }

    /**
     * Filters the results to only transactions created after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAtGte() {
        return createdAtGte;
    }

    /**
     * Filters the results to only transactions updated before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAtLte() {
        return updatedAtLte;
    }

    /**
     * Filters the results to only transactions updated after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAtGte() {
        return updatedAtGte;
    }

    @JsonIgnore
    public JsonNullable<String> search() {
        return search;
    }

    @JsonIgnore
    public JsonNullable<String> buyerExternalIdentifier() {
        return buyerExternalIdentifier;
    }

    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    @JsonIgnore
    public JsonNullable<String> buyerEmailAddress() {
        return buyerEmailAddress;
    }

    @JsonIgnore
    public JsonNullable<String> ipAddress() {
        return ipAddress;
    }

    /**
     * Filters the results to only the transactions that have a `status` that matches with any of the
     * provided status values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TransactionStatus>> status() {
        return (JsonNullable<List<TransactionStatus>>) status;
    }

    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    @JsonIgnore
    public JsonNullable<String> paymentServiceTransactionId() {
        return paymentServiceTransactionId;
    }

    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * Filters for transactions where their `metadata` values contain all of the provided `metadata` keys.
     * The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be
     * strings. This value should also be URL encoded.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> metadata() {
        return (JsonNullable<List<String>>) metadata;
    }

    /**
     * Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
     */
    @JsonIgnore
    public JsonNullable<Long> amountEq() {
        return amountEq;
    }

    /**
     * Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
     */
    @JsonIgnore
    public JsonNullable<Long> amountLte() {
        return amountLte;
    }

    /**
     * Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte`
     * value.
     */
    @JsonIgnore
    public JsonNullable<Long> amountGte() {
        return amountGte;
    }

    /**
     * Filters for transactions that have matching `currency` values. The `currency` values provided must
     * be formatted as 3-letter ISO currency code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> currency() {
        return (JsonNullable<List<String>>) currency;
    }

    /**
     * Filters for transactions that have matching `country` values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> country() {
        return (JsonNullable<List<String>>) country;
    }

    /**
     * Filters for transactions that were processed by the provided `payment_service_id` values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> paymentServiceId() {
        return (JsonNullable<List<String>>) paymentServiceId;
    }

    @JsonIgnore
    public JsonNullable<String> paymentMethodId() {
        return paymentMethodId;
    }

    @JsonIgnore
    public JsonNullable<String> paymentMethodLabel() {
        return paymentMethodLabel;
    }

    /**
     * Filters for transactions where the `payment_method_scheme` matches one of the provided values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> paymentMethodScheme() {
        return (JsonNullable<List<String>>) paymentMethodScheme;
    }

    /**
     * Filters for transactions that have a payment method with a country that matches with the provided
     * value.
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethodCountry() {
        return paymentMethodCountry;
    }

    @JsonIgnore
    public JsonNullable<String> paymentMethodFingerprint() {
        return paymentMethodFingerprint;
    }

    /**
     * Filters for transactions that have matching `method` values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Method>> method() {
        return (JsonNullable<List<Method>>) method;
    }

    /**
     * Filters for transactions where the `error_code` matches one for the provided values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> errorCode() {
        return (JsonNullable<List<String>>) errorCode;
    }

    /**
     * Filters for transactions with refunds.
     */
    @JsonIgnore
    public JsonNullable<Boolean> hasRefunds() {
        return hasRefunds;
    }

    /**
     * Filters for transactions with a pending manual anti-fraud review.
     */
    @JsonIgnore
    public JsonNullable<Boolean> pendingReview() {
        return pendingReview;
    }

    /**
     * Filters for transactions where the `checkout_session_id` matches the provided value.
     */
    @JsonIgnore
    public JsonNullable<String> checkoutSessionId() {
        return checkoutSessionId;
    }

    /**
     * Filters for transactions where the `reconciliation_id` matches the provided value.
     */
    @JsonIgnore
    public JsonNullable<String> reconciliationId() {
        return reconciliationId;
    }

    /**
     * Filters for transactions with gift card redemptions.
     */
    @JsonIgnore
    public JsonNullable<Boolean> hasGiftCardRedemptions() {
        return hasGiftCardRedemptions;
    }

    /**
     * Filters for transactions where a gift card used has an `id` that matches the provided value.
     */
    @JsonIgnore
    public JsonNullable<String> giftCardId() {
        return giftCardId;
    }

    /**
     * Filters for transactions that have at least one gift card redemption where the last 4 digits of its
     * gift card number matches exactly with the provided value.
     */
    @JsonIgnore
    public JsonNullable<String> giftCardLast4() {
        return giftCardLast4;
    }

    /**
     * Filters for transactions that have at least one associated settlement record.
     */
    @JsonIgnore
    public JsonNullable<Boolean> hasSettlements() {
        return hasSettlements;
    }

    /**
     * Filter for transactions that have a card with a BIN that matches exactly with the provided value.
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethodBin() {
        return paymentMethodBin;
    }

    /**
     * Filters the results to only the transactions that have a payment source that matches with any of the
     * provided values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TransactionPaymentSource>> paymentSource() {
        return (JsonNullable<List<TransactionPaymentSource>>) paymentSource;
    }

    /**
     * Filters for transactions where the `is_subsequent_payment` matches the provided value.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isSubsequentPayment() {
        return isSubsequentPayment;
    }

    /**
     * Filters for transactions where the `merchant_initiated` matches the provided value.
     */
    @JsonIgnore
    public JsonNullable<Boolean> merchantInitiated() {
        return merchantInitiated;
    }

    /**
     * Filters for transactions that attempted 3DS authentication or not.
     */
    @JsonIgnore
    public JsonNullable<Boolean> used3ds() {
        return used3ds;
    }

    /**
     * Filters for transactions that have been disputed.
     */
    @JsonIgnore
    public JsonNullable<Boolean> disputed() {
        return disputed;
    }

    /**
     * Filters the results to only get the items for which some of the buyer data contains exactly the
     * provided `buyer_search` values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> buyerSearch() {
        return (JsonNullable<List<String>>) buyerSearch;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A pointer to the page of results to return.
     */
    public ListTransactionsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    /**
     * A pointer to the page of results to return.
     */
    public ListTransactionsRequest withCursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListTransactionsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    /**
     * The maximum number of items that are at returned.
     */
    public ListTransactionsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Filters the results to only transactions created before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withCreatedAtLte(OffsetDateTime createdAtLte) {
        Utils.checkNotNull(createdAtLte, "createdAtLte");
        this.createdAtLte = JsonNullable.of(createdAtLte);
        return this;
    }

    /**
     * Filters the results to only transactions created before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withCreatedAtLte(JsonNullable<OffsetDateTime> createdAtLte) {
        Utils.checkNotNull(createdAtLte, "createdAtLte");
        this.createdAtLte = createdAtLte;
        return this;
    }

    /**
     * Filters the results to only transactions created after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withCreatedAtGte(OffsetDateTime createdAtGte) {
        Utils.checkNotNull(createdAtGte, "createdAtGte");
        this.createdAtGte = JsonNullable.of(createdAtGte);
        return this;
    }

    /**
     * Filters the results to only transactions created after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withCreatedAtGte(JsonNullable<OffsetDateTime> createdAtGte) {
        Utils.checkNotNull(createdAtGte, "createdAtGte");
        this.createdAtGte = createdAtGte;
        return this;
    }

    /**
     * Filters the results to only transactions updated before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withUpdatedAtLte(OffsetDateTime updatedAtLte) {
        Utils.checkNotNull(updatedAtLte, "updatedAtLte");
        this.updatedAtLte = JsonNullable.of(updatedAtLte);
        return this;
    }

    /**
     * Filters the results to only transactions updated before this ISO date-time string. The time zone
     * must be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withUpdatedAtLte(JsonNullable<OffsetDateTime> updatedAtLte) {
        Utils.checkNotNull(updatedAtLte, "updatedAtLte");
        this.updatedAtLte = updatedAtLte;
        return this;
    }

    /**
     * Filters the results to only transactions updated after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withUpdatedAtGte(OffsetDateTime updatedAtGte) {
        Utils.checkNotNull(updatedAtGte, "updatedAtGte");
        this.updatedAtGte = JsonNullable.of(updatedAtGte);
        return this;
    }

    /**
     * Filters the results to only transactions updated after this ISO date-time string. The time zone must
     * be included. Ensure that the date-time string is URL encoded, e.g.
     * 
     * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    public ListTransactionsRequest withUpdatedAtGte(JsonNullable<OffsetDateTime> updatedAtGte) {
        Utils.checkNotNull(updatedAtGte, "updatedAtGte");
        this.updatedAtGte = updatedAtGte;
        return this;
    }

    public ListTransactionsRequest withSearch(String search) {
        Utils.checkNotNull(search, "search");
        this.search = JsonNullable.of(search);
        return this;
    }

    public ListTransactionsRequest withSearch(JsonNullable<String> search) {
        Utils.checkNotNull(search, "search");
        this.search = search;
        return this;
    }

    public ListTransactionsRequest withBuyerExternalIdentifier(String buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
        return this;
    }

    public ListTransactionsRequest withBuyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        return this;
    }

    public ListTransactionsRequest withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    public ListTransactionsRequest withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    public ListTransactionsRequest withBuyerEmailAddress(String buyerEmailAddress) {
        Utils.checkNotNull(buyerEmailAddress, "buyerEmailAddress");
        this.buyerEmailAddress = JsonNullable.of(buyerEmailAddress);
        return this;
    }

    public ListTransactionsRequest withBuyerEmailAddress(JsonNullable<String> buyerEmailAddress) {
        Utils.checkNotNull(buyerEmailAddress, "buyerEmailAddress");
        this.buyerEmailAddress = buyerEmailAddress;
        return this;
    }

    public ListTransactionsRequest withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = JsonNullable.of(ipAddress);
        return this;
    }

    public ListTransactionsRequest withIpAddress(JsonNullable<String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Filters the results to only the transactions that have a `status` that matches with any of the
     * provided status values.
     */
    public ListTransactionsRequest withStatus(List<TransactionStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Filters the results to only the transactions that have a `status` that matches with any of the
     * provided status values.
     */
    public ListTransactionsRequest withStatus(JsonNullable<? extends List<TransactionStatus>> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ListTransactionsRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    public ListTransactionsRequest withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ListTransactionsRequest withPaymentServiceTransactionId(String paymentServiceTransactionId) {
        Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
        this.paymentServiceTransactionId = JsonNullable.of(paymentServiceTransactionId);
        return this;
    }

    public ListTransactionsRequest withPaymentServiceTransactionId(JsonNullable<String> paymentServiceTransactionId) {
        Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
        this.paymentServiceTransactionId = paymentServiceTransactionId;
        return this;
    }

    public ListTransactionsRequest withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    public ListTransactionsRequest withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * Filters for transactions where their `metadata` values contain all of the provided `metadata` keys.
     * The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be
     * strings. This value should also be URL encoded.
     */
    public ListTransactionsRequest withMetadata(List<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Filters for transactions where their `metadata` values contain all of the provided `metadata` keys.
     * The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be
     * strings. This value should also be URL encoded.
     */
    public ListTransactionsRequest withMetadata(JsonNullable<? extends List<String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
     */
    public ListTransactionsRequest withAmountEq(long amountEq) {
        Utils.checkNotNull(amountEq, "amountEq");
        this.amountEq = JsonNullable.of(amountEq);
        return this;
    }

    /**
     * Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
     */
    public ListTransactionsRequest withAmountEq(JsonNullable<Long> amountEq) {
        Utils.checkNotNull(amountEq, "amountEq");
        this.amountEq = amountEq;
        return this;
    }

    /**
     * Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
     */
    public ListTransactionsRequest withAmountLte(long amountLte) {
        Utils.checkNotNull(amountLte, "amountLte");
        this.amountLte = JsonNullable.of(amountLte);
        return this;
    }

    /**
     * Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
     */
    public ListTransactionsRequest withAmountLte(JsonNullable<Long> amountLte) {
        Utils.checkNotNull(amountLte, "amountLte");
        this.amountLte = amountLte;
        return this;
    }

    /**
     * Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte`
     * value.
     */
    public ListTransactionsRequest withAmountGte(long amountGte) {
        Utils.checkNotNull(amountGte, "amountGte");
        this.amountGte = JsonNullable.of(amountGte);
        return this;
    }

    /**
     * Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte`
     * value.
     */
    public ListTransactionsRequest withAmountGte(JsonNullable<Long> amountGte) {
        Utils.checkNotNull(amountGte, "amountGte");
        this.amountGte = amountGte;
        return this;
    }

    /**
     * Filters for transactions that have matching `currency` values. The `currency` values provided must
     * be formatted as 3-letter ISO currency code.
     */
    public ListTransactionsRequest withCurrency(List<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Filters for transactions that have matching `currency` values. The `currency` values provided must
     * be formatted as 3-letter ISO currency code.
     */
    public ListTransactionsRequest withCurrency(JsonNullable<? extends List<String>> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Filters for transactions that have matching `country` values.
     */
    public ListTransactionsRequest withCountry(List<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Filters for transactions that have matching `country` values.
     */
    public ListTransactionsRequest withCountry(JsonNullable<? extends List<String>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Filters for transactions that were processed by the provided `payment_service_id` values.
     */
    public ListTransactionsRequest withPaymentServiceId(List<String> paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = JsonNullable.of(paymentServiceId);
        return this;
    }

    /**
     * Filters for transactions that were processed by the provided `payment_service_id` values.
     */
    public ListTransactionsRequest withPaymentServiceId(JsonNullable<? extends List<String>> paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = paymentServiceId;
        return this;
    }

    public ListTransactionsRequest withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = JsonNullable.of(paymentMethodId);
        return this;
    }

    public ListTransactionsRequest withPaymentMethodId(JsonNullable<String> paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    public ListTransactionsRequest withPaymentMethodLabel(String paymentMethodLabel) {
        Utils.checkNotNull(paymentMethodLabel, "paymentMethodLabel");
        this.paymentMethodLabel = JsonNullable.of(paymentMethodLabel);
        return this;
    }

    public ListTransactionsRequest withPaymentMethodLabel(JsonNullable<String> paymentMethodLabel) {
        Utils.checkNotNull(paymentMethodLabel, "paymentMethodLabel");
        this.paymentMethodLabel = paymentMethodLabel;
        return this;
    }

    /**
     * Filters for transactions where the `payment_method_scheme` matches one of the provided values.
     */
    public ListTransactionsRequest withPaymentMethodScheme(List<String> paymentMethodScheme) {
        Utils.checkNotNull(paymentMethodScheme, "paymentMethodScheme");
        this.paymentMethodScheme = JsonNullable.of(paymentMethodScheme);
        return this;
    }

    /**
     * Filters for transactions where the `payment_method_scheme` matches one of the provided values.
     */
    public ListTransactionsRequest withPaymentMethodScheme(JsonNullable<? extends List<String>> paymentMethodScheme) {
        Utils.checkNotNull(paymentMethodScheme, "paymentMethodScheme");
        this.paymentMethodScheme = paymentMethodScheme;
        return this;
    }

    /**
     * Filters for transactions that have a payment method with a country that matches with the provided
     * value.
     */
    public ListTransactionsRequest withPaymentMethodCountry(String paymentMethodCountry) {
        Utils.checkNotNull(paymentMethodCountry, "paymentMethodCountry");
        this.paymentMethodCountry = JsonNullable.of(paymentMethodCountry);
        return this;
    }

    /**
     * Filters for transactions that have a payment method with a country that matches with the provided
     * value.
     */
    public ListTransactionsRequest withPaymentMethodCountry(JsonNullable<String> paymentMethodCountry) {
        Utils.checkNotNull(paymentMethodCountry, "paymentMethodCountry");
        this.paymentMethodCountry = paymentMethodCountry;
        return this;
    }

    public ListTransactionsRequest withPaymentMethodFingerprint(String paymentMethodFingerprint) {
        Utils.checkNotNull(paymentMethodFingerprint, "paymentMethodFingerprint");
        this.paymentMethodFingerprint = JsonNullable.of(paymentMethodFingerprint);
        return this;
    }

    public ListTransactionsRequest withPaymentMethodFingerprint(JsonNullable<String> paymentMethodFingerprint) {
        Utils.checkNotNull(paymentMethodFingerprint, "paymentMethodFingerprint");
        this.paymentMethodFingerprint = paymentMethodFingerprint;
        return this;
    }

    /**
     * Filters for transactions that have matching `method` values.
     */
    public ListTransactionsRequest withMethod(List<Method> method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * Filters for transactions that have matching `method` values.
     */
    public ListTransactionsRequest withMethod(JsonNullable<? extends List<Method>> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * Filters for transactions where the `error_code` matches one for the provided values.
     */
    public ListTransactionsRequest withErrorCode(List<String> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = JsonNullable.of(errorCode);
        return this;
    }

    /**
     * Filters for transactions where the `error_code` matches one for the provided values.
     */
    public ListTransactionsRequest withErrorCode(JsonNullable<? extends List<String>> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Filters for transactions with refunds.
     */
    public ListTransactionsRequest withHasRefunds(boolean hasRefunds) {
        Utils.checkNotNull(hasRefunds, "hasRefunds");
        this.hasRefunds = JsonNullable.of(hasRefunds);
        return this;
    }

    /**
     * Filters for transactions with refunds.
     */
    public ListTransactionsRequest withHasRefunds(JsonNullable<Boolean> hasRefunds) {
        Utils.checkNotNull(hasRefunds, "hasRefunds");
        this.hasRefunds = hasRefunds;
        return this;
    }

    /**
     * Filters for transactions with a pending manual anti-fraud review.
     */
    public ListTransactionsRequest withPendingReview(boolean pendingReview) {
        Utils.checkNotNull(pendingReview, "pendingReview");
        this.pendingReview = JsonNullable.of(pendingReview);
        return this;
    }

    /**
     * Filters for transactions with a pending manual anti-fraud review.
     */
    public ListTransactionsRequest withPendingReview(JsonNullable<Boolean> pendingReview) {
        Utils.checkNotNull(pendingReview, "pendingReview");
        this.pendingReview = pendingReview;
        return this;
    }

    /**
     * Filters for transactions where the `checkout_session_id` matches the provided value.
     */
    public ListTransactionsRequest withCheckoutSessionId(String checkoutSessionId) {
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        this.checkoutSessionId = JsonNullable.of(checkoutSessionId);
        return this;
    }

    /**
     * Filters for transactions where the `checkout_session_id` matches the provided value.
     */
    public ListTransactionsRequest withCheckoutSessionId(JsonNullable<String> checkoutSessionId) {
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        this.checkoutSessionId = checkoutSessionId;
        return this;
    }

    /**
     * Filters for transactions where the `reconciliation_id` matches the provided value.
     */
    public ListTransactionsRequest withReconciliationId(String reconciliationId) {
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        this.reconciliationId = JsonNullable.of(reconciliationId);
        return this;
    }

    /**
     * Filters for transactions where the `reconciliation_id` matches the provided value.
     */
    public ListTransactionsRequest withReconciliationId(JsonNullable<String> reconciliationId) {
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        this.reconciliationId = reconciliationId;
        return this;
    }

    /**
     * Filters for transactions with gift card redemptions.
     */
    public ListTransactionsRequest withHasGiftCardRedemptions(boolean hasGiftCardRedemptions) {
        Utils.checkNotNull(hasGiftCardRedemptions, "hasGiftCardRedemptions");
        this.hasGiftCardRedemptions = JsonNullable.of(hasGiftCardRedemptions);
        return this;
    }

    /**
     * Filters for transactions with gift card redemptions.
     */
    public ListTransactionsRequest withHasGiftCardRedemptions(JsonNullable<Boolean> hasGiftCardRedemptions) {
        Utils.checkNotNull(hasGiftCardRedemptions, "hasGiftCardRedemptions");
        this.hasGiftCardRedemptions = hasGiftCardRedemptions;
        return this;
    }

    /**
     * Filters for transactions where a gift card used has an `id` that matches the provided value.
     */
    public ListTransactionsRequest withGiftCardId(String giftCardId) {
        Utils.checkNotNull(giftCardId, "giftCardId");
        this.giftCardId = JsonNullable.of(giftCardId);
        return this;
    }

    /**
     * Filters for transactions where a gift card used has an `id` that matches the provided value.
     */
    public ListTransactionsRequest withGiftCardId(JsonNullable<String> giftCardId) {
        Utils.checkNotNull(giftCardId, "giftCardId");
        this.giftCardId = giftCardId;
        return this;
    }

    /**
     * Filters for transactions that have at least one gift card redemption where the last 4 digits of its
     * gift card number matches exactly with the provided value.
     */
    public ListTransactionsRequest withGiftCardLast4(String giftCardLast4) {
        Utils.checkNotNull(giftCardLast4, "giftCardLast4");
        this.giftCardLast4 = JsonNullable.of(giftCardLast4);
        return this;
    }

    /**
     * Filters for transactions that have at least one gift card redemption where the last 4 digits of its
     * gift card number matches exactly with the provided value.
     */
    public ListTransactionsRequest withGiftCardLast4(JsonNullable<String> giftCardLast4) {
        Utils.checkNotNull(giftCardLast4, "giftCardLast4");
        this.giftCardLast4 = giftCardLast4;
        return this;
    }

    /**
     * Filters for transactions that have at least one associated settlement record.
     */
    public ListTransactionsRequest withHasSettlements(boolean hasSettlements) {
        Utils.checkNotNull(hasSettlements, "hasSettlements");
        this.hasSettlements = JsonNullable.of(hasSettlements);
        return this;
    }

    /**
     * Filters for transactions that have at least one associated settlement record.
     */
    public ListTransactionsRequest withHasSettlements(JsonNullable<Boolean> hasSettlements) {
        Utils.checkNotNull(hasSettlements, "hasSettlements");
        this.hasSettlements = hasSettlements;
        return this;
    }

    /**
     * Filter for transactions that have a card with a BIN that matches exactly with the provided value.
     */
    public ListTransactionsRequest withPaymentMethodBin(String paymentMethodBin) {
        Utils.checkNotNull(paymentMethodBin, "paymentMethodBin");
        this.paymentMethodBin = JsonNullable.of(paymentMethodBin);
        return this;
    }

    /**
     * Filter for transactions that have a card with a BIN that matches exactly with the provided value.
     */
    public ListTransactionsRequest withPaymentMethodBin(JsonNullable<String> paymentMethodBin) {
        Utils.checkNotNull(paymentMethodBin, "paymentMethodBin");
        this.paymentMethodBin = paymentMethodBin;
        return this;
    }

    /**
     * Filters the results to only the transactions that have a payment source that matches with any of the
     * provided values.
     */
    public ListTransactionsRequest withPaymentSource(List<TransactionPaymentSource> paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = JsonNullable.of(paymentSource);
        return this;
    }

    /**
     * Filters the results to only the transactions that have a payment source that matches with any of the
     * provided values.
     */
    public ListTransactionsRequest withPaymentSource(JsonNullable<? extends List<TransactionPaymentSource>> paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = paymentSource;
        return this;
    }

    /**
     * Filters for transactions where the `is_subsequent_payment` matches the provided value.
     */
    public ListTransactionsRequest withIsSubsequentPayment(boolean isSubsequentPayment) {
        Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
        this.isSubsequentPayment = JsonNullable.of(isSubsequentPayment);
        return this;
    }

    /**
     * Filters for transactions where the `is_subsequent_payment` matches the provided value.
     */
    public ListTransactionsRequest withIsSubsequentPayment(JsonNullable<Boolean> isSubsequentPayment) {
        Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
        this.isSubsequentPayment = isSubsequentPayment;
        return this;
    }

    /**
     * Filters for transactions where the `merchant_initiated` matches the provided value.
     */
    public ListTransactionsRequest withMerchantInitiated(boolean merchantInitiated) {
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        this.merchantInitiated = JsonNullable.of(merchantInitiated);
        return this;
    }

    /**
     * Filters for transactions where the `merchant_initiated` matches the provided value.
     */
    public ListTransactionsRequest withMerchantInitiated(JsonNullable<Boolean> merchantInitiated) {
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        this.merchantInitiated = merchantInitiated;
        return this;
    }

    /**
     * Filters for transactions that attempted 3DS authentication or not.
     */
    public ListTransactionsRequest withUsed3ds(boolean used3ds) {
        Utils.checkNotNull(used3ds, "used3ds");
        this.used3ds = JsonNullable.of(used3ds);
        return this;
    }

    /**
     * Filters for transactions that attempted 3DS authentication or not.
     */
    public ListTransactionsRequest withUsed3ds(JsonNullable<Boolean> used3ds) {
        Utils.checkNotNull(used3ds, "used3ds");
        this.used3ds = used3ds;
        return this;
    }

    /**
     * Filters for transactions that have been disputed.
     */
    public ListTransactionsRequest withDisputed(boolean disputed) {
        Utils.checkNotNull(disputed, "disputed");
        this.disputed = JsonNullable.of(disputed);
        return this;
    }

    /**
     * Filters for transactions that have been disputed.
     */
    public ListTransactionsRequest withDisputed(JsonNullable<Boolean> disputed) {
        Utils.checkNotNull(disputed, "disputed");
        this.disputed = disputed;
        return this;
    }

    /**
     * Filters the results to only get the items for which some of the buyer data contains exactly the
     * provided `buyer_search` values.
     */
    public ListTransactionsRequest withBuyerSearch(List<String> buyerSearch) {
        Utils.checkNotNull(buyerSearch, "buyerSearch");
        this.buyerSearch = JsonNullable.of(buyerSearch);
        return this;
    }

    /**
     * Filters the results to only get the items for which some of the buyer data contains exactly the
     * provided `buyer_search` values.
     */
    public ListTransactionsRequest withBuyerSearch(JsonNullable<? extends List<String>> buyerSearch) {
        Utils.checkNotNull(buyerSearch, "buyerSearch");
        this.buyerSearch = buyerSearch;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListTransactionsRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListTransactionsRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListTransactionsRequest other = (ListTransactionsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.createdAtLte, other.createdAtLte) &&
            Utils.enhancedDeepEquals(this.createdAtGte, other.createdAtGte) &&
            Utils.enhancedDeepEquals(this.updatedAtLte, other.updatedAtLte) &&
            Utils.enhancedDeepEquals(this.updatedAtGte, other.updatedAtGte) &&
            Utils.enhancedDeepEquals(this.search, other.search) &&
            Utils.enhancedDeepEquals(this.buyerExternalIdentifier, other.buyerExternalIdentifier) &&
            Utils.enhancedDeepEquals(this.buyerId, other.buyerId) &&
            Utils.enhancedDeepEquals(this.buyerEmailAddress, other.buyerEmailAddress) &&
            Utils.enhancedDeepEquals(this.ipAddress, other.ipAddress) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.paymentServiceTransactionId, other.paymentServiceTransactionId) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.amountEq, other.amountEq) &&
            Utils.enhancedDeepEquals(this.amountLte, other.amountLte) &&
            Utils.enhancedDeepEquals(this.amountGte, other.amountGte) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.paymentServiceId, other.paymentServiceId) &&
            Utils.enhancedDeepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Utils.enhancedDeepEquals(this.paymentMethodLabel, other.paymentMethodLabel) &&
            Utils.enhancedDeepEquals(this.paymentMethodScheme, other.paymentMethodScheme) &&
            Utils.enhancedDeepEquals(this.paymentMethodCountry, other.paymentMethodCountry) &&
            Utils.enhancedDeepEquals(this.paymentMethodFingerprint, other.paymentMethodFingerprint) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode) &&
            Utils.enhancedDeepEquals(this.hasRefunds, other.hasRefunds) &&
            Utils.enhancedDeepEquals(this.pendingReview, other.pendingReview) &&
            Utils.enhancedDeepEquals(this.checkoutSessionId, other.checkoutSessionId) &&
            Utils.enhancedDeepEquals(this.reconciliationId, other.reconciliationId) &&
            Utils.enhancedDeepEquals(this.hasGiftCardRedemptions, other.hasGiftCardRedemptions) &&
            Utils.enhancedDeepEquals(this.giftCardId, other.giftCardId) &&
            Utils.enhancedDeepEquals(this.giftCardLast4, other.giftCardLast4) &&
            Utils.enhancedDeepEquals(this.hasSettlements, other.hasSettlements) &&
            Utils.enhancedDeepEquals(this.paymentMethodBin, other.paymentMethodBin) &&
            Utils.enhancedDeepEquals(this.paymentSource, other.paymentSource) &&
            Utils.enhancedDeepEquals(this.isSubsequentPayment, other.isSubsequentPayment) &&
            Utils.enhancedDeepEquals(this.merchantInitiated, other.merchantInitiated) &&
            Utils.enhancedDeepEquals(this.used3ds, other.used3ds) &&
            Utils.enhancedDeepEquals(this.disputed, other.disputed) &&
            Utils.enhancedDeepEquals(this.buyerSearch, other.buyerSearch) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            cursor, limit, createdAtLte,
            createdAtGte, updatedAtLte, updatedAtGte,
            search, buyerExternalIdentifier, buyerId,
            buyerEmailAddress, ipAddress, status,
            id, paymentServiceTransactionId, externalIdentifier,
            metadata, amountEq, amountLte,
            amountGte, currency, country,
            paymentServiceId, paymentMethodId, paymentMethodLabel,
            paymentMethodScheme, paymentMethodCountry, paymentMethodFingerprint,
            method, errorCode, hasRefunds,
            pendingReview, checkoutSessionId, reconciliationId,
            hasGiftCardRedemptions, giftCardId, giftCardLast4,
            hasSettlements, paymentMethodBin, paymentSource,
            isSubsequentPayment, merchantInitiated, used3ds,
            disputed, buyerSearch, merchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListTransactionsRequest.class,
                "cursor", cursor,
                "limit", limit,
                "createdAtLte", createdAtLte,
                "createdAtGte", createdAtGte,
                "updatedAtLte", updatedAtLte,
                "updatedAtGte", updatedAtGte,
                "search", search,
                "buyerExternalIdentifier", buyerExternalIdentifier,
                "buyerId", buyerId,
                "buyerEmailAddress", buyerEmailAddress,
                "ipAddress", ipAddress,
                "status", status,
                "id", id,
                "paymentServiceTransactionId", paymentServiceTransactionId,
                "externalIdentifier", externalIdentifier,
                "metadata", metadata,
                "amountEq", amountEq,
                "amountLte", amountLte,
                "amountGte", amountGte,
                "currency", currency,
                "country", country,
                "paymentServiceId", paymentServiceId,
                "paymentMethodId", paymentMethodId,
                "paymentMethodLabel", paymentMethodLabel,
                "paymentMethodScheme", paymentMethodScheme,
                "paymentMethodCountry", paymentMethodCountry,
                "paymentMethodFingerprint", paymentMethodFingerprint,
                "method", method,
                "errorCode", errorCode,
                "hasRefunds", hasRefunds,
                "pendingReview", pendingReview,
                "checkoutSessionId", checkoutSessionId,
                "reconciliationId", reconciliationId,
                "hasGiftCardRedemptions", hasGiftCardRedemptions,
                "giftCardId", giftCardId,
                "giftCardLast4", giftCardLast4,
                "hasSettlements", hasSettlements,
                "paymentMethodBin", paymentMethodBin,
                "paymentSource", paymentSource,
                "isSubsequentPayment", isSubsequentPayment,
                "merchantInitiated", merchantInitiated,
                "used3ds", used3ds,
                "disputed", disputed,
                "buyerSearch", buyerSearch,
                "merchantAccountId", merchantAccountId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> cursor = JsonNullable.undefined();

        private Optional<Long> limit;

        private JsonNullable<OffsetDateTime> createdAtLte = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdAtGte = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAtLte = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAtGte = JsonNullable.undefined();

        private JsonNullable<String> search = JsonNullable.undefined();

        private JsonNullable<String> buyerExternalIdentifier = JsonNullable.undefined();

        private JsonNullable<String> buyerId = JsonNullable.undefined();

        private JsonNullable<String> buyerEmailAddress = JsonNullable.undefined();

        private JsonNullable<String> ipAddress = JsonNullable.undefined();

        private JsonNullable<? extends List<TransactionStatus>> status = JsonNullable.undefined();

        private JsonNullable<String> id = JsonNullable.undefined();

        private JsonNullable<String> paymentServiceTransactionId = JsonNullable.undefined();

        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> metadata = JsonNullable.undefined();

        private JsonNullable<Long> amountEq = JsonNullable.undefined();

        private JsonNullable<Long> amountLte = JsonNullable.undefined();

        private JsonNullable<Long> amountGte = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> currency = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> country = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> paymentServiceId = JsonNullable.undefined();

        private JsonNullable<String> paymentMethodId = JsonNullable.undefined();

        private JsonNullable<String> paymentMethodLabel = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> paymentMethodScheme = JsonNullable.undefined();

        private JsonNullable<String> paymentMethodCountry = JsonNullable.undefined();

        private JsonNullable<String> paymentMethodFingerprint = JsonNullable.undefined();

        private JsonNullable<? extends List<Method>> method = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> errorCode = JsonNullable.undefined();

        private JsonNullable<Boolean> hasRefunds = JsonNullable.undefined();

        private JsonNullable<Boolean> pendingReview = JsonNullable.undefined();

        private JsonNullable<String> checkoutSessionId = JsonNullable.undefined();

        private JsonNullable<String> reconciliationId = JsonNullable.undefined();

        private JsonNullable<Boolean> hasGiftCardRedemptions = JsonNullable.undefined();

        private JsonNullable<String> giftCardId = JsonNullable.undefined();

        private JsonNullable<String> giftCardLast4 = JsonNullable.undefined();

        private JsonNullable<Boolean> hasSettlements = JsonNullable.undefined();

        private JsonNullable<String> paymentMethodBin = JsonNullable.undefined();

        private JsonNullable<? extends List<TransactionPaymentSource>> paymentSource = JsonNullable.undefined();

        private JsonNullable<Boolean> isSubsequentPayment = JsonNullable.undefined();

        private JsonNullable<Boolean> merchantInitiated = JsonNullable.undefined();

        private JsonNullable<Boolean> used3ds = JsonNullable.undefined();

        private JsonNullable<Boolean> disputed = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> buyerSearch = JsonNullable.undefined();

        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(JsonNullable<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }


        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        /**
         * Filters the results to only transactions created before this ISO date-time string. The time zone
         * must be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtLte(OffsetDateTime createdAtLte) {
            Utils.checkNotNull(createdAtLte, "createdAtLte");
            this.createdAtLte = JsonNullable.of(createdAtLte);
            return this;
        }

        /**
         * Filters the results to only transactions created before this ISO date-time string. The time zone
         * must be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtLte(JsonNullable<OffsetDateTime> createdAtLte) {
            Utils.checkNotNull(createdAtLte, "createdAtLte");
            this.createdAtLte = createdAtLte;
            return this;
        }


        /**
         * Filters the results to only transactions created after this ISO date-time string. The time zone must
         * be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtGte(OffsetDateTime createdAtGte) {
            Utils.checkNotNull(createdAtGte, "createdAtGte");
            this.createdAtGte = JsonNullable.of(createdAtGte);
            return this;
        }

        /**
         * Filters the results to only transactions created after this ISO date-time string. The time zone must
         * be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder createdAtGte(JsonNullable<OffsetDateTime> createdAtGte) {
            Utils.checkNotNull(createdAtGte, "createdAtGte");
            this.createdAtGte = createdAtGte;
            return this;
        }


        /**
         * Filters the results to only transactions updated before this ISO date-time string. The time zone
         * must be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder updatedAtLte(OffsetDateTime updatedAtLte) {
            Utils.checkNotNull(updatedAtLte, "updatedAtLte");
            this.updatedAtLte = JsonNullable.of(updatedAtLte);
            return this;
        }

        /**
         * Filters the results to only transactions updated before this ISO date-time string. The time zone
         * must be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder updatedAtLte(JsonNullable<OffsetDateTime> updatedAtLte) {
            Utils.checkNotNull(updatedAtLte, "updatedAtLte");
            this.updatedAtLte = updatedAtLte;
            return this;
        }


        /**
         * Filters the results to only transactions updated after this ISO date-time string. The time zone must
         * be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder updatedAtGte(OffsetDateTime updatedAtGte) {
            Utils.checkNotNull(updatedAtGte, "updatedAtGte");
            this.updatedAtGte = JsonNullable.of(updatedAtGte);
            return this;
        }

        /**
         * Filters the results to only transactions updated after this ISO date-time string. The time zone must
         * be included. Ensure that the date-time string is URL encoded, e.g.
         * 
         * <p>`2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
         */
        public Builder updatedAtGte(JsonNullable<OffsetDateTime> updatedAtGte) {
            Utils.checkNotNull(updatedAtGte, "updatedAtGte");
            this.updatedAtGte = updatedAtGte;
            return this;
        }


        public Builder search(String search) {
            Utils.checkNotNull(search, "search");
            this.search = JsonNullable.of(search);
            return this;
        }

        public Builder search(JsonNullable<String> search) {
            Utils.checkNotNull(search, "search");
            this.search = search;
            return this;
        }


        public Builder buyerExternalIdentifier(String buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
            return this;
        }

        public Builder buyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = buyerExternalIdentifier;
            return this;
        }


        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }


        public Builder buyerEmailAddress(String buyerEmailAddress) {
            Utils.checkNotNull(buyerEmailAddress, "buyerEmailAddress");
            this.buyerEmailAddress = JsonNullable.of(buyerEmailAddress);
            return this;
        }

        public Builder buyerEmailAddress(JsonNullable<String> buyerEmailAddress) {
            Utils.checkNotNull(buyerEmailAddress, "buyerEmailAddress");
            this.buyerEmailAddress = buyerEmailAddress;
            return this;
        }


        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = JsonNullable.of(ipAddress);
            return this;
        }

        public Builder ipAddress(JsonNullable<String> ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }


        /**
         * Filters the results to only the transactions that have a `status` that matches with any of the
         * provided status values.
         */
        public Builder status(List<TransactionStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Filters the results to only the transactions that have a `status` that matches with any of the
         * provided status values.
         */
        public Builder status(JsonNullable<? extends List<TransactionStatus>> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder paymentServiceTransactionId(String paymentServiceTransactionId) {
            Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
            this.paymentServiceTransactionId = JsonNullable.of(paymentServiceTransactionId);
            return this;
        }

        public Builder paymentServiceTransactionId(JsonNullable<String> paymentServiceTransactionId) {
            Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
            this.paymentServiceTransactionId = paymentServiceTransactionId;
            return this;
        }


        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }


        /**
         * Filters for transactions where their `metadata` values contain all of the provided `metadata` keys.
         * The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be
         * strings. This value should also be URL encoded.
         */
        public Builder metadata(List<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Filters for transactions where their `metadata` values contain all of the provided `metadata` keys.
         * The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be
         * strings. This value should also be URL encoded.
         */
        public Builder metadata(JsonNullable<? extends List<String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
         */
        public Builder amountEq(long amountEq) {
            Utils.checkNotNull(amountEq, "amountEq");
            this.amountEq = JsonNullable.of(amountEq);
            return this;
        }

        /**
         * Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
         */
        public Builder amountEq(JsonNullable<Long> amountEq) {
            Utils.checkNotNull(amountEq, "amountEq");
            this.amountEq = amountEq;
            return this;
        }


        /**
         * Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
         */
        public Builder amountLte(long amountLte) {
            Utils.checkNotNull(amountLte, "amountLte");
            this.amountLte = JsonNullable.of(amountLte);
            return this;
        }

        /**
         * Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
         */
        public Builder amountLte(JsonNullable<Long> amountLte) {
            Utils.checkNotNull(amountLte, "amountLte");
            this.amountLte = amountLte;
            return this;
        }


        /**
         * Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte`
         * value.
         */
        public Builder amountGte(long amountGte) {
            Utils.checkNotNull(amountGte, "amountGte");
            this.amountGte = JsonNullable.of(amountGte);
            return this;
        }

        /**
         * Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte`
         * value.
         */
        public Builder amountGte(JsonNullable<Long> amountGte) {
            Utils.checkNotNull(amountGte, "amountGte");
            this.amountGte = amountGte;
            return this;
        }


        /**
         * Filters for transactions that have matching `currency` values. The `currency` values provided must
         * be formatted as 3-letter ISO currency code.
         */
        public Builder currency(List<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Filters for transactions that have matching `currency` values. The `currency` values provided must
         * be formatted as 3-letter ISO currency code.
         */
        public Builder currency(JsonNullable<? extends List<String>> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Filters for transactions that have matching `country` values.
         */
        public Builder country(List<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Filters for transactions that have matching `country` values.
         */
        public Builder country(JsonNullable<? extends List<String>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Filters for transactions that were processed by the provided `payment_service_id` values.
         */
        public Builder paymentServiceId(List<String> paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = JsonNullable.of(paymentServiceId);
            return this;
        }

        /**
         * Filters for transactions that were processed by the provided `payment_service_id` values.
         */
        public Builder paymentServiceId(JsonNullable<? extends List<String>> paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = paymentServiceId;
            return this;
        }


        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = JsonNullable.of(paymentMethodId);
            return this;
        }

        public Builder paymentMethodId(JsonNullable<String> paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }


        public Builder paymentMethodLabel(String paymentMethodLabel) {
            Utils.checkNotNull(paymentMethodLabel, "paymentMethodLabel");
            this.paymentMethodLabel = JsonNullable.of(paymentMethodLabel);
            return this;
        }

        public Builder paymentMethodLabel(JsonNullable<String> paymentMethodLabel) {
            Utils.checkNotNull(paymentMethodLabel, "paymentMethodLabel");
            this.paymentMethodLabel = paymentMethodLabel;
            return this;
        }


        /**
         * Filters for transactions where the `payment_method_scheme` matches one of the provided values.
         */
        public Builder paymentMethodScheme(List<String> paymentMethodScheme) {
            Utils.checkNotNull(paymentMethodScheme, "paymentMethodScheme");
            this.paymentMethodScheme = JsonNullable.of(paymentMethodScheme);
            return this;
        }

        /**
         * Filters for transactions where the `payment_method_scheme` matches one of the provided values.
         */
        public Builder paymentMethodScheme(JsonNullable<? extends List<String>> paymentMethodScheme) {
            Utils.checkNotNull(paymentMethodScheme, "paymentMethodScheme");
            this.paymentMethodScheme = paymentMethodScheme;
            return this;
        }


        /**
         * Filters for transactions that have a payment method with a country that matches with the provided
         * value.
         */
        public Builder paymentMethodCountry(String paymentMethodCountry) {
            Utils.checkNotNull(paymentMethodCountry, "paymentMethodCountry");
            this.paymentMethodCountry = JsonNullable.of(paymentMethodCountry);
            return this;
        }

        /**
         * Filters for transactions that have a payment method with a country that matches with the provided
         * value.
         */
        public Builder paymentMethodCountry(JsonNullable<String> paymentMethodCountry) {
            Utils.checkNotNull(paymentMethodCountry, "paymentMethodCountry");
            this.paymentMethodCountry = paymentMethodCountry;
            return this;
        }


        public Builder paymentMethodFingerprint(String paymentMethodFingerprint) {
            Utils.checkNotNull(paymentMethodFingerprint, "paymentMethodFingerprint");
            this.paymentMethodFingerprint = JsonNullable.of(paymentMethodFingerprint);
            return this;
        }

        public Builder paymentMethodFingerprint(JsonNullable<String> paymentMethodFingerprint) {
            Utils.checkNotNull(paymentMethodFingerprint, "paymentMethodFingerprint");
            this.paymentMethodFingerprint = paymentMethodFingerprint;
            return this;
        }


        /**
         * Filters for transactions that have matching `method` values.
         */
        public Builder method(List<Method> method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * Filters for transactions that have matching `method` values.
         */
        public Builder method(JsonNullable<? extends List<Method>> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * Filters for transactions where the `error_code` matches one for the provided values.
         */
        public Builder errorCode(List<String> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = JsonNullable.of(errorCode);
            return this;
        }

        /**
         * Filters for transactions where the `error_code` matches one for the provided values.
         */
        public Builder errorCode(JsonNullable<? extends List<String>> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }


        /**
         * Filters for transactions with refunds.
         */
        public Builder hasRefunds(boolean hasRefunds) {
            Utils.checkNotNull(hasRefunds, "hasRefunds");
            this.hasRefunds = JsonNullable.of(hasRefunds);
            return this;
        }

        /**
         * Filters for transactions with refunds.
         */
        public Builder hasRefunds(JsonNullable<Boolean> hasRefunds) {
            Utils.checkNotNull(hasRefunds, "hasRefunds");
            this.hasRefunds = hasRefunds;
            return this;
        }


        /**
         * Filters for transactions with a pending manual anti-fraud review.
         */
        public Builder pendingReview(boolean pendingReview) {
            Utils.checkNotNull(pendingReview, "pendingReview");
            this.pendingReview = JsonNullable.of(pendingReview);
            return this;
        }

        /**
         * Filters for transactions with a pending manual anti-fraud review.
         */
        public Builder pendingReview(JsonNullable<Boolean> pendingReview) {
            Utils.checkNotNull(pendingReview, "pendingReview");
            this.pendingReview = pendingReview;
            return this;
        }


        /**
         * Filters for transactions where the `checkout_session_id` matches the provided value.
         */
        public Builder checkoutSessionId(String checkoutSessionId) {
            Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
            this.checkoutSessionId = JsonNullable.of(checkoutSessionId);
            return this;
        }

        /**
         * Filters for transactions where the `checkout_session_id` matches the provided value.
         */
        public Builder checkoutSessionId(JsonNullable<String> checkoutSessionId) {
            Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
            this.checkoutSessionId = checkoutSessionId;
            return this;
        }


        /**
         * Filters for transactions where the `reconciliation_id` matches the provided value.
         */
        public Builder reconciliationId(String reconciliationId) {
            Utils.checkNotNull(reconciliationId, "reconciliationId");
            this.reconciliationId = JsonNullable.of(reconciliationId);
            return this;
        }

        /**
         * Filters for transactions where the `reconciliation_id` matches the provided value.
         */
        public Builder reconciliationId(JsonNullable<String> reconciliationId) {
            Utils.checkNotNull(reconciliationId, "reconciliationId");
            this.reconciliationId = reconciliationId;
            return this;
        }


        /**
         * Filters for transactions with gift card redemptions.
         */
        public Builder hasGiftCardRedemptions(boolean hasGiftCardRedemptions) {
            Utils.checkNotNull(hasGiftCardRedemptions, "hasGiftCardRedemptions");
            this.hasGiftCardRedemptions = JsonNullable.of(hasGiftCardRedemptions);
            return this;
        }

        /**
         * Filters for transactions with gift card redemptions.
         */
        public Builder hasGiftCardRedemptions(JsonNullable<Boolean> hasGiftCardRedemptions) {
            Utils.checkNotNull(hasGiftCardRedemptions, "hasGiftCardRedemptions");
            this.hasGiftCardRedemptions = hasGiftCardRedemptions;
            return this;
        }


        /**
         * Filters for transactions where a gift card used has an `id` that matches the provided value.
         */
        public Builder giftCardId(String giftCardId) {
            Utils.checkNotNull(giftCardId, "giftCardId");
            this.giftCardId = JsonNullable.of(giftCardId);
            return this;
        }

        /**
         * Filters for transactions where a gift card used has an `id` that matches the provided value.
         */
        public Builder giftCardId(JsonNullable<String> giftCardId) {
            Utils.checkNotNull(giftCardId, "giftCardId");
            this.giftCardId = giftCardId;
            return this;
        }


        /**
         * Filters for transactions that have at least one gift card redemption where the last 4 digits of its
         * gift card number matches exactly with the provided value.
         */
        public Builder giftCardLast4(String giftCardLast4) {
            Utils.checkNotNull(giftCardLast4, "giftCardLast4");
            this.giftCardLast4 = JsonNullable.of(giftCardLast4);
            return this;
        }

        /**
         * Filters for transactions that have at least one gift card redemption where the last 4 digits of its
         * gift card number matches exactly with the provided value.
         */
        public Builder giftCardLast4(JsonNullable<String> giftCardLast4) {
            Utils.checkNotNull(giftCardLast4, "giftCardLast4");
            this.giftCardLast4 = giftCardLast4;
            return this;
        }


        /**
         * Filters for transactions that have at least one associated settlement record.
         */
        public Builder hasSettlements(boolean hasSettlements) {
            Utils.checkNotNull(hasSettlements, "hasSettlements");
            this.hasSettlements = JsonNullable.of(hasSettlements);
            return this;
        }

        /**
         * Filters for transactions that have at least one associated settlement record.
         */
        public Builder hasSettlements(JsonNullable<Boolean> hasSettlements) {
            Utils.checkNotNull(hasSettlements, "hasSettlements");
            this.hasSettlements = hasSettlements;
            return this;
        }


        /**
         * Filter for transactions that have a card with a BIN that matches exactly with the provided value.
         */
        public Builder paymentMethodBin(String paymentMethodBin) {
            Utils.checkNotNull(paymentMethodBin, "paymentMethodBin");
            this.paymentMethodBin = JsonNullable.of(paymentMethodBin);
            return this;
        }

        /**
         * Filter for transactions that have a card with a BIN that matches exactly with the provided value.
         */
        public Builder paymentMethodBin(JsonNullable<String> paymentMethodBin) {
            Utils.checkNotNull(paymentMethodBin, "paymentMethodBin");
            this.paymentMethodBin = paymentMethodBin;
            return this;
        }


        /**
         * Filters the results to only the transactions that have a payment source that matches with any of the
         * provided values.
         */
        public Builder paymentSource(List<TransactionPaymentSource> paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = JsonNullable.of(paymentSource);
            return this;
        }

        /**
         * Filters the results to only the transactions that have a payment source that matches with any of the
         * provided values.
         */
        public Builder paymentSource(JsonNullable<? extends List<TransactionPaymentSource>> paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = paymentSource;
            return this;
        }


        /**
         * Filters for transactions where the `is_subsequent_payment` matches the provided value.
         */
        public Builder isSubsequentPayment(boolean isSubsequentPayment) {
            Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
            this.isSubsequentPayment = JsonNullable.of(isSubsequentPayment);
            return this;
        }

        /**
         * Filters for transactions where the `is_subsequent_payment` matches the provided value.
         */
        public Builder isSubsequentPayment(JsonNullable<Boolean> isSubsequentPayment) {
            Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
            this.isSubsequentPayment = isSubsequentPayment;
            return this;
        }


        /**
         * Filters for transactions where the `merchant_initiated` matches the provided value.
         */
        public Builder merchantInitiated(boolean merchantInitiated) {
            Utils.checkNotNull(merchantInitiated, "merchantInitiated");
            this.merchantInitiated = JsonNullable.of(merchantInitiated);
            return this;
        }

        /**
         * Filters for transactions where the `merchant_initiated` matches the provided value.
         */
        public Builder merchantInitiated(JsonNullable<Boolean> merchantInitiated) {
            Utils.checkNotNull(merchantInitiated, "merchantInitiated");
            this.merchantInitiated = merchantInitiated;
            return this;
        }


        /**
         * Filters for transactions that attempted 3DS authentication or not.
         */
        public Builder used3ds(boolean used3ds) {
            Utils.checkNotNull(used3ds, "used3ds");
            this.used3ds = JsonNullable.of(used3ds);
            return this;
        }

        /**
         * Filters for transactions that attempted 3DS authentication or not.
         */
        public Builder used3ds(JsonNullable<Boolean> used3ds) {
            Utils.checkNotNull(used3ds, "used3ds");
            this.used3ds = used3ds;
            return this;
        }


        /**
         * Filters for transactions that have been disputed.
         */
        public Builder disputed(boolean disputed) {
            Utils.checkNotNull(disputed, "disputed");
            this.disputed = JsonNullable.of(disputed);
            return this;
        }

        /**
         * Filters for transactions that have been disputed.
         */
        public Builder disputed(JsonNullable<Boolean> disputed) {
            Utils.checkNotNull(disputed, "disputed");
            this.disputed = disputed;
            return this;
        }


        /**
         * Filters the results to only get the items for which some of the buyer data contains exactly the
         * provided `buyer_search` values.
         */
        public Builder buyerSearch(List<String> buyerSearch) {
            Utils.checkNotNull(buyerSearch, "buyerSearch");
            this.buyerSearch = JsonNullable.of(buyerSearch);
            return this;
        }

        /**
         * Filters the results to only get the items for which some of the buyer data contains exactly the
         * provided `buyer_search` values.
         */
        public Builder buyerSearch(JsonNullable<? extends List<String>> buyerSearch) {
            Utils.checkNotNull(buyerSearch, "buyerSearch");
            this.buyerSearch = buyerSearch;
            return this;
        }


        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public ListTransactionsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }

            return new ListTransactionsRequest(
                cursor, limit, createdAtLte,
                createdAtGte, updatedAtLte, updatedAtGte,
                search, buyerExternalIdentifier, buyerId,
                buyerEmailAddress, ipAddress, status,
                id, paymentServiceTransactionId, externalIdentifier,
                metadata, amountEq, amountLte,
                amountGte, currency, country,
                paymentServiceId, paymentMethodId, paymentMethodLabel,
                paymentMethodScheme, paymentMethodCountry, paymentMethodFingerprint,
                method, errorCode, hasRefunds,
                pendingReview, checkoutSessionId, reconciliationId,
                hasGiftCardRedemptions, giftCardId, giftCardLast4,
                hasSettlements, paymentMethodBin, paymentSource,
                isSubsequentPayment, merchantInitiated, used3ds,
                disputed, buyerSearch, merchantAccountId);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Long>>() {});
    }
}
