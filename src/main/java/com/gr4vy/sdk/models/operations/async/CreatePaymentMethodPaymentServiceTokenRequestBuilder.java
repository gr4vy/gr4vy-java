/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.operations.async;

import static com.gr4vy.sdk.operations.Operations.AsyncRequestOperation;

import com.gr4vy.sdk.SDKConfiguration;
import com.gr4vy.sdk.models.components.PaymentServiceTokenCreate;
import com.gr4vy.sdk.models.operations.CreatePaymentMethodPaymentServiceTokenRequest;
import com.gr4vy.sdk.operations.CreatePaymentMethodPaymentServiceToken;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreatePaymentMethodPaymentServiceTokenRequestBuilder {

    private String paymentMethodId;
    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private PaymentServiceTokenCreate paymentServiceTokenCreate;
    private final SDKConfiguration sdkConfiguration;

    public CreatePaymentMethodPaymentServiceTokenRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreatePaymentMethodPaymentServiceTokenRequestBuilder paymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    public CreatePaymentMethodPaymentServiceTokenRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreatePaymentMethodPaymentServiceTokenRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CreatePaymentMethodPaymentServiceTokenRequestBuilder paymentServiceTokenCreate(PaymentServiceTokenCreate paymentServiceTokenCreate) {
        Utils.checkNotNull(paymentServiceTokenCreate, "paymentServiceTokenCreate");
        this.paymentServiceTokenCreate = paymentServiceTokenCreate;
        return this;
    }


    private CreatePaymentMethodPaymentServiceTokenRequest buildRequest() {

        CreatePaymentMethodPaymentServiceTokenRequest request = new CreatePaymentMethodPaymentServiceTokenRequest(paymentMethodId,
            merchantAccountId,
            paymentServiceTokenCreate);

        return request;
    }

    public CompletableFuture<CreatePaymentMethodPaymentServiceTokenResponse> call() throws Exception {
        
        AsyncRequestOperation<CreatePaymentMethodPaymentServiceTokenRequest, CreatePaymentMethodPaymentServiceTokenResponse> operation
              = new CreatePaymentMethodPaymentServiceToken.Async(sdkConfiguration);
        CreatePaymentMethodPaymentServiceTokenRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
