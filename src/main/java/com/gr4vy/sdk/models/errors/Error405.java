/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.models.components.ErrorDetail;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Long;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@SuppressWarnings("serial")
public class Error405 extends RuntimeException {

    /**
     * Always `error`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * Always `method_not_allowed`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    /**
     * Always `405`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<Long> status;

    /**
     * A human readable message that provides more context to the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    /**
     * A list of details that further ellaborate on the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private Optional<? extends List<ErrorDetail>> details;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private Optional<? extends HttpResponse<InputStream>> rawResponse;

    @JsonCreator
    public Error405(
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("status") Optional<Long> status,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("details") Optional<? extends List<ErrorDetail>> details,
            @JsonProperty("RawResponse") Optional<? extends HttpResponse<InputStream>> rawResponse) {
        super(message.orElse(null));
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(details, "details");
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.code = code;
        this.status = status;
        this.message = message;
        this.details = details;
        this.rawResponse = rawResponse;
    }
    
    public Error405() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Always `error`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * Always `method_not_allowed`
     */
    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    /**
     * Always `405`.
     */
    @JsonIgnore
    public Optional<Long> status() {
        return status;
    }

    /**
     * A human readable message that provides more context to the error.
     */
    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    /**
     * A list of details that further ellaborate on the error.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ErrorDetail>> details() {
        return (Optional<List<ErrorDetail>>) details;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HttpResponse<InputStream>> rawResponse() {
        return (Optional<HttpResponse<InputStream>>) rawResponse;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Always `method_not_allowed`
     */
    public Error405 withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * Always `method_not_allowed`
     */
    public Error405 withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * Always `405`.
     */
    public Error405 withStatus(long status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Always `405`.
     */
    public Error405 withStatus(Optional<Long> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * A human readable message that provides more context to the error.
     */
    public Error405 withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * A human readable message that provides more context to the error.
     */
    public Error405 withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * A list of details that further ellaborate on the error.
     */
    public Error405 withDetails(List<ErrorDetail> details) {
        Utils.checkNotNull(details, "details");
        this.details = Optional.ofNullable(details);
        return this;
    }

    /**
     * A list of details that further ellaborate on the error.
     */
    public Error405 withDetails(Optional<? extends List<ErrorDetail>> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public Error405 withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = Optional.ofNullable(rawResponse);
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public Error405 withRawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error405 other = (Error405) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.details, other.details) &&
            Objects.deepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            code,
            status,
            message,
            details,
            rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Error405.class,
                "type", type,
                "code", code,
                "status", status,
                "message", message,
                "details", details,
                "rawResponse", rawResponse);
    }
    
    public final static class Builder {
 
        private Optional<String> code;
 
        private Optional<Long> status;
 
        private Optional<String> message;
 
        private Optional<? extends List<ErrorDetail>> details = Optional.empty();
 
        private Optional<? extends HttpResponse<InputStream>> rawResponse;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Always `method_not_allowed`
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * Always `method_not_allowed`
         */
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * Always `405`.
         */
        public Builder status(long status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Always `405`.
         */
        public Builder status(Optional<Long> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * A human readable message that provides more context to the error.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * A human readable message that provides more context to the error.
         */
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * A list of details that further ellaborate on the error.
         */
        public Builder details(List<ErrorDetail> details) {
            Utils.checkNotNull(details, "details");
            this.details = Optional.ofNullable(details);
            return this;
        }

        /**
         * A list of details that further ellaborate on the error.
         */
        public Builder details(Optional<? extends List<ErrorDetail>> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = Optional.ofNullable(rawResponse);
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }
        
        public Error405 build() {
            if (code == null) {
                code = _SINGLETON_VALUE_Code.value();
            }
            if (status == null) {
                status = _SINGLETON_VALUE_Status.value();
            }
            if (message == null) {
                message = _SINGLETON_VALUE_Message.value();
            }
            return new Error405(
                code,
                status,
                message,
                details,
                rawResponse);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"error\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Code =
                new LazySingletonValue<>(
                        "code",
                        "\"method_not_allowed\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Status =
                new LazySingletonValue<>(
                        "status",
                        "405",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Message =
                new LazySingletonValue<>(
                        "message",
                        "\"Method Not Allowed\"",
                        new TypeReference<Optional<String>>() {});
    }
}

