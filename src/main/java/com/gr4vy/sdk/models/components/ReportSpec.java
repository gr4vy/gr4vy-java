/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;


public class ReportSpec {

    @JsonProperty("model")
    private ReportSpecModel model;

    /**
     * The parameters for the report model.
     */
    @JsonProperty("params")
    private Map<String, Object> params;

    @JsonCreator
    public ReportSpec(
            @JsonProperty("model") ReportSpecModel model,
            @JsonProperty("params") Map<String, Object> params) {
        Utils.checkNotNull(model, "model");
        params = Utils.emptyMapIfNull(params);
        Utils.checkNotNull(params, "params");
        this.model = model;
        this.params = params;
    }

    @JsonIgnore
    public ReportSpecModel model() {
        return model;
    }

    /**
     * The parameters for the report model.
     */
    @JsonIgnore
    public Map<String, Object> params() {
        return params;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ReportSpec withModel(ReportSpecModel model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    /**
     * The parameters for the report model.
     */
    public ReportSpec withParams(Map<String, Object> params) {
        Utils.checkNotNull(params, "params");
        this.params = params;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportSpec other = (ReportSpec) o;
        return 
            Utils.enhancedDeepEquals(this.model, other.model) &&
            Utils.enhancedDeepEquals(this.params, other.params);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            model, params);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportSpec.class,
                "model", model,
                "params", params);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ReportSpecModel model;

        private Map<String, Object> params;

        private Builder() {
          // force use of static builder() method
        }


        public Builder model(ReportSpecModel model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }


        /**
         * The parameters for the report model.
         */
        public Builder params(Map<String, Object> params) {
            Utils.checkNotNull(params, "params");
            this.params = params;
            return this;
        }

        public ReportSpec build() {

            return new ReportSpec(
                model, params);
        }

    }
}
