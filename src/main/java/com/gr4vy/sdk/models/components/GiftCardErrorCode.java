/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * GiftCardErrorCode
 * 
 * <p>Gift card error codes.
 * 
 * <p>Gr4vy normalised gift card error codes. Keep the naming and style in line with
 * those in the connectors framework.
 * 
 * <p>If new codes are added, append them at the end or amend public simulator
 * documentation: https://docs.gr4vy.com/guides/features/gift-cards/simulator
 */
@JsonDeserialize(using = GiftCardErrorCode._Deserializer.class)
@JsonSerialize(using = GiftCardErrorCode._Serializer.class)
public class GiftCardErrorCode {

    public static final GiftCardErrorCode INVALID_GIFT_CARD = new GiftCardErrorCode("invalid_gift_card");
    public static final GiftCardErrorCode EXPIRED_CARD = new GiftCardErrorCode("expired_card");
    public static final GiftCardErrorCode INACTIVE_CARD = new GiftCardErrorCode("inactive_card");
    public static final GiftCardErrorCode INVALID_SERVICE_CREDENTIALS = new GiftCardErrorCode("invalid_service_credentials");
    public static final GiftCardErrorCode INVALID_AMOUNT = new GiftCardErrorCode("invalid_amount");
    public static final GiftCardErrorCode INCORRECT_CURRENCY = new GiftCardErrorCode("incorrect_currency");
    public static final GiftCardErrorCode INSUFFICIENT_FUNDS = new GiftCardErrorCode("insufficient_funds");
    public static final GiftCardErrorCode INVALID_SERVICE_CONFIGURATION = new GiftCardErrorCode("invalid_service_configuration");
    public static final GiftCardErrorCode OPERATION_CANCELED = new GiftCardErrorCode("operation_canceled");
    public static final GiftCardErrorCode SERVICE_ERROR = new GiftCardErrorCode("service_error");
    public static final GiftCardErrorCode SERVICE_NETWORK_ERROR = new GiftCardErrorCode("service_network_error");
    public static final GiftCardErrorCode UNKNOWN_ERROR = new GiftCardErrorCode("unknown_error");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, GiftCardErrorCode> values = createValuesMap();
    private static final Map<String, GiftCardErrorCodeEnum> enums = createEnumsMap();

    private final String value;

    private GiftCardErrorCode(String value) {
        this.value = value;
    }

    /**
     * Returns a GiftCardErrorCode with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as GiftCardErrorCode
     */ 
    public static GiftCardErrorCode of(String value) {
        synchronized (GiftCardErrorCode.class) {
            return values.computeIfAbsent(value, v -> new GiftCardErrorCode(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<GiftCardErrorCodeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        GiftCardErrorCode other = (GiftCardErrorCode) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "GiftCardErrorCode [value=" + value + "]";
    }

    // return an array just like an enum
    public static GiftCardErrorCode[] values() {
        synchronized (GiftCardErrorCode.class) {
            return values.values().toArray(new GiftCardErrorCode[] {});
        }
    }

    private static final Map<String, GiftCardErrorCode> createValuesMap() {
        Map<String, GiftCardErrorCode> map = new LinkedHashMap<>();
        map.put("invalid_gift_card", INVALID_GIFT_CARD);
        map.put("expired_card", EXPIRED_CARD);
        map.put("inactive_card", INACTIVE_CARD);
        map.put("invalid_service_credentials", INVALID_SERVICE_CREDENTIALS);
        map.put("invalid_amount", INVALID_AMOUNT);
        map.put("incorrect_currency", INCORRECT_CURRENCY);
        map.put("insufficient_funds", INSUFFICIENT_FUNDS);
        map.put("invalid_service_configuration", INVALID_SERVICE_CONFIGURATION);
        map.put("operation_canceled", OPERATION_CANCELED);
        map.put("service_error", SERVICE_ERROR);
        map.put("service_network_error", SERVICE_NETWORK_ERROR);
        map.put("unknown_error", UNKNOWN_ERROR);
        return map;
    }

    private static final Map<String, GiftCardErrorCodeEnum> createEnumsMap() {
        Map<String, GiftCardErrorCodeEnum> map = new HashMap<>();
        map.put("invalid_gift_card", GiftCardErrorCodeEnum.INVALID_GIFT_CARD);
        map.put("expired_card", GiftCardErrorCodeEnum.EXPIRED_CARD);
        map.put("inactive_card", GiftCardErrorCodeEnum.INACTIVE_CARD);
        map.put("invalid_service_credentials", GiftCardErrorCodeEnum.INVALID_SERVICE_CREDENTIALS);
        map.put("invalid_amount", GiftCardErrorCodeEnum.INVALID_AMOUNT);
        map.put("incorrect_currency", GiftCardErrorCodeEnum.INCORRECT_CURRENCY);
        map.put("insufficient_funds", GiftCardErrorCodeEnum.INSUFFICIENT_FUNDS);
        map.put("invalid_service_configuration", GiftCardErrorCodeEnum.INVALID_SERVICE_CONFIGURATION);
        map.put("operation_canceled", GiftCardErrorCodeEnum.OPERATION_CANCELED);
        map.put("service_error", GiftCardErrorCodeEnum.SERVICE_ERROR);
        map.put("service_network_error", GiftCardErrorCodeEnum.SERVICE_NETWORK_ERROR);
        map.put("unknown_error", GiftCardErrorCodeEnum.UNKNOWN_ERROR);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<GiftCardErrorCode> {

        protected _Serializer() {
            super(GiftCardErrorCode.class);
        }

        @Override
        public void serialize(GiftCardErrorCode value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<GiftCardErrorCode> {

        protected _Deserializer() {
            super(GiftCardErrorCode.class);
        }

        @Override
        public GiftCardErrorCode deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return GiftCardErrorCode.of(v);
        }
    }
    
    public enum GiftCardErrorCodeEnum {

        INVALID_GIFT_CARD("invalid_gift_card"),
        EXPIRED_CARD("expired_card"),
        INACTIVE_CARD("inactive_card"),
        INVALID_SERVICE_CREDENTIALS("invalid_service_credentials"),
        INVALID_AMOUNT("invalid_amount"),
        INCORRECT_CURRENCY("incorrect_currency"),
        INSUFFICIENT_FUNDS("insufficient_funds"),
        INVALID_SERVICE_CONFIGURATION("invalid_service_configuration"),
        OPERATION_CANCELED("operation_canceled"),
        SERVICE_ERROR("service_error"),
        SERVICE_NETWORK_ERROR("service_network_error"),
        UNKNOWN_ERROR("unknown_error"),;

        private final String value;

        private GiftCardErrorCodeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

