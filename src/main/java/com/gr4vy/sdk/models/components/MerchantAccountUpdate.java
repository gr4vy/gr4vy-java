/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class MerchantAccountUpdate {
    /**
     * Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_updater_enabled")
    private Optional<Boolean> accountUpdaterEnabled;

    /**
     * The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_updater_request_encryption_key")
    private JsonNullable<String> accountUpdaterRequestEncryptionKey;

    /**
     * The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_updater_request_encryption_key_id")
    private JsonNullable<String> accountUpdaterRequestEncryptionKeyId;

    /**
     * The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_updater_response_decryption_key")
    private JsonNullable<String> accountUpdaterResponseDecryptionKey;

    /**
     * The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_updater_response_decryption_key_id")
    private JsonNullable<String> accountUpdaterResponseDecryptionKeyId;

    /**
     * The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("over_capture_amount")
    private JsonNullable<Long> overCaptureAmount;

    /**
     * The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("over_capture_percentage")
    private JsonNullable<Long> overCapturePercentage;

    /**
     * Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loon_client_key")
    private JsonNullable<String> loonClientKey;

    /**
     * Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loon_secret_key")
    private JsonNullable<String> loonSecretKey;

    /**
     * Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loon_accepted_schemes")
    private JsonNullable<? extends List<CardScheme>> loonAcceptedSchemes;

    /**
     * Requestor ID provided for Visa after onboarding to use Network Tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visa_network_tokens_requestor_id")
    private JsonNullable<String> visaNetworkTokensRequestorId;

    /**
     * Application ID provided for Visa after onboarding to use Network Tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visa_network_tokens_app_id")
    private JsonNullable<String> visaNetworkTokensAppId;

    /**
     * Requestor ID provided for American Express after onboarding to use Network Tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amex_network_tokens_requestor_id")
    private JsonNullable<String> amexNetworkTokensRequestorId;

    /**
     * Application ID provided for American Express after onboarding to use Network Tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amex_network_tokens_app_id")
    private JsonNullable<String> amexNetworkTokensAppId;

    /**
     * Requestor ID provided for Mastercard after onboarding to use Network Tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mastercard_network_tokens_requestor_id")
    private JsonNullable<String> mastercardNetworkTokensRequestorId;

    /**
     * Application ID provided for Mastercard after onboarding to use Network Tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mastercard_network_tokens_app_id")
    private JsonNullable<String> mastercardNetworkTokensAppId;

    /**
     * The display name for the merchant account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    @JsonCreator
    public MerchantAccountUpdate(
            @JsonProperty("account_updater_enabled") Optional<Boolean> accountUpdaterEnabled,
            @JsonProperty("account_updater_request_encryption_key") JsonNullable<String> accountUpdaterRequestEncryptionKey,
            @JsonProperty("account_updater_request_encryption_key_id") JsonNullable<String> accountUpdaterRequestEncryptionKeyId,
            @JsonProperty("account_updater_response_decryption_key") JsonNullable<String> accountUpdaterResponseDecryptionKey,
            @JsonProperty("account_updater_response_decryption_key_id") JsonNullable<String> accountUpdaterResponseDecryptionKeyId,
            @JsonProperty("over_capture_amount") JsonNullable<Long> overCaptureAmount,
            @JsonProperty("over_capture_percentage") JsonNullable<Long> overCapturePercentage,
            @JsonProperty("loon_client_key") JsonNullable<String> loonClientKey,
            @JsonProperty("loon_secret_key") JsonNullable<String> loonSecretKey,
            @JsonProperty("loon_accepted_schemes") JsonNullable<? extends List<CardScheme>> loonAcceptedSchemes,
            @JsonProperty("visa_network_tokens_requestor_id") JsonNullable<String> visaNetworkTokensRequestorId,
            @JsonProperty("visa_network_tokens_app_id") JsonNullable<String> visaNetworkTokensAppId,
            @JsonProperty("amex_network_tokens_requestor_id") JsonNullable<String> amexNetworkTokensRequestorId,
            @JsonProperty("amex_network_tokens_app_id") JsonNullable<String> amexNetworkTokensAppId,
            @JsonProperty("mastercard_network_tokens_requestor_id") JsonNullable<String> mastercardNetworkTokensRequestorId,
            @JsonProperty("mastercard_network_tokens_app_id") JsonNullable<String> mastercardNetworkTokensAppId,
            @JsonProperty("display_name") JsonNullable<String> displayName) {
        Utils.checkNotNull(accountUpdaterEnabled, "accountUpdaterEnabled");
        Utils.checkNotNull(accountUpdaterRequestEncryptionKey, "accountUpdaterRequestEncryptionKey");
        Utils.checkNotNull(accountUpdaterRequestEncryptionKeyId, "accountUpdaterRequestEncryptionKeyId");
        Utils.checkNotNull(accountUpdaterResponseDecryptionKey, "accountUpdaterResponseDecryptionKey");
        Utils.checkNotNull(accountUpdaterResponseDecryptionKeyId, "accountUpdaterResponseDecryptionKeyId");
        Utils.checkNotNull(overCaptureAmount, "overCaptureAmount");
        Utils.checkNotNull(overCapturePercentage, "overCapturePercentage");
        Utils.checkNotNull(loonClientKey, "loonClientKey");
        Utils.checkNotNull(loonSecretKey, "loonSecretKey");
        Utils.checkNotNull(loonAcceptedSchemes, "loonAcceptedSchemes");
        Utils.checkNotNull(visaNetworkTokensRequestorId, "visaNetworkTokensRequestorId");
        Utils.checkNotNull(visaNetworkTokensAppId, "visaNetworkTokensAppId");
        Utils.checkNotNull(amexNetworkTokensRequestorId, "amexNetworkTokensRequestorId");
        Utils.checkNotNull(amexNetworkTokensAppId, "amexNetworkTokensAppId");
        Utils.checkNotNull(mastercardNetworkTokensRequestorId, "mastercardNetworkTokensRequestorId");
        Utils.checkNotNull(mastercardNetworkTokensAppId, "mastercardNetworkTokensAppId");
        Utils.checkNotNull(displayName, "displayName");
        this.accountUpdaterEnabled = accountUpdaterEnabled;
        this.accountUpdaterRequestEncryptionKey = accountUpdaterRequestEncryptionKey;
        this.accountUpdaterRequestEncryptionKeyId = accountUpdaterRequestEncryptionKeyId;
        this.accountUpdaterResponseDecryptionKey = accountUpdaterResponseDecryptionKey;
        this.accountUpdaterResponseDecryptionKeyId = accountUpdaterResponseDecryptionKeyId;
        this.overCaptureAmount = overCaptureAmount;
        this.overCapturePercentage = overCapturePercentage;
        this.loonClientKey = loonClientKey;
        this.loonSecretKey = loonSecretKey;
        this.loonAcceptedSchemes = loonAcceptedSchemes;
        this.visaNetworkTokensRequestorId = visaNetworkTokensRequestorId;
        this.visaNetworkTokensAppId = visaNetworkTokensAppId;
        this.amexNetworkTokensRequestorId = amexNetworkTokensRequestorId;
        this.amexNetworkTokensAppId = amexNetworkTokensAppId;
        this.mastercardNetworkTokensRequestorId = mastercardNetworkTokensRequestorId;
        this.mastercardNetworkTokensAppId = mastercardNetworkTokensAppId;
        this.displayName = displayName;
    }
    
    public MerchantAccountUpdate() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.
     */
    @JsonIgnore
    public Optional<Boolean> accountUpdaterEnabled() {
        return accountUpdaterEnabled;
    }

    /**
     * The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonIgnore
    public JsonNullable<String> accountUpdaterRequestEncryptionKey() {
        return accountUpdaterRequestEncryptionKey;
    }

    /**
     * The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonIgnore
    public JsonNullable<String> accountUpdaterRequestEncryptionKeyId() {
        return accountUpdaterRequestEncryptionKeyId;
    }

    /**
     * The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonIgnore
    public JsonNullable<String> accountUpdaterResponseDecryptionKey() {
        return accountUpdaterResponseDecryptionKey;
    }

    /**
     * The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    @JsonIgnore
    public JsonNullable<String> accountUpdaterResponseDecryptionKeyId() {
        return accountUpdaterResponseDecryptionKeyId;
    }

    /**
     * The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.
     */
    @JsonIgnore
    public JsonNullable<Long> overCaptureAmount() {
        return overCaptureAmount;
    }

    /**
     * The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.
     */
    @JsonIgnore
    public JsonNullable<Long> overCapturePercentage() {
        return overCapturePercentage;
    }

    /**
     * Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    @JsonIgnore
    public JsonNullable<String> loonClientKey() {
        return loonClientKey;
    }

    /**
     * Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    @JsonIgnore
    public JsonNullable<String> loonSecretKey() {
        return loonSecretKey;
    }

    /**
     * Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CardScheme>> loonAcceptedSchemes() {
        return (JsonNullable<List<CardScheme>>) loonAcceptedSchemes;
    }

    /**
     * Requestor ID provided for Visa after onboarding to use Network Tokens.
     */
    @JsonIgnore
    public JsonNullable<String> visaNetworkTokensRequestorId() {
        return visaNetworkTokensRequestorId;
    }

    /**
     * Application ID provided for Visa after onboarding to use Network Tokens.
     */
    @JsonIgnore
    public JsonNullable<String> visaNetworkTokensAppId() {
        return visaNetworkTokensAppId;
    }

    /**
     * Requestor ID provided for American Express after onboarding to use Network Tokens.
     */
    @JsonIgnore
    public JsonNullable<String> amexNetworkTokensRequestorId() {
        return amexNetworkTokensRequestorId;
    }

    /**
     * Application ID provided for American Express after onboarding to use Network Tokens.
     */
    @JsonIgnore
    public JsonNullable<String> amexNetworkTokensAppId() {
        return amexNetworkTokensAppId;
    }

    /**
     * Requestor ID provided for Mastercard after onboarding to use Network Tokens.
     */
    @JsonIgnore
    public JsonNullable<String> mastercardNetworkTokensRequestorId() {
        return mastercardNetworkTokensRequestorId;
    }

    /**
     * Application ID provided for Mastercard after onboarding to use Network Tokens.
     */
    @JsonIgnore
    public JsonNullable<String> mastercardNetworkTokensAppId() {
        return mastercardNetworkTokensAppId;
    }

    /**
     * The display name for the merchant account.
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterEnabled(boolean accountUpdaterEnabled) {
        Utils.checkNotNull(accountUpdaterEnabled, "accountUpdaterEnabled");
        this.accountUpdaterEnabled = Optional.ofNullable(accountUpdaterEnabled);
        return this;
    }


    /**
     * Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterEnabled(Optional<Boolean> accountUpdaterEnabled) {
        Utils.checkNotNull(accountUpdaterEnabled, "accountUpdaterEnabled");
        this.accountUpdaterEnabled = accountUpdaterEnabled;
        return this;
    }

    /**
     * The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterRequestEncryptionKey(String accountUpdaterRequestEncryptionKey) {
        Utils.checkNotNull(accountUpdaterRequestEncryptionKey, "accountUpdaterRequestEncryptionKey");
        this.accountUpdaterRequestEncryptionKey = JsonNullable.of(accountUpdaterRequestEncryptionKey);
        return this;
    }

    /**
     * The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterRequestEncryptionKey(JsonNullable<String> accountUpdaterRequestEncryptionKey) {
        Utils.checkNotNull(accountUpdaterRequestEncryptionKey, "accountUpdaterRequestEncryptionKey");
        this.accountUpdaterRequestEncryptionKey = accountUpdaterRequestEncryptionKey;
        return this;
    }

    /**
     * The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterRequestEncryptionKeyId(String accountUpdaterRequestEncryptionKeyId) {
        Utils.checkNotNull(accountUpdaterRequestEncryptionKeyId, "accountUpdaterRequestEncryptionKeyId");
        this.accountUpdaterRequestEncryptionKeyId = JsonNullable.of(accountUpdaterRequestEncryptionKeyId);
        return this;
    }

    /**
     * The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterRequestEncryptionKeyId(JsonNullable<String> accountUpdaterRequestEncryptionKeyId) {
        Utils.checkNotNull(accountUpdaterRequestEncryptionKeyId, "accountUpdaterRequestEncryptionKeyId");
        this.accountUpdaterRequestEncryptionKeyId = accountUpdaterRequestEncryptionKeyId;
        return this;
    }

    /**
     * The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterResponseDecryptionKey(String accountUpdaterResponseDecryptionKey) {
        Utils.checkNotNull(accountUpdaterResponseDecryptionKey, "accountUpdaterResponseDecryptionKey");
        this.accountUpdaterResponseDecryptionKey = JsonNullable.of(accountUpdaterResponseDecryptionKey);
        return this;
    }

    /**
     * The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterResponseDecryptionKey(JsonNullable<String> accountUpdaterResponseDecryptionKey) {
        Utils.checkNotNull(accountUpdaterResponseDecryptionKey, "accountUpdaterResponseDecryptionKey");
        this.accountUpdaterResponseDecryptionKey = accountUpdaterResponseDecryptionKey;
        return this;
    }

    /**
     * The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterResponseDecryptionKeyId(String accountUpdaterResponseDecryptionKeyId) {
        Utils.checkNotNull(accountUpdaterResponseDecryptionKeyId, "accountUpdaterResponseDecryptionKeyId");
        this.accountUpdaterResponseDecryptionKeyId = JsonNullable.of(accountUpdaterResponseDecryptionKeyId);
        return this;
    }

    /**
     * The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     */
    public MerchantAccountUpdate withAccountUpdaterResponseDecryptionKeyId(JsonNullable<String> accountUpdaterResponseDecryptionKeyId) {
        Utils.checkNotNull(accountUpdaterResponseDecryptionKeyId, "accountUpdaterResponseDecryptionKeyId");
        this.accountUpdaterResponseDecryptionKeyId = accountUpdaterResponseDecryptionKeyId;
        return this;
    }

    /**
     * The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.
     */
    public MerchantAccountUpdate withOverCaptureAmount(long overCaptureAmount) {
        Utils.checkNotNull(overCaptureAmount, "overCaptureAmount");
        this.overCaptureAmount = JsonNullable.of(overCaptureAmount);
        return this;
    }

    /**
     * The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.
     */
    public MerchantAccountUpdate withOverCaptureAmount(JsonNullable<Long> overCaptureAmount) {
        Utils.checkNotNull(overCaptureAmount, "overCaptureAmount");
        this.overCaptureAmount = overCaptureAmount;
        return this;
    }

    /**
     * The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.
     */
    public MerchantAccountUpdate withOverCapturePercentage(long overCapturePercentage) {
        Utils.checkNotNull(overCapturePercentage, "overCapturePercentage");
        this.overCapturePercentage = JsonNullable.of(overCapturePercentage);
        return this;
    }

    /**
     * The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.
     */
    public MerchantAccountUpdate withOverCapturePercentage(JsonNullable<Long> overCapturePercentage) {
        Utils.checkNotNull(overCapturePercentage, "overCapturePercentage");
        this.overCapturePercentage = overCapturePercentage;
        return this;
    }

    /**
     * Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    public MerchantAccountUpdate withLoonClientKey(String loonClientKey) {
        Utils.checkNotNull(loonClientKey, "loonClientKey");
        this.loonClientKey = JsonNullable.of(loonClientKey);
        return this;
    }

    /**
     * Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    public MerchantAccountUpdate withLoonClientKey(JsonNullable<String> loonClientKey) {
        Utils.checkNotNull(loonClientKey, "loonClientKey");
        this.loonClientKey = loonClientKey;
        return this;
    }

    /**
     * Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    public MerchantAccountUpdate withLoonSecretKey(String loonSecretKey) {
        Utils.checkNotNull(loonSecretKey, "loonSecretKey");
        this.loonSecretKey = JsonNullable.of(loonSecretKey);
        return this;
    }

    /**
     * Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    public MerchantAccountUpdate withLoonSecretKey(JsonNullable<String> loonSecretKey) {
        Utils.checkNotNull(loonSecretKey, "loonSecretKey");
        this.loonSecretKey = loonSecretKey;
        return this;
    }

    /**
     * Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    public MerchantAccountUpdate withLoonAcceptedSchemes(List<CardScheme> loonAcceptedSchemes) {
        Utils.checkNotNull(loonAcceptedSchemes, "loonAcceptedSchemes");
        this.loonAcceptedSchemes = JsonNullable.of(loonAcceptedSchemes);
        return this;
    }

    /**
     * Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     */
    public MerchantAccountUpdate withLoonAcceptedSchemes(JsonNullable<? extends List<CardScheme>> loonAcceptedSchemes) {
        Utils.checkNotNull(loonAcceptedSchemes, "loonAcceptedSchemes");
        this.loonAcceptedSchemes = loonAcceptedSchemes;
        return this;
    }

    /**
     * Requestor ID provided for Visa after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withVisaNetworkTokensRequestorId(String visaNetworkTokensRequestorId) {
        Utils.checkNotNull(visaNetworkTokensRequestorId, "visaNetworkTokensRequestorId");
        this.visaNetworkTokensRequestorId = JsonNullable.of(visaNetworkTokensRequestorId);
        return this;
    }

    /**
     * Requestor ID provided for Visa after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withVisaNetworkTokensRequestorId(JsonNullable<String> visaNetworkTokensRequestorId) {
        Utils.checkNotNull(visaNetworkTokensRequestorId, "visaNetworkTokensRequestorId");
        this.visaNetworkTokensRequestorId = visaNetworkTokensRequestorId;
        return this;
    }

    /**
     * Application ID provided for Visa after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withVisaNetworkTokensAppId(String visaNetworkTokensAppId) {
        Utils.checkNotNull(visaNetworkTokensAppId, "visaNetworkTokensAppId");
        this.visaNetworkTokensAppId = JsonNullable.of(visaNetworkTokensAppId);
        return this;
    }

    /**
     * Application ID provided for Visa after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withVisaNetworkTokensAppId(JsonNullable<String> visaNetworkTokensAppId) {
        Utils.checkNotNull(visaNetworkTokensAppId, "visaNetworkTokensAppId");
        this.visaNetworkTokensAppId = visaNetworkTokensAppId;
        return this;
    }

    /**
     * Requestor ID provided for American Express after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withAmexNetworkTokensRequestorId(String amexNetworkTokensRequestorId) {
        Utils.checkNotNull(amexNetworkTokensRequestorId, "amexNetworkTokensRequestorId");
        this.amexNetworkTokensRequestorId = JsonNullable.of(amexNetworkTokensRequestorId);
        return this;
    }

    /**
     * Requestor ID provided for American Express after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withAmexNetworkTokensRequestorId(JsonNullable<String> amexNetworkTokensRequestorId) {
        Utils.checkNotNull(amexNetworkTokensRequestorId, "amexNetworkTokensRequestorId");
        this.amexNetworkTokensRequestorId = amexNetworkTokensRequestorId;
        return this;
    }

    /**
     * Application ID provided for American Express after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withAmexNetworkTokensAppId(String amexNetworkTokensAppId) {
        Utils.checkNotNull(amexNetworkTokensAppId, "amexNetworkTokensAppId");
        this.amexNetworkTokensAppId = JsonNullable.of(amexNetworkTokensAppId);
        return this;
    }

    /**
     * Application ID provided for American Express after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withAmexNetworkTokensAppId(JsonNullable<String> amexNetworkTokensAppId) {
        Utils.checkNotNull(amexNetworkTokensAppId, "amexNetworkTokensAppId");
        this.amexNetworkTokensAppId = amexNetworkTokensAppId;
        return this;
    }

    /**
     * Requestor ID provided for Mastercard after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withMastercardNetworkTokensRequestorId(String mastercardNetworkTokensRequestorId) {
        Utils.checkNotNull(mastercardNetworkTokensRequestorId, "mastercardNetworkTokensRequestorId");
        this.mastercardNetworkTokensRequestorId = JsonNullable.of(mastercardNetworkTokensRequestorId);
        return this;
    }

    /**
     * Requestor ID provided for Mastercard after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withMastercardNetworkTokensRequestorId(JsonNullable<String> mastercardNetworkTokensRequestorId) {
        Utils.checkNotNull(mastercardNetworkTokensRequestorId, "mastercardNetworkTokensRequestorId");
        this.mastercardNetworkTokensRequestorId = mastercardNetworkTokensRequestorId;
        return this;
    }

    /**
     * Application ID provided for Mastercard after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withMastercardNetworkTokensAppId(String mastercardNetworkTokensAppId) {
        Utils.checkNotNull(mastercardNetworkTokensAppId, "mastercardNetworkTokensAppId");
        this.mastercardNetworkTokensAppId = JsonNullable.of(mastercardNetworkTokensAppId);
        return this;
    }

    /**
     * Application ID provided for Mastercard after onboarding to use Network Tokens.
     */
    public MerchantAccountUpdate withMastercardNetworkTokensAppId(JsonNullable<String> mastercardNetworkTokensAppId) {
        Utils.checkNotNull(mastercardNetworkTokensAppId, "mastercardNetworkTokensAppId");
        this.mastercardNetworkTokensAppId = mastercardNetworkTokensAppId;
        return this;
    }

    /**
     * The display name for the merchant account.
     */
    public MerchantAccountUpdate withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The display name for the merchant account.
     */
    public MerchantAccountUpdate withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MerchantAccountUpdate other = (MerchantAccountUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.accountUpdaterEnabled, other.accountUpdaterEnabled) &&
            Utils.enhancedDeepEquals(this.accountUpdaterRequestEncryptionKey, other.accountUpdaterRequestEncryptionKey) &&
            Utils.enhancedDeepEquals(this.accountUpdaterRequestEncryptionKeyId, other.accountUpdaterRequestEncryptionKeyId) &&
            Utils.enhancedDeepEquals(this.accountUpdaterResponseDecryptionKey, other.accountUpdaterResponseDecryptionKey) &&
            Utils.enhancedDeepEquals(this.accountUpdaterResponseDecryptionKeyId, other.accountUpdaterResponseDecryptionKeyId) &&
            Utils.enhancedDeepEquals(this.overCaptureAmount, other.overCaptureAmount) &&
            Utils.enhancedDeepEquals(this.overCapturePercentage, other.overCapturePercentage) &&
            Utils.enhancedDeepEquals(this.loonClientKey, other.loonClientKey) &&
            Utils.enhancedDeepEquals(this.loonSecretKey, other.loonSecretKey) &&
            Utils.enhancedDeepEquals(this.loonAcceptedSchemes, other.loonAcceptedSchemes) &&
            Utils.enhancedDeepEquals(this.visaNetworkTokensRequestorId, other.visaNetworkTokensRequestorId) &&
            Utils.enhancedDeepEquals(this.visaNetworkTokensAppId, other.visaNetworkTokensAppId) &&
            Utils.enhancedDeepEquals(this.amexNetworkTokensRequestorId, other.amexNetworkTokensRequestorId) &&
            Utils.enhancedDeepEquals(this.amexNetworkTokensAppId, other.amexNetworkTokensAppId) &&
            Utils.enhancedDeepEquals(this.mastercardNetworkTokensRequestorId, other.mastercardNetworkTokensRequestorId) &&
            Utils.enhancedDeepEquals(this.mastercardNetworkTokensAppId, other.mastercardNetworkTokensAppId) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountUpdaterEnabled, accountUpdaterRequestEncryptionKey, accountUpdaterRequestEncryptionKeyId,
            accountUpdaterResponseDecryptionKey, accountUpdaterResponseDecryptionKeyId, overCaptureAmount,
            overCapturePercentage, loonClientKey, loonSecretKey,
            loonAcceptedSchemes, visaNetworkTokensRequestorId, visaNetworkTokensAppId,
            amexNetworkTokensRequestorId, amexNetworkTokensAppId, mastercardNetworkTokensRequestorId,
            mastercardNetworkTokensAppId, displayName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MerchantAccountUpdate.class,
                "accountUpdaterEnabled", accountUpdaterEnabled,
                "accountUpdaterRequestEncryptionKey", accountUpdaterRequestEncryptionKey,
                "accountUpdaterRequestEncryptionKeyId", accountUpdaterRequestEncryptionKeyId,
                "accountUpdaterResponseDecryptionKey", accountUpdaterResponseDecryptionKey,
                "accountUpdaterResponseDecryptionKeyId", accountUpdaterResponseDecryptionKeyId,
                "overCaptureAmount", overCaptureAmount,
                "overCapturePercentage", overCapturePercentage,
                "loonClientKey", loonClientKey,
                "loonSecretKey", loonSecretKey,
                "loonAcceptedSchemes", loonAcceptedSchemes,
                "visaNetworkTokensRequestorId", visaNetworkTokensRequestorId,
                "visaNetworkTokensAppId", visaNetworkTokensAppId,
                "amexNetworkTokensRequestorId", amexNetworkTokensRequestorId,
                "amexNetworkTokensAppId", amexNetworkTokensAppId,
                "mastercardNetworkTokensRequestorId", mastercardNetworkTokensRequestorId,
                "mastercardNetworkTokensAppId", mastercardNetworkTokensAppId,
                "displayName", displayName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> accountUpdaterEnabled;

        private JsonNullable<String> accountUpdaterRequestEncryptionKey = JsonNullable.undefined();

        private JsonNullable<String> accountUpdaterRequestEncryptionKeyId = JsonNullable.undefined();

        private JsonNullable<String> accountUpdaterResponseDecryptionKey = JsonNullable.undefined();

        private JsonNullable<String> accountUpdaterResponseDecryptionKeyId = JsonNullable.undefined();

        private JsonNullable<Long> overCaptureAmount = JsonNullable.undefined();

        private JsonNullable<Long> overCapturePercentage = JsonNullable.undefined();

        private JsonNullable<String> loonClientKey = JsonNullable.undefined();

        private JsonNullable<String> loonSecretKey = JsonNullable.undefined();

        private JsonNullable<? extends List<CardScheme>> loonAcceptedSchemes = JsonNullable.undefined();

        private JsonNullable<String> visaNetworkTokensRequestorId = JsonNullable.undefined();

        private JsonNullable<String> visaNetworkTokensAppId = JsonNullable.undefined();

        private JsonNullable<String> amexNetworkTokensRequestorId = JsonNullable.undefined();

        private JsonNullable<String> amexNetworkTokensAppId = JsonNullable.undefined();

        private JsonNullable<String> mastercardNetworkTokensRequestorId = JsonNullable.undefined();

        private JsonNullable<String> mastercardNetworkTokensAppId = JsonNullable.undefined();

        private JsonNullable<String> displayName = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.
         */
        public Builder accountUpdaterEnabled(boolean accountUpdaterEnabled) {
            Utils.checkNotNull(accountUpdaterEnabled, "accountUpdaterEnabled");
            this.accountUpdaterEnabled = Optional.ofNullable(accountUpdaterEnabled);
            return this;
        }

        /**
         * Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.
         */
        public Builder accountUpdaterEnabled(Optional<Boolean> accountUpdaterEnabled) {
            Utils.checkNotNull(accountUpdaterEnabled, "accountUpdaterEnabled");
            this.accountUpdaterEnabled = accountUpdaterEnabled;
            return this;
        }


        /**
         * The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterRequestEncryptionKey(String accountUpdaterRequestEncryptionKey) {
            Utils.checkNotNull(accountUpdaterRequestEncryptionKey, "accountUpdaterRequestEncryptionKey");
            this.accountUpdaterRequestEncryptionKey = JsonNullable.of(accountUpdaterRequestEncryptionKey);
            return this;
        }

        /**
         * The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterRequestEncryptionKey(JsonNullable<String> accountUpdaterRequestEncryptionKey) {
            Utils.checkNotNull(accountUpdaterRequestEncryptionKey, "accountUpdaterRequestEncryptionKey");
            this.accountUpdaterRequestEncryptionKey = accountUpdaterRequestEncryptionKey;
            return this;
        }


        /**
         * The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterRequestEncryptionKeyId(String accountUpdaterRequestEncryptionKeyId) {
            Utils.checkNotNull(accountUpdaterRequestEncryptionKeyId, "accountUpdaterRequestEncryptionKeyId");
            this.accountUpdaterRequestEncryptionKeyId = JsonNullable.of(accountUpdaterRequestEncryptionKeyId);
            return this;
        }

        /**
         * The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterRequestEncryptionKeyId(JsonNullable<String> accountUpdaterRequestEncryptionKeyId) {
            Utils.checkNotNull(accountUpdaterRequestEncryptionKeyId, "accountUpdaterRequestEncryptionKeyId");
            this.accountUpdaterRequestEncryptionKeyId = accountUpdaterRequestEncryptionKeyId;
            return this;
        }


        /**
         * The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterResponseDecryptionKey(String accountUpdaterResponseDecryptionKey) {
            Utils.checkNotNull(accountUpdaterResponseDecryptionKey, "accountUpdaterResponseDecryptionKey");
            this.accountUpdaterResponseDecryptionKey = JsonNullable.of(accountUpdaterResponseDecryptionKey);
            return this;
        }

        /**
         * The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterResponseDecryptionKey(JsonNullable<String> accountUpdaterResponseDecryptionKey) {
            Utils.checkNotNull(accountUpdaterResponseDecryptionKey, "accountUpdaterResponseDecryptionKey");
            this.accountUpdaterResponseDecryptionKey = accountUpdaterResponseDecryptionKey;
            return this;
        }


        /**
         * The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterResponseDecryptionKeyId(String accountUpdaterResponseDecryptionKeyId) {
            Utils.checkNotNull(accountUpdaterResponseDecryptionKeyId, "accountUpdaterResponseDecryptionKeyId");
            this.accountUpdaterResponseDecryptionKeyId = JsonNullable.of(accountUpdaterResponseDecryptionKeyId);
            return this;
        }

        /**
         * The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
         */
        public Builder accountUpdaterResponseDecryptionKeyId(JsonNullable<String> accountUpdaterResponseDecryptionKeyId) {
            Utils.checkNotNull(accountUpdaterResponseDecryptionKeyId, "accountUpdaterResponseDecryptionKeyId");
            this.accountUpdaterResponseDecryptionKeyId = accountUpdaterResponseDecryptionKeyId;
            return this;
        }


        /**
         * The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.
         */
        public Builder overCaptureAmount(long overCaptureAmount) {
            Utils.checkNotNull(overCaptureAmount, "overCaptureAmount");
            this.overCaptureAmount = JsonNullable.of(overCaptureAmount);
            return this;
        }

        /**
         * The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.
         */
        public Builder overCaptureAmount(JsonNullable<Long> overCaptureAmount) {
            Utils.checkNotNull(overCaptureAmount, "overCaptureAmount");
            this.overCaptureAmount = overCaptureAmount;
            return this;
        }


        /**
         * The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.
         */
        public Builder overCapturePercentage(long overCapturePercentage) {
            Utils.checkNotNull(overCapturePercentage, "overCapturePercentage");
            this.overCapturePercentage = JsonNullable.of(overCapturePercentage);
            return this;
        }

        /**
         * The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.
         */
        public Builder overCapturePercentage(JsonNullable<Long> overCapturePercentage) {
            Utils.checkNotNull(overCapturePercentage, "overCapturePercentage");
            this.overCapturePercentage = overCapturePercentage;
            return this;
        }


        /**
         * Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
         */
        public Builder loonClientKey(String loonClientKey) {
            Utils.checkNotNull(loonClientKey, "loonClientKey");
            this.loonClientKey = JsonNullable.of(loonClientKey);
            return this;
        }

        /**
         * Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
         */
        public Builder loonClientKey(JsonNullable<String> loonClientKey) {
            Utils.checkNotNull(loonClientKey, "loonClientKey");
            this.loonClientKey = loonClientKey;
            return this;
        }


        /**
         * Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
         */
        public Builder loonSecretKey(String loonSecretKey) {
            Utils.checkNotNull(loonSecretKey, "loonSecretKey");
            this.loonSecretKey = JsonNullable.of(loonSecretKey);
            return this;
        }

        /**
         * Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
         */
        public Builder loonSecretKey(JsonNullable<String> loonSecretKey) {
            Utils.checkNotNull(loonSecretKey, "loonSecretKey");
            this.loonSecretKey = loonSecretKey;
            return this;
        }


        /**
         * Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
         */
        public Builder loonAcceptedSchemes(List<CardScheme> loonAcceptedSchemes) {
            Utils.checkNotNull(loonAcceptedSchemes, "loonAcceptedSchemes");
            this.loonAcceptedSchemes = JsonNullable.of(loonAcceptedSchemes);
            return this;
        }

        /**
         * Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
         */
        public Builder loonAcceptedSchemes(JsonNullable<? extends List<CardScheme>> loonAcceptedSchemes) {
            Utils.checkNotNull(loonAcceptedSchemes, "loonAcceptedSchemes");
            this.loonAcceptedSchemes = loonAcceptedSchemes;
            return this;
        }


        /**
         * Requestor ID provided for Visa after onboarding to use Network Tokens.
         */
        public Builder visaNetworkTokensRequestorId(String visaNetworkTokensRequestorId) {
            Utils.checkNotNull(visaNetworkTokensRequestorId, "visaNetworkTokensRequestorId");
            this.visaNetworkTokensRequestorId = JsonNullable.of(visaNetworkTokensRequestorId);
            return this;
        }

        /**
         * Requestor ID provided for Visa after onboarding to use Network Tokens.
         */
        public Builder visaNetworkTokensRequestorId(JsonNullable<String> visaNetworkTokensRequestorId) {
            Utils.checkNotNull(visaNetworkTokensRequestorId, "visaNetworkTokensRequestorId");
            this.visaNetworkTokensRequestorId = visaNetworkTokensRequestorId;
            return this;
        }


        /**
         * Application ID provided for Visa after onboarding to use Network Tokens.
         */
        public Builder visaNetworkTokensAppId(String visaNetworkTokensAppId) {
            Utils.checkNotNull(visaNetworkTokensAppId, "visaNetworkTokensAppId");
            this.visaNetworkTokensAppId = JsonNullable.of(visaNetworkTokensAppId);
            return this;
        }

        /**
         * Application ID provided for Visa after onboarding to use Network Tokens.
         */
        public Builder visaNetworkTokensAppId(JsonNullable<String> visaNetworkTokensAppId) {
            Utils.checkNotNull(visaNetworkTokensAppId, "visaNetworkTokensAppId");
            this.visaNetworkTokensAppId = visaNetworkTokensAppId;
            return this;
        }


        /**
         * Requestor ID provided for American Express after onboarding to use Network Tokens.
         */
        public Builder amexNetworkTokensRequestorId(String amexNetworkTokensRequestorId) {
            Utils.checkNotNull(amexNetworkTokensRequestorId, "amexNetworkTokensRequestorId");
            this.amexNetworkTokensRequestorId = JsonNullable.of(amexNetworkTokensRequestorId);
            return this;
        }

        /**
         * Requestor ID provided for American Express after onboarding to use Network Tokens.
         */
        public Builder amexNetworkTokensRequestorId(JsonNullable<String> amexNetworkTokensRequestorId) {
            Utils.checkNotNull(amexNetworkTokensRequestorId, "amexNetworkTokensRequestorId");
            this.amexNetworkTokensRequestorId = amexNetworkTokensRequestorId;
            return this;
        }


        /**
         * Application ID provided for American Express after onboarding to use Network Tokens.
         */
        public Builder amexNetworkTokensAppId(String amexNetworkTokensAppId) {
            Utils.checkNotNull(amexNetworkTokensAppId, "amexNetworkTokensAppId");
            this.amexNetworkTokensAppId = JsonNullable.of(amexNetworkTokensAppId);
            return this;
        }

        /**
         * Application ID provided for American Express after onboarding to use Network Tokens.
         */
        public Builder amexNetworkTokensAppId(JsonNullable<String> amexNetworkTokensAppId) {
            Utils.checkNotNull(amexNetworkTokensAppId, "amexNetworkTokensAppId");
            this.amexNetworkTokensAppId = amexNetworkTokensAppId;
            return this;
        }


        /**
         * Requestor ID provided for Mastercard after onboarding to use Network Tokens.
         */
        public Builder mastercardNetworkTokensRequestorId(String mastercardNetworkTokensRequestorId) {
            Utils.checkNotNull(mastercardNetworkTokensRequestorId, "mastercardNetworkTokensRequestorId");
            this.mastercardNetworkTokensRequestorId = JsonNullable.of(mastercardNetworkTokensRequestorId);
            return this;
        }

        /**
         * Requestor ID provided for Mastercard after onboarding to use Network Tokens.
         */
        public Builder mastercardNetworkTokensRequestorId(JsonNullable<String> mastercardNetworkTokensRequestorId) {
            Utils.checkNotNull(mastercardNetworkTokensRequestorId, "mastercardNetworkTokensRequestorId");
            this.mastercardNetworkTokensRequestorId = mastercardNetworkTokensRequestorId;
            return this;
        }


        /**
         * Application ID provided for Mastercard after onboarding to use Network Tokens.
         */
        public Builder mastercardNetworkTokensAppId(String mastercardNetworkTokensAppId) {
            Utils.checkNotNull(mastercardNetworkTokensAppId, "mastercardNetworkTokensAppId");
            this.mastercardNetworkTokensAppId = JsonNullable.of(mastercardNetworkTokensAppId);
            return this;
        }

        /**
         * Application ID provided for Mastercard after onboarding to use Network Tokens.
         */
        public Builder mastercardNetworkTokensAppId(JsonNullable<String> mastercardNetworkTokensAppId) {
            Utils.checkNotNull(mastercardNetworkTokensAppId, "mastercardNetworkTokensAppId");
            this.mastercardNetworkTokensAppId = mastercardNetworkTokensAppId;
            return this;
        }


        /**
         * The display name for the merchant account.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The display name for the merchant account.
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        public MerchantAccountUpdate build() {
            if (accountUpdaterEnabled == null) {
                accountUpdaterEnabled = _SINGLETON_VALUE_AccountUpdaterEnabled.value();
            }

            return new MerchantAccountUpdate(
                accountUpdaterEnabled, accountUpdaterRequestEncryptionKey, accountUpdaterRequestEncryptionKeyId,
                accountUpdaterResponseDecryptionKey, accountUpdaterResponseDecryptionKeyId, overCaptureAmount,
                overCapturePercentage, loonClientKey, loonSecretKey,
                loonAcceptedSchemes, visaNetworkTokensRequestorId, visaNetworkTokensAppId,
                amexNetworkTokensRequestorId, amexNetworkTokensAppId, mastercardNetworkTokensRequestorId,
                mastercardNetworkTokensAppId, displayName);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_AccountUpdaterEnabled =
                new LazySingletonValue<>(
                        "account_updater_enabled",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
