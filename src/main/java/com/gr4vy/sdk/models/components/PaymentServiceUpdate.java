/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PaymentServiceUpdate
 * 
 * <p>Request body for updating a Payment Service
 */
public class PaymentServiceUpdate {

    /**
     * The display name for the payment service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private JsonNullable<? extends List<VoidableField>> fields;

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reporting_fields")
    private JsonNullable<? extends List<VoidableField>> reportingFields;

    /**
     * Deprecated field used to define the order in which to process payment services
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    private JsonNullable<Long> position;

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accepted_currencies")
    private JsonNullable<? extends List<String>> acceptedCurrencies;

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accepted_countries")
    private JsonNullable<? extends List<String>> acceptedCountries;

    /**
     * Defines if this payment service is currently active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * Defines if this payment service has 3DS enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("three_d_secure_enabled")
    private JsonNullable<Boolean> threeDSecureEnabled;

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_profile")
    private JsonNullable<? extends Map<String, MerchantProfileScheme>> merchantProfile;

    /**
     * Defines if this payment service support payment method tokenization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_tokenization_enabled")
    private JsonNullable<Boolean> paymentMethodTokenizationEnabled;

    /**
     * Defines if this payment service supports network tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_tokens_enabled")
    private JsonNullable<Boolean> networkTokensEnabled;

    /**
     * Defines if this payment service is open loop.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("open_loop")
    private JsonNullable<Boolean> openLoop;

    /**
     * Defines if this payment service has settlement reporting enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_reporting_enabled")
    private Optional<Boolean> settlementReportingEnabled;

    @JsonCreator
    public PaymentServiceUpdate(
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("fields") JsonNullable<? extends List<VoidableField>> fields,
            @JsonProperty("reporting_fields") JsonNullable<? extends List<VoidableField>> reportingFields,
            @JsonProperty("position") JsonNullable<Long> position,
            @JsonProperty("accepted_currencies") JsonNullable<? extends List<String>> acceptedCurrencies,
            @JsonProperty("accepted_countries") JsonNullable<? extends List<String>> acceptedCountries,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("three_d_secure_enabled") JsonNullable<Boolean> threeDSecureEnabled,
            @JsonProperty("merchant_profile") JsonNullable<? extends Map<String, MerchantProfileScheme>> merchantProfile,
            @JsonProperty("payment_method_tokenization_enabled") JsonNullable<Boolean> paymentMethodTokenizationEnabled,
            @JsonProperty("network_tokens_enabled") JsonNullable<Boolean> networkTokensEnabled,
            @JsonProperty("open_loop") JsonNullable<Boolean> openLoop,
            @JsonProperty("settlement_reporting_enabled") Optional<Boolean> settlementReportingEnabled) {
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(reportingFields, "reportingFields");
        Utils.checkNotNull(position, "position");
        Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
        Utils.checkNotNull(acceptedCountries, "acceptedCountries");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
        Utils.checkNotNull(merchantProfile, "merchantProfile");
        Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
        Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
        Utils.checkNotNull(openLoop, "openLoop");
        Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
        this.displayName = displayName;
        this.fields = fields;
        this.reportingFields = reportingFields;
        this.position = position;
        this.acceptedCurrencies = acceptedCurrencies;
        this.acceptedCountries = acceptedCountries;
        this.active = active;
        this.threeDSecureEnabled = threeDSecureEnabled;
        this.merchantProfile = merchantProfile;
        this.paymentMethodTokenizationEnabled = paymentMethodTokenizationEnabled;
        this.networkTokensEnabled = networkTokensEnabled;
        this.openLoop = openLoop;
        this.settlementReportingEnabled = settlementReportingEnabled;
    }
    
    public PaymentServiceUpdate() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The display name for the payment service.
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<VoidableField>> fields() {
        return (JsonNullable<List<VoidableField>>) fields;
    }

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<VoidableField>> reportingFields() {
        return (JsonNullable<List<VoidableField>>) reportingFields;
    }

    /**
     * Deprecated field used to define the order in which to process payment services
     */
    @JsonIgnore
    public JsonNullable<Long> position() {
        return position;
    }

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> acceptedCurrencies() {
        return (JsonNullable<List<String>>) acceptedCurrencies;
    }

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> acceptedCountries() {
        return (JsonNullable<List<String>>) acceptedCountries;
    }

    /**
     * Defines if this payment service is currently active.
     */
    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * Defines if this payment service has 3DS enabled.
     */
    @JsonIgnore
    public JsonNullable<Boolean> threeDSecureEnabled() {
        return threeDSecureEnabled;
    }

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, MerchantProfileScheme>> merchantProfile() {
        return (JsonNullable<Map<String, MerchantProfileScheme>>) merchantProfile;
    }

    /**
     * Defines if this payment service support payment method tokenization.
     */
    @JsonIgnore
    public JsonNullable<Boolean> paymentMethodTokenizationEnabled() {
        return paymentMethodTokenizationEnabled;
    }

    /**
     * Defines if this payment service supports network tokens.
     */
    @JsonIgnore
    public JsonNullable<Boolean> networkTokensEnabled() {
        return networkTokensEnabled;
    }

    /**
     * Defines if this payment service is open loop.
     */
    @JsonIgnore
    public JsonNullable<Boolean> openLoop() {
        return openLoop;
    }

    /**
     * Defines if this payment service has settlement reporting enabled.
     */
    @JsonIgnore
    public Optional<Boolean> settlementReportingEnabled() {
        return settlementReportingEnabled;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The display name for the payment service.
     */
    public PaymentServiceUpdate withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The display name for the payment service.
     */
    public PaymentServiceUpdate withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentServiceUpdate withFields(List<VoidableField> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = JsonNullable.of(fields);
        return this;
    }

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentServiceUpdate withFields(JsonNullable<? extends List<VoidableField>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentServiceUpdate withReportingFields(List<VoidableField> reportingFields) {
        Utils.checkNotNull(reportingFields, "reportingFields");
        this.reportingFields = JsonNullable.of(reportingFields);
        return this;
    }

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentServiceUpdate withReportingFields(JsonNullable<? extends List<VoidableField>> reportingFields) {
        Utils.checkNotNull(reportingFields, "reportingFields");
        this.reportingFields = reportingFields;
        return this;
    }

    /**
     * Deprecated field used to define the order in which to process payment services
     */
    public PaymentServiceUpdate withPosition(long position) {
        Utils.checkNotNull(position, "position");
        this.position = JsonNullable.of(position);
        return this;
    }

    /**
     * Deprecated field used to define the order in which to process payment services
     */
    public PaymentServiceUpdate withPosition(JsonNullable<Long> position) {
        Utils.checkNotNull(position, "position");
        this.position = position;
        return this;
    }

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     */
    public PaymentServiceUpdate withAcceptedCurrencies(List<String> acceptedCurrencies) {
        Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
        this.acceptedCurrencies = JsonNullable.of(acceptedCurrencies);
        return this;
    }

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     */
    public PaymentServiceUpdate withAcceptedCurrencies(JsonNullable<? extends List<String>> acceptedCurrencies) {
        Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
        this.acceptedCurrencies = acceptedCurrencies;
        return this;
    }

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     */
    public PaymentServiceUpdate withAcceptedCountries(List<String> acceptedCountries) {
        Utils.checkNotNull(acceptedCountries, "acceptedCountries");
        this.acceptedCountries = JsonNullable.of(acceptedCountries);
        return this;
    }

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     */
    public PaymentServiceUpdate withAcceptedCountries(JsonNullable<? extends List<String>> acceptedCountries) {
        Utils.checkNotNull(acceptedCountries, "acceptedCountries");
        this.acceptedCountries = acceptedCountries;
        return this;
    }

    /**
     * Defines if this payment service is currently active.
     */
    public PaymentServiceUpdate withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    /**
     * Defines if this payment service is currently active.
     */
    public PaymentServiceUpdate withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Defines if this payment service has 3DS enabled.
     */
    public PaymentServiceUpdate withThreeDSecureEnabled(boolean threeDSecureEnabled) {
        Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
        this.threeDSecureEnabled = JsonNullable.of(threeDSecureEnabled);
        return this;
    }

    /**
     * Defines if this payment service has 3DS enabled.
     */
    public PaymentServiceUpdate withThreeDSecureEnabled(JsonNullable<Boolean> threeDSecureEnabled) {
        Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
        this.threeDSecureEnabled = threeDSecureEnabled;
        return this;
    }

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    public PaymentServiceUpdate withMerchantProfile(Map<String, MerchantProfileScheme> merchantProfile) {
        Utils.checkNotNull(merchantProfile, "merchantProfile");
        this.merchantProfile = JsonNullable.of(merchantProfile);
        return this;
    }

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    public PaymentServiceUpdate withMerchantProfile(JsonNullable<? extends Map<String, MerchantProfileScheme>> merchantProfile) {
        Utils.checkNotNull(merchantProfile, "merchantProfile");
        this.merchantProfile = merchantProfile;
        return this;
    }

    /**
     * Defines if this payment service support payment method tokenization.
     */
    public PaymentServiceUpdate withPaymentMethodTokenizationEnabled(boolean paymentMethodTokenizationEnabled) {
        Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
        this.paymentMethodTokenizationEnabled = JsonNullable.of(paymentMethodTokenizationEnabled);
        return this;
    }

    /**
     * Defines if this payment service support payment method tokenization.
     */
    public PaymentServiceUpdate withPaymentMethodTokenizationEnabled(JsonNullable<Boolean> paymentMethodTokenizationEnabled) {
        Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
        this.paymentMethodTokenizationEnabled = paymentMethodTokenizationEnabled;
        return this;
    }

    /**
     * Defines if this payment service supports network tokens.
     */
    public PaymentServiceUpdate withNetworkTokensEnabled(boolean networkTokensEnabled) {
        Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
        this.networkTokensEnabled = JsonNullable.of(networkTokensEnabled);
        return this;
    }

    /**
     * Defines if this payment service supports network tokens.
     */
    public PaymentServiceUpdate withNetworkTokensEnabled(JsonNullable<Boolean> networkTokensEnabled) {
        Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
        this.networkTokensEnabled = networkTokensEnabled;
        return this;
    }

    /**
     * Defines if this payment service is open loop.
     */
    public PaymentServiceUpdate withOpenLoop(boolean openLoop) {
        Utils.checkNotNull(openLoop, "openLoop");
        this.openLoop = JsonNullable.of(openLoop);
        return this;
    }

    /**
     * Defines if this payment service is open loop.
     */
    public PaymentServiceUpdate withOpenLoop(JsonNullable<Boolean> openLoop) {
        Utils.checkNotNull(openLoop, "openLoop");
        this.openLoop = openLoop;
        return this;
    }

    /**
     * Defines if this payment service has settlement reporting enabled.
     */
    public PaymentServiceUpdate withSettlementReportingEnabled(boolean settlementReportingEnabled) {
        Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
        this.settlementReportingEnabled = Optional.ofNullable(settlementReportingEnabled);
        return this;
    }

    /**
     * Defines if this payment service has settlement reporting enabled.
     */
    public PaymentServiceUpdate withSettlementReportingEnabled(Optional<Boolean> settlementReportingEnabled) {
        Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
        this.settlementReportingEnabled = settlementReportingEnabled;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentServiceUpdate other = (PaymentServiceUpdate) o;
        return 
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.reportingFields, other.reportingFields) &&
            Objects.deepEquals(this.position, other.position) &&
            Objects.deepEquals(this.acceptedCurrencies, other.acceptedCurrencies) &&
            Objects.deepEquals(this.acceptedCountries, other.acceptedCountries) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.threeDSecureEnabled, other.threeDSecureEnabled) &&
            Objects.deepEquals(this.merchantProfile, other.merchantProfile) &&
            Objects.deepEquals(this.paymentMethodTokenizationEnabled, other.paymentMethodTokenizationEnabled) &&
            Objects.deepEquals(this.networkTokensEnabled, other.networkTokensEnabled) &&
            Objects.deepEquals(this.openLoop, other.openLoop) &&
            Objects.deepEquals(this.settlementReportingEnabled, other.settlementReportingEnabled);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            displayName,
            fields,
            reportingFields,
            position,
            acceptedCurrencies,
            acceptedCountries,
            active,
            threeDSecureEnabled,
            merchantProfile,
            paymentMethodTokenizationEnabled,
            networkTokensEnabled,
            openLoop,
            settlementReportingEnabled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentServiceUpdate.class,
                "displayName", displayName,
                "fields", fields,
                "reportingFields", reportingFields,
                "position", position,
                "acceptedCurrencies", acceptedCurrencies,
                "acceptedCountries", acceptedCountries,
                "active", active,
                "threeDSecureEnabled", threeDSecureEnabled,
                "merchantProfile", merchantProfile,
                "paymentMethodTokenizationEnabled", paymentMethodTokenizationEnabled,
                "networkTokensEnabled", networkTokensEnabled,
                "openLoop", openLoop,
                "settlementReportingEnabled", settlementReportingEnabled);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> displayName = JsonNullable.undefined();
 
        private JsonNullable<? extends List<VoidableField>> fields = JsonNullable.undefined();
 
        private JsonNullable<? extends List<VoidableField>> reportingFields = JsonNullable.undefined();
 
        private JsonNullable<Long> position = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> acceptedCurrencies = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> acceptedCountries = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private JsonNullable<Boolean> threeDSecureEnabled = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, MerchantProfileScheme>> merchantProfile = JsonNullable.undefined();
 
        private JsonNullable<Boolean> paymentMethodTokenizationEnabled = JsonNullable.undefined();
 
        private JsonNullable<Boolean> networkTokensEnabled = JsonNullable.undefined();
 
        private JsonNullable<Boolean> openLoop = JsonNullable.undefined();
 
        private Optional<Boolean> settlementReportingEnabled;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The display name for the payment service.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The display name for the payment service.
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder fields(List<VoidableField> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = JsonNullable.of(fields);
            return this;
        }

        /**
         * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder fields(JsonNullable<? extends List<VoidableField>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder reportingFields(List<VoidableField> reportingFields) {
            Utils.checkNotNull(reportingFields, "reportingFields");
            this.reportingFields = JsonNullable.of(reportingFields);
            return this;
        }

        /**
         * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder reportingFields(JsonNullable<? extends List<VoidableField>> reportingFields) {
            Utils.checkNotNull(reportingFields, "reportingFields");
            this.reportingFields = reportingFields;
            return this;
        }

        /**
         * Deprecated field used to define the order in which to process payment services
         */
        public Builder position(long position) {
            Utils.checkNotNull(position, "position");
            this.position = JsonNullable.of(position);
            return this;
        }

        /**
         * Deprecated field used to define the order in which to process payment services
         */
        public Builder position(JsonNullable<Long> position) {
            Utils.checkNotNull(position, "position");
            this.position = position;
            return this;
        }

        /**
         * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
         */
        public Builder acceptedCurrencies(List<String> acceptedCurrencies) {
            Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
            this.acceptedCurrencies = JsonNullable.of(acceptedCurrencies);
            return this;
        }

        /**
         * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
         */
        public Builder acceptedCurrencies(JsonNullable<? extends List<String>> acceptedCurrencies) {
            Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
            this.acceptedCurrencies = acceptedCurrencies;
            return this;
        }

        /**
         * A list of countries for which this service is enabled, in ISO two-letter code format.
         */
        public Builder acceptedCountries(List<String> acceptedCountries) {
            Utils.checkNotNull(acceptedCountries, "acceptedCountries");
            this.acceptedCountries = JsonNullable.of(acceptedCountries);
            return this;
        }

        /**
         * A list of countries for which this service is enabled, in ISO two-letter code format.
         */
        public Builder acceptedCountries(JsonNullable<? extends List<String>> acceptedCountries) {
            Utils.checkNotNull(acceptedCountries, "acceptedCountries");
            this.acceptedCountries = acceptedCountries;
            return this;
        }

        /**
         * Defines if this payment service is currently active.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * Defines if this payment service is currently active.
         */
        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * Defines if this payment service has 3DS enabled.
         */
        public Builder threeDSecureEnabled(boolean threeDSecureEnabled) {
            Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
            this.threeDSecureEnabled = JsonNullable.of(threeDSecureEnabled);
            return this;
        }

        /**
         * Defines if this payment service has 3DS enabled.
         */
        public Builder threeDSecureEnabled(JsonNullable<Boolean> threeDSecureEnabled) {
            Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
            this.threeDSecureEnabled = threeDSecureEnabled;
            return this;
        }

        /**
         * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
         */
        public Builder merchantProfile(Map<String, MerchantProfileScheme> merchantProfile) {
            Utils.checkNotNull(merchantProfile, "merchantProfile");
            this.merchantProfile = JsonNullable.of(merchantProfile);
            return this;
        }

        /**
         * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
         */
        public Builder merchantProfile(JsonNullable<? extends Map<String, MerchantProfileScheme>> merchantProfile) {
            Utils.checkNotNull(merchantProfile, "merchantProfile");
            this.merchantProfile = merchantProfile;
            return this;
        }

        /**
         * Defines if this payment service support payment method tokenization.
         */
        public Builder paymentMethodTokenizationEnabled(boolean paymentMethodTokenizationEnabled) {
            Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
            this.paymentMethodTokenizationEnabled = JsonNullable.of(paymentMethodTokenizationEnabled);
            return this;
        }

        /**
         * Defines if this payment service support payment method tokenization.
         */
        public Builder paymentMethodTokenizationEnabled(JsonNullable<Boolean> paymentMethodTokenizationEnabled) {
            Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
            this.paymentMethodTokenizationEnabled = paymentMethodTokenizationEnabled;
            return this;
        }

        /**
         * Defines if this payment service supports network tokens.
         */
        public Builder networkTokensEnabled(boolean networkTokensEnabled) {
            Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
            this.networkTokensEnabled = JsonNullable.of(networkTokensEnabled);
            return this;
        }

        /**
         * Defines if this payment service supports network tokens.
         */
        public Builder networkTokensEnabled(JsonNullable<Boolean> networkTokensEnabled) {
            Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
            this.networkTokensEnabled = networkTokensEnabled;
            return this;
        }

        /**
         * Defines if this payment service is open loop.
         */
        public Builder openLoop(boolean openLoop) {
            Utils.checkNotNull(openLoop, "openLoop");
            this.openLoop = JsonNullable.of(openLoop);
            return this;
        }

        /**
         * Defines if this payment service is open loop.
         */
        public Builder openLoop(JsonNullable<Boolean> openLoop) {
            Utils.checkNotNull(openLoop, "openLoop");
            this.openLoop = openLoop;
            return this;
        }

        /**
         * Defines if this payment service has settlement reporting enabled.
         */
        public Builder settlementReportingEnabled(boolean settlementReportingEnabled) {
            Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
            this.settlementReportingEnabled = Optional.ofNullable(settlementReportingEnabled);
            return this;
        }

        /**
         * Defines if this payment service has settlement reporting enabled.
         */
        public Builder settlementReportingEnabled(Optional<Boolean> settlementReportingEnabled) {
            Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
            this.settlementReportingEnabled = settlementReportingEnabled;
            return this;
        }
        
        public PaymentServiceUpdate build() {
            if (settlementReportingEnabled == null) {
                settlementReportingEnabled = _SINGLETON_VALUE_SettlementReportingEnabled.value();
            }
            return new PaymentServiceUpdate(
                displayName,
                fields,
                reportingFields,
                position,
                acceptedCurrencies,
                acceptedCountries,
                active,
                threeDSecureEnabled,
                merchantProfile,
                paymentMethodTokenizationEnabled,
                networkTokensEnabled,
                openLoop,
                settlementReportingEnabled);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_SettlementReportingEnabled =
                new LazySingletonValue<>(
                        "settlement_reporting_enabled",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
