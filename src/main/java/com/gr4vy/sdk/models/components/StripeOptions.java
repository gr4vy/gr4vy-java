/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class StripeOptions {
    /**
     * Passes the `error_on_requires_action` option to the Stripe API. Set to true to fail the payment
     * attempt if it transitions into requires_action. Use this parameter for simpler integrations that
     * don't handle customer actions, such as saving cards without authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_on_requires_action")
    private JsonNullable<Boolean> errorOnRequiresAction;

    /**
     * Stripe options to support Stripe Connect
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripe_connect")
    private JsonNullable<? extends StripeConnectOptions> stripeConnect;

    @JsonCreator
    public StripeOptions(
            @JsonProperty("error_on_requires_action") JsonNullable<Boolean> errorOnRequiresAction,
            @JsonProperty("stripe_connect") JsonNullable<? extends StripeConnectOptions> stripeConnect) {
        Utils.checkNotNull(errorOnRequiresAction, "errorOnRequiresAction");
        Utils.checkNotNull(stripeConnect, "stripeConnect");
        this.errorOnRequiresAction = errorOnRequiresAction;
        this.stripeConnect = stripeConnect;
    }
    
    public StripeOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Passes the `error_on_requires_action` option to the Stripe API. Set to true to fail the payment
     * attempt if it transitions into requires_action. Use this parameter for simpler integrations that
     * don't handle customer actions, such as saving cards without authentication.
     */
    @JsonIgnore
    public JsonNullable<Boolean> errorOnRequiresAction() {
        return errorOnRequiresAction;
    }

    /**
     * Stripe options to support Stripe Connect
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StripeConnectOptions> stripeConnect() {
        return (JsonNullable<StripeConnectOptions>) stripeConnect;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Passes the `error_on_requires_action` option to the Stripe API. Set to true to fail the payment
     * attempt if it transitions into requires_action. Use this parameter for simpler integrations that
     * don't handle customer actions, such as saving cards without authentication.
     */
    public StripeOptions withErrorOnRequiresAction(boolean errorOnRequiresAction) {
        Utils.checkNotNull(errorOnRequiresAction, "errorOnRequiresAction");
        this.errorOnRequiresAction = JsonNullable.of(errorOnRequiresAction);
        return this;
    }

    /**
     * Passes the `error_on_requires_action` option to the Stripe API. Set to true to fail the payment
     * attempt if it transitions into requires_action. Use this parameter for simpler integrations that
     * don't handle customer actions, such as saving cards without authentication.
     */
    public StripeOptions withErrorOnRequiresAction(JsonNullable<Boolean> errorOnRequiresAction) {
        Utils.checkNotNull(errorOnRequiresAction, "errorOnRequiresAction");
        this.errorOnRequiresAction = errorOnRequiresAction;
        return this;
    }

    /**
     * Stripe options to support Stripe Connect
     */
    public StripeOptions withStripeConnect(StripeConnectOptions stripeConnect) {
        Utils.checkNotNull(stripeConnect, "stripeConnect");
        this.stripeConnect = JsonNullable.of(stripeConnect);
        return this;
    }

    /**
     * Stripe options to support Stripe Connect
     */
    public StripeOptions withStripeConnect(JsonNullable<? extends StripeConnectOptions> stripeConnect) {
        Utils.checkNotNull(stripeConnect, "stripeConnect");
        this.stripeConnect = stripeConnect;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StripeOptions other = (StripeOptions) o;
        return 
            Utils.enhancedDeepEquals(this.errorOnRequiresAction, other.errorOnRequiresAction) &&
            Utils.enhancedDeepEquals(this.stripeConnect, other.stripeConnect);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            errorOnRequiresAction, stripeConnect);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StripeOptions.class,
                "errorOnRequiresAction", errorOnRequiresAction,
                "stripeConnect", stripeConnect);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Boolean> errorOnRequiresAction = JsonNullable.undefined();

        private JsonNullable<? extends StripeConnectOptions> stripeConnect = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Passes the `error_on_requires_action` option to the Stripe API. Set to true to fail the payment
         * attempt if it transitions into requires_action. Use this parameter for simpler integrations that
         * don't handle customer actions, such as saving cards without authentication.
         */
        public Builder errorOnRequiresAction(boolean errorOnRequiresAction) {
            Utils.checkNotNull(errorOnRequiresAction, "errorOnRequiresAction");
            this.errorOnRequiresAction = JsonNullable.of(errorOnRequiresAction);
            return this;
        }

        /**
         * Passes the `error_on_requires_action` option to the Stripe API. Set to true to fail the payment
         * attempt if it transitions into requires_action. Use this parameter for simpler integrations that
         * don't handle customer actions, such as saving cards without authentication.
         */
        public Builder errorOnRequiresAction(JsonNullable<Boolean> errorOnRequiresAction) {
            Utils.checkNotNull(errorOnRequiresAction, "errorOnRequiresAction");
            this.errorOnRequiresAction = errorOnRequiresAction;
            return this;
        }


        /**
         * Stripe options to support Stripe Connect
         */
        public Builder stripeConnect(StripeConnectOptions stripeConnect) {
            Utils.checkNotNull(stripeConnect, "stripeConnect");
            this.stripeConnect = JsonNullable.of(stripeConnect);
            return this;
        }

        /**
         * Stripe options to support Stripe Connect
         */
        public Builder stripeConnect(JsonNullable<? extends StripeConnectOptions> stripeConnect) {
            Utils.checkNotNull(stripeConnect, "stripeConnect");
            this.stripeConnect = stripeConnect;
            return this;
        }

        public StripeOptions build() {

            return new StripeOptions(
                errorOnRequiresAction, stripeConnect);
        }

    }
}
