/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class DlocalUPIWalletOptions {
    /**
     * Passes `wallet.name` to the dLocal API for those connectors that need it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Passes `wallet.email` to the dLocal API for those connectors that need it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * Passes `wallet.token` to the dLocal API for those connectors that need it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    private JsonNullable<String> token;

    /**
     * Passes `wallet.username` to the dLocal API for those connectors that need it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<String> username;

    /**
     * Passes `wallet.verify` to the dLocal API for those connectors that need it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verify")
    private JsonNullable<Boolean> verify;

    /**
     * Passes `wallet.recurring_info` to the dLocal API for those connectors that need it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring_info")
    private JsonNullable<? extends DlocalUPIRecurringInfoOptions> recurringInfo;

    @JsonCreator
    public DlocalUPIWalletOptions(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("token") JsonNullable<String> token,
            @JsonProperty("username") JsonNullable<String> username,
            @JsonProperty("verify") JsonNullable<Boolean> verify,
            @JsonProperty("recurring_info") JsonNullable<? extends DlocalUPIRecurringInfoOptions> recurringInfo) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(verify, "verify");
        Utils.checkNotNull(recurringInfo, "recurringInfo");
        this.name = name;
        this.email = email;
        this.token = token;
        this.username = username;
        this.verify = verify;
        this.recurringInfo = recurringInfo;
    }
    
    public DlocalUPIWalletOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Passes `wallet.name` to the dLocal API for those connectors that need it.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * Passes `wallet.email` to the dLocal API for those connectors that need it.
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * Passes `wallet.token` to the dLocal API for those connectors that need it.
     */
    @JsonIgnore
    public JsonNullable<String> token() {
        return token;
    }

    /**
     * Passes `wallet.username` to the dLocal API for those connectors that need it.
     */
    @JsonIgnore
    public JsonNullable<String> username() {
        return username;
    }

    /**
     * Passes `wallet.verify` to the dLocal API for those connectors that need it.
     */
    @JsonIgnore
    public JsonNullable<Boolean> verify() {
        return verify;
    }

    /**
     * Passes `wallet.recurring_info` to the dLocal API for those connectors that need it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<DlocalUPIRecurringInfoOptions> recurringInfo() {
        return (JsonNullable<DlocalUPIRecurringInfoOptions>) recurringInfo;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Passes `wallet.name` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Passes `wallet.name` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Passes `wallet.email` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * Passes `wallet.email` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Passes `wallet.token` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = JsonNullable.of(token);
        return this;
    }

    /**
     * Passes `wallet.token` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withToken(JsonNullable<String> token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * Passes `wallet.username` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    /**
     * Passes `wallet.username` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withUsername(JsonNullable<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Passes `wallet.verify` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withVerify(boolean verify) {
        Utils.checkNotNull(verify, "verify");
        this.verify = JsonNullable.of(verify);
        return this;
    }

    /**
     * Passes `wallet.verify` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withVerify(JsonNullable<Boolean> verify) {
        Utils.checkNotNull(verify, "verify");
        this.verify = verify;
        return this;
    }

    /**
     * Passes `wallet.recurring_info` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withRecurringInfo(DlocalUPIRecurringInfoOptions recurringInfo) {
        Utils.checkNotNull(recurringInfo, "recurringInfo");
        this.recurringInfo = JsonNullable.of(recurringInfo);
        return this;
    }

    /**
     * Passes `wallet.recurring_info` to the dLocal API for those connectors that need it.
     */
    public DlocalUPIWalletOptions withRecurringInfo(JsonNullable<? extends DlocalUPIRecurringInfoOptions> recurringInfo) {
        Utils.checkNotNull(recurringInfo, "recurringInfo");
        this.recurringInfo = recurringInfo;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DlocalUPIWalletOptions other = (DlocalUPIWalletOptions) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.verify, other.verify) &&
            Utils.enhancedDeepEquals(this.recurringInfo, other.recurringInfo);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, email, token,
            username, verify, recurringInfo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DlocalUPIWalletOptions.class,
                "name", name,
                "email", email,
                "token", token,
                "username", username,
                "verify", verify,
                "recurringInfo", recurringInfo);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> email = JsonNullable.undefined();

        private JsonNullable<String> token = JsonNullable.undefined();

        private JsonNullable<String> username = JsonNullable.undefined();

        private JsonNullable<Boolean> verify = JsonNullable.undefined();

        private JsonNullable<? extends DlocalUPIRecurringInfoOptions> recurringInfo = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Passes `wallet.name` to the dLocal API for those connectors that need it.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Passes `wallet.name` to the dLocal API for those connectors that need it.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Passes `wallet.email` to the dLocal API for those connectors that need it.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * Passes `wallet.email` to the dLocal API for those connectors that need it.
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * Passes `wallet.token` to the dLocal API for those connectors that need it.
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = JsonNullable.of(token);
            return this;
        }

        /**
         * Passes `wallet.token` to the dLocal API for those connectors that need it.
         */
        public Builder token(JsonNullable<String> token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }


        /**
         * Passes `wallet.username` to the dLocal API for those connectors that need it.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        /**
         * Passes `wallet.username` to the dLocal API for those connectors that need it.
         */
        public Builder username(JsonNullable<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }


        /**
         * Passes `wallet.verify` to the dLocal API for those connectors that need it.
         */
        public Builder verify(boolean verify) {
            Utils.checkNotNull(verify, "verify");
            this.verify = JsonNullable.of(verify);
            return this;
        }

        /**
         * Passes `wallet.verify` to the dLocal API for those connectors that need it.
         */
        public Builder verify(JsonNullable<Boolean> verify) {
            Utils.checkNotNull(verify, "verify");
            this.verify = verify;
            return this;
        }


        /**
         * Passes `wallet.recurring_info` to the dLocal API for those connectors that need it.
         */
        public Builder recurringInfo(DlocalUPIRecurringInfoOptions recurringInfo) {
            Utils.checkNotNull(recurringInfo, "recurringInfo");
            this.recurringInfo = JsonNullable.of(recurringInfo);
            return this;
        }

        /**
         * Passes `wallet.recurring_info` to the dLocal API for those connectors that need it.
         */
        public Builder recurringInfo(JsonNullable<? extends DlocalUPIRecurringInfoOptions> recurringInfo) {
            Utils.checkNotNull(recurringInfo, "recurringInfo");
            this.recurringInfo = recurringInfo;
            return this;
        }

        public DlocalUPIWalletOptions build() {

            return new DlocalUPIWalletOptions(
                name, email, token,
                username, verify, recurringInfo);
        }

    }
}
