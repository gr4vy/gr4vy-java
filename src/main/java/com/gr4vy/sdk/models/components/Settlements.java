/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * Settlements
 * 
 * <p>A list of settlement records for a transaction.
 */
public class Settlements {
    /**
     * The list of settlement objects.
     */
    @JsonProperty("items")
    private List<Settlement> items;

    @JsonCreator
    public Settlements(
            @JsonProperty("items") List<Settlement> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
    }

    /**
     * The list of settlement objects.
     */
    @JsonIgnore
    public List<Settlement> items() {
        return items;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The list of settlement objects.
     */
    public Settlements withItems(List<Settlement> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Settlements other = (Settlements) o;
        return 
            Utils.enhancedDeepEquals(this.items, other.items);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            items);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Settlements.class,
                "items", items);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<Settlement> items;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The list of settlement objects.
         */
        public Builder items(List<Settlement> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        public Settlements build() {

            return new Settlements(
                items);
        }

    }
}
