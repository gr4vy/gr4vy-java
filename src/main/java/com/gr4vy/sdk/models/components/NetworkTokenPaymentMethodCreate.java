/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

public class NetworkTokenPaymentMethodCreate {

    /**
     * Always `network-token`.
     */
    @JsonProperty("method")
    private String method;

    /**
     * The scheme token.
     */
    @JsonProperty("token")
    private String token;

    /**
     * The expiration date of the token.
     */
    @JsonProperty("expiration_date")
    private String expirationDate;

    /**
     * The payment cryptogram for the network token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cryptogram")
    private JsonNullable<String> cryptogram;

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    private JsonNullable<String> redirectUrl;

    /**
     * The optional source of the decrypted device token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_source")
    private JsonNullable<? extends CardSource> cardSource;

    /**
     * The original card scheme for which the token was generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_scheme")
    private JsonNullable<? extends CardScheme> cardScheme;

    /**
     * The last 4 digits of the original card used to generate the token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_suffix")
    private JsonNullable<String> cardSuffix;

    /**
     * The card holder name associated to the original card for the token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardholder_name")
    private JsonNullable<String> cardholderName;

    /**
     * The ecommerce indicator for the token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eci")
    private JsonNullable<String> eci;

    @JsonCreator
    public NetworkTokenPaymentMethodCreate(
            @JsonProperty("token") String token,
            @JsonProperty("expiration_date") String expirationDate,
            @JsonProperty("cryptogram") JsonNullable<String> cryptogram,
            @JsonProperty("redirect_url") JsonNullable<String> redirectUrl,
            @JsonProperty("card_source") JsonNullable<? extends CardSource> cardSource,
            @JsonProperty("card_scheme") JsonNullable<? extends CardScheme> cardScheme,
            @JsonProperty("card_suffix") JsonNullable<String> cardSuffix,
            @JsonProperty("cardholder_name") JsonNullable<String> cardholderName,
            @JsonProperty("eci") JsonNullable<String> eci) {
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(cryptogram, "cryptogram");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(cardSource, "cardSource");
        Utils.checkNotNull(cardScheme, "cardScheme");
        Utils.checkNotNull(cardSuffix, "cardSuffix");
        Utils.checkNotNull(cardholderName, "cardholderName");
        Utils.checkNotNull(eci, "eci");
        this.method = Builder._SINGLETON_VALUE_Method.value();
        this.token = token;
        this.expirationDate = expirationDate;
        this.cryptogram = cryptogram;
        this.redirectUrl = redirectUrl;
        this.cardSource = cardSource;
        this.cardScheme = cardScheme;
        this.cardSuffix = cardSuffix;
        this.cardholderName = cardholderName;
        this.eci = eci;
    }
    
    public NetworkTokenPaymentMethodCreate(
            String token,
            String expirationDate) {
        this(token, expirationDate, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Always `network-token`.
     */
    @JsonIgnore
    public String method() {
        return method;
    }

    /**
     * The scheme token.
     */
    @JsonIgnore
    public String token() {
        return token;
    }

    /**
     * The expiration date of the token.
     */
    @JsonIgnore
    public String expirationDate() {
        return expirationDate;
    }

    /**
     * The payment cryptogram for the network token.
     */
    @JsonIgnore
    public JsonNullable<String> cryptogram() {
        return cryptogram;
    }

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    /**
     * The optional source of the decrypted device token.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardSource> cardSource() {
        return (JsonNullable<CardSource>) cardSource;
    }

    /**
     * The original card scheme for which the token was generated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardScheme> cardScheme() {
        return (JsonNullable<CardScheme>) cardScheme;
    }

    /**
     * The last 4 digits of the original card used to generate the token.
     */
    @JsonIgnore
    public JsonNullable<String> cardSuffix() {
        return cardSuffix;
    }

    /**
     * The card holder name associated to the original card for the token.
     */
    @JsonIgnore
    public JsonNullable<String> cardholderName() {
        return cardholderName;
    }

    /**
     * The ecommerce indicator for the token.
     */
    @JsonIgnore
    public JsonNullable<String> eci() {
        return eci;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The scheme token.
     */
    public NetworkTokenPaymentMethodCreate withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * The expiration date of the token.
     */
    public NetworkTokenPaymentMethodCreate withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The payment cryptogram for the network token.
     */
    public NetworkTokenPaymentMethodCreate withCryptogram(String cryptogram) {
        Utils.checkNotNull(cryptogram, "cryptogram");
        this.cryptogram = JsonNullable.of(cryptogram);
        return this;
    }

    /**
     * The payment cryptogram for the network token.
     */
    public NetworkTokenPaymentMethodCreate withCryptogram(JsonNullable<String> cryptogram) {
        Utils.checkNotNull(cryptogram, "cryptogram");
        this.cryptogram = cryptogram;
        return this;
    }

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    public NetworkTokenPaymentMethodCreate withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    public NetworkTokenPaymentMethodCreate withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * The optional source of the decrypted device token.
     */
    public NetworkTokenPaymentMethodCreate withCardSource(CardSource cardSource) {
        Utils.checkNotNull(cardSource, "cardSource");
        this.cardSource = JsonNullable.of(cardSource);
        return this;
    }

    /**
     * The optional source of the decrypted device token.
     */
    public NetworkTokenPaymentMethodCreate withCardSource(JsonNullable<? extends CardSource> cardSource) {
        Utils.checkNotNull(cardSource, "cardSource");
        this.cardSource = cardSource;
        return this;
    }

    /**
     * The original card scheme for which the token was generated.
     */
    public NetworkTokenPaymentMethodCreate withCardScheme(CardScheme cardScheme) {
        Utils.checkNotNull(cardScheme, "cardScheme");
        this.cardScheme = JsonNullable.of(cardScheme);
        return this;
    }

    /**
     * The original card scheme for which the token was generated.
     */
    public NetworkTokenPaymentMethodCreate withCardScheme(JsonNullable<? extends CardScheme> cardScheme) {
        Utils.checkNotNull(cardScheme, "cardScheme");
        this.cardScheme = cardScheme;
        return this;
    }

    /**
     * The last 4 digits of the original card used to generate the token.
     */
    public NetworkTokenPaymentMethodCreate withCardSuffix(String cardSuffix) {
        Utils.checkNotNull(cardSuffix, "cardSuffix");
        this.cardSuffix = JsonNullable.of(cardSuffix);
        return this;
    }

    /**
     * The last 4 digits of the original card used to generate the token.
     */
    public NetworkTokenPaymentMethodCreate withCardSuffix(JsonNullable<String> cardSuffix) {
        Utils.checkNotNull(cardSuffix, "cardSuffix");
        this.cardSuffix = cardSuffix;
        return this;
    }

    /**
     * The card holder name associated to the original card for the token.
     */
    public NetworkTokenPaymentMethodCreate withCardholderName(String cardholderName) {
        Utils.checkNotNull(cardholderName, "cardholderName");
        this.cardholderName = JsonNullable.of(cardholderName);
        return this;
    }

    /**
     * The card holder name associated to the original card for the token.
     */
    public NetworkTokenPaymentMethodCreate withCardholderName(JsonNullable<String> cardholderName) {
        Utils.checkNotNull(cardholderName, "cardholderName");
        this.cardholderName = cardholderName;
        return this;
    }

    /**
     * The ecommerce indicator for the token.
     */
    public NetworkTokenPaymentMethodCreate withEci(String eci) {
        Utils.checkNotNull(eci, "eci");
        this.eci = JsonNullable.of(eci);
        return this;
    }

    /**
     * The ecommerce indicator for the token.
     */
    public NetworkTokenPaymentMethodCreate withEci(JsonNullable<String> eci) {
        Utils.checkNotNull(eci, "eci");
        this.eci = eci;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NetworkTokenPaymentMethodCreate other = (NetworkTokenPaymentMethodCreate) o;
        return 
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.expirationDate, other.expirationDate) &&
            Utils.enhancedDeepEquals(this.cryptogram, other.cryptogram) &&
            Utils.enhancedDeepEquals(this.redirectUrl, other.redirectUrl) &&
            Utils.enhancedDeepEquals(this.cardSource, other.cardSource) &&
            Utils.enhancedDeepEquals(this.cardScheme, other.cardScheme) &&
            Utils.enhancedDeepEquals(this.cardSuffix, other.cardSuffix) &&
            Utils.enhancedDeepEquals(this.cardholderName, other.cardholderName) &&
            Utils.enhancedDeepEquals(this.eci, other.eci);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            method,
            token,
            expirationDate,
            cryptogram,
            redirectUrl,
            cardSource,
            cardScheme,
            cardSuffix,
            cardholderName,
            eci);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NetworkTokenPaymentMethodCreate.class,
                "method", method,
                "token", token,
                "expirationDate", expirationDate,
                "cryptogram", cryptogram,
                "redirectUrl", redirectUrl,
                "cardSource", cardSource,
                "cardScheme", cardScheme,
                "cardSuffix", cardSuffix,
                "cardholderName", cardholderName,
                "eci", eci);
    }
    
    public final static class Builder {
 
        private String token;
 
        private String expirationDate;
 
        private JsonNullable<String> cryptogram = JsonNullable.undefined();
 
        private JsonNullable<String> redirectUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends CardSource> cardSource = JsonNullable.undefined();
 
        private JsonNullable<? extends CardScheme> cardScheme = JsonNullable.undefined();
 
        private JsonNullable<String> cardSuffix = JsonNullable.undefined();
 
        private JsonNullable<String> cardholderName = JsonNullable.undefined();
 
        private JsonNullable<String> eci = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The scheme token.
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }

        /**
         * The expiration date of the token.
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The payment cryptogram for the network token.
         */
        public Builder cryptogram(String cryptogram) {
            Utils.checkNotNull(cryptogram, "cryptogram");
            this.cryptogram = JsonNullable.of(cryptogram);
            return this;
        }

        /**
         * The payment cryptogram for the network token.
         */
        public Builder cryptogram(JsonNullable<String> cryptogram) {
            Utils.checkNotNull(cryptogram, "cryptogram");
            this.cryptogram = cryptogram;
            return this;
        }

        /**
         * The URL to redirect a user back to after the complete 3DS in browser.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * The URL to redirect a user back to after the complete 3DS in browser.
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * The optional source of the decrypted device token.
         */
        public Builder cardSource(CardSource cardSource) {
            Utils.checkNotNull(cardSource, "cardSource");
            this.cardSource = JsonNullable.of(cardSource);
            return this;
        }

        /**
         * The optional source of the decrypted device token.
         */
        public Builder cardSource(JsonNullable<? extends CardSource> cardSource) {
            Utils.checkNotNull(cardSource, "cardSource");
            this.cardSource = cardSource;
            return this;
        }

        /**
         * The original card scheme for which the token was generated.
         */
        public Builder cardScheme(CardScheme cardScheme) {
            Utils.checkNotNull(cardScheme, "cardScheme");
            this.cardScheme = JsonNullable.of(cardScheme);
            return this;
        }

        /**
         * The original card scheme for which the token was generated.
         */
        public Builder cardScheme(JsonNullable<? extends CardScheme> cardScheme) {
            Utils.checkNotNull(cardScheme, "cardScheme");
            this.cardScheme = cardScheme;
            return this;
        }

        /**
         * The last 4 digits of the original card used to generate the token.
         */
        public Builder cardSuffix(String cardSuffix) {
            Utils.checkNotNull(cardSuffix, "cardSuffix");
            this.cardSuffix = JsonNullable.of(cardSuffix);
            return this;
        }

        /**
         * The last 4 digits of the original card used to generate the token.
         */
        public Builder cardSuffix(JsonNullable<String> cardSuffix) {
            Utils.checkNotNull(cardSuffix, "cardSuffix");
            this.cardSuffix = cardSuffix;
            return this;
        }

        /**
         * The card holder name associated to the original card for the token.
         */
        public Builder cardholderName(String cardholderName) {
            Utils.checkNotNull(cardholderName, "cardholderName");
            this.cardholderName = JsonNullable.of(cardholderName);
            return this;
        }

        /**
         * The card holder name associated to the original card for the token.
         */
        public Builder cardholderName(JsonNullable<String> cardholderName) {
            Utils.checkNotNull(cardholderName, "cardholderName");
            this.cardholderName = cardholderName;
            return this;
        }

        /**
         * The ecommerce indicator for the token.
         */
        public Builder eci(String eci) {
            Utils.checkNotNull(eci, "eci");
            this.eci = JsonNullable.of(eci);
            return this;
        }

        /**
         * The ecommerce indicator for the token.
         */
        public Builder eci(JsonNullable<String> eci) {
            Utils.checkNotNull(eci, "eci");
            this.eci = eci;
            return this;
        }
        
        public NetworkTokenPaymentMethodCreate build() {
            return new NetworkTokenPaymentMethodCreate(
                token,
                expirationDate,
                cryptogram,
                redirectUrl,
                cardSource,
                cardScheme,
                cardSuffix,
                cardholderName,
                eci);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"network-token\"",
                        new TypeReference<String>() {});
    }
}
