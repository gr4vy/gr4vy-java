/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class ForterAntiFraudOptionsDiscount {
    /**
     * The coupon code applied to the order.
     */
    @JsonProperty("coupon_code_used")
    private String couponCodeUsed;

    /**
     * The type of discount applied to the order.
     */
    @JsonProperty("discount_type")
    private String discountType;

    /**
     * Monetary details of the discount amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon_discount_amount")
    private JsonNullable<? extends ForterAntiFraudOptionsDiscountCouponDiscountAmount> couponDiscountAmount;

    /**
     * The percentage discount applied via the coupon.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon_discount_percent")
    private JsonNullable<String> couponDiscountPercent;

    @JsonCreator
    public ForterAntiFraudOptionsDiscount(
            @JsonProperty("coupon_code_used") String couponCodeUsed,
            @JsonProperty("discount_type") String discountType,
            @JsonProperty("coupon_discount_amount") JsonNullable<? extends ForterAntiFraudOptionsDiscountCouponDiscountAmount> couponDiscountAmount,
            @JsonProperty("coupon_discount_percent") JsonNullable<String> couponDiscountPercent) {
        Utils.checkNotNull(couponCodeUsed, "couponCodeUsed");
        Utils.checkNotNull(discountType, "discountType");
        Utils.checkNotNull(couponDiscountAmount, "couponDiscountAmount");
        Utils.checkNotNull(couponDiscountPercent, "couponDiscountPercent");
        this.couponCodeUsed = couponCodeUsed;
        this.discountType = discountType;
        this.couponDiscountAmount = couponDiscountAmount;
        this.couponDiscountPercent = couponDiscountPercent;
    }
    
    public ForterAntiFraudOptionsDiscount(
            String couponCodeUsed,
            String discountType) {
        this(couponCodeUsed, discountType, JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The coupon code applied to the order.
     */
    @JsonIgnore
    public String couponCodeUsed() {
        return couponCodeUsed;
    }

    /**
     * The type of discount applied to the order.
     */
    @JsonIgnore
    public String discountType() {
        return discountType;
    }

    /**
     * Monetary details of the discount amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ForterAntiFraudOptionsDiscountCouponDiscountAmount> couponDiscountAmount() {
        return (JsonNullable<ForterAntiFraudOptionsDiscountCouponDiscountAmount>) couponDiscountAmount;
    }

    /**
     * The percentage discount applied via the coupon.
     */
    @JsonIgnore
    public JsonNullable<String> couponDiscountPercent() {
        return couponDiscountPercent;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The coupon code applied to the order.
     */
    public ForterAntiFraudOptionsDiscount withCouponCodeUsed(String couponCodeUsed) {
        Utils.checkNotNull(couponCodeUsed, "couponCodeUsed");
        this.couponCodeUsed = couponCodeUsed;
        return this;
    }

    /**
     * The type of discount applied to the order.
     */
    public ForterAntiFraudOptionsDiscount withDiscountType(String discountType) {
        Utils.checkNotNull(discountType, "discountType");
        this.discountType = discountType;
        return this;
    }

    /**
     * Monetary details of the discount amount.
     */
    public ForterAntiFraudOptionsDiscount withCouponDiscountAmount(ForterAntiFraudOptionsDiscountCouponDiscountAmount couponDiscountAmount) {
        Utils.checkNotNull(couponDiscountAmount, "couponDiscountAmount");
        this.couponDiscountAmount = JsonNullable.of(couponDiscountAmount);
        return this;
    }

    /**
     * Monetary details of the discount amount.
     */
    public ForterAntiFraudOptionsDiscount withCouponDiscountAmount(JsonNullable<? extends ForterAntiFraudOptionsDiscountCouponDiscountAmount> couponDiscountAmount) {
        Utils.checkNotNull(couponDiscountAmount, "couponDiscountAmount");
        this.couponDiscountAmount = couponDiscountAmount;
        return this;
    }

    /**
     * The percentage discount applied via the coupon.
     */
    public ForterAntiFraudOptionsDiscount withCouponDiscountPercent(String couponDiscountPercent) {
        Utils.checkNotNull(couponDiscountPercent, "couponDiscountPercent");
        this.couponDiscountPercent = JsonNullable.of(couponDiscountPercent);
        return this;
    }

    /**
     * The percentage discount applied via the coupon.
     */
    public ForterAntiFraudOptionsDiscount withCouponDiscountPercent(JsonNullable<String> couponDiscountPercent) {
        Utils.checkNotNull(couponDiscountPercent, "couponDiscountPercent");
        this.couponDiscountPercent = couponDiscountPercent;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ForterAntiFraudOptionsDiscount other = (ForterAntiFraudOptionsDiscount) o;
        return 
            Utils.enhancedDeepEquals(this.couponCodeUsed, other.couponCodeUsed) &&
            Utils.enhancedDeepEquals(this.discountType, other.discountType) &&
            Utils.enhancedDeepEquals(this.couponDiscountAmount, other.couponDiscountAmount) &&
            Utils.enhancedDeepEquals(this.couponDiscountPercent, other.couponDiscountPercent);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            couponCodeUsed, discountType, couponDiscountAmount,
            couponDiscountPercent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ForterAntiFraudOptionsDiscount.class,
                "couponCodeUsed", couponCodeUsed,
                "discountType", discountType,
                "couponDiscountAmount", couponDiscountAmount,
                "couponDiscountPercent", couponDiscountPercent);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String couponCodeUsed;

        private String discountType;

        private JsonNullable<? extends ForterAntiFraudOptionsDiscountCouponDiscountAmount> couponDiscountAmount = JsonNullable.undefined();

        private JsonNullable<String> couponDiscountPercent = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The coupon code applied to the order.
         */
        public Builder couponCodeUsed(String couponCodeUsed) {
            Utils.checkNotNull(couponCodeUsed, "couponCodeUsed");
            this.couponCodeUsed = couponCodeUsed;
            return this;
        }


        /**
         * The type of discount applied to the order.
         */
        public Builder discountType(String discountType) {
            Utils.checkNotNull(discountType, "discountType");
            this.discountType = discountType;
            return this;
        }


        /**
         * Monetary details of the discount amount.
         */
        public Builder couponDiscountAmount(ForterAntiFraudOptionsDiscountCouponDiscountAmount couponDiscountAmount) {
            Utils.checkNotNull(couponDiscountAmount, "couponDiscountAmount");
            this.couponDiscountAmount = JsonNullable.of(couponDiscountAmount);
            return this;
        }

        /**
         * Monetary details of the discount amount.
         */
        public Builder couponDiscountAmount(JsonNullable<? extends ForterAntiFraudOptionsDiscountCouponDiscountAmount> couponDiscountAmount) {
            Utils.checkNotNull(couponDiscountAmount, "couponDiscountAmount");
            this.couponDiscountAmount = couponDiscountAmount;
            return this;
        }


        /**
         * The percentage discount applied via the coupon.
         */
        public Builder couponDiscountPercent(String couponDiscountPercent) {
            Utils.checkNotNull(couponDiscountPercent, "couponDiscountPercent");
            this.couponDiscountPercent = JsonNullable.of(couponDiscountPercent);
            return this;
        }

        /**
         * The percentage discount applied via the coupon.
         */
        public Builder couponDiscountPercent(JsonNullable<String> couponDiscountPercent) {
            Utils.checkNotNull(couponDiscountPercent, "couponDiscountPercent");
            this.couponDiscountPercent = couponDiscountPercent;
            return this;
        }

        public ForterAntiFraudOptionsDiscount build() {

            return new ForterAntiFraudOptionsDiscount(
                couponCodeUsed, discountType, couponDiscountAmount,
                couponDiscountPercent);
        }

    }
}
