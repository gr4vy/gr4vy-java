/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

public class GooglePaySession {

    /**
     * The gateway ID for the merchant as assigned by our platform.
     */
    @JsonProperty("gateway_merchant_id")
    private String gatewayMerchantId;

    /**
     * The session token for Google Pay.
     */
    @JsonProperty("token")
    private String token;

    @JsonCreator
    public GooglePaySession(
            @JsonProperty("gateway_merchant_id") String gatewayMerchantId,
            @JsonProperty("token") String token) {
        Utils.checkNotNull(gatewayMerchantId, "gatewayMerchantId");
        Utils.checkNotNull(token, "token");
        this.gatewayMerchantId = gatewayMerchantId;
        this.token = token;
    }

    /**
     * The gateway ID for the merchant as assigned by our platform.
     */
    @JsonIgnore
    public String gatewayMerchantId() {
        return gatewayMerchantId;
    }

    /**
     * The session token for Google Pay.
     */
    @JsonIgnore
    public String token() {
        return token;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The gateway ID for the merchant as assigned by our platform.
     */
    public GooglePaySession withGatewayMerchantId(String gatewayMerchantId) {
        Utils.checkNotNull(gatewayMerchantId, "gatewayMerchantId");
        this.gatewayMerchantId = gatewayMerchantId;
        return this;
    }

    /**
     * The session token for Google Pay.
     */
    public GooglePaySession withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GooglePaySession other = (GooglePaySession) o;
        return 
            Utils.enhancedDeepEquals(this.gatewayMerchantId, other.gatewayMerchantId) &&
            Utils.enhancedDeepEquals(this.token, other.token);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            gatewayMerchantId,
            token);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GooglePaySession.class,
                "gatewayMerchantId", gatewayMerchantId,
                "token", token);
    }
    
    public final static class Builder {
 
        private String gatewayMerchantId;
 
        private String token;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The gateway ID for the merchant as assigned by our platform.
         */
        public Builder gatewayMerchantId(String gatewayMerchantId) {
            Utils.checkNotNull(gatewayMerchantId, "gatewayMerchantId");
            this.gatewayMerchantId = gatewayMerchantId;
            return this;
        }

        /**
         * The session token for Google Pay.
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }
        
        public GooglePaySession build() {
            return new GooglePaySession(
                gatewayMerchantId,
                token);
        }
    }
}
