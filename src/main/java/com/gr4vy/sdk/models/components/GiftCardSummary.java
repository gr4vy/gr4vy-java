/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class GiftCardSummary {

    /**
     * Always `gift-card`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the gift card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * The first 6 digits of the full gift card number.
     */
    @JsonProperty("bin")
    private String bin;

    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    @JsonProperty("sub_bin")
    private String subBin;

    /**
     * The last 4 digits for the gift card.
     */
    @JsonProperty("last4")
    private String last4;

    /**
     * The ISO-4217 currency code that this gift card has a balance for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<String> currency;

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration_date")
    private JsonNullable<OffsetDateTime> expirationDate;

    /**
     * The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<Long> balance;

    /**
     * If the last balance update failed, this will contain the internal code for this error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance_error_code")
    private JsonNullable<? extends GiftCardErrorCode> balanceErrorCode;

    /**
     * If the last balance update failed, this will contain the the raw error code received from the gift card provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance_raw_error_code")
    private JsonNullable<String> balanceRawErrorCode;

    /**
     * If the last balance update failed, this will contain the the raw error message received from the gift card provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance_raw_error_message")
    private JsonNullable<String> balanceRawErrorMessage;

    @JsonCreator
    public GiftCardSummary(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("bin") String bin,
            @JsonProperty("sub_bin") String subBin,
            @JsonProperty("last4") String last4,
            @JsonProperty("currency") JsonNullable<String> currency,
            @JsonProperty("expiration_date") JsonNullable<OffsetDateTime> expirationDate,
            @JsonProperty("balance") JsonNullable<Long> balance,
            @JsonProperty("balance_error_code") JsonNullable<? extends GiftCardErrorCode> balanceErrorCode,
            @JsonProperty("balance_raw_error_code") JsonNullable<String> balanceRawErrorCode,
            @JsonProperty("balance_raw_error_message") JsonNullable<String> balanceRawErrorMessage) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(bin, "bin");
        Utils.checkNotNull(subBin, "subBin");
        Utils.checkNotNull(last4, "last4");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(balanceErrorCode, "balanceErrorCode");
        Utils.checkNotNull(balanceRawErrorCode, "balanceRawErrorCode");
        Utils.checkNotNull(balanceRawErrorMessage, "balanceRawErrorMessage");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.bin = bin;
        this.subBin = subBin;
        this.last4 = last4;
        this.currency = currency;
        this.expirationDate = expirationDate;
        this.balance = balance;
        this.balanceErrorCode = balanceErrorCode;
        this.balanceRawErrorCode = balanceRawErrorCode;
        this.balanceRawErrorMessage = balanceRawErrorMessage;
    }
    
    public GiftCardSummary(
            String merchantAccountId,
            String bin,
            String subBin,
            String last4) {
        this(JsonNullable.undefined(), merchantAccountId, bin, subBin, last4, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Always `gift-card`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the gift card.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * The first 6 digits of the full gift card number.
     */
    @JsonIgnore
    public String bin() {
        return bin;
    }

    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    @JsonIgnore
    public String subBin() {
        return subBin;
    }

    /**
     * The last 4 digits for the gift card.
     */
    @JsonIgnore
    public String last4() {
        return last4;
    }

    /**
     * The ISO-4217 currency code that this gift card has a balance for.
     */
    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> expirationDate() {
        return expirationDate;
    }

    /**
     * The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
     */
    @JsonIgnore
    public JsonNullable<Long> balance() {
        return balance;
    }

    /**
     * If the last balance update failed, this will contain the internal code for this error.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GiftCardErrorCode> balanceErrorCode() {
        return (JsonNullable<GiftCardErrorCode>) balanceErrorCode;
    }

    /**
     * If the last balance update failed, this will contain the the raw error code received from the gift card provider.
     */
    @JsonIgnore
    public JsonNullable<String> balanceRawErrorCode() {
        return balanceRawErrorCode;
    }

    /**
     * If the last balance update failed, this will contain the the raw error message received from the gift card provider.
     */
    @JsonIgnore
    public JsonNullable<String> balanceRawErrorMessage() {
        return balanceRawErrorMessage;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the gift card.
     */
    public GiftCardSummary withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The ID for the gift card.
     */
    public GiftCardSummary withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    public GiftCardSummary withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * The first 6 digits of the full gift card number.
     */
    public GiftCardSummary withBin(String bin) {
        Utils.checkNotNull(bin, "bin");
        this.bin = bin;
        return this;
    }

    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    public GiftCardSummary withSubBin(String subBin) {
        Utils.checkNotNull(subBin, "subBin");
        this.subBin = subBin;
        return this;
    }

    /**
     * The last 4 digits for the gift card.
     */
    public GiftCardSummary withLast4(String last4) {
        Utils.checkNotNull(last4, "last4");
        this.last4 = last4;
        return this;
    }

    /**
     * The ISO-4217 currency code that this gift card has a balance for.
     */
    public GiftCardSummary withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The ISO-4217 currency code that this gift card has a balance for.
     */
    public GiftCardSummary withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
     */
    public GiftCardSummary withExpirationDate(OffsetDateTime expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = JsonNullable.of(expirationDate);
        return this;
    }

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
     */
    public GiftCardSummary withExpirationDate(JsonNullable<OffsetDateTime> expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
     */
    public GiftCardSummary withBalance(long balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

    /**
     * The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
     */
    public GiftCardSummary withBalance(JsonNullable<Long> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * If the last balance update failed, this will contain the internal code for this error.
     */
    public GiftCardSummary withBalanceErrorCode(GiftCardErrorCode balanceErrorCode) {
        Utils.checkNotNull(balanceErrorCode, "balanceErrorCode");
        this.balanceErrorCode = JsonNullable.of(balanceErrorCode);
        return this;
    }

    /**
     * If the last balance update failed, this will contain the internal code for this error.
     */
    public GiftCardSummary withBalanceErrorCode(JsonNullable<? extends GiftCardErrorCode> balanceErrorCode) {
        Utils.checkNotNull(balanceErrorCode, "balanceErrorCode");
        this.balanceErrorCode = balanceErrorCode;
        return this;
    }

    /**
     * If the last balance update failed, this will contain the the raw error code received from the gift card provider.
     */
    public GiftCardSummary withBalanceRawErrorCode(String balanceRawErrorCode) {
        Utils.checkNotNull(balanceRawErrorCode, "balanceRawErrorCode");
        this.balanceRawErrorCode = JsonNullable.of(balanceRawErrorCode);
        return this;
    }

    /**
     * If the last balance update failed, this will contain the the raw error code received from the gift card provider.
     */
    public GiftCardSummary withBalanceRawErrorCode(JsonNullable<String> balanceRawErrorCode) {
        Utils.checkNotNull(balanceRawErrorCode, "balanceRawErrorCode");
        this.balanceRawErrorCode = balanceRawErrorCode;
        return this;
    }

    /**
     * If the last balance update failed, this will contain the the raw error message received from the gift card provider.
     */
    public GiftCardSummary withBalanceRawErrorMessage(String balanceRawErrorMessage) {
        Utils.checkNotNull(balanceRawErrorMessage, "balanceRawErrorMessage");
        this.balanceRawErrorMessage = JsonNullable.of(balanceRawErrorMessage);
        return this;
    }

    /**
     * If the last balance update failed, this will contain the the raw error message received from the gift card provider.
     */
    public GiftCardSummary withBalanceRawErrorMessage(JsonNullable<String> balanceRawErrorMessage) {
        Utils.checkNotNull(balanceRawErrorMessage, "balanceRawErrorMessage");
        this.balanceRawErrorMessage = balanceRawErrorMessage;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GiftCardSummary other = (GiftCardSummary) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Utils.enhancedDeepEquals(this.bin, other.bin) &&
            Utils.enhancedDeepEquals(this.subBin, other.subBin) &&
            Utils.enhancedDeepEquals(this.last4, other.last4) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.expirationDate, other.expirationDate) &&
            Utils.enhancedDeepEquals(this.balance, other.balance) &&
            Utils.enhancedDeepEquals(this.balanceErrorCode, other.balanceErrorCode) &&
            Utils.enhancedDeepEquals(this.balanceRawErrorCode, other.balanceRawErrorCode) &&
            Utils.enhancedDeepEquals(this.balanceRawErrorMessage, other.balanceRawErrorMessage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            id,
            merchantAccountId,
            bin,
            subBin,
            last4,
            currency,
            expirationDate,
            balance,
            balanceErrorCode,
            balanceRawErrorCode,
            balanceRawErrorMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GiftCardSummary.class,
                "type", type,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "bin", bin,
                "subBin", subBin,
                "last4", last4,
                "currency", currency,
                "expirationDate", expirationDate,
                "balance", balance,
                "balanceErrorCode", balanceErrorCode,
                "balanceRawErrorCode", balanceRawErrorCode,
                "balanceRawErrorMessage", balanceRawErrorMessage);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private String merchantAccountId;
 
        private String bin;
 
        private String subBin;
 
        private String last4;
 
        private JsonNullable<String> currency = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> expirationDate = JsonNullable.undefined();
 
        private JsonNullable<Long> balance = JsonNullable.undefined();
 
        private JsonNullable<? extends GiftCardErrorCode> balanceErrorCode = JsonNullable.undefined();
 
        private JsonNullable<String> balanceRawErrorCode = JsonNullable.undefined();
 
        private JsonNullable<String> balanceRawErrorMessage = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the gift card.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID for the gift card.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID of the merchant account this buyer belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        /**
         * The first 6 digits of the full gift card number.
         */
        public Builder bin(String bin) {
            Utils.checkNotNull(bin, "bin");
            this.bin = bin;
            return this;
        }

        /**
         * The 3 digits after the `bin` of the full gift card number.
         */
        public Builder subBin(String subBin) {
            Utils.checkNotNull(subBin, "subBin");
            this.subBin = subBin;
            return this;
        }

        /**
         * The last 4 digits for the gift card.
         */
        public Builder last4(String last4) {
            Utils.checkNotNull(last4, "last4");
            this.last4 = last4;
            return this;
        }

        /**
         * The ISO-4217 currency code that this gift card has a balance for.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The ISO-4217 currency code that this gift card has a balance for.
         */
        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
         */
        public Builder expirationDate(OffsetDateTime expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = JsonNullable.of(expirationDate);
            return this;
        }

        /**
         * The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
         */
        public Builder expirationDate(JsonNullable<OffsetDateTime> expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
         */
        public Builder balance(long balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
         */
        public Builder balance(JsonNullable<Long> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * If the last balance update failed, this will contain the internal code for this error.
         */
        public Builder balanceErrorCode(GiftCardErrorCode balanceErrorCode) {
            Utils.checkNotNull(balanceErrorCode, "balanceErrorCode");
            this.balanceErrorCode = JsonNullable.of(balanceErrorCode);
            return this;
        }

        /**
         * If the last balance update failed, this will contain the internal code for this error.
         */
        public Builder balanceErrorCode(JsonNullable<? extends GiftCardErrorCode> balanceErrorCode) {
            Utils.checkNotNull(balanceErrorCode, "balanceErrorCode");
            this.balanceErrorCode = balanceErrorCode;
            return this;
        }

        /**
         * If the last balance update failed, this will contain the the raw error code received from the gift card provider.
         */
        public Builder balanceRawErrorCode(String balanceRawErrorCode) {
            Utils.checkNotNull(balanceRawErrorCode, "balanceRawErrorCode");
            this.balanceRawErrorCode = JsonNullable.of(balanceRawErrorCode);
            return this;
        }

        /**
         * If the last balance update failed, this will contain the the raw error code received from the gift card provider.
         */
        public Builder balanceRawErrorCode(JsonNullable<String> balanceRawErrorCode) {
            Utils.checkNotNull(balanceRawErrorCode, "balanceRawErrorCode");
            this.balanceRawErrorCode = balanceRawErrorCode;
            return this;
        }

        /**
         * If the last balance update failed, this will contain the the raw error message received from the gift card provider.
         */
        public Builder balanceRawErrorMessage(String balanceRawErrorMessage) {
            Utils.checkNotNull(balanceRawErrorMessage, "balanceRawErrorMessage");
            this.balanceRawErrorMessage = JsonNullable.of(balanceRawErrorMessage);
            return this;
        }

        /**
         * If the last balance update failed, this will contain the the raw error message received from the gift card provider.
         */
        public Builder balanceRawErrorMessage(JsonNullable<String> balanceRawErrorMessage) {
            Utils.checkNotNull(balanceRawErrorMessage, "balanceRawErrorMessage");
            this.balanceRawErrorMessage = balanceRawErrorMessage;
            return this;
        }
        
        public GiftCardSummary build() {
            return new GiftCardSummary(
                id,
                merchantAccountId,
                bin,
                subBin,
                last4,
                currency,
                expirationDate,
                balance,
                balanceErrorCode,
                balanceRawErrorCode,
                balanceRawErrorMessage);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"gift-card\"",
                        new TypeReference<Optional<String>>() {});
    }
}
