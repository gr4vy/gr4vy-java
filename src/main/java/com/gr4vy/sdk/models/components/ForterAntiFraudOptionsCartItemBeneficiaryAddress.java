/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class ForterAntiFraudOptionsCartItemBeneficiaryAddress {
    /**
     * The country code of the beneficiary's address.
     */
    @JsonProperty("country")
    private String country;

    /**
     * First line of the beneficiary's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address1")
    private JsonNullable<String> address1;

    /**
     * Second line of the beneficiary's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address2")
    private JsonNullable<String> address2;

    /**
     * Zip or postal code of the beneficiary's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private JsonNullable<String> zip;

    /**
     * State or region of the beneficiary's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private JsonNullable<String> region;

    /**
     * Company name associated with the beneficiary's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private JsonNullable<String> company;

    /**
     * City of the beneficiary's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    @JsonCreator
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress(
            @JsonProperty("country") String country,
            @JsonProperty("address1") JsonNullable<String> address1,
            @JsonProperty("address2") JsonNullable<String> address2,
            @JsonProperty("zip") JsonNullable<String> zip,
            @JsonProperty("region") JsonNullable<String> region,
            @JsonProperty("company") JsonNullable<String> company,
            @JsonProperty("city") JsonNullable<String> city) {
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(address1, "address1");
        Utils.checkNotNull(address2, "address2");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(city, "city");
        this.country = country;
        this.address1 = address1;
        this.address2 = address2;
        this.zip = zip;
        this.region = region;
        this.company = company;
        this.city = city;
    }
    
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress(
            String country) {
        this(country, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The country code of the beneficiary's address.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * First line of the beneficiary's address.
     */
    @JsonIgnore
    public JsonNullable<String> address1() {
        return address1;
    }

    /**
     * Second line of the beneficiary's address.
     */
    @JsonIgnore
    public JsonNullable<String> address2() {
        return address2;
    }

    /**
     * Zip or postal code of the beneficiary's address.
     */
    @JsonIgnore
    public JsonNullable<String> zip() {
        return zip;
    }

    /**
     * State or region of the beneficiary's address.
     */
    @JsonIgnore
    public JsonNullable<String> region() {
        return region;
    }

    /**
     * Company name associated with the beneficiary's address.
     */
    @JsonIgnore
    public JsonNullable<String> company() {
        return company;
    }

    /**
     * City of the beneficiary's address.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The country code of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * First line of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withAddress1(String address1) {
        Utils.checkNotNull(address1, "address1");
        this.address1 = JsonNullable.of(address1);
        return this;
    }

    /**
     * First line of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withAddress1(JsonNullable<String> address1) {
        Utils.checkNotNull(address1, "address1");
        this.address1 = address1;
        return this;
    }

    /**
     * Second line of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withAddress2(String address2) {
        Utils.checkNotNull(address2, "address2");
        this.address2 = JsonNullable.of(address2);
        return this;
    }

    /**
     * Second line of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withAddress2(JsonNullable<String> address2) {
        Utils.checkNotNull(address2, "address2");
        this.address2 = address2;
        return this;
    }

    /**
     * Zip or postal code of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = JsonNullable.of(zip);
        return this;
    }

    /**
     * Zip or postal code of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withZip(JsonNullable<String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    /**
     * State or region of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = JsonNullable.of(region);
        return this;
    }

    /**
     * State or region of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withRegion(JsonNullable<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Company name associated with the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = JsonNullable.of(company);
        return this;
    }

    /**
     * Company name associated with the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withCompany(JsonNullable<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * City of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * City of the beneficiary's address.
     */
    public ForterAntiFraudOptionsCartItemBeneficiaryAddress withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ForterAntiFraudOptionsCartItemBeneficiaryAddress other = (ForterAntiFraudOptionsCartItemBeneficiaryAddress) o;
        return 
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.address1, other.address1) &&
            Utils.enhancedDeepEquals(this.address2, other.address2) &&
            Utils.enhancedDeepEquals(this.zip, other.zip) &&
            Utils.enhancedDeepEquals(this.region, other.region) &&
            Utils.enhancedDeepEquals(this.company, other.company) &&
            Utils.enhancedDeepEquals(this.city, other.city);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            country, address1, address2,
            zip, region, company,
            city);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ForterAntiFraudOptionsCartItemBeneficiaryAddress.class,
                "country", country,
                "address1", address1,
                "address2", address2,
                "zip", zip,
                "region", region,
                "company", company,
                "city", city);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String country;

        private JsonNullable<String> address1 = JsonNullable.undefined();

        private JsonNullable<String> address2 = JsonNullable.undefined();

        private JsonNullable<String> zip = JsonNullable.undefined();

        private JsonNullable<String> region = JsonNullable.undefined();

        private JsonNullable<String> company = JsonNullable.undefined();

        private JsonNullable<String> city = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The country code of the beneficiary's address.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * First line of the beneficiary's address.
         */
        public Builder address1(String address1) {
            Utils.checkNotNull(address1, "address1");
            this.address1 = JsonNullable.of(address1);
            return this;
        }

        /**
         * First line of the beneficiary's address.
         */
        public Builder address1(JsonNullable<String> address1) {
            Utils.checkNotNull(address1, "address1");
            this.address1 = address1;
            return this;
        }


        /**
         * Second line of the beneficiary's address.
         */
        public Builder address2(String address2) {
            Utils.checkNotNull(address2, "address2");
            this.address2 = JsonNullable.of(address2);
            return this;
        }

        /**
         * Second line of the beneficiary's address.
         */
        public Builder address2(JsonNullable<String> address2) {
            Utils.checkNotNull(address2, "address2");
            this.address2 = address2;
            return this;
        }


        /**
         * Zip or postal code of the beneficiary's address.
         */
        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = JsonNullable.of(zip);
            return this;
        }

        /**
         * Zip or postal code of the beneficiary's address.
         */
        public Builder zip(JsonNullable<String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }


        /**
         * State or region of the beneficiary's address.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = JsonNullable.of(region);
            return this;
        }

        /**
         * State or region of the beneficiary's address.
         */
        public Builder region(JsonNullable<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }


        /**
         * Company name associated with the beneficiary's address.
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = JsonNullable.of(company);
            return this;
        }

        /**
         * Company name associated with the beneficiary's address.
         */
        public Builder company(JsonNullable<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }


        /**
         * City of the beneficiary's address.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * City of the beneficiary's address.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public ForterAntiFraudOptionsCartItemBeneficiaryAddress build() {

            return new ForterAntiFraudOptionsCartItemBeneficiaryAddress(
                country, address1, address2,
                zip, region, company,
                city);
        }

    }
}
