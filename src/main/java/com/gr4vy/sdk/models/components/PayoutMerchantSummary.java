/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PayoutMerchantSummary
 * 
 * <p>PayoutMerchantSummary
 * 
 * <p>Represents a summary of a merchant.
 */
public class PayoutMerchantSummary {

    /**
     * Always `merchant`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The name of the merchant.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Unique value which identifies a merchant for processing transactions, also known as a MID.
     */
    @JsonProperty("identification_number")
    private String identificationNumber;

    /**
     * The phone number for the merchant which should be formatted according to the E164 number standard.
     */
    @JsonProperty("phone_number")
    private String phoneNumber;

    /**
     * Merchant website URL.
     */
    @JsonProperty("url")
    private String url;

    /**
     * Value to explain charges or payments on bank statements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statement_descriptor")
    private JsonNullable<String> statementDescriptor;

    /**
     * Merchant classification for the type of goods or services it provides.
     */
    @JsonProperty("merchant_category_code")
    private String merchantCategoryCode;

    /**
     * The address for the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private JsonNullable<? extends Address> address;

    @JsonCreator
    public PayoutMerchantSummary(
            @JsonProperty("name") String name,
            @JsonProperty("identification_number") String identificationNumber,
            @JsonProperty("phone_number") String phoneNumber,
            @JsonProperty("url") String url,
            @JsonProperty("statement_descriptor") JsonNullable<String> statementDescriptor,
            @JsonProperty("merchant_category_code") String merchantCategoryCode,
            @JsonProperty("address") JsonNullable<? extends Address> address) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(identificationNumber, "identificationNumber");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        Utils.checkNotNull(merchantCategoryCode, "merchantCategoryCode");
        Utils.checkNotNull(address, "address");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.name = name;
        this.identificationNumber = identificationNumber;
        this.phoneNumber = phoneNumber;
        this.url = url;
        this.statementDescriptor = statementDescriptor;
        this.merchantCategoryCode = merchantCategoryCode;
        this.address = address;
    }
    
    public PayoutMerchantSummary(
            String name,
            String identificationNumber,
            String phoneNumber,
            String url,
            String merchantCategoryCode) {
        this(name, identificationNumber, phoneNumber, url, JsonNullable.undefined(), merchantCategoryCode, JsonNullable.undefined());
    }

    /**
     * Always `merchant`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The name of the merchant.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Unique value which identifies a merchant for processing transactions, also known as a MID.
     */
    @JsonIgnore
    public String identificationNumber() {
        return identificationNumber;
    }

    /**
     * The phone number for the merchant which should be formatted according to the E164 number standard.
     */
    @JsonIgnore
    public String phoneNumber() {
        return phoneNumber;
    }

    /**
     * Merchant website URL.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * Value to explain charges or payments on bank statements.
     */
    @JsonIgnore
    public JsonNullable<String> statementDescriptor() {
        return statementDescriptor;
    }

    /**
     * Merchant classification for the type of goods or services it provides.
     */
    @JsonIgnore
    public String merchantCategoryCode() {
        return merchantCategoryCode;
    }

    /**
     * The address for the merchant.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Address> address() {
        return (JsonNullable<Address>) address;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the merchant.
     */
    public PayoutMerchantSummary withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Unique value which identifies a merchant for processing transactions, also known as a MID.
     */
    public PayoutMerchantSummary withIdentificationNumber(String identificationNumber) {
        Utils.checkNotNull(identificationNumber, "identificationNumber");
        this.identificationNumber = identificationNumber;
        return this;
    }

    /**
     * The phone number for the merchant which should be formatted according to the E164 number standard.
     */
    public PayoutMerchantSummary withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Merchant website URL.
     */
    public PayoutMerchantSummary withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Value to explain charges or payments on bank statements.
     */
    public PayoutMerchantSummary withStatementDescriptor(String statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = JsonNullable.of(statementDescriptor);
        return this;
    }

    /**
     * Value to explain charges or payments on bank statements.
     */
    public PayoutMerchantSummary withStatementDescriptor(JsonNullable<String> statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = statementDescriptor;
        return this;
    }

    /**
     * Merchant classification for the type of goods or services it provides.
     */
    public PayoutMerchantSummary withMerchantCategoryCode(String merchantCategoryCode) {
        Utils.checkNotNull(merchantCategoryCode, "merchantCategoryCode");
        this.merchantCategoryCode = merchantCategoryCode;
        return this;
    }

    /**
     * The address for the merchant.
     */
    public PayoutMerchantSummary withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = JsonNullable.of(address);
        return this;
    }

    /**
     * The address for the merchant.
     */
    public PayoutMerchantSummary withAddress(JsonNullable<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayoutMerchantSummary other = (PayoutMerchantSummary) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.identificationNumber, other.identificationNumber) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.statementDescriptor, other.statementDescriptor) &&
            Utils.enhancedDeepEquals(this.merchantCategoryCode, other.merchantCategoryCode) &&
            Utils.enhancedDeepEquals(this.address, other.address);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            name,
            identificationNumber,
            phoneNumber,
            url,
            statementDescriptor,
            merchantCategoryCode,
            address);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayoutMerchantSummary.class,
                "type", type,
                "name", name,
                "identificationNumber", identificationNumber,
                "phoneNumber", phoneNumber,
                "url", url,
                "statementDescriptor", statementDescriptor,
                "merchantCategoryCode", merchantCategoryCode,
                "address", address);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String identificationNumber;
 
        private String phoneNumber;
 
        private String url;
 
        private JsonNullable<String> statementDescriptor = JsonNullable.undefined();
 
        private String merchantCategoryCode;
 
        private JsonNullable<? extends Address> address = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the merchant.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Unique value which identifies a merchant for processing transactions, also known as a MID.
         */
        public Builder identificationNumber(String identificationNumber) {
            Utils.checkNotNull(identificationNumber, "identificationNumber");
            this.identificationNumber = identificationNumber;
            return this;
        }

        /**
         * The phone number for the merchant which should be formatted according to the E164 number standard.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Merchant website URL.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Value to explain charges or payments on bank statements.
         */
        public Builder statementDescriptor(String statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = JsonNullable.of(statementDescriptor);
            return this;
        }

        /**
         * Value to explain charges or payments on bank statements.
         */
        public Builder statementDescriptor(JsonNullable<String> statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = statementDescriptor;
            return this;
        }

        /**
         * Merchant classification for the type of goods or services it provides.
         */
        public Builder merchantCategoryCode(String merchantCategoryCode) {
            Utils.checkNotNull(merchantCategoryCode, "merchantCategoryCode");
            this.merchantCategoryCode = merchantCategoryCode;
            return this;
        }

        /**
         * The address for the merchant.
         */
        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = JsonNullable.of(address);
            return this;
        }

        /**
         * The address for the merchant.
         */
        public Builder address(JsonNullable<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }
        
        public PayoutMerchantSummary build() {
            return new PayoutMerchantSummary(
                name,
                identificationNumber,
                phoneNumber,
                url,
                statementDescriptor,
                merchantCategoryCode,
                address);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"merchant\"",
                        new TypeReference<Optional<String>>() {});
    }
}
