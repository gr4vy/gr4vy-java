/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CreateSession
 * 
 * <p>The session data received from the payment service.
 */
public class CreateSession {

    /**
     * Always `payment-service-session`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonProperty("status")
    private CreateSessionStatus status;

    /**
     * A generic error code that may be returned when the session could not be generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * The HTTP status code received from the payment service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_code")
    private JsonNullable<Long> statusCode;

    /**
     * The JSON response body received from the payment service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_body")
    private JsonNullable<? extends Map<String, Object>> responseBody;

    @JsonCreator
    public CreateSession(
            @JsonProperty("status") CreateSessionStatus status,
            @JsonProperty("code") JsonNullable<String> code,
            @JsonProperty("status_code") JsonNullable<Long> statusCode,
            @JsonProperty("response_body") JsonNullable<? extends Map<String, Object>> responseBody) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(responseBody, "responseBody");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.status = status;
        this.code = code;
        this.statusCode = statusCode;
        this.responseBody = responseBody;
    }
    
    public CreateSession(
            CreateSessionStatus status) {
        this(status, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Always `payment-service-session`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public CreateSessionStatus status() {
        return status;
    }

    /**
     * A generic error code that may be returned when the session could not be generated.
     */
    @JsonIgnore
    public JsonNullable<String> code() {
        return code;
    }

    /**
     * The HTTP status code received from the payment service.
     */
    @JsonIgnore
    public JsonNullable<Long> statusCode() {
        return statusCode;
    }

    /**
     * The JSON response body received from the payment service.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> responseBody() {
        return (JsonNullable<Map<String, Object>>) responseBody;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CreateSession withStatus(CreateSessionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * A generic error code that may be returned when the session could not be generated.
     */
    public CreateSession withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    /**
     * A generic error code that may be returned when the session could not be generated.
     */
    public CreateSession withCode(JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The HTTP status code received from the payment service.
     */
    public CreateSession withStatusCode(long statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = JsonNullable.of(statusCode);
        return this;
    }

    /**
     * The HTTP status code received from the payment service.
     */
    public CreateSession withStatusCode(JsonNullable<Long> statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * The JSON response body received from the payment service.
     */
    public CreateSession withResponseBody(Map<String, Object> responseBody) {
        Utils.checkNotNull(responseBody, "responseBody");
        this.responseBody = JsonNullable.of(responseBody);
        return this;
    }

    /**
     * The JSON response body received from the payment service.
     */
    public CreateSession withResponseBody(JsonNullable<? extends Map<String, Object>> responseBody) {
        Utils.checkNotNull(responseBody, "responseBody");
        this.responseBody = responseBody;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSession other = (CreateSession) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.responseBody, other.responseBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            status,
            code,
            statusCode,
            responseBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSession.class,
                "type", type,
                "status", status,
                "code", code,
                "statusCode", statusCode,
                "responseBody", responseBody);
    }
    
    public final static class Builder {
 
        private CreateSessionStatus status;
 
        private JsonNullable<String> code = JsonNullable.undefined();
 
        private JsonNullable<Long> statusCode = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> responseBody = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder status(CreateSessionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * A generic error code that may be returned when the session could not be generated.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * A generic error code that may be returned when the session could not be generated.
         */
        public Builder code(JsonNullable<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * The HTTP status code received from the payment service.
         */
        public Builder statusCode(long statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = JsonNullable.of(statusCode);
            return this;
        }

        /**
         * The HTTP status code received from the payment service.
         */
        public Builder statusCode(JsonNullable<Long> statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        /**
         * The JSON response body received from the payment service.
         */
        public Builder responseBody(Map<String, Object> responseBody) {
            Utils.checkNotNull(responseBody, "responseBody");
            this.responseBody = JsonNullable.of(responseBody);
            return this;
        }

        /**
         * The JSON response body received from the payment service.
         */
        public Builder responseBody(JsonNullable<? extends Map<String, Object>> responseBody) {
            Utils.checkNotNull(responseBody, "responseBody");
            this.responseBody = responseBody;
            return this;
        }
        
        public CreateSession build() {
            return new CreateSession(
                status,
                code,
                statusCode,
                responseBody);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-service-session\"",
                        new TypeReference<Optional<String>>() {});
    }
}
