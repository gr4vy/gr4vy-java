/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

public class TransactionRetriesReportSpec implements Spec {

    /**
     * The report model type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    private Optional<String> model;

    /**
     * The parameters for the transaction retries report model.
     */
    @JsonProperty("params")
    private Map<String, Object> params;

    @JsonCreator
    public TransactionRetriesReportSpec(
            @JsonProperty("params") Map<String, Object> params) {
        params = Utils.emptyMapIfNull(params);
        this.model = Builder._SINGLETON_VALUE_Model.value();
        this.params = params;
    }

    /**
     * The report model type.
     */
    @JsonIgnore
    @Override
    public String model() {
        return Utils.discriminatorToString(model);
    }

    /**
     * The parameters for the transaction retries report model.
     */
    @JsonIgnore
    public Map<String, Object> params() {
        return params;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The parameters for the transaction retries report model.
     */
    public TransactionRetriesReportSpec withParams(Map<String, Object> params) {
        Utils.checkNotNull(params, "params");
        this.params = params;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionRetriesReportSpec other = (TransactionRetriesReportSpec) o;
        return 
            Utils.enhancedDeepEquals(this.model, other.model) &&
            Utils.enhancedDeepEquals(this.params, other.params);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            model,
            params);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionRetriesReportSpec.class,
                "model", model,
                "params", params);
    }
    
    public final static class Builder {
 
        private Map<String, Object> params;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The parameters for the transaction retries report model.
         */
        public Builder params(Map<String, Object> params) {
            Utils.checkNotNull(params, "params");
            this.params = params;
            return this;
        }
        
        public TransactionRetriesReportSpec build() {
            return new TransactionRetriesReportSpec(
                params);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Model =
                new LazySingletonValue<>(
                        "model",
                        "\"transaction_retries\"",
                        new TypeReference<Optional<String>>() {});
    }
}
