/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class ThreeDSecureDataV2 {
    /**
     * The cardholder authentication value or AAV.
     */
    @JsonProperty("cavv")
    private String cavv;

    /**
     * The ecommerce indicator for the 3DS transaction.
     */
    @JsonProperty("eci")
    private String eci;

    /**
     * The version of 3-D Secure that was used.
     */
    @JsonProperty("version")
    private String version;

    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.
     */
    @JsonProperty("directory_response")
    private String directoryResponse;

    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme")
    private JsonNullable<? extends CardScheme> scheme;

    /**
     * The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_response")
    private JsonNullable<String> authenticationResponse;

    /**
     * The transaction identifier.
     */
    @JsonProperty("directory_transaction_id")
    private String directoryTransactionId;

    @JsonCreator
    public ThreeDSecureDataV2(
            @JsonProperty("cavv") String cavv,
            @JsonProperty("eci") String eci,
            @JsonProperty("version") String version,
            @JsonProperty("directory_response") String directoryResponse,
            @JsonProperty("scheme") JsonNullable<? extends CardScheme> scheme,
            @JsonProperty("authentication_response") JsonNullable<String> authenticationResponse,
            @JsonProperty("directory_transaction_id") String directoryTransactionId) {
        Utils.checkNotNull(cavv, "cavv");
        Utils.checkNotNull(eci, "eci");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(directoryResponse, "directoryResponse");
        Utils.checkNotNull(scheme, "scheme");
        Utils.checkNotNull(authenticationResponse, "authenticationResponse");
        Utils.checkNotNull(directoryTransactionId, "directoryTransactionId");
        this.cavv = cavv;
        this.eci = eci;
        this.version = version;
        this.directoryResponse = directoryResponse;
        this.scheme = scheme;
        this.authenticationResponse = authenticationResponse;
        this.directoryTransactionId = directoryTransactionId;
    }
    
    public ThreeDSecureDataV2(
            String cavv,
            String eci,
            String version,
            String directoryResponse,
            String directoryTransactionId) {
        this(cavv, eci, version,
            directoryResponse, JsonNullable.undefined(), JsonNullable.undefined(),
            directoryTransactionId);
    }

    /**
     * The cardholder authentication value or AAV.
     */
    @JsonIgnore
    public String cavv() {
        return cavv;
    }

    /**
     * The ecommerce indicator for the 3DS transaction.
     */
    @JsonIgnore
    public String eci() {
        return eci;
    }

    /**
     * The version of 3-D Secure that was used.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.
     */
    @JsonIgnore
    public String directoryResponse() {
        return directoryResponse;
    }

    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardScheme> scheme() {
        return (JsonNullable<CardScheme>) scheme;
    }

    /**
     * The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
     */
    @JsonIgnore
    public JsonNullable<String> authenticationResponse() {
        return authenticationResponse;
    }

    /**
     * The transaction identifier.
     */
    @JsonIgnore
    public String directoryTransactionId() {
        return directoryTransactionId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The cardholder authentication value or AAV.
     */
    public ThreeDSecureDataV2 withCavv(String cavv) {
        Utils.checkNotNull(cavv, "cavv");
        this.cavv = cavv;
        return this;
    }

    /**
     * The ecommerce indicator for the 3DS transaction.
     */
    public ThreeDSecureDataV2 withEci(String eci) {
        Utils.checkNotNull(eci, "eci");
        this.eci = eci;
        return this;
    }

    /**
     * The version of 3-D Secure that was used.
     */
    public ThreeDSecureDataV2 withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.
     */
    public ThreeDSecureDataV2 withDirectoryResponse(String directoryResponse) {
        Utils.checkNotNull(directoryResponse, "directoryResponse");
        this.directoryResponse = directoryResponse;
        return this;
    }

    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    public ThreeDSecureDataV2 withScheme(CardScheme scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = JsonNullable.of(scheme);
        return this;
    }

    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    public ThreeDSecureDataV2 withScheme(JsonNullable<? extends CardScheme> scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = scheme;
        return this;
    }

    /**
     * The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
     */
    public ThreeDSecureDataV2 withAuthenticationResponse(String authenticationResponse) {
        Utils.checkNotNull(authenticationResponse, "authenticationResponse");
        this.authenticationResponse = JsonNullable.of(authenticationResponse);
        return this;
    }

    /**
     * The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
     */
    public ThreeDSecureDataV2 withAuthenticationResponse(JsonNullable<String> authenticationResponse) {
        Utils.checkNotNull(authenticationResponse, "authenticationResponse");
        this.authenticationResponse = authenticationResponse;
        return this;
    }

    /**
     * The transaction identifier.
     */
    public ThreeDSecureDataV2 withDirectoryTransactionId(String directoryTransactionId) {
        Utils.checkNotNull(directoryTransactionId, "directoryTransactionId");
        this.directoryTransactionId = directoryTransactionId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ThreeDSecureDataV2 other = (ThreeDSecureDataV2) o;
        return 
            Utils.enhancedDeepEquals(this.cavv, other.cavv) &&
            Utils.enhancedDeepEquals(this.eci, other.eci) &&
            Utils.enhancedDeepEquals(this.version, other.version) &&
            Utils.enhancedDeepEquals(this.directoryResponse, other.directoryResponse) &&
            Utils.enhancedDeepEquals(this.scheme, other.scheme) &&
            Utils.enhancedDeepEquals(this.authenticationResponse, other.authenticationResponse) &&
            Utils.enhancedDeepEquals(this.directoryTransactionId, other.directoryTransactionId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            cavv, eci, version,
            directoryResponse, scheme, authenticationResponse,
            directoryTransactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ThreeDSecureDataV2.class,
                "cavv", cavv,
                "eci", eci,
                "version", version,
                "directoryResponse", directoryResponse,
                "scheme", scheme,
                "authenticationResponse", authenticationResponse,
                "directoryTransactionId", directoryTransactionId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String cavv;

        private String eci;

        private String version;

        private String directoryResponse;

        private JsonNullable<? extends CardScheme> scheme = JsonNullable.undefined();

        private JsonNullable<String> authenticationResponse = JsonNullable.undefined();

        private String directoryTransactionId;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The cardholder authentication value or AAV.
         */
        public Builder cavv(String cavv) {
            Utils.checkNotNull(cavv, "cavv");
            this.cavv = cavv;
            return this;
        }


        /**
         * The ecommerce indicator for the 3DS transaction.
         */
        public Builder eci(String eci) {
            Utils.checkNotNull(eci, "eci");
            this.eci = eci;
            return this;
        }


        /**
         * The version of 3-D Secure that was used.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }


        /**
         * For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.
         */
        public Builder directoryResponse(String directoryResponse) {
            Utils.checkNotNull(directoryResponse, "directoryResponse");
            this.directoryResponse = directoryResponse;
            return this;
        }


        /**
         * The scheme/brand of the card that is used for 3-D Secure.
         */
        public Builder scheme(CardScheme scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = JsonNullable.of(scheme);
            return this;
        }

        /**
         * The scheme/brand of the card that is used for 3-D Secure.
         */
        public Builder scheme(JsonNullable<? extends CardScheme> scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = scheme;
            return this;
        }


        /**
         * The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
         */
        public Builder authenticationResponse(String authenticationResponse) {
            Utils.checkNotNull(authenticationResponse, "authenticationResponse");
            this.authenticationResponse = JsonNullable.of(authenticationResponse);
            return this;
        }

        /**
         * The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
         */
        public Builder authenticationResponse(JsonNullable<String> authenticationResponse) {
            Utils.checkNotNull(authenticationResponse, "authenticationResponse");
            this.authenticationResponse = authenticationResponse;
            return this;
        }


        /**
         * The transaction identifier.
         */
        public Builder directoryTransactionId(String directoryTransactionId) {
            Utils.checkNotNull(directoryTransactionId, "directoryTransactionId");
            this.directoryTransactionId = directoryTransactionId;
            return this;
        }

        public ThreeDSecureDataV2 build() {

            return new ThreeDSecureDataV2(
                cavv, eci, version,
                directoryResponse, scheme, authenticationResponse,
                directoryTransactionId);
        }

    }
}
