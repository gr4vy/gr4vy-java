/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class NuveiAirlineDataOptions {
    /**
     * The seat class of the booking
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seatClass")
    private JsonNullable<String> seatClass;

    /**
     * Indicates whether the cardholder is also a passenger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCardholderTraveling")
    private JsonNullable<Boolean> isCardholderTraveling;

    @JsonCreator
    public NuveiAirlineDataOptions(
            @JsonProperty("seatClass") JsonNullable<String> seatClass,
            @JsonProperty("isCardholderTraveling") JsonNullable<Boolean> isCardholderTraveling) {
        Utils.checkNotNull(seatClass, "seatClass");
        Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
        this.seatClass = seatClass;
        this.isCardholderTraveling = isCardholderTraveling;
    }
    
    public NuveiAirlineDataOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The seat class of the booking
     */
    @JsonIgnore
    public JsonNullable<String> seatClass() {
        return seatClass;
    }

    /**
     * Indicates whether the cardholder is also a passenger.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isCardholderTraveling() {
        return isCardholderTraveling;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The seat class of the booking
     */
    public NuveiAirlineDataOptions withSeatClass(String seatClass) {
        Utils.checkNotNull(seatClass, "seatClass");
        this.seatClass = JsonNullable.of(seatClass);
        return this;
    }

    /**
     * The seat class of the booking
     */
    public NuveiAirlineDataOptions withSeatClass(JsonNullable<String> seatClass) {
        Utils.checkNotNull(seatClass, "seatClass");
        this.seatClass = seatClass;
        return this;
    }

    /**
     * Indicates whether the cardholder is also a passenger.
     */
    public NuveiAirlineDataOptions withIsCardholderTraveling(boolean isCardholderTraveling) {
        Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
        this.isCardholderTraveling = JsonNullable.of(isCardholderTraveling);
        return this;
    }

    /**
     * Indicates whether the cardholder is also a passenger.
     */
    public NuveiAirlineDataOptions withIsCardholderTraveling(JsonNullable<Boolean> isCardholderTraveling) {
        Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
        this.isCardholderTraveling = isCardholderTraveling;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NuveiAirlineDataOptions other = (NuveiAirlineDataOptions) o;
        return 
            Utils.enhancedDeepEquals(this.seatClass, other.seatClass) &&
            Utils.enhancedDeepEquals(this.isCardholderTraveling, other.isCardholderTraveling);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            seatClass, isCardholderTraveling);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NuveiAirlineDataOptions.class,
                "seatClass", seatClass,
                "isCardholderTraveling", isCardholderTraveling);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> seatClass = JsonNullable.undefined();

        private JsonNullable<Boolean> isCardholderTraveling = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The seat class of the booking
         */
        public Builder seatClass(String seatClass) {
            Utils.checkNotNull(seatClass, "seatClass");
            this.seatClass = JsonNullable.of(seatClass);
            return this;
        }

        /**
         * The seat class of the booking
         */
        public Builder seatClass(JsonNullable<String> seatClass) {
            Utils.checkNotNull(seatClass, "seatClass");
            this.seatClass = seatClass;
            return this;
        }


        /**
         * Indicates whether the cardholder is also a passenger.
         */
        public Builder isCardholderTraveling(boolean isCardholderTraveling) {
            Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
            this.isCardholderTraveling = JsonNullable.of(isCardholderTraveling);
            return this;
        }

        /**
         * Indicates whether the cardholder is also a passenger.
         */
        public Builder isCardholderTraveling(JsonNullable<Boolean> isCardholderTraveling) {
            Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
            this.isCardholderTraveling = isCardholderTraveling;
            return this;
        }

        public NuveiAirlineDataOptions build() {

            return new NuveiAirlineDataOptions(
                seatClass, isCardholderTraveling);
        }

    }
}
