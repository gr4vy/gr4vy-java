/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * DigitalWalletUpdate
 * 
 * <p>Request body for editing a registered digital wallet
 */
public class DigitalWalletUpdate {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_name")
    private JsonNullable<String> merchantName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_names")
    private JsonNullable<? extends List<String>> domainNames;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_display_name")
    private JsonNullable<String> merchantDisplayName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_url")
    private JsonNullable<String> merchantUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_country_code")
    private JsonNullable<String> merchantCountryCode;

    @JsonCreator
    public DigitalWalletUpdate(
            @JsonProperty("merchant_name") JsonNullable<String> merchantName,
            @JsonProperty("domain_names") JsonNullable<? extends List<String>> domainNames,
            @JsonProperty("merchant_display_name") JsonNullable<String> merchantDisplayName,
            @JsonProperty("merchant_url") JsonNullable<String> merchantUrl,
            @JsonProperty("merchant_country_code") JsonNullable<String> merchantCountryCode) {
        Utils.checkNotNull(merchantName, "merchantName");
        Utils.checkNotNull(domainNames, "domainNames");
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        this.merchantName = merchantName;
        this.domainNames = domainNames;
        this.merchantDisplayName = merchantDisplayName;
        this.merchantUrl = merchantUrl;
        this.merchantCountryCode = merchantCountryCode;
    }
    
    public DigitalWalletUpdate() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> merchantName() {
        return merchantName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> domainNames() {
        return (JsonNullable<List<String>>) domainNames;
    }

    @JsonIgnore
    public JsonNullable<String> merchantDisplayName() {
        return merchantDisplayName;
    }

    @JsonIgnore
    public JsonNullable<String> merchantUrl() {
        return merchantUrl;
    }

    @JsonIgnore
    public JsonNullable<String> merchantCountryCode() {
        return merchantCountryCode;
    }

    public static Builder builder() {
        return new Builder();
    }


    public DigitalWalletUpdate withMerchantName(String merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = JsonNullable.of(merchantName);
        return this;
    }

    public DigitalWalletUpdate withMerchantName(JsonNullable<String> merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = merchantName;
        return this;
    }

    public DigitalWalletUpdate withDomainNames(List<String> domainNames) {
        Utils.checkNotNull(domainNames, "domainNames");
        this.domainNames = JsonNullable.of(domainNames);
        return this;
    }

    public DigitalWalletUpdate withDomainNames(JsonNullable<? extends List<String>> domainNames) {
        Utils.checkNotNull(domainNames, "domainNames");
        this.domainNames = domainNames;
        return this;
    }

    public DigitalWalletUpdate withMerchantDisplayName(String merchantDisplayName) {
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        this.merchantDisplayName = JsonNullable.of(merchantDisplayName);
        return this;
    }

    public DigitalWalletUpdate withMerchantDisplayName(JsonNullable<String> merchantDisplayName) {
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        this.merchantDisplayName = merchantDisplayName;
        return this;
    }

    public DigitalWalletUpdate withMerchantUrl(String merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = JsonNullable.of(merchantUrl);
        return this;
    }

    public DigitalWalletUpdate withMerchantUrl(JsonNullable<String> merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = merchantUrl;
        return this;
    }

    public DigitalWalletUpdate withMerchantCountryCode(String merchantCountryCode) {
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        this.merchantCountryCode = JsonNullable.of(merchantCountryCode);
        return this;
    }

    public DigitalWalletUpdate withMerchantCountryCode(JsonNullable<String> merchantCountryCode) {
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        this.merchantCountryCode = merchantCountryCode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DigitalWalletUpdate other = (DigitalWalletUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.merchantName, other.merchantName) &&
            Utils.enhancedDeepEquals(this.domainNames, other.domainNames) &&
            Utils.enhancedDeepEquals(this.merchantDisplayName, other.merchantDisplayName) &&
            Utils.enhancedDeepEquals(this.merchantUrl, other.merchantUrl) &&
            Utils.enhancedDeepEquals(this.merchantCountryCode, other.merchantCountryCode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            merchantName, domainNames, merchantDisplayName,
            merchantUrl, merchantCountryCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DigitalWalletUpdate.class,
                "merchantName", merchantName,
                "domainNames", domainNames,
                "merchantDisplayName", merchantDisplayName,
                "merchantUrl", merchantUrl,
                "merchantCountryCode", merchantCountryCode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> merchantName = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> domainNames = JsonNullable.undefined();

        private JsonNullable<String> merchantDisplayName = JsonNullable.undefined();

        private JsonNullable<String> merchantUrl = JsonNullable.undefined();

        private JsonNullable<String> merchantCountryCode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder merchantName(String merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = JsonNullable.of(merchantName);
            return this;
        }

        public Builder merchantName(JsonNullable<String> merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = merchantName;
            return this;
        }


        public Builder domainNames(List<String> domainNames) {
            Utils.checkNotNull(domainNames, "domainNames");
            this.domainNames = JsonNullable.of(domainNames);
            return this;
        }

        public Builder domainNames(JsonNullable<? extends List<String>> domainNames) {
            Utils.checkNotNull(domainNames, "domainNames");
            this.domainNames = domainNames;
            return this;
        }


        public Builder merchantDisplayName(String merchantDisplayName) {
            Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
            this.merchantDisplayName = JsonNullable.of(merchantDisplayName);
            return this;
        }

        public Builder merchantDisplayName(JsonNullable<String> merchantDisplayName) {
            Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
            this.merchantDisplayName = merchantDisplayName;
            return this;
        }


        public Builder merchantUrl(String merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = JsonNullable.of(merchantUrl);
            return this;
        }

        public Builder merchantUrl(JsonNullable<String> merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = merchantUrl;
            return this;
        }


        public Builder merchantCountryCode(String merchantCountryCode) {
            Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
            this.merchantCountryCode = JsonNullable.of(merchantCountryCode);
            return this;
        }

        public Builder merchantCountryCode(JsonNullable<String> merchantCountryCode) {
            Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
            this.merchantCountryCode = merchantCountryCode;
            return this;
        }

        public DigitalWalletUpdate build() {

            return new DigitalWalletUpdate(
                merchantName, domainNames, merchantDisplayName,
                merchantUrl, merchantCountryCode);
        }

    }
}
