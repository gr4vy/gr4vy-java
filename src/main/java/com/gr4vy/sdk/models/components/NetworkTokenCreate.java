/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class NetworkTokenCreate {
    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security_code")
    private JsonNullable<String> securityCode;

    /**
     * Defines if the request is merchant initiated or not.
     */
    @JsonProperty("merchant_initiated")
    private boolean merchantInitiated;

    /**
     * Defines if the request is a subsequent of another request or not.
     */
    @JsonProperty("is_subsequent_payment")
    private boolean isSubsequentPayment;

    @JsonCreator
    public NetworkTokenCreate(
            @JsonProperty("security_code") JsonNullable<String> securityCode,
            @JsonProperty("merchant_initiated") boolean merchantInitiated,
            @JsonProperty("is_subsequent_payment") boolean isSubsequentPayment) {
        Utils.checkNotNull(securityCode, "securityCode");
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
        this.securityCode = securityCode;
        this.merchantInitiated = merchantInitiated;
        this.isSubsequentPayment = isSubsequentPayment;
    }
    
    public NetworkTokenCreate(
            boolean merchantInitiated,
            boolean isSubsequentPayment) {
        this(JsonNullable.undefined(), merchantInitiated, isSubsequentPayment);
    }

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    @JsonIgnore
    public JsonNullable<String> securityCode() {
        return securityCode;
    }

    /**
     * Defines if the request is merchant initiated or not.
     */
    @JsonIgnore
    public boolean merchantInitiated() {
        return merchantInitiated;
    }

    /**
     * Defines if the request is a subsequent of another request or not.
     */
    @JsonIgnore
    public boolean isSubsequentPayment() {
        return isSubsequentPayment;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    public NetworkTokenCreate withSecurityCode(String securityCode) {
        Utils.checkNotNull(securityCode, "securityCode");
        this.securityCode = JsonNullable.of(securityCode);
        return this;
    }

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    public NetworkTokenCreate withSecurityCode(JsonNullable<String> securityCode) {
        Utils.checkNotNull(securityCode, "securityCode");
        this.securityCode = securityCode;
        return this;
    }

    /**
     * Defines if the request is merchant initiated or not.
     */
    public NetworkTokenCreate withMerchantInitiated(boolean merchantInitiated) {
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        this.merchantInitiated = merchantInitiated;
        return this;
    }

    /**
     * Defines if the request is a subsequent of another request or not.
     */
    public NetworkTokenCreate withIsSubsequentPayment(boolean isSubsequentPayment) {
        Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
        this.isSubsequentPayment = isSubsequentPayment;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NetworkTokenCreate other = (NetworkTokenCreate) o;
        return 
            Utils.enhancedDeepEquals(this.securityCode, other.securityCode) &&
            Utils.enhancedDeepEquals(this.merchantInitiated, other.merchantInitiated) &&
            Utils.enhancedDeepEquals(this.isSubsequentPayment, other.isSubsequentPayment);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            securityCode, merchantInitiated, isSubsequentPayment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NetworkTokenCreate.class,
                "securityCode", securityCode,
                "merchantInitiated", merchantInitiated,
                "isSubsequentPayment", isSubsequentPayment);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> securityCode = JsonNullable.undefined();

        private Boolean merchantInitiated;

        private Boolean isSubsequentPayment;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
         */
        public Builder securityCode(String securityCode) {
            Utils.checkNotNull(securityCode, "securityCode");
            this.securityCode = JsonNullable.of(securityCode);
            return this;
        }

        /**
         * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
         */
        public Builder securityCode(JsonNullable<String> securityCode) {
            Utils.checkNotNull(securityCode, "securityCode");
            this.securityCode = securityCode;
            return this;
        }


        /**
         * Defines if the request is merchant initiated or not.
         */
        public Builder merchantInitiated(boolean merchantInitiated) {
            Utils.checkNotNull(merchantInitiated, "merchantInitiated");
            this.merchantInitiated = merchantInitiated;
            return this;
        }


        /**
         * Defines if the request is a subsequent of another request or not.
         */
        public Builder isSubsequentPayment(boolean isSubsequentPayment) {
            Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
            this.isSubsequentPayment = isSubsequentPayment;
            return this;
        }

        public NetworkTokenCreate build() {

            return new NetworkTokenCreate(
                securityCode, merchantInitiated, isSubsequentPayment);
        }

    }
}
