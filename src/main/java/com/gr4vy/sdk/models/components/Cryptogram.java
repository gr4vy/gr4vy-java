/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Cryptogram {

    /**
     * Always `network-token-cryptogram`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The cryptogram of the network token.
     */
    @JsonProperty("cryptogram")
    private String cryptogram;

    @JsonCreator
    public Cryptogram(
            @JsonProperty("cryptogram") String cryptogram) {
        Utils.checkNotNull(cryptogram, "cryptogram");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.cryptogram = cryptogram;
    }

    /**
     * Always `network-token-cryptogram`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The cryptogram of the network token.
     */
    @JsonIgnore
    public String cryptogram() {
        return cryptogram;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The cryptogram of the network token.
     */
    public Cryptogram withCryptogram(String cryptogram) {
        Utils.checkNotNull(cryptogram, "cryptogram");
        this.cryptogram = cryptogram;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Cryptogram other = (Cryptogram) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.cryptogram, other.cryptogram);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            cryptogram);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Cryptogram.class,
                "type", type,
                "cryptogram", cryptogram);
    }
    
    public final static class Builder {
 
        private String cryptogram;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The cryptogram of the network token.
         */
        public Builder cryptogram(String cryptogram) {
            Utils.checkNotNull(cryptogram, "cryptogram");
            this.cryptogram = cryptogram;
            return this;
        }
        
        public Cryptogram build() {
            return new Cryptogram(
                cryptogram);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"network-token-cryptogram\"",
                        new TypeReference<Optional<String>>() {});
    }
}
