/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class DigitalWalletDomain {
    /**
     * The domain to add or remove.
     */
    @JsonProperty("domain_name")
    private String domainName;

    @JsonCreator
    public DigitalWalletDomain(
            @JsonProperty("domain_name") String domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = domainName;
    }

    /**
     * The domain to add or remove.
     */
    @JsonIgnore
    public String domainName() {
        return domainName;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The domain to add or remove.
     */
    public DigitalWalletDomain withDomainName(String domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = domainName;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DigitalWalletDomain other = (DigitalWalletDomain) o;
        return 
            Utils.enhancedDeepEquals(this.domainName, other.domainName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            domainName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DigitalWalletDomain.class,
                "domainName", domainName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String domainName;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The domain to add or remove.
         */
        public Builder domainName(String domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = domainName;
            return this;
        }

        public DigitalWalletDomain build() {

            return new DigitalWalletDomain(
                domainName);
        }

    }
}
