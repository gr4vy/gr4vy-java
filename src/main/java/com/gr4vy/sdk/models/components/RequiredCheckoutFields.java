/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * RequiredCheckoutFields
 * 
 * <p>A collection of checkout fields and the conditions under which they are required.
 */
public class RequiredCheckoutFields {

    /**
     * A list of transaction fields that are required to process a payment for this service.
     */
    @JsonProperty("required_fields")
    private List<String> requiredFields;

    /**
     * The conditions under which these fields are required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conditions")
    private JsonNullable<? extends Map<String, Object>> conditions;

    @JsonCreator
    public RequiredCheckoutFields(
            @JsonProperty("required_fields") List<String> requiredFields,
            @JsonProperty("conditions") JsonNullable<? extends Map<String, Object>> conditions) {
        Utils.checkNotNull(requiredFields, "requiredFields");
        Utils.checkNotNull(conditions, "conditions");
        this.requiredFields = requiredFields;
        this.conditions = conditions;
    }
    
    public RequiredCheckoutFields(
            List<String> requiredFields) {
        this(requiredFields, JsonNullable.undefined());
    }

    /**
     * A list of transaction fields that are required to process a payment for this service.
     */
    @JsonIgnore
    public List<String> requiredFields() {
        return requiredFields;
    }

    /**
     * The conditions under which these fields are required
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> conditions() {
        return (JsonNullable<Map<String, Object>>) conditions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A list of transaction fields that are required to process a payment for this service.
     */
    public RequiredCheckoutFields withRequiredFields(List<String> requiredFields) {
        Utils.checkNotNull(requiredFields, "requiredFields");
        this.requiredFields = requiredFields;
        return this;
    }

    /**
     * The conditions under which these fields are required
     */
    public RequiredCheckoutFields withConditions(Map<String, Object> conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = JsonNullable.of(conditions);
        return this;
    }

    /**
     * The conditions under which these fields are required
     */
    public RequiredCheckoutFields withConditions(JsonNullable<? extends Map<String, Object>> conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = conditions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequiredCheckoutFields other = (RequiredCheckoutFields) o;
        return 
            Objects.deepEquals(this.requiredFields, other.requiredFields) &&
            Objects.deepEquals(this.conditions, other.conditions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requiredFields,
            conditions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequiredCheckoutFields.class,
                "requiredFields", requiredFields,
                "conditions", conditions);
    }
    
    public final static class Builder {
 
        private List<String> requiredFields;
 
        private JsonNullable<? extends Map<String, Object>> conditions = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of transaction fields that are required to process a payment for this service.
         */
        public Builder requiredFields(List<String> requiredFields) {
            Utils.checkNotNull(requiredFields, "requiredFields");
            this.requiredFields = requiredFields;
            return this;
        }

        /**
         * The conditions under which these fields are required
         */
        public Builder conditions(Map<String, Object> conditions) {
            Utils.checkNotNull(conditions, "conditions");
            this.conditions = JsonNullable.of(conditions);
            return this;
        }

        /**
         * The conditions under which these fields are required
         */
        public Builder conditions(JsonNullable<? extends Map<String, Object>> conditions) {
            Utils.checkNotNull(conditions, "conditions");
            this.conditions = conditions;
            return this;
        }
        
        public RequiredCheckoutFields build() {
            return new RequiredCheckoutFields(
                requiredFields,
                conditions);
        }
    }
}
