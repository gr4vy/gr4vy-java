/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class NetworkToken {
    /**
     * Always `network-token`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the network token.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The expiration date for the network token.
     */
    @JsonProperty("expiration_date")
    private String expirationDate;

    /**
     * The ID of the payment method used to generate this token
     */
    @JsonProperty("payment_method_id")
    private String paymentMethodId;


    @JsonProperty("status")
    private NetworkTokenStatus status;

    /**
     * The token value. Will be present if succeeded.
     */
    @JsonProperty("token")
    private String token;

    /**
     * The date and time when this network token was first created in our system.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time when this network token was last updated in our system.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public NetworkToken(
            @JsonProperty("id") String id,
            @JsonProperty("expiration_date") String expirationDate,
            @JsonProperty("payment_method_id") String paymentMethodId,
            @JsonProperty("status") NetworkTokenStatus status,
            @JsonProperty("token") String token,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.expirationDate = expirationDate;
        this.paymentMethodId = paymentMethodId;
        this.status = status;
        this.token = token;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    /**
     * Always `network-token`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the network token.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The expiration date for the network token.
     */
    @JsonIgnore
    public String expirationDate() {
        return expirationDate;
    }

    /**
     * The ID of the payment method used to generate this token
     */
    @JsonIgnore
    public String paymentMethodId() {
        return paymentMethodId;
    }

    @JsonIgnore
    public NetworkTokenStatus status() {
        return status;
    }

    /**
     * The token value. Will be present if succeeded.
     */
    @JsonIgnore
    public String token() {
        return token;
    }

    /**
     * The date and time when this network token was first created in our system.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time when this network token was last updated in our system.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID for the network token.
     */
    public NetworkToken withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The expiration date for the network token.
     */
    public NetworkToken withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The ID of the payment method used to generate this token
     */
    public NetworkToken withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    public NetworkToken withStatus(NetworkTokenStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The token value. Will be present if succeeded.
     */
    public NetworkToken withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * The date and time when this network token was first created in our system.
     */
    public NetworkToken withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when this network token was last updated in our system.
     */
    public NetworkToken withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NetworkToken other = (NetworkToken) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.expirationDate, other.expirationDate) &&
            Utils.enhancedDeepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, expirationDate,
            paymentMethodId, status, token,
            createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NetworkToken.class,
                "type", type,
                "id", id,
                "expirationDate", expirationDate,
                "paymentMethodId", paymentMethodId,
                "status", status,
                "token", token,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String expirationDate;

        private String paymentMethodId;

        private NetworkTokenStatus status;

        private String token;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID for the network token.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The expiration date for the network token.
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }


        /**
         * The ID of the payment method used to generate this token
         */
        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }


        public Builder status(NetworkTokenStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The token value. Will be present if succeeded.
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }


        /**
         * The date and time when this network token was first created in our system.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time when this network token was last updated in our system.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public NetworkToken build() {

            return new NetworkToken(
                id, expirationDate, paymentMethodId,
                status, token, createdAt,
                updatedAt);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"network-token\"",
                        new TypeReference<Optional<String>>() {});
    }
}
