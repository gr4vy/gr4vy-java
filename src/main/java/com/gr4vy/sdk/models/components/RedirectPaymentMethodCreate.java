/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * RedirectPaymentMethodCreate
 * 
 * <p>Create a transaction for an APM/LPM that requires a redirect.
 */
public class RedirectPaymentMethodCreate {

    /**
     * The method to use, this can be any of the methods that support redirect requests.
     */
    @JsonProperty("method")
    private RedirectPaymentMethodCreateMethod method;

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_id")
    private JsonNullable<String> buyerId;

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_external_identifier")
    private JsonNullable<String> buyerExternalIdentifier;

    /**
     * The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use.
     */
    @JsonProperty("country")
    private String country;

    /**
     * The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The redirect URL to redirect a buyer to after they have authorized the payment method.
     */
    @JsonProperty("redirect_url")
    private String redirectUrl;

    /**
     * The merchant identifier for this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    @JsonCreator
    public RedirectPaymentMethodCreate(
            @JsonProperty("method") RedirectPaymentMethodCreateMethod method,
            @JsonProperty("buyer_id") JsonNullable<String> buyerId,
            @JsonProperty("buyer_external_identifier") JsonNullable<String> buyerExternalIdentifier,
            @JsonProperty("country") String country,
            @JsonProperty("currency") String currency,
            @JsonProperty("redirect_url") String redirectUrl,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.method = method;
        this.buyerId = buyerId;
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        this.country = country;
        this.currency = currency;
        this.redirectUrl = redirectUrl;
        this.externalIdentifier = externalIdentifier;
    }
    
    public RedirectPaymentMethodCreate(
            RedirectPaymentMethodCreateMethod method,
            String country,
            String currency,
            String redirectUrl) {
        this(method, JsonNullable.undefined(), JsonNullable.undefined(), country, currency, redirectUrl, JsonNullable.undefined());
    }

    /**
     * The method to use, this can be any of the methods that support redirect requests.
     */
    @JsonIgnore
    public RedirectPaymentMethodCreateMethod method() {
        return method;
    }

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    @JsonIgnore
    public JsonNullable<String> buyerExternalIdentifier() {
        return buyerExternalIdentifier;
    }

    /**
     * The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The redirect URL to redirect a buyer to after they have authorized the payment method.
     */
    @JsonIgnore
    public String redirectUrl() {
        return redirectUrl;
    }

    /**
     * The merchant identifier for this payment method.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The method to use, this can be any of the methods that support redirect requests.
     */
    public RedirectPaymentMethodCreate withMethod(RedirectPaymentMethodCreateMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    public RedirectPaymentMethodCreate withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    public RedirectPaymentMethodCreate withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    public RedirectPaymentMethodCreate withBuyerExternalIdentifier(String buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
        return this;
    }

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    public RedirectPaymentMethodCreate withBuyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        return this;
    }

    /**
     * The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use.
     */
    public RedirectPaymentMethodCreate withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use.
     */
    public RedirectPaymentMethodCreate withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The redirect URL to redirect a buyer to after they have authorized the payment method.
     */
    public RedirectPaymentMethodCreate withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * The merchant identifier for this payment method.
     */
    public RedirectPaymentMethodCreate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant identifier for this payment method.
     */
    public RedirectPaymentMethodCreate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RedirectPaymentMethodCreate other = (RedirectPaymentMethodCreate) o;
        return 
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.buyerId, other.buyerId) &&
            Objects.deepEquals(this.buyerExternalIdentifier, other.buyerExternalIdentifier) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            method,
            buyerId,
            buyerExternalIdentifier,
            country,
            currency,
            redirectUrl,
            externalIdentifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RedirectPaymentMethodCreate.class,
                "method", method,
                "buyerId", buyerId,
                "buyerExternalIdentifier", buyerExternalIdentifier,
                "country", country,
                "currency", currency,
                "redirectUrl", redirectUrl,
                "externalIdentifier", externalIdentifier);
    }
    
    public final static class Builder {
 
        private RedirectPaymentMethodCreateMethod method;
 
        private JsonNullable<String> buyerId = JsonNullable.undefined();
 
        private JsonNullable<String> buyerExternalIdentifier = JsonNullable.undefined();
 
        private String country;
 
        private String currency;
 
        private String redirectUrl;
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The method to use, this can be any of the methods that support redirect requests.
         */
        public Builder method(RedirectPaymentMethodCreateMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
         */
        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        /**
         * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
         */
        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }

        /**
         * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
         */
        public Builder buyerExternalIdentifier(String buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
            return this;
        }

        /**
         * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
         */
        public Builder buyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = buyerExternalIdentifier;
            return this;
        }

        /**
         * The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The redirect URL to redirect a buyer to after they have authorized the payment method.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * The merchant identifier for this payment method.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant identifier for this payment method.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }
        
        public RedirectPaymentMethodCreate build() {
            return new RedirectPaymentMethodCreate(
                method,
                buyerId,
                buyerExternalIdentifier,
                country,
                currency,
                redirectUrl,
                externalIdentifier);
        }
    }
}
