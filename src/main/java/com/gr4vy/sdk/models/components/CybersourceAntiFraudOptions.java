/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class CybersourceAntiFraudOptions {
    /**
     * A list of merchant defined data to be passed to the Cybersource Decision Manager API. Each key needs
     * to be a numeric string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_defined_data")
    private JsonNullable<? extends Map<String, String>> merchantDefinedData;

    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource Decision Manager, and this overrides the connector configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta_key_merchant_id")
    private JsonNullable<String> metaKeyMerchantId;

    /**
     * The shipping method for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_method")
    private JsonNullable<String> shippingMethod;

    @JsonCreator
    public CybersourceAntiFraudOptions(
            @JsonProperty("merchant_defined_data") JsonNullable<? extends Map<String, String>> merchantDefinedData,
            @JsonProperty("meta_key_merchant_id") JsonNullable<String> metaKeyMerchantId,
            @JsonProperty("shipping_method") JsonNullable<String> shippingMethod) {
        Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
        Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
        Utils.checkNotNull(shippingMethod, "shippingMethod");
        this.merchantDefinedData = merchantDefinedData;
        this.metaKeyMerchantId = metaKeyMerchantId;
        this.shippingMethod = shippingMethod;
    }
    
    public CybersourceAntiFraudOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A list of merchant defined data to be passed to the Cybersource Decision Manager API. Each key needs
     * to be a numeric string.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> merchantDefinedData() {
        return (JsonNullable<Map<String, String>>) merchantDefinedData;
    }

    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource Decision Manager, and this overrides the connector configuration.
     */
    @JsonIgnore
    public JsonNullable<String> metaKeyMerchantId() {
        return metaKeyMerchantId;
    }

    /**
     * The shipping method for this transaction.
     */
    @JsonIgnore
    public JsonNullable<String> shippingMethod() {
        return shippingMethod;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A list of merchant defined data to be passed to the Cybersource Decision Manager API. Each key needs
     * to be a numeric string.
     */
    public CybersourceAntiFraudOptions withMerchantDefinedData(Map<String, String> merchantDefinedData) {
        Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
        this.merchantDefinedData = JsonNullable.of(merchantDefinedData);
        return this;
    }

    /**
     * A list of merchant defined data to be passed to the Cybersource Decision Manager API. Each key needs
     * to be a numeric string.
     */
    public CybersourceAntiFraudOptions withMerchantDefinedData(JsonNullable<? extends Map<String, String>> merchantDefinedData) {
        Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
        this.merchantDefinedData = merchantDefinedData;
        return this;
    }

    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource Decision Manager, and this overrides the connector configuration.
     */
    public CybersourceAntiFraudOptions withMetaKeyMerchantId(String metaKeyMerchantId) {
        Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
        this.metaKeyMerchantId = JsonNullable.of(metaKeyMerchantId);
        return this;
    }

    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource Decision Manager, and this overrides the connector configuration.
     */
    public CybersourceAntiFraudOptions withMetaKeyMerchantId(JsonNullable<String> metaKeyMerchantId) {
        Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
        this.metaKeyMerchantId = metaKeyMerchantId;
        return this;
    }

    /**
     * The shipping method for this transaction.
     */
    public CybersourceAntiFraudOptions withShippingMethod(String shippingMethod) {
        Utils.checkNotNull(shippingMethod, "shippingMethod");
        this.shippingMethod = JsonNullable.of(shippingMethod);
        return this;
    }

    /**
     * The shipping method for this transaction.
     */
    public CybersourceAntiFraudOptions withShippingMethod(JsonNullable<String> shippingMethod) {
        Utils.checkNotNull(shippingMethod, "shippingMethod");
        this.shippingMethod = shippingMethod;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CybersourceAntiFraudOptions other = (CybersourceAntiFraudOptions) o;
        return 
            Utils.enhancedDeepEquals(this.merchantDefinedData, other.merchantDefinedData) &&
            Utils.enhancedDeepEquals(this.metaKeyMerchantId, other.metaKeyMerchantId) &&
            Utils.enhancedDeepEquals(this.shippingMethod, other.shippingMethod);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            merchantDefinedData, metaKeyMerchantId, shippingMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CybersourceAntiFraudOptions.class,
                "merchantDefinedData", merchantDefinedData,
                "metaKeyMerchantId", metaKeyMerchantId,
                "shippingMethod", shippingMethod);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Map<String, String>> merchantDefinedData = JsonNullable.undefined();

        private JsonNullable<String> metaKeyMerchantId = JsonNullable.undefined();

        private JsonNullable<String> shippingMethod = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A list of merchant defined data to be passed to the Cybersource Decision Manager API. Each key needs
         * to be a numeric string.
         */
        public Builder merchantDefinedData(Map<String, String> merchantDefinedData) {
            Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
            this.merchantDefinedData = JsonNullable.of(merchantDefinedData);
            return this;
        }

        /**
         * A list of merchant defined data to be passed to the Cybersource Decision Manager API. Each key needs
         * to be a numeric string.
         */
        public Builder merchantDefinedData(JsonNullable<? extends Map<String, String>> merchantDefinedData) {
            Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
            this.merchantDefinedData = merchantDefinedData;
            return this;
        }


        /**
         * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
         * Cybersource Decision Manager, and this overrides the connector configuration.
         */
        public Builder metaKeyMerchantId(String metaKeyMerchantId) {
            Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
            this.metaKeyMerchantId = JsonNullable.of(metaKeyMerchantId);
            return this;
        }

        /**
         * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
         * Cybersource Decision Manager, and this overrides the connector configuration.
         */
        public Builder metaKeyMerchantId(JsonNullable<String> metaKeyMerchantId) {
            Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
            this.metaKeyMerchantId = metaKeyMerchantId;
            return this;
        }


        /**
         * The shipping method for this transaction.
         */
        public Builder shippingMethod(String shippingMethod) {
            Utils.checkNotNull(shippingMethod, "shippingMethod");
            this.shippingMethod = JsonNullable.of(shippingMethod);
            return this;
        }

        /**
         * The shipping method for this transaction.
         */
        public Builder shippingMethod(JsonNullable<String> shippingMethod) {
            Utils.checkNotNull(shippingMethod, "shippingMethod");
            this.shippingMethod = shippingMethod;
            return this;
        }

        public CybersourceAntiFraudOptions build() {

            return new CybersourceAntiFraudOptions(
                merchantDefinedData, metaKeyMerchantId, shippingMethod);
        }

    }
}
