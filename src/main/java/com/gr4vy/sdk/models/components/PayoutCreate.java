/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PayoutCreate
 * 
 * <p>PayoutCreate
 * 
 * <p>Represents the data required to create a new payout.
 */
public class PayoutCreate {
    /**
     * The monetary amount for this payout, in the smallest currency unit for the given currency, for
     * example `1299` cents to create an authorization for $12.99.
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The ISO-4217 currency code for this payout.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The ID of the payment service to use for the payout.
     */
    @JsonProperty("payment_service_id")
    private String paymentServiceId;

    /**
     * The type of payment method to send funds too.
     */
    @JsonProperty("payment_method")
    private PayoutCreatePaymentMethod paymentMethod;

    /**
     * The type of payout to process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private JsonNullable<? extends PayoutCategory> category;

    /**
     * A value that can be used to match the payout against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or
     * `buyer_external_identifier`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_id")
    private JsonNullable<String> buyerId;

    /**
     * Inline buyer details for the payout. Use this instead of the `buyer_id` or
     * `buyer_external_identifier`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends GuestBuyerInput> buyer;

    /**
     * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the
     * `buyer_id` or `buyer`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_external_identifier")
    private JsonNullable<String> buyerExternalIdentifier;

    /**
     * Merchant information for the source of the payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant")
    private JsonNullable<? extends PayoutMerchant> merchant;

    /**
     * Optional fields for processing payouts on specific payment services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_options")
    private JsonNullable<? extends PayoutConnectionOptions> connectionOptions;

    @JsonCreator
    public PayoutCreate(
            @JsonProperty("amount") long amount,
            @JsonProperty("currency") String currency,
            @JsonProperty("payment_service_id") String paymentServiceId,
            @JsonProperty("payment_method") PayoutCreatePaymentMethod paymentMethod,
            @JsonProperty("category") JsonNullable<? extends PayoutCategory> category,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("buyer_id") JsonNullable<String> buyerId,
            @JsonProperty("buyer") JsonNullable<? extends GuestBuyerInput> buyer,
            @JsonProperty("buyer_external_identifier") JsonNullable<String> buyerExternalIdentifier,
            @JsonProperty("merchant") JsonNullable<? extends PayoutMerchant> merchant,
            @JsonProperty("connection_options") JsonNullable<? extends PayoutConnectionOptions> connectionOptions) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        Utils.checkNotNull(merchant, "merchant");
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.amount = amount;
        this.currency = currency;
        this.paymentServiceId = paymentServiceId;
        this.paymentMethod = paymentMethod;
        this.category = category;
        this.externalIdentifier = externalIdentifier;
        this.buyerId = buyerId;
        this.buyer = buyer;
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        this.merchant = merchant;
        this.connectionOptions = connectionOptions;
    }
    
    public PayoutCreate(
            long amount,
            String currency,
            String paymentServiceId,
            PayoutCreatePaymentMethod paymentMethod) {
        this(amount, currency, paymentServiceId,
            paymentMethod, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The monetary amount for this payout, in the smallest currency unit for the given currency, for
     * example `1299` cents to create an authorization for $12.99.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The ISO-4217 currency code for this payout.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The ID of the payment service to use for the payout.
     */
    @JsonIgnore
    public String paymentServiceId() {
        return paymentServiceId;
    }

    /**
     * The type of payment method to send funds too.
     */
    @JsonIgnore
    public PayoutCreatePaymentMethod paymentMethod() {
        return paymentMethod;
    }

    /**
     * The type of payout to process.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayoutCategory> category() {
        return (JsonNullable<PayoutCategory>) category;
    }

    /**
     * A value that can be used to match the payout against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or
     * `buyer_external_identifier`.
     */
    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    /**
     * Inline buyer details for the payout. Use this instead of the `buyer_id` or
     * `buyer_external_identifier`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GuestBuyerInput> buyer() {
        return (JsonNullable<GuestBuyerInput>) buyer;
    }

    /**
     * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the
     * `buyer_id` or `buyer`.
     */
    @JsonIgnore
    public JsonNullable<String> buyerExternalIdentifier() {
        return buyerExternalIdentifier;
    }

    /**
     * Merchant information for the source of the payout.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayoutMerchant> merchant() {
        return (JsonNullable<PayoutMerchant>) merchant;
    }

    /**
     * Optional fields for processing payouts on specific payment services.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayoutConnectionOptions> connectionOptions() {
        return (JsonNullable<PayoutConnectionOptions>) connectionOptions;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The monetary amount for this payout, in the smallest currency unit for the given currency, for
     * example `1299` cents to create an authorization for $12.99.
     */
    public PayoutCreate withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The ISO-4217 currency code for this payout.
     */
    public PayoutCreate withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The ID of the payment service to use for the payout.
     */
    public PayoutCreate withPaymentServiceId(String paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = paymentServiceId;
        return this;
    }

    /**
     * The type of payment method to send funds too.
     */
    public PayoutCreate withPaymentMethod(PayoutCreatePaymentMethod paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The type of payout to process.
     */
    public PayoutCreate withCategory(PayoutCategory category) {
        Utils.checkNotNull(category, "category");
        this.category = JsonNullable.of(category);
        return this;
    }

    /**
     * The type of payout to process.
     */
    public PayoutCreate withCategory(JsonNullable<? extends PayoutCategory> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * A value that can be used to match the payout against your own records.
     */
    public PayoutCreate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * A value that can be used to match the payout against your own records.
     */
    public PayoutCreate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or
     * `buyer_external_identifier`.
     */
    public PayoutCreate withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    /**
     * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or
     * `buyer_external_identifier`.
     */
    public PayoutCreate withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    /**
     * Inline buyer details for the payout. Use this instead of the `buyer_id` or
     * `buyer_external_identifier`.
     */
    public PayoutCreate withBuyer(GuestBuyerInput buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * Inline buyer details for the payout. Use this instead of the `buyer_id` or
     * `buyer_external_identifier`.
     */
    public PayoutCreate withBuyer(JsonNullable<? extends GuestBuyerInput> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the
     * `buyer_id` or `buyer`.
     */
    public PayoutCreate withBuyerExternalIdentifier(String buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
        return this;
    }

    /**
     * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the
     * `buyer_id` or `buyer`.
     */
    public PayoutCreate withBuyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        return this;
    }

    /**
     * Merchant information for the source of the payout.
     */
    public PayoutCreate withMerchant(PayoutMerchant merchant) {
        Utils.checkNotNull(merchant, "merchant");
        this.merchant = JsonNullable.of(merchant);
        return this;
    }

    /**
     * Merchant information for the source of the payout.
     */
    public PayoutCreate withMerchant(JsonNullable<? extends PayoutMerchant> merchant) {
        Utils.checkNotNull(merchant, "merchant");
        this.merchant = merchant;
        return this;
    }

    /**
     * Optional fields for processing payouts on specific payment services.
     */
    public PayoutCreate withConnectionOptions(PayoutConnectionOptions connectionOptions) {
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.connectionOptions = JsonNullable.of(connectionOptions);
        return this;
    }

    /**
     * Optional fields for processing payouts on specific payment services.
     */
    public PayoutCreate withConnectionOptions(JsonNullable<? extends PayoutConnectionOptions> connectionOptions) {
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.connectionOptions = connectionOptions;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayoutCreate other = (PayoutCreate) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.paymentServiceId, other.paymentServiceId) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.category, other.category) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.buyerId, other.buyerId) &&
            Utils.enhancedDeepEquals(this.buyer, other.buyer) &&
            Utils.enhancedDeepEquals(this.buyerExternalIdentifier, other.buyerExternalIdentifier) &&
            Utils.enhancedDeepEquals(this.merchant, other.merchant) &&
            Utils.enhancedDeepEquals(this.connectionOptions, other.connectionOptions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, currency, paymentServiceId,
            paymentMethod, category, externalIdentifier,
            buyerId, buyer, buyerExternalIdentifier,
            merchant, connectionOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayoutCreate.class,
                "amount", amount,
                "currency", currency,
                "paymentServiceId", paymentServiceId,
                "paymentMethod", paymentMethod,
                "category", category,
                "externalIdentifier", externalIdentifier,
                "buyerId", buyerId,
                "buyer", buyer,
                "buyerExternalIdentifier", buyerExternalIdentifier,
                "merchant", merchant,
                "connectionOptions", connectionOptions);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long amount;

        private String currency;

        private String paymentServiceId;

        private PayoutCreatePaymentMethod paymentMethod;

        private JsonNullable<? extends PayoutCategory> category = JsonNullable.undefined();

        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();

        private JsonNullable<String> buyerId = JsonNullable.undefined();

        private JsonNullable<? extends GuestBuyerInput> buyer = JsonNullable.undefined();

        private JsonNullable<String> buyerExternalIdentifier = JsonNullable.undefined();

        private JsonNullable<? extends PayoutMerchant> merchant = JsonNullable.undefined();

        private JsonNullable<? extends PayoutConnectionOptions> connectionOptions = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The monetary amount for this payout, in the smallest currency unit for the given currency, for
         * example `1299` cents to create an authorization for $12.99.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The ISO-4217 currency code for this payout.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The ID of the payment service to use for the payout.
         */
        public Builder paymentServiceId(String paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = paymentServiceId;
            return this;
        }


        /**
         * The type of payment method to send funds too.
         */
        public Builder paymentMethod(PayoutCreatePaymentMethod paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }


        /**
         * The type of payout to process.
         */
        public Builder category(PayoutCategory category) {
            Utils.checkNotNull(category, "category");
            this.category = JsonNullable.of(category);
            return this;
        }

        /**
         * The type of payout to process.
         */
        public Builder category(JsonNullable<? extends PayoutCategory> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }


        /**
         * A value that can be used to match the payout against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * A value that can be used to match the payout against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }


        /**
         * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or
         * `buyer_external_identifier`.
         */
        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        /**
         * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or
         * `buyer_external_identifier`.
         */
        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }


        /**
         * Inline buyer details for the payout. Use this instead of the `buyer_id` or
         * `buyer_external_identifier`.
         */
        public Builder buyer(GuestBuyerInput buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * Inline buyer details for the payout. Use this instead of the `buyer_id` or
         * `buyer_external_identifier`.
         */
        public Builder buyer(JsonNullable<? extends GuestBuyerInput> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }


        /**
         * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the
         * `buyer_id` or `buyer`.
         */
        public Builder buyerExternalIdentifier(String buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
            return this;
        }

        /**
         * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the
         * `buyer_id` or `buyer`.
         */
        public Builder buyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = buyerExternalIdentifier;
            return this;
        }


        /**
         * Merchant information for the source of the payout.
         */
        public Builder merchant(PayoutMerchant merchant) {
            Utils.checkNotNull(merchant, "merchant");
            this.merchant = JsonNullable.of(merchant);
            return this;
        }

        /**
         * Merchant information for the source of the payout.
         */
        public Builder merchant(JsonNullable<? extends PayoutMerchant> merchant) {
            Utils.checkNotNull(merchant, "merchant");
            this.merchant = merchant;
            return this;
        }


        /**
         * Optional fields for processing payouts on specific payment services.
         */
        public Builder connectionOptions(PayoutConnectionOptions connectionOptions) {
            Utils.checkNotNull(connectionOptions, "connectionOptions");
            this.connectionOptions = JsonNullable.of(connectionOptions);
            return this;
        }

        /**
         * Optional fields for processing payouts on specific payment services.
         */
        public Builder connectionOptions(JsonNullable<? extends PayoutConnectionOptions> connectionOptions) {
            Utils.checkNotNull(connectionOptions, "connectionOptions");
            this.connectionOptions = connectionOptions;
            return this;
        }

        public PayoutCreate build() {

            return new PayoutCreate(
                amount, currency, paymentServiceId,
                paymentMethod, category, externalIdentifier,
                buyerId, buyer, buyerExternalIdentifier,
                merchant, connectionOptions);
        }

    }
}
