/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentLinkCreate {
    /**
     * The guest buyer for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends GuestBuyerInput> buyer;

    /**
     * The expiration date and time for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    private JsonNullable<OffsetDateTime> expiresAt;

    /**
     * Connection options for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_options")
    private JsonNullable<? extends Map<String, Map<String, Object>>> connectionOptions;

    /**
     * The merchant reference for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The statement descriptor for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statement_descriptor")
    private JsonNullable<? extends StatementDescriptor> statementDescriptor;

    /**
     * The locale for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private JsonNullable<? extends Locale> locale;

    /**
     * The merchant's display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_name")
    private JsonNullable<String> merchantName;

    /**
     * The merchant's website URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_url")
    private JsonNullable<String> merchantUrl;

    /**
     * The merchant's banner image URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_banner_url")
    private JsonNullable<String> merchantBannerUrl;

    /**
     * The merchant's brand color.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_color")
    private JsonNullable<String> merchantColor;

    /**
     * A message from the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_message")
    private JsonNullable<String> merchantMessage;

    /**
     * URL to the merchant's terms and conditions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_terms_and_conditions_url")
    private JsonNullable<String> merchantTermsAndConditionsUrl;

    /**
     * URL to the merchant's favicon.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_favicon_url")
    private JsonNullable<String> merchantFaviconUrl;

    /**
     * The amount for the payment link.
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The country code for the payment link.
     */
    @JsonProperty("country")
    private String country;

    /**
     * The currency code for the payment link.
     */
    @JsonProperty("currency")
    private String currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intent")
    private Optional<? extends TransactionIntent> intent;

    /**
     * The return URL after payment completion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_url")
    private JsonNullable<String> returnUrl;

    /**
     * The cart items for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cart_items")
    private JsonNullable<? extends List<CartItem>> cartItems;

    /**
     * Arbitrary metadata for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, Object>> metadata;

    /**
     * The way payment method information made it to this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_source")
    private Optional<? extends TransactionPaymentSource> paymentSource;

    @JsonCreator
    public PaymentLinkCreate(
            @JsonProperty("buyer") JsonNullable<? extends GuestBuyerInput> buyer,
            @JsonProperty("expires_at") JsonNullable<OffsetDateTime> expiresAt,
            @JsonProperty("connection_options") JsonNullable<? extends Map<String, Map<String, Object>>> connectionOptions,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("statement_descriptor") JsonNullable<? extends StatementDescriptor> statementDescriptor,
            @JsonProperty("locale") JsonNullable<? extends Locale> locale,
            @JsonProperty("merchant_name") JsonNullable<String> merchantName,
            @JsonProperty("merchant_url") JsonNullable<String> merchantUrl,
            @JsonProperty("merchant_banner_url") JsonNullable<String> merchantBannerUrl,
            @JsonProperty("merchant_color") JsonNullable<String> merchantColor,
            @JsonProperty("merchant_message") JsonNullable<String> merchantMessage,
            @JsonProperty("merchant_terms_and_conditions_url") JsonNullable<String> merchantTermsAndConditionsUrl,
            @JsonProperty("merchant_favicon_url") JsonNullable<String> merchantFaviconUrl,
            @JsonProperty("amount") long amount,
            @JsonProperty("country") String country,
            @JsonProperty("currency") String currency,
            @JsonProperty("intent") Optional<? extends TransactionIntent> intent,
            @JsonProperty("return_url") JsonNullable<String> returnUrl,
            @JsonProperty("cart_items") JsonNullable<? extends List<CartItem>> cartItems,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, Object>> metadata,
            @JsonProperty("payment_source") Optional<? extends TransactionPaymentSource> paymentSource) {
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(merchantName, "merchantName");
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
        Utils.checkNotNull(merchantColor, "merchantColor");
        Utils.checkNotNull(merchantMessage, "merchantMessage");
        Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
        Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(intent, "intent");
        Utils.checkNotNull(returnUrl, "returnUrl");
        Utils.checkNotNull(cartItems, "cartItems");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.buyer = buyer;
        this.expiresAt = expiresAt;
        this.connectionOptions = connectionOptions;
        this.externalIdentifier = externalIdentifier;
        this.statementDescriptor = statementDescriptor;
        this.locale = locale;
        this.merchantName = merchantName;
        this.merchantUrl = merchantUrl;
        this.merchantBannerUrl = merchantBannerUrl;
        this.merchantColor = merchantColor;
        this.merchantMessage = merchantMessage;
        this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
        this.merchantFaviconUrl = merchantFaviconUrl;
        this.amount = amount;
        this.country = country;
        this.currency = currency;
        this.intent = intent;
        this.returnUrl = returnUrl;
        this.cartItems = cartItems;
        this.metadata = metadata;
        this.paymentSource = paymentSource;
    }
    
    public PaymentLinkCreate(
            long amount,
            String country,
            String currency) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), amount, country,
            currency, Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The guest buyer for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GuestBuyerInput> buyer() {
        return (JsonNullable<GuestBuyerInput>) buyer;
    }

    /**
     * The expiration date and time for the payment link.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> expiresAt() {
        return expiresAt;
    }

    /**
     * Connection options for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Map<String, Object>>> connectionOptions() {
        return (JsonNullable<Map<String, Map<String, Object>>>) connectionOptions;
    }

    /**
     * The merchant reference for the payment link.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The statement descriptor for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StatementDescriptor> statementDescriptor() {
        return (JsonNullable<StatementDescriptor>) statementDescriptor;
    }

    /**
     * The locale for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Locale> locale() {
        return (JsonNullable<Locale>) locale;
    }

    /**
     * The merchant's display name.
     */
    @JsonIgnore
    public JsonNullable<String> merchantName() {
        return merchantName;
    }

    /**
     * The merchant's website URL.
     */
    @JsonIgnore
    public JsonNullable<String> merchantUrl() {
        return merchantUrl;
    }

    /**
     * The merchant's banner image URL.
     */
    @JsonIgnore
    public JsonNullable<String> merchantBannerUrl() {
        return merchantBannerUrl;
    }

    /**
     * The merchant's brand color.
     */
    @JsonIgnore
    public JsonNullable<String> merchantColor() {
        return merchantColor;
    }

    /**
     * A message from the merchant.
     */
    @JsonIgnore
    public JsonNullable<String> merchantMessage() {
        return merchantMessage;
    }

    /**
     * URL to the merchant's terms and conditions.
     */
    @JsonIgnore
    public JsonNullable<String> merchantTermsAndConditionsUrl() {
        return merchantTermsAndConditionsUrl;
    }

    /**
     * URL to the merchant's favicon.
     */
    @JsonIgnore
    public JsonNullable<String> merchantFaviconUrl() {
        return merchantFaviconUrl;
    }

    /**
     * The amount for the payment link.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The country code for the payment link.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * The currency code for the payment link.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionIntent> intent() {
        return (Optional<TransactionIntent>) intent;
    }

    /**
     * The return URL after payment completion.
     */
    @JsonIgnore
    public JsonNullable<String> returnUrl() {
        return returnUrl;
    }

    /**
     * The cart items for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CartItem>> cartItems() {
        return (JsonNullable<List<CartItem>>) cartItems;
    }

    /**
     * Arbitrary metadata for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> metadata() {
        return (JsonNullable<Map<String, Object>>) metadata;
    }

    /**
     * The way payment method information made it to this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPaymentSource> paymentSource() {
        return (Optional<TransactionPaymentSource>) paymentSource;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The guest buyer for the payment link.
     */
    public PaymentLinkCreate withBuyer(GuestBuyerInput buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * The guest buyer for the payment link.
     */
    public PaymentLinkCreate withBuyer(JsonNullable<? extends GuestBuyerInput> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * The expiration date and time for the payment link.
     */
    public PaymentLinkCreate withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }

    /**
     * The expiration date and time for the payment link.
     */
    public PaymentLinkCreate withExpiresAt(JsonNullable<OffsetDateTime> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * Connection options for the payment link.
     */
    public PaymentLinkCreate withConnectionOptions(Map<String, Map<String, Object>> connectionOptions) {
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.connectionOptions = JsonNullable.of(connectionOptions);
        return this;
    }

    /**
     * Connection options for the payment link.
     */
    public PaymentLinkCreate withConnectionOptions(JsonNullable<? extends Map<String, Map<String, Object>>> connectionOptions) {
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.connectionOptions = connectionOptions;
        return this;
    }

    /**
     * The merchant reference for the payment link.
     */
    public PaymentLinkCreate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant reference for the payment link.
     */
    public PaymentLinkCreate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The statement descriptor for the payment link.
     */
    public PaymentLinkCreate withStatementDescriptor(StatementDescriptor statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = JsonNullable.of(statementDescriptor);
        return this;
    }

    /**
     * The statement descriptor for the payment link.
     */
    public PaymentLinkCreate withStatementDescriptor(JsonNullable<? extends StatementDescriptor> statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = statementDescriptor;
        return this;
    }

    /**
     * The locale for the payment link.
     */
    public PaymentLinkCreate withLocale(Locale locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = JsonNullable.of(locale);
        return this;
    }

    /**
     * The locale for the payment link.
     */
    public PaymentLinkCreate withLocale(JsonNullable<? extends Locale> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * The merchant's display name.
     */
    public PaymentLinkCreate withMerchantName(String merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = JsonNullable.of(merchantName);
        return this;
    }

    /**
     * The merchant's display name.
     */
    public PaymentLinkCreate withMerchantName(JsonNullable<String> merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = merchantName;
        return this;
    }

    /**
     * The merchant's website URL.
     */
    public PaymentLinkCreate withMerchantUrl(String merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = JsonNullable.of(merchantUrl);
        return this;
    }

    /**
     * The merchant's website URL.
     */
    public PaymentLinkCreate withMerchantUrl(JsonNullable<String> merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = merchantUrl;
        return this;
    }

    /**
     * The merchant's banner image URL.
     */
    public PaymentLinkCreate withMerchantBannerUrl(String merchantBannerUrl) {
        Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
        this.merchantBannerUrl = JsonNullable.of(merchantBannerUrl);
        return this;
    }

    /**
     * The merchant's banner image URL.
     */
    public PaymentLinkCreate withMerchantBannerUrl(JsonNullable<String> merchantBannerUrl) {
        Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
        this.merchantBannerUrl = merchantBannerUrl;
        return this;
    }

    /**
     * The merchant's brand color.
     */
    public PaymentLinkCreate withMerchantColor(String merchantColor) {
        Utils.checkNotNull(merchantColor, "merchantColor");
        this.merchantColor = JsonNullable.of(merchantColor);
        return this;
    }

    /**
     * The merchant's brand color.
     */
    public PaymentLinkCreate withMerchantColor(JsonNullable<String> merchantColor) {
        Utils.checkNotNull(merchantColor, "merchantColor");
        this.merchantColor = merchantColor;
        return this;
    }

    /**
     * A message from the merchant.
     */
    public PaymentLinkCreate withMerchantMessage(String merchantMessage) {
        Utils.checkNotNull(merchantMessage, "merchantMessage");
        this.merchantMessage = JsonNullable.of(merchantMessage);
        return this;
    }

    /**
     * A message from the merchant.
     */
    public PaymentLinkCreate withMerchantMessage(JsonNullable<String> merchantMessage) {
        Utils.checkNotNull(merchantMessage, "merchantMessage");
        this.merchantMessage = merchantMessage;
        return this;
    }

    /**
     * URL to the merchant's terms and conditions.
     */
    public PaymentLinkCreate withMerchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
        Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
        this.merchantTermsAndConditionsUrl = JsonNullable.of(merchantTermsAndConditionsUrl);
        return this;
    }

    /**
     * URL to the merchant's terms and conditions.
     */
    public PaymentLinkCreate withMerchantTermsAndConditionsUrl(JsonNullable<String> merchantTermsAndConditionsUrl) {
        Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
        this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
        return this;
    }

    /**
     * URL to the merchant's favicon.
     */
    public PaymentLinkCreate withMerchantFaviconUrl(String merchantFaviconUrl) {
        Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
        this.merchantFaviconUrl = JsonNullable.of(merchantFaviconUrl);
        return this;
    }

    /**
     * URL to the merchant's favicon.
     */
    public PaymentLinkCreate withMerchantFaviconUrl(JsonNullable<String> merchantFaviconUrl) {
        Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
        this.merchantFaviconUrl = merchantFaviconUrl;
        return this;
    }

    /**
     * The amount for the payment link.
     */
    public PaymentLinkCreate withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The country code for the payment link.
     */
    public PaymentLinkCreate withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The currency code for the payment link.
     */
    public PaymentLinkCreate withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public PaymentLinkCreate withIntent(TransactionIntent intent) {
        Utils.checkNotNull(intent, "intent");
        this.intent = Optional.ofNullable(intent);
        return this;
    }


    public PaymentLinkCreate withIntent(Optional<? extends TransactionIntent> intent) {
        Utils.checkNotNull(intent, "intent");
        this.intent = intent;
        return this;
    }

    /**
     * The return URL after payment completion.
     */
    public PaymentLinkCreate withReturnUrl(String returnUrl) {
        Utils.checkNotNull(returnUrl, "returnUrl");
        this.returnUrl = JsonNullable.of(returnUrl);
        return this;
    }

    /**
     * The return URL after payment completion.
     */
    public PaymentLinkCreate withReturnUrl(JsonNullable<String> returnUrl) {
        Utils.checkNotNull(returnUrl, "returnUrl");
        this.returnUrl = returnUrl;
        return this;
    }

    /**
     * The cart items for the payment link.
     */
    public PaymentLinkCreate withCartItems(List<CartItem> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = JsonNullable.of(cartItems);
        return this;
    }

    /**
     * The cart items for the payment link.
     */
    public PaymentLinkCreate withCartItems(JsonNullable<? extends List<CartItem>> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = cartItems;
        return this;
    }

    /**
     * Arbitrary metadata for the payment link.
     */
    public PaymentLinkCreate withMetadata(Map<String, Object> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Arbitrary metadata for the payment link.
     */
    public PaymentLinkCreate withMetadata(JsonNullable<? extends Map<String, Object>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The way payment method information made it to this transaction.
     */
    public PaymentLinkCreate withPaymentSource(TransactionPaymentSource paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = Optional.ofNullable(paymentSource);
        return this;
    }


    /**
     * The way payment method information made it to this transaction.
     */
    public PaymentLinkCreate withPaymentSource(Optional<? extends TransactionPaymentSource> paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = paymentSource;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentLinkCreate other = (PaymentLinkCreate) o;
        return 
            Utils.enhancedDeepEquals(this.buyer, other.buyer) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.connectionOptions, other.connectionOptions) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.statementDescriptor, other.statementDescriptor) &&
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.merchantName, other.merchantName) &&
            Utils.enhancedDeepEquals(this.merchantUrl, other.merchantUrl) &&
            Utils.enhancedDeepEquals(this.merchantBannerUrl, other.merchantBannerUrl) &&
            Utils.enhancedDeepEquals(this.merchantColor, other.merchantColor) &&
            Utils.enhancedDeepEquals(this.merchantMessage, other.merchantMessage) &&
            Utils.enhancedDeepEquals(this.merchantTermsAndConditionsUrl, other.merchantTermsAndConditionsUrl) &&
            Utils.enhancedDeepEquals(this.merchantFaviconUrl, other.merchantFaviconUrl) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.intent, other.intent) &&
            Utils.enhancedDeepEquals(this.returnUrl, other.returnUrl) &&
            Utils.enhancedDeepEquals(this.cartItems, other.cartItems) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentSource, other.paymentSource);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            buyer, expiresAt, connectionOptions,
            externalIdentifier, statementDescriptor, locale,
            merchantName, merchantUrl, merchantBannerUrl,
            merchantColor, merchantMessage, merchantTermsAndConditionsUrl,
            merchantFaviconUrl, amount, country,
            currency, intent, returnUrl,
            cartItems, metadata, paymentSource);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentLinkCreate.class,
                "buyer", buyer,
                "expiresAt", expiresAt,
                "connectionOptions", connectionOptions,
                "externalIdentifier", externalIdentifier,
                "statementDescriptor", statementDescriptor,
                "locale", locale,
                "merchantName", merchantName,
                "merchantUrl", merchantUrl,
                "merchantBannerUrl", merchantBannerUrl,
                "merchantColor", merchantColor,
                "merchantMessage", merchantMessage,
                "merchantTermsAndConditionsUrl", merchantTermsAndConditionsUrl,
                "merchantFaviconUrl", merchantFaviconUrl,
                "amount", amount,
                "country", country,
                "currency", currency,
                "intent", intent,
                "returnUrl", returnUrl,
                "cartItems", cartItems,
                "metadata", metadata,
                "paymentSource", paymentSource);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends GuestBuyerInput> buyer = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> expiresAt = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Map<String, Object>>> connectionOptions = JsonNullable.undefined();

        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();

        private JsonNullable<? extends StatementDescriptor> statementDescriptor = JsonNullable.undefined();

        private JsonNullable<? extends Locale> locale = JsonNullable.undefined();

        private JsonNullable<String> merchantName = JsonNullable.undefined();

        private JsonNullable<String> merchantUrl = JsonNullable.undefined();

        private JsonNullable<String> merchantBannerUrl = JsonNullable.undefined();

        private JsonNullable<String> merchantColor = JsonNullable.undefined();

        private JsonNullable<String> merchantMessage = JsonNullable.undefined();

        private JsonNullable<String> merchantTermsAndConditionsUrl = JsonNullable.undefined();

        private JsonNullable<String> merchantFaviconUrl = JsonNullable.undefined();

        private Long amount;

        private String country;

        private String currency;

        private Optional<? extends TransactionIntent> intent = Optional.empty();

        private JsonNullable<String> returnUrl = JsonNullable.undefined();

        private JsonNullable<? extends List<CartItem>> cartItems = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Object>> metadata = JsonNullable.undefined();

        private Optional<? extends TransactionPaymentSource> paymentSource = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The guest buyer for the payment link.
         */
        public Builder buyer(GuestBuyerInput buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * The guest buyer for the payment link.
         */
        public Builder buyer(JsonNullable<? extends GuestBuyerInput> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }


        /**
         * The expiration date and time for the payment link.
         */
        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        /**
         * The expiration date and time for the payment link.
         */
        public Builder expiresAt(JsonNullable<OffsetDateTime> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }


        /**
         * Connection options for the payment link.
         */
        public Builder connectionOptions(Map<String, Map<String, Object>> connectionOptions) {
            Utils.checkNotNull(connectionOptions, "connectionOptions");
            this.connectionOptions = JsonNullable.of(connectionOptions);
            return this;
        }

        /**
         * Connection options for the payment link.
         */
        public Builder connectionOptions(JsonNullable<? extends Map<String, Map<String, Object>>> connectionOptions) {
            Utils.checkNotNull(connectionOptions, "connectionOptions");
            this.connectionOptions = connectionOptions;
            return this;
        }


        /**
         * The merchant reference for the payment link.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant reference for the payment link.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }


        /**
         * The statement descriptor for the payment link.
         */
        public Builder statementDescriptor(StatementDescriptor statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = JsonNullable.of(statementDescriptor);
            return this;
        }

        /**
         * The statement descriptor for the payment link.
         */
        public Builder statementDescriptor(JsonNullable<? extends StatementDescriptor> statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = statementDescriptor;
            return this;
        }


        /**
         * The locale for the payment link.
         */
        public Builder locale(Locale locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = JsonNullable.of(locale);
            return this;
        }

        /**
         * The locale for the payment link.
         */
        public Builder locale(JsonNullable<? extends Locale> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }


        /**
         * The merchant's display name.
         */
        public Builder merchantName(String merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = JsonNullable.of(merchantName);
            return this;
        }

        /**
         * The merchant's display name.
         */
        public Builder merchantName(JsonNullable<String> merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = merchantName;
            return this;
        }


        /**
         * The merchant's website URL.
         */
        public Builder merchantUrl(String merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = JsonNullable.of(merchantUrl);
            return this;
        }

        /**
         * The merchant's website URL.
         */
        public Builder merchantUrl(JsonNullable<String> merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = merchantUrl;
            return this;
        }


        /**
         * The merchant's banner image URL.
         */
        public Builder merchantBannerUrl(String merchantBannerUrl) {
            Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
            this.merchantBannerUrl = JsonNullable.of(merchantBannerUrl);
            return this;
        }

        /**
         * The merchant's banner image URL.
         */
        public Builder merchantBannerUrl(JsonNullable<String> merchantBannerUrl) {
            Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
            this.merchantBannerUrl = merchantBannerUrl;
            return this;
        }


        /**
         * The merchant's brand color.
         */
        public Builder merchantColor(String merchantColor) {
            Utils.checkNotNull(merchantColor, "merchantColor");
            this.merchantColor = JsonNullable.of(merchantColor);
            return this;
        }

        /**
         * The merchant's brand color.
         */
        public Builder merchantColor(JsonNullable<String> merchantColor) {
            Utils.checkNotNull(merchantColor, "merchantColor");
            this.merchantColor = merchantColor;
            return this;
        }


        /**
         * A message from the merchant.
         */
        public Builder merchantMessage(String merchantMessage) {
            Utils.checkNotNull(merchantMessage, "merchantMessage");
            this.merchantMessage = JsonNullable.of(merchantMessage);
            return this;
        }

        /**
         * A message from the merchant.
         */
        public Builder merchantMessage(JsonNullable<String> merchantMessage) {
            Utils.checkNotNull(merchantMessage, "merchantMessage");
            this.merchantMessage = merchantMessage;
            return this;
        }


        /**
         * URL to the merchant's terms and conditions.
         */
        public Builder merchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
            Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
            this.merchantTermsAndConditionsUrl = JsonNullable.of(merchantTermsAndConditionsUrl);
            return this;
        }

        /**
         * URL to the merchant's terms and conditions.
         */
        public Builder merchantTermsAndConditionsUrl(JsonNullable<String> merchantTermsAndConditionsUrl) {
            Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
            this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
            return this;
        }


        /**
         * URL to the merchant's favicon.
         */
        public Builder merchantFaviconUrl(String merchantFaviconUrl) {
            Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
            this.merchantFaviconUrl = JsonNullable.of(merchantFaviconUrl);
            return this;
        }

        /**
         * URL to the merchant's favicon.
         */
        public Builder merchantFaviconUrl(JsonNullable<String> merchantFaviconUrl) {
            Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
            this.merchantFaviconUrl = merchantFaviconUrl;
            return this;
        }


        /**
         * The amount for the payment link.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The country code for the payment link.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * The currency code for the payment link.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder intent(TransactionIntent intent) {
            Utils.checkNotNull(intent, "intent");
            this.intent = Optional.ofNullable(intent);
            return this;
        }

        public Builder intent(Optional<? extends TransactionIntent> intent) {
            Utils.checkNotNull(intent, "intent");
            this.intent = intent;
            return this;
        }


        /**
         * The return URL after payment completion.
         */
        public Builder returnUrl(String returnUrl) {
            Utils.checkNotNull(returnUrl, "returnUrl");
            this.returnUrl = JsonNullable.of(returnUrl);
            return this;
        }

        /**
         * The return URL after payment completion.
         */
        public Builder returnUrl(JsonNullable<String> returnUrl) {
            Utils.checkNotNull(returnUrl, "returnUrl");
            this.returnUrl = returnUrl;
            return this;
        }


        /**
         * The cart items for the payment link.
         */
        public Builder cartItems(List<CartItem> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = JsonNullable.of(cartItems);
            return this;
        }

        /**
         * The cart items for the payment link.
         */
        public Builder cartItems(JsonNullable<? extends List<CartItem>> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = cartItems;
            return this;
        }


        /**
         * Arbitrary metadata for the payment link.
         */
        public Builder metadata(Map<String, Object> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Arbitrary metadata for the payment link.
         */
        public Builder metadata(JsonNullable<? extends Map<String, Object>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The way payment method information made it to this transaction.
         */
        public Builder paymentSource(TransactionPaymentSource paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = Optional.ofNullable(paymentSource);
            return this;
        }

        /**
         * The way payment method information made it to this transaction.
         */
        public Builder paymentSource(Optional<? extends TransactionPaymentSource> paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = paymentSource;
            return this;
        }

        public PaymentLinkCreate build() {

            return new PaymentLinkCreate(
                buyer, expiresAt, connectionOptions,
                externalIdentifier, statementDescriptor, locale,
                merchantName, merchantUrl, merchantBannerUrl,
                merchantColor, merchantMessage, merchantTermsAndConditionsUrl,
                merchantFaviconUrl, amount, country,
                currency, intent, returnUrl,
                cartItems, metadata, paymentSource);
        }

    }
}
