/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class StripeConnectOptions {
    /**
     * The Stripe Connect account to target using the `Stripe-Account` header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripe_account")
    private JsonNullable<String> stripeAccount;

    /**
     * The fee to charge the connected account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_fee_amount")
    private JsonNullable<Long> applicationFeeAmount;

    /**
     * The Stripe Connect account to target using the `on_behalf_of` request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_behalf_of")
    private JsonNullable<String> onBehalfOf;

    /**
     * The Stripe Connect account to target using the `transfer_data.destination` request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfer_data_destination")
    private JsonNullable<String> transferDataDestination;

    /**
     * A string that identifies the payment as part of a group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfer_group")
    private JsonNullable<String> transferGroup;

    @JsonCreator
    public StripeConnectOptions(
            @JsonProperty("stripe_account") JsonNullable<String> stripeAccount,
            @JsonProperty("application_fee_amount") JsonNullable<Long> applicationFeeAmount,
            @JsonProperty("on_behalf_of") JsonNullable<String> onBehalfOf,
            @JsonProperty("transfer_data_destination") JsonNullable<String> transferDataDestination,
            @JsonProperty("transfer_group") JsonNullable<String> transferGroup) {
        Utils.checkNotNull(stripeAccount, "stripeAccount");
        Utils.checkNotNull(applicationFeeAmount, "applicationFeeAmount");
        Utils.checkNotNull(onBehalfOf, "onBehalfOf");
        Utils.checkNotNull(transferDataDestination, "transferDataDestination");
        Utils.checkNotNull(transferGroup, "transferGroup");
        this.stripeAccount = stripeAccount;
        this.applicationFeeAmount = applicationFeeAmount;
        this.onBehalfOf = onBehalfOf;
        this.transferDataDestination = transferDataDestination;
        this.transferGroup = transferGroup;
    }
    
    public StripeConnectOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The Stripe Connect account to target using the `Stripe-Account` header.
     */
    @JsonIgnore
    public JsonNullable<String> stripeAccount() {
        return stripeAccount;
    }

    /**
     * The fee to charge the connected account.
     */
    @JsonIgnore
    public JsonNullable<Long> applicationFeeAmount() {
        return applicationFeeAmount;
    }

    /**
     * The Stripe Connect account to target using the `on_behalf_of` request parameter.
     */
    @JsonIgnore
    public JsonNullable<String> onBehalfOf() {
        return onBehalfOf;
    }

    /**
     * The Stripe Connect account to target using the `transfer_data.destination` request parameter.
     */
    @JsonIgnore
    public JsonNullable<String> transferDataDestination() {
        return transferDataDestination;
    }

    /**
     * A string that identifies the payment as part of a group.
     */
    @JsonIgnore
    public JsonNullable<String> transferGroup() {
        return transferGroup;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The Stripe Connect account to target using the `Stripe-Account` header.
     */
    public StripeConnectOptions withStripeAccount(String stripeAccount) {
        Utils.checkNotNull(stripeAccount, "stripeAccount");
        this.stripeAccount = JsonNullable.of(stripeAccount);
        return this;
    }

    /**
     * The Stripe Connect account to target using the `Stripe-Account` header.
     */
    public StripeConnectOptions withStripeAccount(JsonNullable<String> stripeAccount) {
        Utils.checkNotNull(stripeAccount, "stripeAccount");
        this.stripeAccount = stripeAccount;
        return this;
    }

    /**
     * The fee to charge the connected account.
     */
    public StripeConnectOptions withApplicationFeeAmount(long applicationFeeAmount) {
        Utils.checkNotNull(applicationFeeAmount, "applicationFeeAmount");
        this.applicationFeeAmount = JsonNullable.of(applicationFeeAmount);
        return this;
    }

    /**
     * The fee to charge the connected account.
     */
    public StripeConnectOptions withApplicationFeeAmount(JsonNullable<Long> applicationFeeAmount) {
        Utils.checkNotNull(applicationFeeAmount, "applicationFeeAmount");
        this.applicationFeeAmount = applicationFeeAmount;
        return this;
    }

    /**
     * The Stripe Connect account to target using the `on_behalf_of` request parameter.
     */
    public StripeConnectOptions withOnBehalfOf(String onBehalfOf) {
        Utils.checkNotNull(onBehalfOf, "onBehalfOf");
        this.onBehalfOf = JsonNullable.of(onBehalfOf);
        return this;
    }

    /**
     * The Stripe Connect account to target using the `on_behalf_of` request parameter.
     */
    public StripeConnectOptions withOnBehalfOf(JsonNullable<String> onBehalfOf) {
        Utils.checkNotNull(onBehalfOf, "onBehalfOf");
        this.onBehalfOf = onBehalfOf;
        return this;
    }

    /**
     * The Stripe Connect account to target using the `transfer_data.destination` request parameter.
     */
    public StripeConnectOptions withTransferDataDestination(String transferDataDestination) {
        Utils.checkNotNull(transferDataDestination, "transferDataDestination");
        this.transferDataDestination = JsonNullable.of(transferDataDestination);
        return this;
    }

    /**
     * The Stripe Connect account to target using the `transfer_data.destination` request parameter.
     */
    public StripeConnectOptions withTransferDataDestination(JsonNullable<String> transferDataDestination) {
        Utils.checkNotNull(transferDataDestination, "transferDataDestination");
        this.transferDataDestination = transferDataDestination;
        return this;
    }

    /**
     * A string that identifies the payment as part of a group.
     */
    public StripeConnectOptions withTransferGroup(String transferGroup) {
        Utils.checkNotNull(transferGroup, "transferGroup");
        this.transferGroup = JsonNullable.of(transferGroup);
        return this;
    }

    /**
     * A string that identifies the payment as part of a group.
     */
    public StripeConnectOptions withTransferGroup(JsonNullable<String> transferGroup) {
        Utils.checkNotNull(transferGroup, "transferGroup");
        this.transferGroup = transferGroup;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StripeConnectOptions other = (StripeConnectOptions) o;
        return 
            Utils.enhancedDeepEquals(this.stripeAccount, other.stripeAccount) &&
            Utils.enhancedDeepEquals(this.applicationFeeAmount, other.applicationFeeAmount) &&
            Utils.enhancedDeepEquals(this.onBehalfOf, other.onBehalfOf) &&
            Utils.enhancedDeepEquals(this.transferDataDestination, other.transferDataDestination) &&
            Utils.enhancedDeepEquals(this.transferGroup, other.transferGroup);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            stripeAccount, applicationFeeAmount, onBehalfOf,
            transferDataDestination, transferGroup);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StripeConnectOptions.class,
                "stripeAccount", stripeAccount,
                "applicationFeeAmount", applicationFeeAmount,
                "onBehalfOf", onBehalfOf,
                "transferDataDestination", transferDataDestination,
                "transferGroup", transferGroup);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> stripeAccount = JsonNullable.undefined();

        private JsonNullable<Long> applicationFeeAmount = JsonNullable.undefined();

        private JsonNullable<String> onBehalfOf = JsonNullable.undefined();

        private JsonNullable<String> transferDataDestination = JsonNullable.undefined();

        private JsonNullable<String> transferGroup = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The Stripe Connect account to target using the `Stripe-Account` header.
         */
        public Builder stripeAccount(String stripeAccount) {
            Utils.checkNotNull(stripeAccount, "stripeAccount");
            this.stripeAccount = JsonNullable.of(stripeAccount);
            return this;
        }

        /**
         * The Stripe Connect account to target using the `Stripe-Account` header.
         */
        public Builder stripeAccount(JsonNullable<String> stripeAccount) {
            Utils.checkNotNull(stripeAccount, "stripeAccount");
            this.stripeAccount = stripeAccount;
            return this;
        }


        /**
         * The fee to charge the connected account.
         */
        public Builder applicationFeeAmount(long applicationFeeAmount) {
            Utils.checkNotNull(applicationFeeAmount, "applicationFeeAmount");
            this.applicationFeeAmount = JsonNullable.of(applicationFeeAmount);
            return this;
        }

        /**
         * The fee to charge the connected account.
         */
        public Builder applicationFeeAmount(JsonNullable<Long> applicationFeeAmount) {
            Utils.checkNotNull(applicationFeeAmount, "applicationFeeAmount");
            this.applicationFeeAmount = applicationFeeAmount;
            return this;
        }


        /**
         * The Stripe Connect account to target using the `on_behalf_of` request parameter.
         */
        public Builder onBehalfOf(String onBehalfOf) {
            Utils.checkNotNull(onBehalfOf, "onBehalfOf");
            this.onBehalfOf = JsonNullable.of(onBehalfOf);
            return this;
        }

        /**
         * The Stripe Connect account to target using the `on_behalf_of` request parameter.
         */
        public Builder onBehalfOf(JsonNullable<String> onBehalfOf) {
            Utils.checkNotNull(onBehalfOf, "onBehalfOf");
            this.onBehalfOf = onBehalfOf;
            return this;
        }


        /**
         * The Stripe Connect account to target using the `transfer_data.destination` request parameter.
         */
        public Builder transferDataDestination(String transferDataDestination) {
            Utils.checkNotNull(transferDataDestination, "transferDataDestination");
            this.transferDataDestination = JsonNullable.of(transferDataDestination);
            return this;
        }

        /**
         * The Stripe Connect account to target using the `transfer_data.destination` request parameter.
         */
        public Builder transferDataDestination(JsonNullable<String> transferDataDestination) {
            Utils.checkNotNull(transferDataDestination, "transferDataDestination");
            this.transferDataDestination = transferDataDestination;
            return this;
        }


        /**
         * A string that identifies the payment as part of a group.
         */
        public Builder transferGroup(String transferGroup) {
            Utils.checkNotNull(transferGroup, "transferGroup");
            this.transferGroup = JsonNullable.of(transferGroup);
            return this;
        }

        /**
         * A string that identifies the payment as part of a group.
         */
        public Builder transferGroup(JsonNullable<String> transferGroup) {
            Utils.checkNotNull(transferGroup, "transferGroup");
            this.transferGroup = transferGroup;
            return this;
        }

        public StripeConnectOptions build() {

            return new StripeConnectOptions(
                stripeAccount, applicationFeeAmount, onBehalfOf,
                transferDataDestination, transferGroup);
        }

    }
}
