/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * GiftCardRequest
 * 
 * <p>The number and pin for a gift card to fetch a balance for.
 */
public class GiftCardRequest {
    /**
     * The 16-19 digit number for the gift card.
     */
    @JsonProperty("number")
    private String number;

    /**
     * The PIN for this gift card.
     */
    @JsonProperty("pin")
    private String pin;

    @JsonCreator
    public GiftCardRequest(
            @JsonProperty("number") String number,
            @JsonProperty("pin") String pin) {
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(pin, "pin");
        this.number = number;
        this.pin = pin;
    }

    /**
     * The 16-19 digit number for the gift card.
     */
    @JsonIgnore
    public String number() {
        return number;
    }

    /**
     * The PIN for this gift card.
     */
    @JsonIgnore
    public String pin() {
        return pin;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The 16-19 digit number for the gift card.
     */
    public GiftCardRequest withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The PIN for this gift card.
     */
    public GiftCardRequest withPin(String pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = pin;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GiftCardRequest other = (GiftCardRequest) o;
        return 
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.pin, other.pin);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            number, pin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GiftCardRequest.class,
                "number", number,
                "pin", pin);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String number;

        private String pin;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The 16-19 digit number for the gift card.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }


        /**
         * The PIN for this gift card.
         */
        public Builder pin(String pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = pin;
            return this;
        }

        public GiftCardRequest build() {

            return new GiftCardRequest(
                number, pin);
        }

    }
}
