/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class ForterAntiFraudOptionsDiscountCouponDiscountAmount {
    /**
     * The discount amount in USD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_usd")
    private JsonNullable<String> amountUsd;

    /**
     * The discount amount in local currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_local_currency")
    private JsonNullable<String> amountLocalCurrency;

    /**
     * The currency code for the discount amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<String> currency;

    @JsonCreator
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount(
            @JsonProperty("amount_usd") JsonNullable<String> amountUsd,
            @JsonProperty("amount_local_currency") JsonNullable<String> amountLocalCurrency,
            @JsonProperty("currency") JsonNullable<String> currency) {
        Utils.checkNotNull(amountUsd, "amountUsd");
        Utils.checkNotNull(amountLocalCurrency, "amountLocalCurrency");
        Utils.checkNotNull(currency, "currency");
        this.amountUsd = amountUsd;
        this.amountLocalCurrency = amountLocalCurrency;
        this.currency = currency;
    }
    
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The discount amount in USD.
     */
    @JsonIgnore
    public JsonNullable<String> amountUsd() {
        return amountUsd;
    }

    /**
     * The discount amount in local currency.
     */
    @JsonIgnore
    public JsonNullable<String> amountLocalCurrency() {
        return amountLocalCurrency;
    }

    /**
     * The currency code for the discount amount.
     */
    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The discount amount in USD.
     */
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount withAmountUsd(String amountUsd) {
        Utils.checkNotNull(amountUsd, "amountUsd");
        this.amountUsd = JsonNullable.of(amountUsd);
        return this;
    }

    /**
     * The discount amount in USD.
     */
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount withAmountUsd(JsonNullable<String> amountUsd) {
        Utils.checkNotNull(amountUsd, "amountUsd");
        this.amountUsd = amountUsd;
        return this;
    }

    /**
     * The discount amount in local currency.
     */
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount withAmountLocalCurrency(String amountLocalCurrency) {
        Utils.checkNotNull(amountLocalCurrency, "amountLocalCurrency");
        this.amountLocalCurrency = JsonNullable.of(amountLocalCurrency);
        return this;
    }

    /**
     * The discount amount in local currency.
     */
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount withAmountLocalCurrency(JsonNullable<String> amountLocalCurrency) {
        Utils.checkNotNull(amountLocalCurrency, "amountLocalCurrency");
        this.amountLocalCurrency = amountLocalCurrency;
        return this;
    }

    /**
     * The currency code for the discount amount.
     */
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The currency code for the discount amount.
     */
    public ForterAntiFraudOptionsDiscountCouponDiscountAmount withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ForterAntiFraudOptionsDiscountCouponDiscountAmount other = (ForterAntiFraudOptionsDiscountCouponDiscountAmount) o;
        return 
            Utils.enhancedDeepEquals(this.amountUsd, other.amountUsd) &&
            Utils.enhancedDeepEquals(this.amountLocalCurrency, other.amountLocalCurrency) &&
            Utils.enhancedDeepEquals(this.currency, other.currency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amountUsd, amountLocalCurrency, currency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ForterAntiFraudOptionsDiscountCouponDiscountAmount.class,
                "amountUsd", amountUsd,
                "amountLocalCurrency", amountLocalCurrency,
                "currency", currency);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> amountUsd = JsonNullable.undefined();

        private JsonNullable<String> amountLocalCurrency = JsonNullable.undefined();

        private JsonNullable<String> currency = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The discount amount in USD.
         */
        public Builder amountUsd(String amountUsd) {
            Utils.checkNotNull(amountUsd, "amountUsd");
            this.amountUsd = JsonNullable.of(amountUsd);
            return this;
        }

        /**
         * The discount amount in USD.
         */
        public Builder amountUsd(JsonNullable<String> amountUsd) {
            Utils.checkNotNull(amountUsd, "amountUsd");
            this.amountUsd = amountUsd;
            return this;
        }


        /**
         * The discount amount in local currency.
         */
        public Builder amountLocalCurrency(String amountLocalCurrency) {
            Utils.checkNotNull(amountLocalCurrency, "amountLocalCurrency");
            this.amountLocalCurrency = JsonNullable.of(amountLocalCurrency);
            return this;
        }

        /**
         * The discount amount in local currency.
         */
        public Builder amountLocalCurrency(JsonNullable<String> amountLocalCurrency) {
            Utils.checkNotNull(amountLocalCurrency, "amountLocalCurrency");
            this.amountLocalCurrency = amountLocalCurrency;
            return this;
        }


        /**
         * The currency code for the discount amount.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The currency code for the discount amount.
         */
        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public ForterAntiFraudOptionsDiscountCouponDiscountAmount build() {

            return new ForterAntiFraudOptionsDiscountCouponDiscountAmount(
                amountUsd, amountLocalCurrency, currency);
        }

    }
}
