/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * StatementDescriptor
 * 
 * <p>Information to show the user on their payments statement
 */
public class StatementDescriptor {
    /**
     * Reflects your doing business as (DBA) name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * A short description about the purchase.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The merchant's city to be displayed in a statement descriptor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The value in the phone number field of a customer's statement which should be formatted according to
     * the E164 number standard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private JsonNullable<String> phoneNumber;

    /**
     * The merchant's URL to be displayed in a statement descriptor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The merchant's postal code or zip code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    @JsonCreator
    public StatementDescriptor(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("phone_number") JsonNullable<String> phoneNumber,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("postal_code") JsonNullable<String> postalCode) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(postalCode, "postalCode");
        this.name = name;
        this.description = description;
        this.city = city;
        this.country = country;
        this.phoneNumber = phoneNumber;
        this.url = url;
        this.postalCode = postalCode;
    }
    
    public StatementDescriptor() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * Reflects your doing business as (DBA) name.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * A short description about the purchase.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The merchant's city to be displayed in a statement descriptor.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The value in the phone number field of a customer's statement which should be formatted according to
     * the E164 number standard.
     */
    @JsonIgnore
    public JsonNullable<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * The merchant's URL to be displayed in a statement descriptor.
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * The merchant's postal code or zip code.
     */
    @JsonIgnore
    public JsonNullable<String> postalCode() {
        return postalCode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Reflects your doing business as (DBA) name.
     */
    public StatementDescriptor withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Reflects your doing business as (DBA) name.
     */
    public StatementDescriptor withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A short description about the purchase.
     */
    public StatementDescriptor withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A short description about the purchase.
     */
    public StatementDescriptor withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The merchant's city to be displayed in a statement descriptor.
     */
    public StatementDescriptor withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * The merchant's city to be displayed in a statement descriptor.
     */
    public StatementDescriptor withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.
     */
    public StatementDescriptor withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.
     */
    public StatementDescriptor withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The value in the phone number field of a customer's statement which should be formatted according to
     * the E164 number standard.
     */
    public StatementDescriptor withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = JsonNullable.of(phoneNumber);
        return this;
    }

    /**
     * The value in the phone number field of a customer's statement which should be formatted according to
     * the E164 number standard.
     */
    public StatementDescriptor withPhoneNumber(JsonNullable<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The merchant's URL to be displayed in a statement descriptor.
     */
    public StatementDescriptor withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The merchant's URL to be displayed in a statement descriptor.
     */
    public StatementDescriptor withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The merchant's postal code or zip code.
     */
    public StatementDescriptor withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * The merchant's postal code or zip code.
     */
    public StatementDescriptor withPostalCode(JsonNullable<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StatementDescriptor other = (StatementDescriptor) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, city,
            country, phoneNumber, url,
            postalCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StatementDescriptor.class,
                "name", name,
                "description", description,
                "city", city,
                "country", country,
                "phoneNumber", phoneNumber,
                "url", url,
                "postalCode", postalCode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<String> city = JsonNullable.undefined();

        private JsonNullable<String> country = JsonNullable.undefined();

        private JsonNullable<String> phoneNumber = JsonNullable.undefined();

        private JsonNullable<String> url = JsonNullable.undefined();

        private JsonNullable<String> postalCode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Reflects your doing business as (DBA) name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Reflects your doing business as (DBA) name.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * A short description about the purchase.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A short description about the purchase.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The merchant's city to be displayed in a statement descriptor.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * The merchant's city to be displayed in a statement descriptor.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * The value in the phone number field of a customer's statement which should be formatted according to
         * the E164 number standard.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = JsonNullable.of(phoneNumber);
            return this;
        }

        /**
         * The value in the phone number field of a customer's statement which should be formatted according to
         * the E164 number standard.
         */
        public Builder phoneNumber(JsonNullable<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }


        /**
         * The merchant's URL to be displayed in a statement descriptor.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The merchant's URL to be displayed in a statement descriptor.
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The merchant's postal code or zip code.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * The merchant's postal code or zip code.
         */
        public Builder postalCode(JsonNullable<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        public StatementDescriptor build() {

            return new StatementDescriptor(
                name, description, city,
                country, phoneNumber, url,
                postalCode);
        }

    }
}
