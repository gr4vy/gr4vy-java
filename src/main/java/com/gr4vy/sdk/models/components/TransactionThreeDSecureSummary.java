/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

public class TransactionThreeDSecureSummary {

    /**
     * The version of 3DS used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private JsonNullable<String> version;

    /**
     * The status of the 3DS challenge for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends ThreeDSecureStatus> status;

    /**
     * The method used for 3DS authentication for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<? extends ThreeDSecureMethod> method;

    /**
     * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_data")
    private JsonNullable<? extends ResponseData> responseData;

    /**
     * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_data")
    private JsonNullable<? extends ThreeDSecureError> errorData;

    @JsonCreator
    public TransactionThreeDSecureSummary(
            @JsonProperty("version") JsonNullable<String> version,
            @JsonProperty("status") JsonNullable<? extends ThreeDSecureStatus> status,
            @JsonProperty("method") JsonNullable<? extends ThreeDSecureMethod> method,
            @JsonProperty("response_data") JsonNullable<? extends ResponseData> responseData,
            @JsonProperty("error_data") JsonNullable<? extends ThreeDSecureError> errorData) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(responseData, "responseData");
        Utils.checkNotNull(errorData, "errorData");
        this.version = version;
        this.status = status;
        this.method = method;
        this.responseData = responseData;
        this.errorData = errorData;
    }
    
    public TransactionThreeDSecureSummary() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The version of 3DS used for this transaction.
     */
    @JsonIgnore
    public JsonNullable<String> version() {
        return version;
    }

    /**
     * The status of the 3DS challenge for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ThreeDSecureStatus> status() {
        return (JsonNullable<ThreeDSecureStatus>) status;
    }

    /**
     * The method used for 3DS authentication for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ThreeDSecureMethod> method() {
        return (JsonNullable<ThreeDSecureMethod>) method;
    }

    /**
     * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ResponseData> responseData() {
        return (JsonNullable<ResponseData>) responseData;
    }

    /**
     * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ThreeDSecureError> errorData() {
        return (JsonNullable<ThreeDSecureError>) errorData;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The version of 3DS used for this transaction.
     */
    public TransactionThreeDSecureSummary withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = JsonNullable.of(version);
        return this;
    }

    /**
     * The version of 3DS used for this transaction.
     */
    public TransactionThreeDSecureSummary withVersion(JsonNullable<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The status of the 3DS challenge for this transaction.
     */
    public TransactionThreeDSecureSummary withStatus(ThreeDSecureStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the 3DS challenge for this transaction.
     */
    public TransactionThreeDSecureSummary withStatus(JsonNullable<? extends ThreeDSecureStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The method used for 3DS authentication for this transaction.
     */
    public TransactionThreeDSecureSummary withMethod(ThreeDSecureMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * The method used for 3DS authentication for this transaction.
     */
    public TransactionThreeDSecureSummary withMethod(JsonNullable<? extends ThreeDSecureMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
     */
    public TransactionThreeDSecureSummary withResponseData(ResponseData responseData) {
        Utils.checkNotNull(responseData, "responseData");
        this.responseData = JsonNullable.of(responseData);
        return this;
    }

    /**
     * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
     */
    public TransactionThreeDSecureSummary withResponseData(JsonNullable<? extends ResponseData> responseData) {
        Utils.checkNotNull(responseData, "responseData");
        this.responseData = responseData;
        return this;
    }

    /**
     * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
     */
    public TransactionThreeDSecureSummary withErrorData(ThreeDSecureError errorData) {
        Utils.checkNotNull(errorData, "errorData");
        this.errorData = JsonNullable.of(errorData);
        return this;
    }

    /**
     * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
     */
    public TransactionThreeDSecureSummary withErrorData(JsonNullable<? extends ThreeDSecureError> errorData) {
        Utils.checkNotNull(errorData, "errorData");
        this.errorData = errorData;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionThreeDSecureSummary other = (TransactionThreeDSecureSummary) o;
        return 
            Utils.enhancedDeepEquals(this.version, other.version) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.responseData, other.responseData) &&
            Utils.enhancedDeepEquals(this.errorData, other.errorData);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            version,
            status,
            method,
            responseData,
            errorData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionThreeDSecureSummary.class,
                "version", version,
                "status", status,
                "method", method,
                "responseData", responseData,
                "errorData", errorData);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> version = JsonNullable.undefined();
 
        private JsonNullable<? extends ThreeDSecureStatus> status = JsonNullable.undefined();
 
        private JsonNullable<? extends ThreeDSecureMethod> method = JsonNullable.undefined();
 
        private JsonNullable<? extends ResponseData> responseData = JsonNullable.undefined();
 
        private JsonNullable<? extends ThreeDSecureError> errorData = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The version of 3DS used for this transaction.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = JsonNullable.of(version);
            return this;
        }

        /**
         * The version of 3DS used for this transaction.
         */
        public Builder version(JsonNullable<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The status of the 3DS challenge for this transaction.
         */
        public Builder status(ThreeDSecureStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the 3DS challenge for this transaction.
         */
        public Builder status(JsonNullable<? extends ThreeDSecureStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The method used for 3DS authentication for this transaction.
         */
        public Builder method(ThreeDSecureMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * The method used for 3DS authentication for this transaction.
         */
        public Builder method(JsonNullable<? extends ThreeDSecureMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
         */
        public Builder responseData(ResponseData responseData) {
            Utils.checkNotNull(responseData, "responseData");
            this.responseData = JsonNullable.of(responseData);
            return this;
        }

        /**
         * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
         */
        public Builder responseData(JsonNullable<? extends ResponseData> responseData) {
            Utils.checkNotNull(responseData, "responseData");
            this.responseData = responseData;
            return this;
        }

        /**
         * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
         */
        public Builder errorData(ThreeDSecureError errorData) {
            Utils.checkNotNull(errorData, "errorData");
            this.errorData = JsonNullable.of(errorData);
            return this;
        }

        /**
         * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
         */
        public Builder errorData(JsonNullable<? extends ThreeDSecureError> errorData) {
            Utils.checkNotNull(errorData, "errorData");
            this.errorData = errorData;
            return this;
        }
        
        public TransactionThreeDSecureSummary build() {
            return new TransactionThreeDSecureSummary(
                version,
                status,
                method,
                responseData,
                errorData);
        }
    }
}
