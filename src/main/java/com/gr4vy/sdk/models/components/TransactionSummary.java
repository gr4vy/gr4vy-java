/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TransactionSummary
 * 
 * <p>A transaction, summarised
 */
public class TransactionSummary {
    /**
     * Always `transaction`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the transaction.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     */
    @JsonProperty("reconciliation_id")
    private String reconciliationId;

    /**
     * The ID of the merchant account this transaction belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * The currency code for this transaction.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     */
    @JsonProperty("amount")
    private long amount;


    @JsonProperty("status")
    private TransactionStatus status;

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     */
    @JsonProperty("authorized_amount")
    private long authorizedAmount;

    /**
     * The total amount captured for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `authorized_amount` or less.
     */
    @JsonProperty("captured_amount")
    private long capturedAmount;

    /**
     * The total amount refunded for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `captured_amount` or less.
     */
    @JsonProperty("refunded_amount")
    private long refundedAmount;

    /**
     * The ISO 4217 currency code of this transaction's settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settled_currency")
    private JsonNullable<String> settledCurrency;

    /**
     * The net amount settled for this transaction, in the smallest currency unit (for example, cents or pence).
     */
    @JsonProperty("settled_amount")
    private long settledAmount;

    /**
     * Indicates whether this transaction has been settled.
     */
    @JsonProperty("settled")
    private boolean settled;

    /**
     * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;


    @JsonProperty("intent")
    private TransactionIntent intent;

    /**
     * The payment method used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<? extends TransactionPaymentMethod> paymentMethod;

    /**
     * The method used for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<? extends Method> method;

    /**
     * The name of the instrument used to process the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instrument_type")
    private JsonNullable<? extends InstrumentType> instrumentType;

    /**
     * The standardized error code set by Gr4vy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_code")
    private JsonNullable<String> errorCode;

    /**
     * The payment service used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service")
    private JsonNullable<? extends TransactionPaymentService> paymentService;

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_review")
    private Optional<Boolean> pendingReview;

    /**
     * The buyer used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends TransactionBuyer> buyer;

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_response_code")
    private JsonNullable<String> rawResponseCode;

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_response_description")
    private JsonNullable<String> rawResponseDescription;

    /**
     * The shipping details associated with the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_details")
    private JsonNullable<? extends ShippingDetails> shippingDetails;

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout_session_id")
    private JsonNullable<String> checkoutSessionId;

    /**
     * The gift cards redeemed for this transaction.
     */
    @JsonProperty("gift_card_redemptions")
    private List<GiftCardRedemption> giftCardRedemptions;

    /**
     * The gift card service used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gift_card_service")
    private JsonNullable<? extends GiftCardService> giftCardService;

    /**
     * The date and time when the transaction was created, in ISO 8601 format.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time when the transaction was last updated, in ISO 8601 format.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public TransactionSummary(
            @JsonProperty("id") String id,
            @JsonProperty("reconciliation_id") String reconciliationId,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("currency") String currency,
            @JsonProperty("amount") long amount,
            @JsonProperty("status") TransactionStatus status,
            @JsonProperty("authorized_amount") long authorizedAmount,
            @JsonProperty("captured_amount") long capturedAmount,
            @JsonProperty("refunded_amount") long refundedAmount,
            @JsonProperty("settled_currency") JsonNullable<String> settledCurrency,
            @JsonProperty("settled_amount") long settledAmount,
            @JsonProperty("settled") boolean settled,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("intent") TransactionIntent intent,
            @JsonProperty("payment_method") JsonNullable<? extends TransactionPaymentMethod> paymentMethod,
            @JsonProperty("method") JsonNullable<? extends Method> method,
            @JsonProperty("instrument_type") JsonNullable<? extends InstrumentType> instrumentType,
            @JsonProperty("error_code") JsonNullable<String> errorCode,
            @JsonProperty("payment_service") JsonNullable<? extends TransactionPaymentService> paymentService,
            @JsonProperty("pending_review") Optional<Boolean> pendingReview,
            @JsonProperty("buyer") JsonNullable<? extends TransactionBuyer> buyer,
            @JsonProperty("raw_response_code") JsonNullable<String> rawResponseCode,
            @JsonProperty("raw_response_description") JsonNullable<String> rawResponseDescription,
            @JsonProperty("shipping_details") JsonNullable<? extends ShippingDetails> shippingDetails,
            @JsonProperty("checkout_session_id") JsonNullable<String> checkoutSessionId,
            @JsonProperty("gift_card_redemptions") List<GiftCardRedemption> giftCardRedemptions,
            @JsonProperty("gift_card_service") JsonNullable<? extends GiftCardService> giftCardService,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(authorizedAmount, "authorizedAmount");
        Utils.checkNotNull(capturedAmount, "capturedAmount");
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        Utils.checkNotNull(settledCurrency, "settledCurrency");
        Utils.checkNotNull(settledAmount, "settledAmount");
        Utils.checkNotNull(settled, "settled");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(intent, "intent");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(instrumentType, "instrumentType");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(paymentService, "paymentService");
        Utils.checkNotNull(pendingReview, "pendingReview");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        Utils.checkNotNull(giftCardRedemptions, "giftCardRedemptions");
        Utils.checkNotNull(giftCardService, "giftCardService");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.reconciliationId = reconciliationId;
        this.merchantAccountId = merchantAccountId;
        this.currency = currency;
        this.amount = amount;
        this.status = status;
        this.authorizedAmount = authorizedAmount;
        this.capturedAmount = capturedAmount;
        this.refundedAmount = refundedAmount;
        this.settledCurrency = settledCurrency;
        this.settledAmount = settledAmount;
        this.settled = settled;
        this.country = country;
        this.externalIdentifier = externalIdentifier;
        this.intent = intent;
        this.paymentMethod = paymentMethod;
        this.method = method;
        this.instrumentType = instrumentType;
        this.errorCode = errorCode;
        this.paymentService = paymentService;
        this.pendingReview = pendingReview;
        this.buyer = buyer;
        this.rawResponseCode = rawResponseCode;
        this.rawResponseDescription = rawResponseDescription;
        this.shippingDetails = shippingDetails;
        this.checkoutSessionId = checkoutSessionId;
        this.giftCardRedemptions = giftCardRedemptions;
        this.giftCardService = giftCardService;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public TransactionSummary(
            String id,
            String reconciliationId,
            String merchantAccountId,
            String currency,
            long amount,
            TransactionStatus status,
            long authorizedAmount,
            long capturedAmount,
            long refundedAmount,
            long settledAmount,
            boolean settled,
            TransactionIntent intent,
            List<GiftCardRedemption> giftCardRedemptions,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(id, reconciliationId, merchantAccountId,
            currency, amount, status,
            authorizedAmount, capturedAmount, refundedAmount,
            JsonNullable.undefined(), settledAmount, settled,
            JsonNullable.undefined(), JsonNullable.undefined(), intent,
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), giftCardRedemptions,
            JsonNullable.undefined(), createdAt, updatedAt);
    }

    /**
     * Always `transaction`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the transaction.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     */
    @JsonIgnore
    public String reconciliationId() {
        return reconciliationId;
    }

    /**
     * The ID of the merchant account this transaction belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * The currency code for this transaction.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    @JsonIgnore
    public TransactionStatus status() {
        return status;
    }

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     */
    @JsonIgnore
    public long authorizedAmount() {
        return authorizedAmount;
    }

    /**
     * The total amount captured for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `authorized_amount` or less.
     */
    @JsonIgnore
    public long capturedAmount() {
        return capturedAmount;
    }

    /**
     * The total amount refunded for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `captured_amount` or less.
     */
    @JsonIgnore
    public long refundedAmount() {
        return refundedAmount;
    }

    /**
     * The ISO 4217 currency code of this transaction's settlement.
     */
    @JsonIgnore
    public JsonNullable<String> settledCurrency() {
        return settledCurrency;
    }

    /**
     * The net amount settled for this transaction, in the smallest currency unit (for example, cents or pence).
     */
    @JsonIgnore
    public long settledAmount() {
        return settledAmount;
    }

    /**
     * Indicates whether this transaction has been settled.
     */
    @JsonIgnore
    public boolean settled() {
        return settled;
    }

    /**
     * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    @JsonIgnore
    public TransactionIntent intent() {
        return intent;
    }

    /**
     * The payment method used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionPaymentMethod> paymentMethod() {
        return (JsonNullable<TransactionPaymentMethod>) paymentMethod;
    }

    /**
     * The method used for the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Method> method() {
        return (JsonNullable<Method>) method;
    }

    /**
     * The name of the instrument used to process the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InstrumentType> instrumentType() {
        return (JsonNullable<InstrumentType>) instrumentType;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    @JsonIgnore
    public JsonNullable<String> errorCode() {
        return errorCode;
    }

    /**
     * The payment service used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionPaymentService> paymentService() {
        return (JsonNullable<TransactionPaymentService>) paymentService;
    }

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    @JsonIgnore
    public Optional<Boolean> pendingReview() {
        return pendingReview;
    }

    /**
     * The buyer used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionBuyer> buyer() {
        return (JsonNullable<TransactionBuyer>) buyer;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonIgnore
    public JsonNullable<String> rawResponseCode() {
        return rawResponseCode;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonIgnore
    public JsonNullable<String> rawResponseDescription() {
        return rawResponseDescription;
    }

    /**
     * The shipping details associated with the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ShippingDetails> shippingDetails() {
        return (JsonNullable<ShippingDetails>) shippingDetails;
    }

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    @JsonIgnore
    public JsonNullable<String> checkoutSessionId() {
        return checkoutSessionId;
    }

    /**
     * The gift cards redeemed for this transaction.
     */
    @JsonIgnore
    public List<GiftCardRedemption> giftCardRedemptions() {
        return giftCardRedemptions;
    }

    /**
     * The gift card service used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GiftCardService> giftCardService() {
        return (JsonNullable<GiftCardService>) giftCardService;
    }

    /**
     * The date and time when the transaction was created, in ISO 8601 format.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time when the transaction was last updated, in ISO 8601 format.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID for the transaction.
     */
    public TransactionSummary withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     */
    public TransactionSummary withReconciliationId(String reconciliationId) {
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        this.reconciliationId = reconciliationId;
        return this;
    }

    /**
     * The ID of the merchant account this transaction belongs to.
     */
    public TransactionSummary withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * The currency code for this transaction.
     */
    public TransactionSummary withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     */
    public TransactionSummary withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public TransactionSummary withStatus(TransactionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     */
    public TransactionSummary withAuthorizedAmount(long authorizedAmount) {
        Utils.checkNotNull(authorizedAmount, "authorizedAmount");
        this.authorizedAmount = authorizedAmount;
        return this;
    }

    /**
     * The total amount captured for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `authorized_amount` or less.
     */
    public TransactionSummary withCapturedAmount(long capturedAmount) {
        Utils.checkNotNull(capturedAmount, "capturedAmount");
        this.capturedAmount = capturedAmount;
        return this;
    }

    /**
     * The total amount refunded for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `captured_amount` or less.
     */
    public TransactionSummary withRefundedAmount(long refundedAmount) {
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        this.refundedAmount = refundedAmount;
        return this;
    }

    /**
     * The ISO 4217 currency code of this transaction's settlement.
     */
    public TransactionSummary withSettledCurrency(String settledCurrency) {
        Utils.checkNotNull(settledCurrency, "settledCurrency");
        this.settledCurrency = JsonNullable.of(settledCurrency);
        return this;
    }

    /**
     * The ISO 4217 currency code of this transaction's settlement.
     */
    public TransactionSummary withSettledCurrency(JsonNullable<String> settledCurrency) {
        Utils.checkNotNull(settledCurrency, "settledCurrency");
        this.settledCurrency = settledCurrency;
        return this;
    }

    /**
     * The net amount settled for this transaction, in the smallest currency unit (for example, cents or pence).
     */
    public TransactionSummary withSettledAmount(long settledAmount) {
        Utils.checkNotNull(settledAmount, "settledAmount");
        this.settledAmount = settledAmount;
        return this;
    }

    /**
     * Indicates whether this transaction has been settled.
     */
    public TransactionSummary withSettled(boolean settled) {
        Utils.checkNotNull(settled, "settled");
        this.settled = settled;
        return this;
    }

    /**
     * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
     */
    public TransactionSummary withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
     */
    public TransactionSummary withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public TransactionSummary withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public TransactionSummary withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    public TransactionSummary withIntent(TransactionIntent intent) {
        Utils.checkNotNull(intent, "intent");
        this.intent = intent;
        return this;
    }

    /**
     * The payment method used for this transaction.
     */
    public TransactionSummary withPaymentMethod(TransactionPaymentMethod paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * The payment method used for this transaction.
     */
    public TransactionSummary withPaymentMethod(JsonNullable<? extends TransactionPaymentMethod> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The method used for the transaction.
     */
    public TransactionSummary withMethod(Method method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * The method used for the transaction.
     */
    public TransactionSummary withMethod(JsonNullable<? extends Method> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The name of the instrument used to process the transaction.
     */
    public TransactionSummary withInstrumentType(InstrumentType instrumentType) {
        Utils.checkNotNull(instrumentType, "instrumentType");
        this.instrumentType = JsonNullable.of(instrumentType);
        return this;
    }

    /**
     * The name of the instrument used to process the transaction.
     */
    public TransactionSummary withInstrumentType(JsonNullable<? extends InstrumentType> instrumentType) {
        Utils.checkNotNull(instrumentType, "instrumentType");
        this.instrumentType = instrumentType;
        return this;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    public TransactionSummary withErrorCode(String errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = JsonNullable.of(errorCode);
        return this;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    public TransactionSummary withErrorCode(JsonNullable<String> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    /**
     * The payment service used for this transaction.
     */
    public TransactionSummary withPaymentService(TransactionPaymentService paymentService) {
        Utils.checkNotNull(paymentService, "paymentService");
        this.paymentService = JsonNullable.of(paymentService);
        return this;
    }

    /**
     * The payment service used for this transaction.
     */
    public TransactionSummary withPaymentService(JsonNullable<? extends TransactionPaymentService> paymentService) {
        Utils.checkNotNull(paymentService, "paymentService");
        this.paymentService = paymentService;
        return this;
    }

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    public TransactionSummary withPendingReview(boolean pendingReview) {
        Utils.checkNotNull(pendingReview, "pendingReview");
        this.pendingReview = Optional.ofNullable(pendingReview);
        return this;
    }


    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    public TransactionSummary withPendingReview(Optional<Boolean> pendingReview) {
        Utils.checkNotNull(pendingReview, "pendingReview");
        this.pendingReview = pendingReview;
        return this;
    }

    /**
     * The buyer used for this transaction.
     */
    public TransactionSummary withBuyer(TransactionBuyer buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * The buyer used for this transaction.
     */
    public TransactionSummary withBuyer(JsonNullable<? extends TransactionBuyer> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public TransactionSummary withRawResponseCode(String rawResponseCode) {
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        this.rawResponseCode = JsonNullable.of(rawResponseCode);
        return this;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public TransactionSummary withRawResponseCode(JsonNullable<String> rawResponseCode) {
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        this.rawResponseCode = rawResponseCode;
        return this;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public TransactionSummary withRawResponseDescription(String rawResponseDescription) {
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        this.rawResponseDescription = JsonNullable.of(rawResponseDescription);
        return this;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public TransactionSummary withRawResponseDescription(JsonNullable<String> rawResponseDescription) {
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        this.rawResponseDescription = rawResponseDescription;
        return this;
    }

    /**
     * The shipping details associated with the transaction.
     */
    public TransactionSummary withShippingDetails(ShippingDetails shippingDetails) {
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        this.shippingDetails = JsonNullable.of(shippingDetails);
        return this;
    }

    /**
     * The shipping details associated with the transaction.
     */
    public TransactionSummary withShippingDetails(JsonNullable<? extends ShippingDetails> shippingDetails) {
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        this.shippingDetails = shippingDetails;
        return this;
    }

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    public TransactionSummary withCheckoutSessionId(String checkoutSessionId) {
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        this.checkoutSessionId = JsonNullable.of(checkoutSessionId);
        return this;
    }

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    public TransactionSummary withCheckoutSessionId(JsonNullable<String> checkoutSessionId) {
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        this.checkoutSessionId = checkoutSessionId;
        return this;
    }

    /**
     * The gift cards redeemed for this transaction.
     */
    public TransactionSummary withGiftCardRedemptions(List<GiftCardRedemption> giftCardRedemptions) {
        Utils.checkNotNull(giftCardRedemptions, "giftCardRedemptions");
        this.giftCardRedemptions = giftCardRedemptions;
        return this;
    }

    /**
     * The gift card service used for this transaction.
     */
    public TransactionSummary withGiftCardService(GiftCardService giftCardService) {
        Utils.checkNotNull(giftCardService, "giftCardService");
        this.giftCardService = JsonNullable.of(giftCardService);
        return this;
    }

    /**
     * The gift card service used for this transaction.
     */
    public TransactionSummary withGiftCardService(JsonNullable<? extends GiftCardService> giftCardService) {
        Utils.checkNotNull(giftCardService, "giftCardService");
        this.giftCardService = giftCardService;
        return this;
    }

    /**
     * The date and time when the transaction was created, in ISO 8601 format.
     */
    public TransactionSummary withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when the transaction was last updated, in ISO 8601 format.
     */
    public TransactionSummary withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionSummary other = (TransactionSummary) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.reconciliationId, other.reconciliationId) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.authorizedAmount, other.authorizedAmount) &&
            Utils.enhancedDeepEquals(this.capturedAmount, other.capturedAmount) &&
            Utils.enhancedDeepEquals(this.refundedAmount, other.refundedAmount) &&
            Utils.enhancedDeepEquals(this.settledCurrency, other.settledCurrency) &&
            Utils.enhancedDeepEquals(this.settledAmount, other.settledAmount) &&
            Utils.enhancedDeepEquals(this.settled, other.settled) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.intent, other.intent) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.instrumentType, other.instrumentType) &&
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode) &&
            Utils.enhancedDeepEquals(this.paymentService, other.paymentService) &&
            Utils.enhancedDeepEquals(this.pendingReview, other.pendingReview) &&
            Utils.enhancedDeepEquals(this.buyer, other.buyer) &&
            Utils.enhancedDeepEquals(this.rawResponseCode, other.rawResponseCode) &&
            Utils.enhancedDeepEquals(this.rawResponseDescription, other.rawResponseDescription) &&
            Utils.enhancedDeepEquals(this.shippingDetails, other.shippingDetails) &&
            Utils.enhancedDeepEquals(this.checkoutSessionId, other.checkoutSessionId) &&
            Utils.enhancedDeepEquals(this.giftCardRedemptions, other.giftCardRedemptions) &&
            Utils.enhancedDeepEquals(this.giftCardService, other.giftCardService) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, reconciliationId,
            merchantAccountId, currency, amount,
            status, authorizedAmount, capturedAmount,
            refundedAmount, settledCurrency, settledAmount,
            settled, country, externalIdentifier,
            intent, paymentMethod, method,
            instrumentType, errorCode, paymentService,
            pendingReview, buyer, rawResponseCode,
            rawResponseDescription, shippingDetails, checkoutSessionId,
            giftCardRedemptions, giftCardService, createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionSummary.class,
                "type", type,
                "id", id,
                "reconciliationId", reconciliationId,
                "merchantAccountId", merchantAccountId,
                "currency", currency,
                "amount", amount,
                "status", status,
                "authorizedAmount", authorizedAmount,
                "capturedAmount", capturedAmount,
                "refundedAmount", refundedAmount,
                "settledCurrency", settledCurrency,
                "settledAmount", settledAmount,
                "settled", settled,
                "country", country,
                "externalIdentifier", externalIdentifier,
                "intent", intent,
                "paymentMethod", paymentMethod,
                "method", method,
                "instrumentType", instrumentType,
                "errorCode", errorCode,
                "paymentService", paymentService,
                "pendingReview", pendingReview,
                "buyer", buyer,
                "rawResponseCode", rawResponseCode,
                "rawResponseDescription", rawResponseDescription,
                "shippingDetails", shippingDetails,
                "checkoutSessionId", checkoutSessionId,
                "giftCardRedemptions", giftCardRedemptions,
                "giftCardService", giftCardService,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String reconciliationId;

        private String merchantAccountId;

        private String currency;

        private Long amount;

        private TransactionStatus status;

        private Long authorizedAmount;

        private Long capturedAmount;

        private Long refundedAmount;

        private JsonNullable<String> settledCurrency = JsonNullable.undefined();

        private Long settledAmount;

        private Boolean settled;

        private JsonNullable<String> country = JsonNullable.undefined();

        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();

        private TransactionIntent intent;

        private JsonNullable<? extends TransactionPaymentMethod> paymentMethod = JsonNullable.undefined();

        private JsonNullable<? extends Method> method = JsonNullable.undefined();

        private JsonNullable<? extends InstrumentType> instrumentType = JsonNullable.undefined();

        private JsonNullable<String> errorCode = JsonNullable.undefined();

        private JsonNullable<? extends TransactionPaymentService> paymentService = JsonNullable.undefined();

        private Optional<Boolean> pendingReview;

        private JsonNullable<? extends TransactionBuyer> buyer = JsonNullable.undefined();

        private JsonNullable<String> rawResponseCode = JsonNullable.undefined();

        private JsonNullable<String> rawResponseDescription = JsonNullable.undefined();

        private JsonNullable<? extends ShippingDetails> shippingDetails = JsonNullable.undefined();

        private JsonNullable<String> checkoutSessionId = JsonNullable.undefined();

        private List<GiftCardRedemption> giftCardRedemptions;

        private JsonNullable<? extends GiftCardService> giftCardService = JsonNullable.undefined();

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID for the transaction.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
         */
        public Builder reconciliationId(String reconciliationId) {
            Utils.checkNotNull(reconciliationId, "reconciliationId");
            this.reconciliationId = reconciliationId;
            return this;
        }


        /**
         * The ID of the merchant account this transaction belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }


        /**
         * The currency code for this transaction.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The total amount for this transaction across all funding sources including gift cards.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder status(TransactionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
         */
        public Builder authorizedAmount(long authorizedAmount) {
            Utils.checkNotNull(authorizedAmount, "authorizedAmount");
            this.authorizedAmount = authorizedAmount;
            return this;
        }


        /**
         * The total amount captured for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `authorized_amount` or less.
         */
        public Builder capturedAmount(long capturedAmount) {
            Utils.checkNotNull(capturedAmount, "capturedAmount");
            this.capturedAmount = capturedAmount;
            return this;
        }


        /**
         * The total amount refunded for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `captured_amount` or less.
         */
        public Builder refundedAmount(long refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = refundedAmount;
            return this;
        }


        /**
         * The ISO 4217 currency code of this transaction's settlement.
         */
        public Builder settledCurrency(String settledCurrency) {
            Utils.checkNotNull(settledCurrency, "settledCurrency");
            this.settledCurrency = JsonNullable.of(settledCurrency);
            return this;
        }

        /**
         * The ISO 4217 currency code of this transaction's settlement.
         */
        public Builder settledCurrency(JsonNullable<String> settledCurrency) {
            Utils.checkNotNull(settledCurrency, "settledCurrency");
            this.settledCurrency = settledCurrency;
            return this;
        }


        /**
         * The net amount settled for this transaction, in the smallest currency unit (for example, cents or pence).
         */
        public Builder settledAmount(long settledAmount) {
            Utils.checkNotNull(settledAmount, "settledAmount");
            this.settledAmount = settledAmount;
            return this;
        }


        /**
         * Indicates whether this transaction has been settled.
         */
        public Builder settled(boolean settled) {
            Utils.checkNotNull(settled, "settled");
            this.settled = settled;
            return this;
        }


        /**
         * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }


        public Builder intent(TransactionIntent intent) {
            Utils.checkNotNull(intent, "intent");
            this.intent = intent;
            return this;
        }


        /**
         * The payment method used for this transaction.
         */
        public Builder paymentMethod(TransactionPaymentMethod paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * The payment method used for this transaction.
         */
        public Builder paymentMethod(JsonNullable<? extends TransactionPaymentMethod> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }


        /**
         * The method used for the transaction.
         */
        public Builder method(Method method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * The method used for the transaction.
         */
        public Builder method(JsonNullable<? extends Method> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * The name of the instrument used to process the transaction.
         */
        public Builder instrumentType(InstrumentType instrumentType) {
            Utils.checkNotNull(instrumentType, "instrumentType");
            this.instrumentType = JsonNullable.of(instrumentType);
            return this;
        }

        /**
         * The name of the instrument used to process the transaction.
         */
        public Builder instrumentType(JsonNullable<? extends InstrumentType> instrumentType) {
            Utils.checkNotNull(instrumentType, "instrumentType");
            this.instrumentType = instrumentType;
            return this;
        }


        /**
         * The standardized error code set by Gr4vy.
         */
        public Builder errorCode(String errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = JsonNullable.of(errorCode);
            return this;
        }

        /**
         * The standardized error code set by Gr4vy.
         */
        public Builder errorCode(JsonNullable<String> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }


        /**
         * The payment service used for this transaction.
         */
        public Builder paymentService(TransactionPaymentService paymentService) {
            Utils.checkNotNull(paymentService, "paymentService");
            this.paymentService = JsonNullable.of(paymentService);
            return this;
        }

        /**
         * The payment service used for this transaction.
         */
        public Builder paymentService(JsonNullable<? extends TransactionPaymentService> paymentService) {
            Utils.checkNotNull(paymentService, "paymentService");
            this.paymentService = paymentService;
            return this;
        }


        /**
         * Whether a manual anti fraud review is pending with an anti fraud service.
         */
        public Builder pendingReview(boolean pendingReview) {
            Utils.checkNotNull(pendingReview, "pendingReview");
            this.pendingReview = Optional.ofNullable(pendingReview);
            return this;
        }

        /**
         * Whether a manual anti fraud review is pending with an anti fraud service.
         */
        public Builder pendingReview(Optional<Boolean> pendingReview) {
            Utils.checkNotNull(pendingReview, "pendingReview");
            this.pendingReview = pendingReview;
            return this;
        }


        /**
         * The buyer used for this transaction.
         */
        public Builder buyer(TransactionBuyer buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * The buyer used for this transaction.
         */
        public Builder buyer(JsonNullable<? extends TransactionBuyer> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }


        /**
         * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseCode(String rawResponseCode) {
            Utils.checkNotNull(rawResponseCode, "rawResponseCode");
            this.rawResponseCode = JsonNullable.of(rawResponseCode);
            return this;
        }

        /**
         * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseCode(JsonNullable<String> rawResponseCode) {
            Utils.checkNotNull(rawResponseCode, "rawResponseCode");
            this.rawResponseCode = rawResponseCode;
            return this;
        }


        /**
         * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseDescription(String rawResponseDescription) {
            Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
            this.rawResponseDescription = JsonNullable.of(rawResponseDescription);
            return this;
        }

        /**
         * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseDescription(JsonNullable<String> rawResponseDescription) {
            Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
            this.rawResponseDescription = rawResponseDescription;
            return this;
        }


        /**
         * The shipping details associated with the transaction.
         */
        public Builder shippingDetails(ShippingDetails shippingDetails) {
            Utils.checkNotNull(shippingDetails, "shippingDetails");
            this.shippingDetails = JsonNullable.of(shippingDetails);
            return this;
        }

        /**
         * The shipping details associated with the transaction.
         */
        public Builder shippingDetails(JsonNullable<? extends ShippingDetails> shippingDetails) {
            Utils.checkNotNull(shippingDetails, "shippingDetails");
            this.shippingDetails = shippingDetails;
            return this;
        }


        /**
         * The identifier for the checkout session this transaction is associated with.
         */
        public Builder checkoutSessionId(String checkoutSessionId) {
            Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
            this.checkoutSessionId = JsonNullable.of(checkoutSessionId);
            return this;
        }

        /**
         * The identifier for the checkout session this transaction is associated with.
         */
        public Builder checkoutSessionId(JsonNullable<String> checkoutSessionId) {
            Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
            this.checkoutSessionId = checkoutSessionId;
            return this;
        }


        /**
         * The gift cards redeemed for this transaction.
         */
        public Builder giftCardRedemptions(List<GiftCardRedemption> giftCardRedemptions) {
            Utils.checkNotNull(giftCardRedemptions, "giftCardRedemptions");
            this.giftCardRedemptions = giftCardRedemptions;
            return this;
        }


        /**
         * The gift card service used for this transaction.
         */
        public Builder giftCardService(GiftCardService giftCardService) {
            Utils.checkNotNull(giftCardService, "giftCardService");
            this.giftCardService = JsonNullable.of(giftCardService);
            return this;
        }

        /**
         * The gift card service used for this transaction.
         */
        public Builder giftCardService(JsonNullable<? extends GiftCardService> giftCardService) {
            Utils.checkNotNull(giftCardService, "giftCardService");
            this.giftCardService = giftCardService;
            return this;
        }


        /**
         * The date and time when the transaction was created, in ISO 8601 format.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time when the transaction was last updated, in ISO 8601 format.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public TransactionSummary build() {
            if (pendingReview == null) {
                pendingReview = _SINGLETON_VALUE_PendingReview.value();
            }

            return new TransactionSummary(
                id, reconciliationId, merchantAccountId,
                currency, amount, status,
                authorizedAmount, capturedAmount, refundedAmount,
                settledCurrency, settledAmount, settled,
                country, externalIdentifier, intent,
                paymentMethod, method, instrumentType,
                errorCode, paymentService, pendingReview,
                buyer, rawResponseCode, rawResponseDescription,
                shippingDetails, checkoutSessionId, giftCardRedemptions,
                giftCardService, createdAt, updatedAt);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"transaction\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_PendingReview =
                new LazySingletonValue<>(
                        "pending_review",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
