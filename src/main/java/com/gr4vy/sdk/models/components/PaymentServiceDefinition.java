/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentServiceDefinition {
    /**
     * The definition ID of the payment service that can be configured. This is the underlying provider followed by a dash followed by the method.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Always `payment-service-definition`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * A human friendly name for this service.
     */
    @JsonProperty("display_name")
    private String displayName;


    @JsonProperty("method")
    private Method method;

    /**
     * A list of credentials and related fields which can be configured for this service.
     */
    @JsonProperty("fields")
    private List<DefinitionField> fields;

    /**
     * A list of reporting fields which can be configured for this service.
     */
    @JsonProperty("reporting_fields")
    private List<DefinitionField> reportingFields;

    /**
     * A list of three-letter ISO currency codes that this service supports.
     */
    @JsonProperty("supported_currencies")
    private List<String> supportedCurrencies;

    /**
     * A list of two-letter ISO country codes that this service supports.
     */
    @JsonProperty("supported_countries")
    private List<String> supportedCountries;


    @JsonProperty("mode")
    private Mode mode;

    /**
     * An icon to display for the payment service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon_url")
    private JsonNullable<String> iconUrl;

    /**
     * Features supported by the payment service.
     */
    @JsonProperty("supported_features")
    private Map<String, Boolean> supportedFeatures;

    /**
     * A list of condition that define when some fields must be provided with a transaction request.
     */
    @JsonProperty("required_checkout_fields")
    private List<RequiredCheckoutFields> requiredCheckoutFields;


    @JsonProperty("configuration")
    private PaymentServiceConfiguration configuration;

    @JsonCreator
    public PaymentServiceDefinition(
            @JsonProperty("id") String id,
            @JsonProperty("display_name") String displayName,
            @JsonProperty("method") Method method,
            @JsonProperty("fields") List<DefinitionField> fields,
            @JsonProperty("reporting_fields") List<DefinitionField> reportingFields,
            @JsonProperty("supported_currencies") List<String> supportedCurrencies,
            @JsonProperty("supported_countries") List<String> supportedCountries,
            @JsonProperty("mode") Mode mode,
            @JsonProperty("icon_url") JsonNullable<String> iconUrl,
            @JsonProperty("supported_features") Map<String, Boolean> supportedFeatures,
            @JsonProperty("required_checkout_fields") List<RequiredCheckoutFields> requiredCheckoutFields,
            @JsonProperty("configuration") PaymentServiceConfiguration configuration) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(reportingFields, "reportingFields");
        Utils.checkNotNull(supportedCurrencies, "supportedCurrencies");
        Utils.checkNotNull(supportedCountries, "supportedCountries");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(iconUrl, "iconUrl");
        supportedFeatures = Utils.emptyMapIfNull(supportedFeatures);
        Utils.checkNotNull(supportedFeatures, "supportedFeatures");
        Utils.checkNotNull(requiredCheckoutFields, "requiredCheckoutFields");
        Utils.checkNotNull(configuration, "configuration");
        this.id = id;
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.displayName = displayName;
        this.method = method;
        this.fields = fields;
        this.reportingFields = reportingFields;
        this.supportedCurrencies = supportedCurrencies;
        this.supportedCountries = supportedCountries;
        this.mode = mode;
        this.iconUrl = iconUrl;
        this.supportedFeatures = supportedFeatures;
        this.requiredCheckoutFields = requiredCheckoutFields;
        this.configuration = configuration;
    }
    
    public PaymentServiceDefinition(
            String id,
            String displayName,
            Method method,
            List<DefinitionField> fields,
            List<DefinitionField> reportingFields,
            List<String> supportedCurrencies,
            List<String> supportedCountries,
            Mode mode,
            Map<String, Boolean> supportedFeatures,
            List<RequiredCheckoutFields> requiredCheckoutFields,
            PaymentServiceConfiguration configuration) {
        this(id, displayName, method,
            fields, reportingFields, supportedCurrencies,
            supportedCountries, mode, JsonNullable.undefined(),
            supportedFeatures, requiredCheckoutFields, configuration);
    }

    /**
     * The definition ID of the payment service that can be configured. This is the underlying provider followed by a dash followed by the method.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Always `payment-service-definition`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * A human friendly name for this service.
     */
    @JsonIgnore
    public String displayName() {
        return displayName;
    }

    @JsonIgnore
    public Method method() {
        return method;
    }

    /**
     * A list of credentials and related fields which can be configured for this service.
     */
    @JsonIgnore
    public List<DefinitionField> fields() {
        return fields;
    }

    /**
     * A list of reporting fields which can be configured for this service.
     */
    @JsonIgnore
    public List<DefinitionField> reportingFields() {
        return reportingFields;
    }

    /**
     * A list of three-letter ISO currency codes that this service supports.
     */
    @JsonIgnore
    public List<String> supportedCurrencies() {
        return supportedCurrencies;
    }

    /**
     * A list of two-letter ISO country codes that this service supports.
     */
    @JsonIgnore
    public List<String> supportedCountries() {
        return supportedCountries;
    }

    @JsonIgnore
    public Mode mode() {
        return mode;
    }

    /**
     * An icon to display for the payment service.
     */
    @JsonIgnore
    public JsonNullable<String> iconUrl() {
        return iconUrl;
    }

    /**
     * Features supported by the payment service.
     */
    @JsonIgnore
    public Map<String, Boolean> supportedFeatures() {
        return supportedFeatures;
    }

    /**
     * A list of condition that define when some fields must be provided with a transaction request.
     */
    @JsonIgnore
    public List<RequiredCheckoutFields> requiredCheckoutFields() {
        return requiredCheckoutFields;
    }

    @JsonIgnore
    public PaymentServiceConfiguration configuration() {
        return configuration;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The definition ID of the payment service that can be configured. This is the underlying provider followed by a dash followed by the method.
     */
    public PaymentServiceDefinition withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A human friendly name for this service.
     */
    public PaymentServiceDefinition withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    public PaymentServiceDefinition withMethod(Method method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * A list of credentials and related fields which can be configured for this service.
     */
    public PaymentServiceDefinition withFields(List<DefinitionField> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * A list of reporting fields which can be configured for this service.
     */
    public PaymentServiceDefinition withReportingFields(List<DefinitionField> reportingFields) {
        Utils.checkNotNull(reportingFields, "reportingFields");
        this.reportingFields = reportingFields;
        return this;
    }

    /**
     * A list of three-letter ISO currency codes that this service supports.
     */
    public PaymentServiceDefinition withSupportedCurrencies(List<String> supportedCurrencies) {
        Utils.checkNotNull(supportedCurrencies, "supportedCurrencies");
        this.supportedCurrencies = supportedCurrencies;
        return this;
    }

    /**
     * A list of two-letter ISO country codes that this service supports.
     */
    public PaymentServiceDefinition withSupportedCountries(List<String> supportedCountries) {
        Utils.checkNotNull(supportedCountries, "supportedCountries");
        this.supportedCountries = supportedCountries;
        return this;
    }

    public PaymentServiceDefinition withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * An icon to display for the payment service.
     */
    public PaymentServiceDefinition withIconUrl(String iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = JsonNullable.of(iconUrl);
        return this;
    }

    /**
     * An icon to display for the payment service.
     */
    public PaymentServiceDefinition withIconUrl(JsonNullable<String> iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = iconUrl;
        return this;
    }

    /**
     * Features supported by the payment service.
     */
    public PaymentServiceDefinition withSupportedFeatures(Map<String, Boolean> supportedFeatures) {
        Utils.checkNotNull(supportedFeatures, "supportedFeatures");
        this.supportedFeatures = supportedFeatures;
        return this;
    }

    /**
     * A list of condition that define when some fields must be provided with a transaction request.
     */
    public PaymentServiceDefinition withRequiredCheckoutFields(List<RequiredCheckoutFields> requiredCheckoutFields) {
        Utils.checkNotNull(requiredCheckoutFields, "requiredCheckoutFields");
        this.requiredCheckoutFields = requiredCheckoutFields;
        return this;
    }

    public PaymentServiceDefinition withConfiguration(PaymentServiceConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentServiceDefinition other = (PaymentServiceDefinition) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.reportingFields, other.reportingFields) &&
            Utils.enhancedDeepEquals(this.supportedCurrencies, other.supportedCurrencies) &&
            Utils.enhancedDeepEquals(this.supportedCountries, other.supportedCountries) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.iconUrl, other.iconUrl) &&
            Utils.enhancedDeepEquals(this.supportedFeatures, other.supportedFeatures) &&
            Utils.enhancedDeepEquals(this.requiredCheckoutFields, other.requiredCheckoutFields) &&
            Utils.enhancedDeepEquals(this.configuration, other.configuration);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, displayName,
            method, fields, reportingFields,
            supportedCurrencies, supportedCountries, mode,
            iconUrl, supportedFeatures, requiredCheckoutFields,
            configuration);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentServiceDefinition.class,
                "id", id,
                "type", type,
                "displayName", displayName,
                "method", method,
                "fields", fields,
                "reportingFields", reportingFields,
                "supportedCurrencies", supportedCurrencies,
                "supportedCountries", supportedCountries,
                "mode", mode,
                "iconUrl", iconUrl,
                "supportedFeatures", supportedFeatures,
                "requiredCheckoutFields", requiredCheckoutFields,
                "configuration", configuration);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String displayName;

        private Method method;

        private List<DefinitionField> fields;

        private List<DefinitionField> reportingFields;

        private List<String> supportedCurrencies;

        private List<String> supportedCountries;

        private Mode mode;

        private JsonNullable<String> iconUrl = JsonNullable.undefined();

        private Map<String, Boolean> supportedFeatures;

        private List<RequiredCheckoutFields> requiredCheckoutFields;

        private PaymentServiceConfiguration configuration;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The definition ID of the payment service that can be configured. This is the underlying provider followed by a dash followed by the method.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * A human friendly name for this service.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }


        public Builder method(Method method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * A list of credentials and related fields which can be configured for this service.
         */
        public Builder fields(List<DefinitionField> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }


        /**
         * A list of reporting fields which can be configured for this service.
         */
        public Builder reportingFields(List<DefinitionField> reportingFields) {
            Utils.checkNotNull(reportingFields, "reportingFields");
            this.reportingFields = reportingFields;
            return this;
        }


        /**
         * A list of three-letter ISO currency codes that this service supports.
         */
        public Builder supportedCurrencies(List<String> supportedCurrencies) {
            Utils.checkNotNull(supportedCurrencies, "supportedCurrencies");
            this.supportedCurrencies = supportedCurrencies;
            return this;
        }


        /**
         * A list of two-letter ISO country codes that this service supports.
         */
        public Builder supportedCountries(List<String> supportedCountries) {
            Utils.checkNotNull(supportedCountries, "supportedCountries");
            this.supportedCountries = supportedCountries;
            return this;
        }


        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * An icon to display for the payment service.
         */
        public Builder iconUrl(String iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = JsonNullable.of(iconUrl);
            return this;
        }

        /**
         * An icon to display for the payment service.
         */
        public Builder iconUrl(JsonNullable<String> iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = iconUrl;
            return this;
        }


        /**
         * Features supported by the payment service.
         */
        public Builder supportedFeatures(Map<String, Boolean> supportedFeatures) {
            Utils.checkNotNull(supportedFeatures, "supportedFeatures");
            this.supportedFeatures = supportedFeatures;
            return this;
        }


        /**
         * A list of condition that define when some fields must be provided with a transaction request.
         */
        public Builder requiredCheckoutFields(List<RequiredCheckoutFields> requiredCheckoutFields) {
            Utils.checkNotNull(requiredCheckoutFields, "requiredCheckoutFields");
            this.requiredCheckoutFields = requiredCheckoutFields;
            return this;
        }


        public Builder configuration(PaymentServiceConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        public PaymentServiceDefinition build() {

            return new PaymentServiceDefinition(
                id, displayName, method,
                fields, reportingFields, supportedCurrencies,
                supportedCountries, mode, iconUrl,
                supportedFeatures, requiredCheckoutFields, configuration);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-service-definition\"",
                        new TypeReference<Optional<String>>() {});
    }
}
