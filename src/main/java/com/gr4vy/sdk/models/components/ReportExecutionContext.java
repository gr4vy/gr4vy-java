/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;


public class ReportExecutionContext {
    /**
     * The reference timestamp for the report execution context.
     */
    @JsonProperty("reference_timestamp")
    private OffsetDateTime referenceTimestamp;

    /**
     * The reference timezone for the report execution context.
     */
    @JsonProperty("reference_timezone")
    private String referenceTimezone;

    @JsonCreator
    public ReportExecutionContext(
            @JsonProperty("reference_timestamp") OffsetDateTime referenceTimestamp,
            @JsonProperty("reference_timezone") String referenceTimezone) {
        Utils.checkNotNull(referenceTimestamp, "referenceTimestamp");
        Utils.checkNotNull(referenceTimezone, "referenceTimezone");
        this.referenceTimestamp = referenceTimestamp;
        this.referenceTimezone = referenceTimezone;
    }

    /**
     * The reference timestamp for the report execution context.
     */
    @JsonIgnore
    public OffsetDateTime referenceTimestamp() {
        return referenceTimestamp;
    }

    /**
     * The reference timezone for the report execution context.
     */
    @JsonIgnore
    public String referenceTimezone() {
        return referenceTimezone;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The reference timestamp for the report execution context.
     */
    public ReportExecutionContext withReferenceTimestamp(OffsetDateTime referenceTimestamp) {
        Utils.checkNotNull(referenceTimestamp, "referenceTimestamp");
        this.referenceTimestamp = referenceTimestamp;
        return this;
    }

    /**
     * The reference timezone for the report execution context.
     */
    public ReportExecutionContext withReferenceTimezone(String referenceTimezone) {
        Utils.checkNotNull(referenceTimezone, "referenceTimezone");
        this.referenceTimezone = referenceTimezone;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportExecutionContext other = (ReportExecutionContext) o;
        return 
            Utils.enhancedDeepEquals(this.referenceTimestamp, other.referenceTimestamp) &&
            Utils.enhancedDeepEquals(this.referenceTimezone, other.referenceTimezone);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            referenceTimestamp, referenceTimezone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportExecutionContext.class,
                "referenceTimestamp", referenceTimestamp,
                "referenceTimezone", referenceTimezone);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OffsetDateTime referenceTimestamp;

        private String referenceTimezone;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The reference timestamp for the report execution context.
         */
        public Builder referenceTimestamp(OffsetDateTime referenceTimestamp) {
            Utils.checkNotNull(referenceTimestamp, "referenceTimestamp");
            this.referenceTimestamp = referenceTimestamp;
            return this;
        }


        /**
         * The reference timezone for the report execution context.
         */
        public Builder referenceTimezone(String referenceTimezone) {
            Utils.checkNotNull(referenceTimezone, "referenceTimezone");
            this.referenceTimezone = referenceTimezone;
            return this;
        }

        public ReportExecutionContext build() {

            return new ReportExecutionContext(
                referenceTimestamp, referenceTimezone);
        }

    }
}
