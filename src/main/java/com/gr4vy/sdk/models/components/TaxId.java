/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

public class TaxId {

    /**
     * The tax ID for the buyer.
     */
    @JsonProperty("value")
    private String value;

    @JsonProperty("kind")
    private TaxIdKind kind;

    @JsonCreator
    public TaxId(
            @JsonProperty("value") String value,
            @JsonProperty("kind") TaxIdKind kind) {
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(kind, "kind");
        this.value = value;
        this.kind = kind;
    }

    /**
     * The tax ID for the buyer.
     */
    @JsonIgnore
    public String value() {
        return value;
    }

    @JsonIgnore
    public TaxIdKind kind() {
        return kind;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The tax ID for the buyer.
     */
    public TaxId withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    public TaxId withKind(TaxIdKind kind) {
        Utils.checkNotNull(kind, "kind");
        this.kind = kind;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxId other = (TaxId) o;
        return 
            Utils.enhancedDeepEquals(this.value, other.value) &&
            Utils.enhancedDeepEquals(this.kind, other.kind);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            value,
            kind);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxId.class,
                "value", value,
                "kind", kind);
    }
    
    public final static class Builder {
 
        private String value;
 
        private TaxIdKind kind;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The tax ID for the buyer.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public Builder kind(TaxIdKind kind) {
            Utils.checkNotNull(kind, "kind");
            this.kind = kind;
            return this;
        }
        
        public TaxId build() {
            return new TaxId(
                value,
                kind);
        }
    }
}
