/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AuditLogEntryUser {
    /**
     * Always `user`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The name of the user.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The email address for this user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    private JsonNullable<String> emailAddress;

    /**
     * Whether this is a Gr4vy staff user.
     */
    @JsonProperty("is_staff")
    private boolean isStaff;


    @JsonProperty("status")
    private UserStatus status;

    @JsonCreator
    public AuditLogEntryUser(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("name") String name,
            @JsonProperty("email_address") JsonNullable<String> emailAddress,
            @JsonProperty("is_staff") boolean isStaff,
            @JsonProperty("status") UserStatus status) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(isStaff, "isStaff");
        Utils.checkNotNull(status, "status");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.name = name;
        this.emailAddress = emailAddress;
        this.isStaff = isStaff;
        this.status = status;
    }
    
    public AuditLogEntryUser(
            String name,
            boolean isStaff,
            UserStatus status) {
        this(JsonNullable.undefined(), name, JsonNullable.undefined(),
            isStaff, status);
    }

    /**
     * Always `user`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID of the user.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The name of the user.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The email address for this user.
     */
    @JsonIgnore
    public JsonNullable<String> emailAddress() {
        return emailAddress;
    }

    /**
     * Whether this is a Gr4vy staff user.
     */
    @JsonIgnore
    public boolean isStaff() {
        return isStaff;
    }

    @JsonIgnore
    public UserStatus status() {
        return status;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the user.
     */
    public AuditLogEntryUser withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The ID of the user.
     */
    public AuditLogEntryUser withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the user.
     */
    public AuditLogEntryUser withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The email address for this user.
     */
    public AuditLogEntryUser withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = JsonNullable.of(emailAddress);
        return this;
    }

    /**
     * The email address for this user.
     */
    public AuditLogEntryUser withEmailAddress(JsonNullable<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Whether this is a Gr4vy staff user.
     */
    public AuditLogEntryUser withIsStaff(boolean isStaff) {
        Utils.checkNotNull(isStaff, "isStaff");
        this.isStaff = isStaff;
        return this;
    }

    public AuditLogEntryUser withStatus(UserStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuditLogEntryUser other = (AuditLogEntryUser) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.isStaff, other.isStaff) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, name,
            emailAddress, isStaff, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuditLogEntryUser.class,
                "type", type,
                "id", id,
                "name", name,
                "emailAddress", emailAddress,
                "isStaff", isStaff,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id = JsonNullable.undefined();

        private String name;

        private JsonNullable<String> emailAddress = JsonNullable.undefined();

        private Boolean isStaff;

        private UserStatus status;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the user.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID of the user.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The name of the user.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The email address for this user.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = JsonNullable.of(emailAddress);
            return this;
        }

        /**
         * The email address for this user.
         */
        public Builder emailAddress(JsonNullable<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        /**
         * Whether this is a Gr4vy staff user.
         */
        public Builder isStaff(boolean isStaff) {
            Utils.checkNotNull(isStaff, "isStaff");
            this.isStaff = isStaff;
            return this;
        }


        public Builder status(UserStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public AuditLogEntryUser build() {

            return new AuditLogEntryUser(
                id, name, emailAddress,
                isStaff, status);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"user\"",
                        new TypeReference<Optional<String>>() {});
    }
}
