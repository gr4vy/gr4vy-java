/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PaymentMethodCard {

    /**
     * Set to `card` to use a new card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<String> method;

    /**
     * The 13-19 digit number for this card as it can be found on the front of the card.
     */
    @JsonProperty("number")
    private String number;

    /**
     * The expiration date of the card, formatted `MM/YY`.
     */
    @JsonProperty("expiration_date")
    private String expirationDate;

    /**
     * The optional card's network scheme.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_scheme")
    private JsonNullable<? extends CardScheme> cardScheme;

    /**
     * The merchant identifier for this card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    @JsonCreator
    public PaymentMethodCard(
            @JsonProperty("number") String number,
            @JsonProperty("expiration_date") String expirationDate,
            @JsonProperty("card_scheme") JsonNullable<? extends CardScheme> cardScheme,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(cardScheme, "cardScheme");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.method = Builder._SINGLETON_VALUE_Method.value();
        this.number = number;
        this.expirationDate = expirationDate;
        this.cardScheme = cardScheme;
        this.externalIdentifier = externalIdentifier;
    }
    
    public PaymentMethodCard(
            String number,
            String expirationDate) {
        this(number, expirationDate, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Set to `card` to use a new card.
     */
    @JsonIgnore
    public Optional<String> method() {
        return method;
    }

    /**
     * The 13-19 digit number for this card as it can be found on the front of the card.
     */
    @JsonIgnore
    public String number() {
        return number;
    }

    /**
     * The expiration date of the card, formatted `MM/YY`.
     */
    @JsonIgnore
    public String expirationDate() {
        return expirationDate;
    }

    /**
     * The optional card's network scheme.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardScheme> cardScheme() {
        return (JsonNullable<CardScheme>) cardScheme;
    }

    /**
     * The merchant identifier for this card.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The 13-19 digit number for this card as it can be found on the front of the card.
     */
    public PaymentMethodCard withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The expiration date of the card, formatted `MM/YY`.
     */
    public PaymentMethodCard withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The optional card's network scheme.
     */
    public PaymentMethodCard withCardScheme(CardScheme cardScheme) {
        Utils.checkNotNull(cardScheme, "cardScheme");
        this.cardScheme = JsonNullable.of(cardScheme);
        return this;
    }

    /**
     * The optional card's network scheme.
     */
    public PaymentMethodCard withCardScheme(JsonNullable<? extends CardScheme> cardScheme) {
        Utils.checkNotNull(cardScheme, "cardScheme");
        this.cardScheme = cardScheme;
        return this;
    }

    /**
     * The merchant identifier for this card.
     */
    public PaymentMethodCard withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant identifier for this card.
     */
    public PaymentMethodCard withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentMethodCard other = (PaymentMethodCard) o;
        return 
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.expirationDate, other.expirationDate) &&
            Objects.deepEquals(this.cardScheme, other.cardScheme) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            method,
            number,
            expirationDate,
            cardScheme,
            externalIdentifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentMethodCard.class,
                "method", method,
                "number", number,
                "expirationDate", expirationDate,
                "cardScheme", cardScheme,
                "externalIdentifier", externalIdentifier);
    }
    
    public final static class Builder {
 
        private String number;
 
        private String expirationDate;
 
        private JsonNullable<? extends CardScheme> cardScheme = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The 13-19 digit number for this card as it can be found on the front of the card.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * The expiration date of the card, formatted `MM/YY`.
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The optional card's network scheme.
         */
        public Builder cardScheme(CardScheme cardScheme) {
            Utils.checkNotNull(cardScheme, "cardScheme");
            this.cardScheme = JsonNullable.of(cardScheme);
            return this;
        }

        /**
         * The optional card's network scheme.
         */
        public Builder cardScheme(JsonNullable<? extends CardScheme> cardScheme) {
            Utils.checkNotNull(cardScheme, "cardScheme");
            this.cardScheme = cardScheme;
            return this;
        }

        /**
         * The merchant identifier for this card.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant identifier for this card.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }
        
        public PaymentMethodCard build() {
            return new PaymentMethodCard(
                number,
                expirationDate,
                cardScheme,
                externalIdentifier);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"card\"",
                        new TypeReference<Optional<String>>() {});
    }
}
