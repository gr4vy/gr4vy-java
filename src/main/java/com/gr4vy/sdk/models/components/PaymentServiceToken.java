/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PaymentServiceToken {

    /**
     * Always `payment-service-token`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the payment service token.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize the token creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_url")
    private JsonNullable<String> approvalUrl;

    /**
     * The ID of the payment method used to generate this token
     */
    @JsonProperty("payment_method_id")
    private String paymentMethodId;

    /**
     * The ID of the payment method used to generate this token.
     */
    @JsonProperty("payment_service_id")
    private String paymentServiceId;

    @JsonProperty("status")
    private PaymentMethodStatus status;

    /**
     * The token value. Will be present if succeeded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    private JsonNullable<String> token;

    /**
     * The date and time when this payment service token was first created in our system.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time when this payment service token was last updated in our system.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public PaymentServiceToken(
            @JsonProperty("id") String id,
            @JsonProperty("approval_url") JsonNullable<String> approvalUrl,
            @JsonProperty("payment_method_id") String paymentMethodId,
            @JsonProperty("payment_service_id") String paymentServiceId,
            @JsonProperty("status") PaymentMethodStatus status,
            @JsonProperty("token") JsonNullable<String> token,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.approvalUrl = approvalUrl;
        this.paymentMethodId = paymentMethodId;
        this.paymentServiceId = paymentServiceId;
        this.status = status;
        this.token = token;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public PaymentServiceToken(
            String id,
            String paymentMethodId,
            String paymentServiceId,
            PaymentMethodStatus status,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(id, JsonNullable.undefined(), paymentMethodId, paymentServiceId, status, JsonNullable.undefined(), createdAt, updatedAt);
    }

    /**
     * Always `payment-service-token`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the payment service token.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize the token creation.
     */
    @JsonIgnore
    public JsonNullable<String> approvalUrl() {
        return approvalUrl;
    }

    /**
     * The ID of the payment method used to generate this token
     */
    @JsonIgnore
    public String paymentMethodId() {
        return paymentMethodId;
    }

    /**
     * The ID of the payment method used to generate this token.
     */
    @JsonIgnore
    public String paymentServiceId() {
        return paymentServiceId;
    }

    @JsonIgnore
    public PaymentMethodStatus status() {
        return status;
    }

    /**
     * The token value. Will be present if succeeded.
     */
    @JsonIgnore
    public JsonNullable<String> token() {
        return token;
    }

    /**
     * The date and time when this payment service token was first created in our system.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time when this payment service token was last updated in our system.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the payment service token.
     */
    public PaymentServiceToken withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize the token creation.
     */
    public PaymentServiceToken withApprovalUrl(String approvalUrl) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        this.approvalUrl = JsonNullable.of(approvalUrl);
        return this;
    }

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize the token creation.
     */
    public PaymentServiceToken withApprovalUrl(JsonNullable<String> approvalUrl) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        this.approvalUrl = approvalUrl;
        return this;
    }

    /**
     * The ID of the payment method used to generate this token
     */
    public PaymentServiceToken withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    /**
     * The ID of the payment method used to generate this token.
     */
    public PaymentServiceToken withPaymentServiceId(String paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = paymentServiceId;
        return this;
    }

    public PaymentServiceToken withStatus(PaymentMethodStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The token value. Will be present if succeeded.
     */
    public PaymentServiceToken withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = JsonNullable.of(token);
        return this;
    }

    /**
     * The token value. Will be present if succeeded.
     */
    public PaymentServiceToken withToken(JsonNullable<String> token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * The date and time when this payment service token was first created in our system.
     */
    public PaymentServiceToken withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when this payment service token was last updated in our system.
     */
    public PaymentServiceToken withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentServiceToken other = (PaymentServiceToken) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.approvalUrl, other.approvalUrl) &&
            Utils.enhancedDeepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Utils.enhancedDeepEquals(this.paymentServiceId, other.paymentServiceId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            id,
            approvalUrl,
            paymentMethodId,
            paymentServiceId,
            status,
            token,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentServiceToken.class,
                "type", type,
                "id", id,
                "approvalUrl", approvalUrl,
                "paymentMethodId", paymentMethodId,
                "paymentServiceId", paymentServiceId,
                "status", status,
                "token", token,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> approvalUrl = JsonNullable.undefined();
 
        private String paymentMethodId;
 
        private String paymentServiceId;
 
        private PaymentMethodStatus status;
 
        private JsonNullable<String> token = JsonNullable.undefined();
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the payment service token.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The optional URL that the buyer needs to be redirected to to further authorize the token creation.
         */
        public Builder approvalUrl(String approvalUrl) {
            Utils.checkNotNull(approvalUrl, "approvalUrl");
            this.approvalUrl = JsonNullable.of(approvalUrl);
            return this;
        }

        /**
         * The optional URL that the buyer needs to be redirected to to further authorize the token creation.
         */
        public Builder approvalUrl(JsonNullable<String> approvalUrl) {
            Utils.checkNotNull(approvalUrl, "approvalUrl");
            this.approvalUrl = approvalUrl;
            return this;
        }

        /**
         * The ID of the payment method used to generate this token
         */
        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }

        /**
         * The ID of the payment method used to generate this token.
         */
        public Builder paymentServiceId(String paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = paymentServiceId;
            return this;
        }

        public Builder status(PaymentMethodStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The token value. Will be present if succeeded.
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = JsonNullable.of(token);
            return this;
        }

        /**
         * The token value. Will be present if succeeded.
         */
        public Builder token(JsonNullable<String> token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }

        /**
         * The date and time when this payment service token was first created in our system.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when this payment service token was last updated in our system.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public PaymentServiceToken build() {
            return new PaymentServiceToken(
                id,
                approvalUrl,
                paymentMethodId,
                paymentServiceId,
                status,
                token,
                createdAt,
                updatedAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-service-token\"",
                        new TypeReference<Optional<String>>() {});
    }
}
