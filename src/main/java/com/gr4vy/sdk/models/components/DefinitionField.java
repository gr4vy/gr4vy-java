/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * DefinitionField
 * 
 * <p>A single field that needs to be submitted for a payment service when it is created.
 */
public class DefinitionField {

    /**
     * The key of a field that can be submitted.
     */
    @JsonProperty("key")
    private String key;

    /**
     * The human readable name for this field.
     */
    @JsonProperty("display_name")
    private String displayName;

    /**
     * Defines if this field is required when the service is created.
     */
    @JsonProperty("required")
    private boolean required;

    @JsonProperty("format")
    private DefinitionFieldFormat format;

    /**
     * Defines if this field is secret. When `true` the field's value is not returned when querying the payment service information.
     */
    @JsonProperty("secret")
    private boolean secret;

    @JsonCreator
    public DefinitionField(
            @JsonProperty("key") String key,
            @JsonProperty("display_name") String displayName,
            @JsonProperty("required") boolean required,
            @JsonProperty("format") DefinitionFieldFormat format,
            @JsonProperty("secret") boolean secret) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(required, "required");
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(secret, "secret");
        this.key = key;
        this.displayName = displayName;
        this.required = required;
        this.format = format;
        this.secret = secret;
    }

    /**
     * The key of a field that can be submitted.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * The human readable name for this field.
     */
    @JsonIgnore
    public String displayName() {
        return displayName;
    }

    /**
     * Defines if this field is required when the service is created.
     */
    @JsonIgnore
    public boolean required() {
        return required;
    }

    @JsonIgnore
    public DefinitionFieldFormat format() {
        return format;
    }

    /**
     * Defines if this field is secret. When `true` the field's value is not returned when querying the payment service information.
     */
    @JsonIgnore
    public boolean secret() {
        return secret;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The key of a field that can be submitted.
     */
    public DefinitionField withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * The human readable name for this field.
     */
    public DefinitionField withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * Defines if this field is required when the service is created.
     */
    public DefinitionField withRequired(boolean required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }

    public DefinitionField withFormat(DefinitionFieldFormat format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    /**
     * Defines if this field is secret. When `true` the field's value is not returned when querying the payment service information.
     */
    public DefinitionField withSecret(boolean secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DefinitionField other = (DefinitionField) o;
        return 
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.required, other.required) &&
            Objects.deepEquals(this.format, other.format) &&
            Objects.deepEquals(this.secret, other.secret);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            key,
            displayName,
            required,
            format,
            secret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DefinitionField.class,
                "key", key,
                "displayName", displayName,
                "required", required,
                "format", format,
                "secret", secret);
    }
    
    public final static class Builder {
 
        private String key;
 
        private String displayName;
 
        private Boolean required;
 
        private DefinitionFieldFormat format;
 
        private Boolean secret;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The key of a field that can be submitted.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * The human readable name for this field.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * Defines if this field is required when the service is created.
         */
        public Builder required(boolean required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }

        public Builder format(DefinitionFieldFormat format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        /**
         * Defines if this field is secret. When `true` the field's value is not returned when querying the payment service information.
         */
        public Builder secret(boolean secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }
        
        public DefinitionField build() {
            return new DefinitionField(
                key,
                displayName,
                required,
                format,
                secret);
        }
    }
}
