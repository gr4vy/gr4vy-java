/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class ForterAntiFraudOptions {
    /**
     * The delivery type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_type")
    private JsonNullable<? extends ForterAntiFraudOptionsDeliveryType> deliveryType;

    /**
     * The delivery method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_method")
    private JsonNullable<String> deliveryMethod;

    /**
     * Defines if this payment is made using guest checkout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_guest_buyer")
    private JsonNullable<Boolean> isGuestBuyer;

    /**
     * A list of cart items details to pass to the Forter API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cart_items")
    private JsonNullable<? extends List<ForterAntiFraudOptionsCartItem>> cartItems;

    /**
     * Information about the discount applied to this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount")
    private JsonNullable<? extends ForterAntiFraudOptionsDiscount> totalDiscount;

    @JsonCreator
    public ForterAntiFraudOptions(
            @JsonProperty("delivery_type") JsonNullable<? extends ForterAntiFraudOptionsDeliveryType> deliveryType,
            @JsonProperty("delivery_method") JsonNullable<String> deliveryMethod,
            @JsonProperty("is_guest_buyer") JsonNullable<Boolean> isGuestBuyer,
            @JsonProperty("cart_items") JsonNullable<? extends List<ForterAntiFraudOptionsCartItem>> cartItems,
            @JsonProperty("total_discount") JsonNullable<? extends ForterAntiFraudOptionsDiscount> totalDiscount) {
        Utils.checkNotNull(deliveryType, "deliveryType");
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        Utils.checkNotNull(isGuestBuyer, "isGuestBuyer");
        Utils.checkNotNull(cartItems, "cartItems");
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.deliveryType = deliveryType;
        this.deliveryMethod = deliveryMethod;
        this.isGuestBuyer = isGuestBuyer;
        this.cartItems = cartItems;
        this.totalDiscount = totalDiscount;
    }
    
    public ForterAntiFraudOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The delivery type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ForterAntiFraudOptionsDeliveryType> deliveryType() {
        return (JsonNullable<ForterAntiFraudOptionsDeliveryType>) deliveryType;
    }

    /**
     * The delivery method
     */
    @JsonIgnore
    public JsonNullable<String> deliveryMethod() {
        return deliveryMethod;
    }

    /**
     * Defines if this payment is made using guest checkout.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isGuestBuyer() {
        return isGuestBuyer;
    }

    /**
     * A list of cart items details to pass to the Forter API.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<ForterAntiFraudOptionsCartItem>> cartItems() {
        return (JsonNullable<List<ForterAntiFraudOptionsCartItem>>) cartItems;
    }

    /**
     * Information about the discount applied to this order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ForterAntiFraudOptionsDiscount> totalDiscount() {
        return (JsonNullable<ForterAntiFraudOptionsDiscount>) totalDiscount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The delivery type
     */
    public ForterAntiFraudOptions withDeliveryType(ForterAntiFraudOptionsDeliveryType deliveryType) {
        Utils.checkNotNull(deliveryType, "deliveryType");
        this.deliveryType = JsonNullable.of(deliveryType);
        return this;
    }

    /**
     * The delivery type
     */
    public ForterAntiFraudOptions withDeliveryType(JsonNullable<? extends ForterAntiFraudOptionsDeliveryType> deliveryType) {
        Utils.checkNotNull(deliveryType, "deliveryType");
        this.deliveryType = deliveryType;
        return this;
    }

    /**
     * The delivery method
     */
    public ForterAntiFraudOptions withDeliveryMethod(String deliveryMethod) {
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        this.deliveryMethod = JsonNullable.of(deliveryMethod);
        return this;
    }

    /**
     * The delivery method
     */
    public ForterAntiFraudOptions withDeliveryMethod(JsonNullable<String> deliveryMethod) {
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        this.deliveryMethod = deliveryMethod;
        return this;
    }

    /**
     * Defines if this payment is made using guest checkout.
     */
    public ForterAntiFraudOptions withIsGuestBuyer(boolean isGuestBuyer) {
        Utils.checkNotNull(isGuestBuyer, "isGuestBuyer");
        this.isGuestBuyer = JsonNullable.of(isGuestBuyer);
        return this;
    }

    /**
     * Defines if this payment is made using guest checkout.
     */
    public ForterAntiFraudOptions withIsGuestBuyer(JsonNullable<Boolean> isGuestBuyer) {
        Utils.checkNotNull(isGuestBuyer, "isGuestBuyer");
        this.isGuestBuyer = isGuestBuyer;
        return this;
    }

    /**
     * A list of cart items details to pass to the Forter API.
     */
    public ForterAntiFraudOptions withCartItems(List<ForterAntiFraudOptionsCartItem> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = JsonNullable.of(cartItems);
        return this;
    }

    /**
     * A list of cart items details to pass to the Forter API.
     */
    public ForterAntiFraudOptions withCartItems(JsonNullable<? extends List<ForterAntiFraudOptionsCartItem>> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = cartItems;
        return this;
    }

    /**
     * Information about the discount applied to this order.
     */
    public ForterAntiFraudOptions withTotalDiscount(ForterAntiFraudOptionsDiscount totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = JsonNullable.of(totalDiscount);
        return this;
    }

    /**
     * Information about the discount applied to this order.
     */
    public ForterAntiFraudOptions withTotalDiscount(JsonNullable<? extends ForterAntiFraudOptionsDiscount> totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = totalDiscount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ForterAntiFraudOptions other = (ForterAntiFraudOptions) o;
        return 
            Utils.enhancedDeepEquals(this.deliveryType, other.deliveryType) &&
            Utils.enhancedDeepEquals(this.deliveryMethod, other.deliveryMethod) &&
            Utils.enhancedDeepEquals(this.isGuestBuyer, other.isGuestBuyer) &&
            Utils.enhancedDeepEquals(this.cartItems, other.cartItems) &&
            Utils.enhancedDeepEquals(this.totalDiscount, other.totalDiscount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            deliveryType, deliveryMethod, isGuestBuyer,
            cartItems, totalDiscount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ForterAntiFraudOptions.class,
                "deliveryType", deliveryType,
                "deliveryMethod", deliveryMethod,
                "isGuestBuyer", isGuestBuyer,
                "cartItems", cartItems,
                "totalDiscount", totalDiscount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends ForterAntiFraudOptionsDeliveryType> deliveryType = JsonNullable.undefined();

        private JsonNullable<String> deliveryMethod = JsonNullable.undefined();

        private JsonNullable<Boolean> isGuestBuyer = JsonNullable.undefined();

        private JsonNullable<? extends List<ForterAntiFraudOptionsCartItem>> cartItems = JsonNullable.undefined();

        private JsonNullable<? extends ForterAntiFraudOptionsDiscount> totalDiscount = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The delivery type
         */
        public Builder deliveryType(ForterAntiFraudOptionsDeliveryType deliveryType) {
            Utils.checkNotNull(deliveryType, "deliveryType");
            this.deliveryType = JsonNullable.of(deliveryType);
            return this;
        }

        /**
         * The delivery type
         */
        public Builder deliveryType(JsonNullable<? extends ForterAntiFraudOptionsDeliveryType> deliveryType) {
            Utils.checkNotNull(deliveryType, "deliveryType");
            this.deliveryType = deliveryType;
            return this;
        }


        /**
         * The delivery method
         */
        public Builder deliveryMethod(String deliveryMethod) {
            Utils.checkNotNull(deliveryMethod, "deliveryMethod");
            this.deliveryMethod = JsonNullable.of(deliveryMethod);
            return this;
        }

        /**
         * The delivery method
         */
        public Builder deliveryMethod(JsonNullable<String> deliveryMethod) {
            Utils.checkNotNull(deliveryMethod, "deliveryMethod");
            this.deliveryMethod = deliveryMethod;
            return this;
        }


        /**
         * Defines if this payment is made using guest checkout.
         */
        public Builder isGuestBuyer(boolean isGuestBuyer) {
            Utils.checkNotNull(isGuestBuyer, "isGuestBuyer");
            this.isGuestBuyer = JsonNullable.of(isGuestBuyer);
            return this;
        }

        /**
         * Defines if this payment is made using guest checkout.
         */
        public Builder isGuestBuyer(JsonNullable<Boolean> isGuestBuyer) {
            Utils.checkNotNull(isGuestBuyer, "isGuestBuyer");
            this.isGuestBuyer = isGuestBuyer;
            return this;
        }


        /**
         * A list of cart items details to pass to the Forter API.
         */
        public Builder cartItems(List<ForterAntiFraudOptionsCartItem> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = JsonNullable.of(cartItems);
            return this;
        }

        /**
         * A list of cart items details to pass to the Forter API.
         */
        public Builder cartItems(JsonNullable<? extends List<ForterAntiFraudOptionsCartItem>> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = cartItems;
            return this;
        }


        /**
         * Information about the discount applied to this order.
         */
        public Builder totalDiscount(ForterAntiFraudOptionsDiscount totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = JsonNullable.of(totalDiscount);
            return this;
        }

        /**
         * Information about the discount applied to this order.
         */
        public Builder totalDiscount(JsonNullable<? extends ForterAntiFraudOptionsDiscount> totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = totalDiscount;
            return this;
        }

        public ForterAntiFraudOptions build() {

            return new ForterAntiFraudOptions(
                deliveryType, deliveryMethod, isGuestBuyer,
                cartItems, totalDiscount);
        }

    }
}
