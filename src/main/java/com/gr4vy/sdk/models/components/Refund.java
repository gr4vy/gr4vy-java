/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Refund {

    /**
     * Always `refund`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The unique identifier for the refund.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the transaction associated with this refund.
     */
    @JsonProperty("transaction_id")
    private String transactionId;

    /**
     * The payment service's unique ID for the refund.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service_refund_id")
    private JsonNullable<String> paymentServiceRefundId;

    @JsonProperty("status")
    private RefundStatus status;

    /**
     * The ISO 4217 currency code for this refund. Will always match that of the associated transaction.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The amount of this refund, in the smallest currency unit (for example, cents or pence).
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The reason for this refund. Could be a multiline string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private JsonNullable<String> reason;

    @JsonProperty("target_type")
    private RefundTargetType targetType;

    /**
     * The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_id")
    private JsonNullable<String> targetId;

    /**
     * The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.
     */
    @JsonProperty("reconciliation_id")
    private String reconciliationId;

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.
     */
    @JsonProperty("transaction_reconciliation_id")
    private String transactionReconciliationId;

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_external_identifier")
    private JsonNullable<String> transactionExternalIdentifier;

    /**
     * The date this refund was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date this refund was last updated at.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    /**
     * The user that created this resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    private JsonNullable<? extends Creator> creator;

    @JsonCreator
    public Refund(
            @JsonProperty("id") String id,
            @JsonProperty("transaction_id") String transactionId,
            @JsonProperty("payment_service_refund_id") JsonNullable<String> paymentServiceRefundId,
            @JsonProperty("status") RefundStatus status,
            @JsonProperty("currency") String currency,
            @JsonProperty("amount") long amount,
            @JsonProperty("reason") JsonNullable<String> reason,
            @JsonProperty("target_type") RefundTargetType targetType,
            @JsonProperty("target_id") JsonNullable<String> targetId,
            @JsonProperty("reconciliation_id") String reconciliationId,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("transaction_reconciliation_id") String transactionReconciliationId,
            @JsonProperty("transaction_external_identifier") JsonNullable<String> transactionExternalIdentifier,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("creator") JsonNullable<? extends Creator> creator) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(paymentServiceRefundId, "paymentServiceRefundId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(targetType, "targetType");
        Utils.checkNotNull(targetId, "targetId");
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(transactionReconciliationId, "transactionReconciliationId");
        Utils.checkNotNull(transactionExternalIdentifier, "transactionExternalIdentifier");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(creator, "creator");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.transactionId = transactionId;
        this.paymentServiceRefundId = paymentServiceRefundId;
        this.status = status;
        this.currency = currency;
        this.amount = amount;
        this.reason = reason;
        this.targetType = targetType;
        this.targetId = targetId;
        this.reconciliationId = reconciliationId;
        this.externalIdentifier = externalIdentifier;
        this.transactionReconciliationId = transactionReconciliationId;
        this.transactionExternalIdentifier = transactionExternalIdentifier;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.creator = creator;
    }
    
    public Refund(
            String id,
            String transactionId,
            RefundStatus status,
            String currency,
            long amount,
            RefundTargetType targetType,
            String reconciliationId,
            String transactionReconciliationId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(id, transactionId, JsonNullable.undefined(), status, currency, amount, JsonNullable.undefined(), targetType, JsonNullable.undefined(), reconciliationId, JsonNullable.undefined(), transactionReconciliationId, JsonNullable.undefined(), createdAt, updatedAt, JsonNullable.undefined());
    }

    /**
     * Always `refund`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The unique identifier for the refund.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The ID of the transaction associated with this refund.
     */
    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    /**
     * The payment service's unique ID for the refund.
     */
    @JsonIgnore
    public JsonNullable<String> paymentServiceRefundId() {
        return paymentServiceRefundId;
    }

    @JsonIgnore
    public RefundStatus status() {
        return status;
    }

    /**
     * The ISO 4217 currency code for this refund. Will always match that of the associated transaction.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The amount of this refund, in the smallest currency unit (for example, cents or pence).
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The reason for this refund. Could be a multiline string.
     */
    @JsonIgnore
    public JsonNullable<String> reason() {
        return reason;
    }

    @JsonIgnore
    public RefundTargetType targetType() {
        return targetType;
    }

    /**
     * The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
     */
    @JsonIgnore
    public JsonNullable<String> targetId() {
        return targetId;
    }

    /**
     * The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.
     */
    @JsonIgnore
    public String reconciliationId() {
        return reconciliationId;
    }

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.
     */
    @JsonIgnore
    public String transactionReconciliationId() {
        return transactionReconciliationId;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> transactionExternalIdentifier() {
        return transactionExternalIdentifier;
    }

    /**
     * The date this refund was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date this refund was last updated at.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    /**
     * The user that created this resource
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Creator> creator() {
        return (JsonNullable<Creator>) creator;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique identifier for the refund.
     */
    public Refund withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the transaction associated with this refund.
     */
    public Refund withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    /**
     * The payment service's unique ID for the refund.
     */
    public Refund withPaymentServiceRefundId(String paymentServiceRefundId) {
        Utils.checkNotNull(paymentServiceRefundId, "paymentServiceRefundId");
        this.paymentServiceRefundId = JsonNullable.of(paymentServiceRefundId);
        return this;
    }

    /**
     * The payment service's unique ID for the refund.
     */
    public Refund withPaymentServiceRefundId(JsonNullable<String> paymentServiceRefundId) {
        Utils.checkNotNull(paymentServiceRefundId, "paymentServiceRefundId");
        this.paymentServiceRefundId = paymentServiceRefundId;
        return this;
    }

    public Refund withStatus(RefundStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The ISO 4217 currency code for this refund. Will always match that of the associated transaction.
     */
    public Refund withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The amount of this refund, in the smallest currency unit (for example, cents or pence).
     */
    public Refund withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The reason for this refund. Could be a multiline string.
     */
    public Refund withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = JsonNullable.of(reason);
        return this;
    }

    /**
     * The reason for this refund. Could be a multiline string.
     */
    public Refund withReason(JsonNullable<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    public Refund withTargetType(RefundTargetType targetType) {
        Utils.checkNotNull(targetType, "targetType");
        this.targetType = targetType;
        return this;
    }

    /**
     * The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
     */
    public Refund withTargetId(String targetId) {
        Utils.checkNotNull(targetId, "targetId");
        this.targetId = JsonNullable.of(targetId);
        return this;
    }

    /**
     * The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
     */
    public Refund withTargetId(JsonNullable<String> targetId) {
        Utils.checkNotNull(targetId, "targetId");
        this.targetId = targetId;
        return this;
    }

    /**
     * The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.
     */
    public Refund withReconciliationId(String reconciliationId) {
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        this.reconciliationId = reconciliationId;
        return this;
    }

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    public Refund withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    public Refund withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.
     */
    public Refund withTransactionReconciliationId(String transactionReconciliationId) {
        Utils.checkNotNull(transactionReconciliationId, "transactionReconciliationId");
        this.transactionReconciliationId = transactionReconciliationId;
        return this;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public Refund withTransactionExternalIdentifier(String transactionExternalIdentifier) {
        Utils.checkNotNull(transactionExternalIdentifier, "transactionExternalIdentifier");
        this.transactionExternalIdentifier = JsonNullable.of(transactionExternalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public Refund withTransactionExternalIdentifier(JsonNullable<String> transactionExternalIdentifier) {
        Utils.checkNotNull(transactionExternalIdentifier, "transactionExternalIdentifier");
        this.transactionExternalIdentifier = transactionExternalIdentifier;
        return this;
    }

    /**
     * The date this refund was created at.
     */
    public Refund withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date this refund was last updated at.
     */
    public Refund withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The user that created this resource
     */
    public Refund withCreator(Creator creator) {
        Utils.checkNotNull(creator, "creator");
        this.creator = JsonNullable.of(creator);
        return this;
    }

    /**
     * The user that created this resource
     */
    public Refund withCreator(JsonNullable<? extends Creator> creator) {
        Utils.checkNotNull(creator, "creator");
        this.creator = creator;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Refund other = (Refund) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.transactionId, other.transactionId) &&
            Utils.enhancedDeepEquals(this.paymentServiceRefundId, other.paymentServiceRefundId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.reason, other.reason) &&
            Utils.enhancedDeepEquals(this.targetType, other.targetType) &&
            Utils.enhancedDeepEquals(this.targetId, other.targetId) &&
            Utils.enhancedDeepEquals(this.reconciliationId, other.reconciliationId) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.transactionReconciliationId, other.transactionReconciliationId) &&
            Utils.enhancedDeepEquals(this.transactionExternalIdentifier, other.transactionExternalIdentifier) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.creator, other.creator);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            id,
            transactionId,
            paymentServiceRefundId,
            status,
            currency,
            amount,
            reason,
            targetType,
            targetId,
            reconciliationId,
            externalIdentifier,
            transactionReconciliationId,
            transactionExternalIdentifier,
            createdAt,
            updatedAt,
            creator);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Refund.class,
                "type", type,
                "id", id,
                "transactionId", transactionId,
                "paymentServiceRefundId", paymentServiceRefundId,
                "status", status,
                "currency", currency,
                "amount", amount,
                "reason", reason,
                "targetType", targetType,
                "targetId", targetId,
                "reconciliationId", reconciliationId,
                "externalIdentifier", externalIdentifier,
                "transactionReconciliationId", transactionReconciliationId,
                "transactionExternalIdentifier", transactionExternalIdentifier,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "creator", creator);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String transactionId;
 
        private JsonNullable<String> paymentServiceRefundId = JsonNullable.undefined();
 
        private RefundStatus status;
 
        private String currency;
 
        private Long amount;
 
        private JsonNullable<String> reason = JsonNullable.undefined();
 
        private RefundTargetType targetType;
 
        private JsonNullable<String> targetId = JsonNullable.undefined();
 
        private String reconciliationId;
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private String transactionReconciliationId;
 
        private JsonNullable<String> transactionExternalIdentifier = JsonNullable.undefined();
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
 
        private JsonNullable<? extends Creator> creator = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier for the refund.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID of the transaction associated with this refund.
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }

        /**
         * The payment service's unique ID for the refund.
         */
        public Builder paymentServiceRefundId(String paymentServiceRefundId) {
            Utils.checkNotNull(paymentServiceRefundId, "paymentServiceRefundId");
            this.paymentServiceRefundId = JsonNullable.of(paymentServiceRefundId);
            return this;
        }

        /**
         * The payment service's unique ID for the refund.
         */
        public Builder paymentServiceRefundId(JsonNullable<String> paymentServiceRefundId) {
            Utils.checkNotNull(paymentServiceRefundId, "paymentServiceRefundId");
            this.paymentServiceRefundId = paymentServiceRefundId;
            return this;
        }

        public Builder status(RefundStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The ISO 4217 currency code for this refund. Will always match that of the associated transaction.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The amount of this refund, in the smallest currency unit (for example, cents or pence).
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The reason for this refund. Could be a multiline string.
         */
        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = JsonNullable.of(reason);
            return this;
        }

        /**
         * The reason for this refund. Could be a multiline string.
         */
        public Builder reason(JsonNullable<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        public Builder targetType(RefundTargetType targetType) {
            Utils.checkNotNull(targetType, "targetType");
            this.targetType = targetType;
            return this;
        }

        /**
         * The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
         */
        public Builder targetId(String targetId) {
            Utils.checkNotNull(targetId, "targetId");
            this.targetId = JsonNullable.of(targetId);
            return this;
        }

        /**
         * The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
         */
        public Builder targetId(JsonNullable<String> targetId) {
            Utils.checkNotNull(targetId, "targetId");
            this.targetId = targetId;
            return this;
        }

        /**
         * The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.
         */
        public Builder reconciliationId(String reconciliationId) {
            Utils.checkNotNull(reconciliationId, "reconciliationId");
            this.reconciliationId = reconciliationId;
            return this;
        }

        /**
         * An external identifier that can be used to match the refund against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the refund against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.
         */
        public Builder transactionReconciliationId(String transactionReconciliationId) {
            Utils.checkNotNull(transactionReconciliationId, "transactionReconciliationId");
            this.transactionReconciliationId = transactionReconciliationId;
            return this;
        }

        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder transactionExternalIdentifier(String transactionExternalIdentifier) {
            Utils.checkNotNull(transactionExternalIdentifier, "transactionExternalIdentifier");
            this.transactionExternalIdentifier = JsonNullable.of(transactionExternalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder transactionExternalIdentifier(JsonNullable<String> transactionExternalIdentifier) {
            Utils.checkNotNull(transactionExternalIdentifier, "transactionExternalIdentifier");
            this.transactionExternalIdentifier = transactionExternalIdentifier;
            return this;
        }

        /**
         * The date this refund was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date this refund was last updated at.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The user that created this resource
         */
        public Builder creator(Creator creator) {
            Utils.checkNotNull(creator, "creator");
            this.creator = JsonNullable.of(creator);
            return this;
        }

        /**
         * The user that created this resource
         */
        public Builder creator(JsonNullable<? extends Creator> creator) {
            Utils.checkNotNull(creator, "creator");
            this.creator = creator;
            return this;
        }
        
        public Refund build() {
            return new Refund(
                id,
                transactionId,
                paymentServiceRefundId,
                status,
                currency,
                amount,
                reason,
                targetType,
                targetId,
                reconciliationId,
                externalIdentifier,
                transactionReconciliationId,
                transactionExternalIdentifier,
                createdAt,
                updatedAt,
                creator);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"refund\"",
                        new TypeReference<Optional<String>>() {});
    }
}
