/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class TransactionCapture {
    /**
     * Always `transaction-capture`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;


    @JsonProperty("status")
    private CaptureStatus status;

    /**
     * The standardized error code set by Gr4vy.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("code")
    private Optional<String> code;

    /**
     * This is the response code received from the payment service. This can be set to any value and is not
     * standardized across different payment services.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("raw_response_code")
    private Optional<String> rawResponseCode;

    /**
     * This is the response description received from the payment service. This can be set to any value and
     * is not standardized across different payment services.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("raw_response_description")
    private Optional<String> rawResponseDescription;

    /**
     * A full transaction resource.
     */
    @JsonProperty("transaction")
    private Transaction transaction;

    @JsonCreator
    public TransactionCapture(
            @JsonProperty("status") CaptureStatus status,
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("raw_response_code") Optional<String> rawResponseCode,
            @JsonProperty("raw_response_description") Optional<String> rawResponseDescription,
            @JsonProperty("transaction") Transaction transaction) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        Utils.checkNotNull(transaction, "transaction");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.status = status;
        this.code = code;
        this.rawResponseCode = rawResponseCode;
        this.rawResponseDescription = rawResponseDescription;
        this.transaction = transaction;
    }
    
    public TransactionCapture(
            CaptureStatus status,
            Transaction transaction) {
        this(status, Optional.empty(), Optional.empty(),
            Optional.empty(), transaction);
    }

    /**
     * Always `transaction-capture`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public CaptureStatus status() {
        return status;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not
     * standardized across different payment services.
     */
    @JsonIgnore
    public Optional<String> rawResponseCode() {
        return rawResponseCode;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and
     * is not standardized across different payment services.
     */
    @JsonIgnore
    public Optional<String> rawResponseDescription() {
        return rawResponseDescription;
    }

    /**
     * A full transaction resource.
     */
    @JsonIgnore
    public Transaction transaction() {
        return transaction;
    }

    public static Builder builder() {
        return new Builder();
    }


    public TransactionCapture withStatus(CaptureStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    public TransactionCapture withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }


    /**
     * The standardized error code set by Gr4vy.
     */
    public TransactionCapture withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not
     * standardized across different payment services.
     */
    public TransactionCapture withRawResponseCode(String rawResponseCode) {
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        this.rawResponseCode = Optional.ofNullable(rawResponseCode);
        return this;
    }


    /**
     * This is the response code received from the payment service. This can be set to any value and is not
     * standardized across different payment services.
     */
    public TransactionCapture withRawResponseCode(Optional<String> rawResponseCode) {
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        this.rawResponseCode = rawResponseCode;
        return this;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and
     * is not standardized across different payment services.
     */
    public TransactionCapture withRawResponseDescription(String rawResponseDescription) {
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        this.rawResponseDescription = Optional.ofNullable(rawResponseDescription);
        return this;
    }


    /**
     * This is the response description received from the payment service. This can be set to any value and
     * is not standardized across different payment services.
     */
    public TransactionCapture withRawResponseDescription(Optional<String> rawResponseDescription) {
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        this.rawResponseDescription = rawResponseDescription;
        return this;
    }

    /**
     * A full transaction resource.
     */
    public TransactionCapture withTransaction(Transaction transaction) {
        Utils.checkNotNull(transaction, "transaction");
        this.transaction = transaction;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionCapture other = (TransactionCapture) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.rawResponseCode, other.rawResponseCode) &&
            Utils.enhancedDeepEquals(this.rawResponseDescription, other.rawResponseDescription) &&
            Utils.enhancedDeepEquals(this.transaction, other.transaction);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, status, code,
            rawResponseCode, rawResponseDescription, transaction);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionCapture.class,
                "type", type,
                "status", status,
                "code", code,
                "rawResponseCode", rawResponseCode,
                "rawResponseDescription", rawResponseDescription,
                "transaction", transaction);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CaptureStatus status;

        private Optional<String> code = Optional.empty();

        private Optional<String> rawResponseCode = Optional.empty();

        private Optional<String> rawResponseDescription = Optional.empty();

        private Transaction transaction;

        private Builder() {
          // force use of static builder() method
        }


        public Builder status(CaptureStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The standardized error code set by Gr4vy.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * The standardized error code set by Gr4vy.
         */
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * This is the response code received from the payment service. This can be set to any value and is not
         * standardized across different payment services.
         */
        public Builder rawResponseCode(String rawResponseCode) {
            Utils.checkNotNull(rawResponseCode, "rawResponseCode");
            this.rawResponseCode = Optional.ofNullable(rawResponseCode);
            return this;
        }

        /**
         * This is the response code received from the payment service. This can be set to any value and is not
         * standardized across different payment services.
         */
        public Builder rawResponseCode(Optional<String> rawResponseCode) {
            Utils.checkNotNull(rawResponseCode, "rawResponseCode");
            this.rawResponseCode = rawResponseCode;
            return this;
        }


        /**
         * This is the response description received from the payment service. This can be set to any value and
         * is not standardized across different payment services.
         */
        public Builder rawResponseDescription(String rawResponseDescription) {
            Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
            this.rawResponseDescription = Optional.ofNullable(rawResponseDescription);
            return this;
        }

        /**
         * This is the response description received from the payment service. This can be set to any value and
         * is not standardized across different payment services.
         */
        public Builder rawResponseDescription(Optional<String> rawResponseDescription) {
            Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
            this.rawResponseDescription = rawResponseDescription;
            return this;
        }


        /**
         * A full transaction resource.
         */
        public Builder transaction(Transaction transaction) {
            Utils.checkNotNull(transaction, "transaction");
            this.transaction = transaction;
            return this;
        }

        public TransactionCapture build() {

            return new TransactionCapture(
                status, code, rawResponseCode,
                rawResponseDescription, transaction);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"transaction-capture\"",
                        new TypeReference<Optional<String>>() {});
    }
}
