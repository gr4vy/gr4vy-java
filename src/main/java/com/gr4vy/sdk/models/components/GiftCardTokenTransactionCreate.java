/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;


public class GiftCardTokenTransactionCreate {
    /**
     * The ID for the gift card to charge.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The monetary amount for this transaction to charge against the gift card, in the smallest currency
     * unit (for example, cents or pence).
     */
    @JsonProperty("amount")
    private long amount;

    @JsonCreator
    public GiftCardTokenTransactionCreate(
            @JsonProperty("id") String id,
            @JsonProperty("amount") long amount) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(amount, "amount");
        this.id = id;
        this.amount = amount;
    }

    /**
     * The ID for the gift card to charge.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The monetary amount for this transaction to charge against the gift card, in the smallest currency
     * unit (for example, cents or pence).
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID for the gift card to charge.
     */
    public GiftCardTokenTransactionCreate withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The monetary amount for this transaction to charge against the gift card, in the smallest currency
     * unit (for example, cents or pence).
     */
    public GiftCardTokenTransactionCreate withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GiftCardTokenTransactionCreate other = (GiftCardTokenTransactionCreate) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GiftCardTokenTransactionCreate.class,
                "id", id,
                "amount", amount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Long amount;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID for the gift card to charge.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The monetary amount for this transaction to charge against the gift card, in the smallest currency
         * unit (for example, cents or pence).
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public GiftCardTokenTransactionCreate build() {

            return new GiftCardTokenTransactionCreate(
                id, amount);
        }

    }
}
