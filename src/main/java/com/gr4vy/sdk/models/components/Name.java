/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * Name
 * 
 * <p>The specific event name.
 */
@JsonDeserialize(using = Name._Deserializer.class)
@JsonSerialize(using = Name._Serializer.class)
public class Name {

    public static final Name TRANSACTION_UPDATED_STATUS = new Name("transaction-updated-status");
    public static final Name TRANSACTION_SYNC_EVENT = new Name("transaction-sync-event");
    public static final Name TRANSACTION_SYNC_FAILED_EVENT = new Name("transaction-sync-failed-event");
    public static final Name TRANSACTION_MODIFIED_EVENT = new Name("transaction-modified-event");
    public static final Name TRANSACTION_API_REQUEST = new Name("transaction-api-request");
    public static final Name TRANSACTION_API_RESPONSE = new Name("transaction-api-response");
    public static final Name BIN_LOOKUP_REQUEST = new Name("bin-lookup-request");
    public static final Name THREE_D_SECURE_SUCCESS = new Name("three-d-secure-success");
    public static final Name THREE_D_SECURE_REQUEST_ERROR = new Name("three-d-secure-request-error");
    public static final Name THREE_D_SECURE_PREPARATION_REQUEST = new Name("three-d-secure-preparation-request");
    public static final Name THREE_D_SECURE_AUTHENTICATION_REQUEST = new Name("three-d-secure-authentication-request");
    public static final Name THREE_D_SECURE_RESULT_REQUEST = new Name("three-d-secure-result-request");
    public static final Name ANTI_FRAUD_DECISION = new Name("anti-fraud-decision");
    public static final Name ANTI_FRAUD_DECISION_ERROR = new Name("anti-fraud-decision-error");
    public static final Name ANTI_FRAUD_DECISION_SKIPPED = new Name("anti-fraud-decision-skipped");
    public static final Name ANTI_FRAUD_WEBHOOK = new Name("anti-fraud-webhook");
    public static final Name ANTI_FRAUD_TRANSACTION_STATUS_UPDATE = new Name("anti-fraud-transaction-status-update");
    public static final Name ANTI_FRAUD_TRANSACTION_STATUS_UPDATE_ERROR = new Name("anti-fraud-transaction-status-update-error");
    public static final Name ANTI_FRAUD_DECISION_UPDATE = new Name("anti-fraud-decision-update");
    public static final Name ANTI_FRAUD_DECISION_UPDATE_ERROR = new Name("anti-fraud-decision-update-error");
    public static final Name GIFT_CARD_REDEMPTION_SUCCEEDED = new Name("gift-card-redemption-succeeded");
    public static final Name GIFT_CARD_REDEMPTION_FAILED = new Name("gift-card-redemption-failed");
    public static final Name GIFT_CARD_REFUND_SUCCEEDED = new Name("gift-card-refund-succeeded");
    public static final Name GIFT_CARD_REFUND_FAILED = new Name("gift-card-refund-failed");
    public static final Name GIFT_CARD_REVERSAL_SUCCEEDED = new Name("gift-card-reversal-succeeded");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_SUCCEEDED = new Name("payment-connector-response-transaction-authorization-succeeded");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_SUCCEEDED = new Name("payment-connector-response-transaction-capture-succeeded");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_FAILED = new Name("payment-connector-response-transaction-authorization-failed");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_DECLINED = new Name("payment-connector-response-transaction-declined");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_FAILED = new Name("payment-connector-response-transaction-capture-failed");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_DECLINED = new Name("payment-connector-response-transaction-capture-declined");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_SUCCEEDED = new Name("payment-connector-response-transaction-cancel-succeeded");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_FAILED = new Name("payment-connector-response-transaction-cancel-failed");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_SUCCEEDED = new Name("payment-connector-response-transaction-void-succeeded");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_DECLINED = new Name("payment-connector-response-transaction-void-declined");
    public static final Name PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_FAILED = new Name("payment-connector-response-transaction-void-failed");
    public static final Name PAYMENT_CONNECTOR_EXTERNAL_TRANSACTION_REQUEST = new Name("payment-connector-external-transaction-request");
    public static final Name PAYMENT_CONNECTOR_REPORT_TRANSACTION_SETTLED = new Name("payment-connector-report-transaction-settled");
    public static final Name PAYMENT_CONNECTOR_REPORT_CHARGEBACK_POSTED = new Name("payment-connector-report-chargeback-posted");
    public static final Name PAYMENT_CONNECTOR_REPORT_CHARGEBACK_REVERSAL_POSTED = new Name("payment-connector-report-chargeback-reversal-posted");
    public static final Name DIGITAL_WALLET_APPLE_PAY_TOKEN_DECRYPTED = new Name("digital-wallet-apple-pay-token-decrypted");
    public static final Name DIGITAL_WALLET_GOOGLE_PAY_TOKEN_DECRYPTED = new Name("digital-wallet-google-pay-token-decrypted");
    public static final Name DIGITAL_WALLET_CLICK_TO_PAY_TOKEN_DECRYPTED = new Name("digital-wallet-click-to-pay-token-decrypted");
    public static final Name NETWORK_TOKEN_PROVISION_SUCCEEDED = new Name("network-token-provision-succeeded");
    public static final Name NETWORK_TOKEN_PROVISION_FAILED = new Name("network-token-provision-failed");
    public static final Name NETWORK_TOKEN_CRYPTOGRAM_PROVISION_SUCCEEDED = new Name("network-token-cryptogram-provision-succeeded");
    public static final Name NETWORK_TOKEN_CRYPTOGRAM_PROVISION_FAILED = new Name("network-token-cryptogram-provision-failed");
    public static final Name THE_GIVING_BLOCK_TRANSACTION_CONVERSION_SUCCEEDED = new Name("the-giving-block-transaction-conversion-succeeded");
    public static final Name REAL_TIME_ACCOUNT_UPDATE = new Name("real-time-account-update");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, Name> values = createValuesMap();
    private static final Map<String, NameEnum> enums = createEnumsMap();

    private final String value;

    private Name(String value) {
        this.value = value;
    }

    /**
     * Returns a Name with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as Name
     */ 
    public static Name of(String value) {
        synchronized (Name.class) {
            return values.computeIfAbsent(value, v -> new Name(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<NameEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Name other = (Name) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "Name [value=" + value + "]";
    }

    // return an array just like an enum
    public static Name[] values() {
        synchronized (Name.class) {
            return values.values().toArray(new Name[] {});
        }
    }

    private static final Map<String, Name> createValuesMap() {
        Map<String, Name> map = new LinkedHashMap<>();
        map.put("transaction-updated-status", TRANSACTION_UPDATED_STATUS);
        map.put("transaction-sync-event", TRANSACTION_SYNC_EVENT);
        map.put("transaction-sync-failed-event", TRANSACTION_SYNC_FAILED_EVENT);
        map.put("transaction-modified-event", TRANSACTION_MODIFIED_EVENT);
        map.put("transaction-api-request", TRANSACTION_API_REQUEST);
        map.put("transaction-api-response", TRANSACTION_API_RESPONSE);
        map.put("bin-lookup-request", BIN_LOOKUP_REQUEST);
        map.put("three-d-secure-success", THREE_D_SECURE_SUCCESS);
        map.put("three-d-secure-request-error", THREE_D_SECURE_REQUEST_ERROR);
        map.put("three-d-secure-preparation-request", THREE_D_SECURE_PREPARATION_REQUEST);
        map.put("three-d-secure-authentication-request", THREE_D_SECURE_AUTHENTICATION_REQUEST);
        map.put("three-d-secure-result-request", THREE_D_SECURE_RESULT_REQUEST);
        map.put("anti-fraud-decision", ANTI_FRAUD_DECISION);
        map.put("anti-fraud-decision-error", ANTI_FRAUD_DECISION_ERROR);
        map.put("anti-fraud-decision-skipped", ANTI_FRAUD_DECISION_SKIPPED);
        map.put("anti-fraud-webhook", ANTI_FRAUD_WEBHOOK);
        map.put("anti-fraud-transaction-status-update", ANTI_FRAUD_TRANSACTION_STATUS_UPDATE);
        map.put("anti-fraud-transaction-status-update-error", ANTI_FRAUD_TRANSACTION_STATUS_UPDATE_ERROR);
        map.put("anti-fraud-decision-update", ANTI_FRAUD_DECISION_UPDATE);
        map.put("anti-fraud-decision-update-error", ANTI_FRAUD_DECISION_UPDATE_ERROR);
        map.put("gift-card-redemption-succeeded", GIFT_CARD_REDEMPTION_SUCCEEDED);
        map.put("gift-card-redemption-failed", GIFT_CARD_REDEMPTION_FAILED);
        map.put("gift-card-refund-succeeded", GIFT_CARD_REFUND_SUCCEEDED);
        map.put("gift-card-refund-failed", GIFT_CARD_REFUND_FAILED);
        map.put("gift-card-reversal-succeeded", GIFT_CARD_REVERSAL_SUCCEEDED);
        map.put("payment-connector-response-transaction-authorization-succeeded", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_SUCCEEDED);
        map.put("payment-connector-response-transaction-capture-succeeded", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_SUCCEEDED);
        map.put("payment-connector-response-transaction-authorization-failed", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_FAILED);
        map.put("payment-connector-response-transaction-declined", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_DECLINED);
        map.put("payment-connector-response-transaction-capture-failed", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_FAILED);
        map.put("payment-connector-response-transaction-capture-declined", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_DECLINED);
        map.put("payment-connector-response-transaction-cancel-succeeded", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_SUCCEEDED);
        map.put("payment-connector-response-transaction-cancel-failed", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_FAILED);
        map.put("payment-connector-response-transaction-void-succeeded", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_SUCCEEDED);
        map.put("payment-connector-response-transaction-void-declined", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_DECLINED);
        map.put("payment-connector-response-transaction-void-failed", PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_FAILED);
        map.put("payment-connector-external-transaction-request", PAYMENT_CONNECTOR_EXTERNAL_TRANSACTION_REQUEST);
        map.put("payment-connector-report-transaction-settled", PAYMENT_CONNECTOR_REPORT_TRANSACTION_SETTLED);
        map.put("payment-connector-report-chargeback-posted", PAYMENT_CONNECTOR_REPORT_CHARGEBACK_POSTED);
        map.put("payment-connector-report-chargeback-reversal-posted", PAYMENT_CONNECTOR_REPORT_CHARGEBACK_REVERSAL_POSTED);
        map.put("digital-wallet-apple-pay-token-decrypted", DIGITAL_WALLET_APPLE_PAY_TOKEN_DECRYPTED);
        map.put("digital-wallet-google-pay-token-decrypted", DIGITAL_WALLET_GOOGLE_PAY_TOKEN_DECRYPTED);
        map.put("digital-wallet-click-to-pay-token-decrypted", DIGITAL_WALLET_CLICK_TO_PAY_TOKEN_DECRYPTED);
        map.put("network-token-provision-succeeded", NETWORK_TOKEN_PROVISION_SUCCEEDED);
        map.put("network-token-provision-failed", NETWORK_TOKEN_PROVISION_FAILED);
        map.put("network-token-cryptogram-provision-succeeded", NETWORK_TOKEN_CRYPTOGRAM_PROVISION_SUCCEEDED);
        map.put("network-token-cryptogram-provision-failed", NETWORK_TOKEN_CRYPTOGRAM_PROVISION_FAILED);
        map.put("the-giving-block-transaction-conversion-succeeded", THE_GIVING_BLOCK_TRANSACTION_CONVERSION_SUCCEEDED);
        map.put("real-time-account-update", REAL_TIME_ACCOUNT_UPDATE);
        return map;
    }

    private static final Map<String, NameEnum> createEnumsMap() {
        Map<String, NameEnum> map = new HashMap<>();
        map.put("transaction-updated-status", NameEnum.TRANSACTION_UPDATED_STATUS);
        map.put("transaction-sync-event", NameEnum.TRANSACTION_SYNC_EVENT);
        map.put("transaction-sync-failed-event", NameEnum.TRANSACTION_SYNC_FAILED_EVENT);
        map.put("transaction-modified-event", NameEnum.TRANSACTION_MODIFIED_EVENT);
        map.put("transaction-api-request", NameEnum.TRANSACTION_API_REQUEST);
        map.put("transaction-api-response", NameEnum.TRANSACTION_API_RESPONSE);
        map.put("bin-lookup-request", NameEnum.BIN_LOOKUP_REQUEST);
        map.put("three-d-secure-success", NameEnum.THREE_D_SECURE_SUCCESS);
        map.put("three-d-secure-request-error", NameEnum.THREE_D_SECURE_REQUEST_ERROR);
        map.put("three-d-secure-preparation-request", NameEnum.THREE_D_SECURE_PREPARATION_REQUEST);
        map.put("three-d-secure-authentication-request", NameEnum.THREE_D_SECURE_AUTHENTICATION_REQUEST);
        map.put("three-d-secure-result-request", NameEnum.THREE_D_SECURE_RESULT_REQUEST);
        map.put("anti-fraud-decision", NameEnum.ANTI_FRAUD_DECISION);
        map.put("anti-fraud-decision-error", NameEnum.ANTI_FRAUD_DECISION_ERROR);
        map.put("anti-fraud-decision-skipped", NameEnum.ANTI_FRAUD_DECISION_SKIPPED);
        map.put("anti-fraud-webhook", NameEnum.ANTI_FRAUD_WEBHOOK);
        map.put("anti-fraud-transaction-status-update", NameEnum.ANTI_FRAUD_TRANSACTION_STATUS_UPDATE);
        map.put("anti-fraud-transaction-status-update-error", NameEnum.ANTI_FRAUD_TRANSACTION_STATUS_UPDATE_ERROR);
        map.put("anti-fraud-decision-update", NameEnum.ANTI_FRAUD_DECISION_UPDATE);
        map.put("anti-fraud-decision-update-error", NameEnum.ANTI_FRAUD_DECISION_UPDATE_ERROR);
        map.put("gift-card-redemption-succeeded", NameEnum.GIFT_CARD_REDEMPTION_SUCCEEDED);
        map.put("gift-card-redemption-failed", NameEnum.GIFT_CARD_REDEMPTION_FAILED);
        map.put("gift-card-refund-succeeded", NameEnum.GIFT_CARD_REFUND_SUCCEEDED);
        map.put("gift-card-refund-failed", NameEnum.GIFT_CARD_REFUND_FAILED);
        map.put("gift-card-reversal-succeeded", NameEnum.GIFT_CARD_REVERSAL_SUCCEEDED);
        map.put("payment-connector-response-transaction-authorization-succeeded", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_SUCCEEDED);
        map.put("payment-connector-response-transaction-capture-succeeded", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_SUCCEEDED);
        map.put("payment-connector-response-transaction-authorization-failed", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_FAILED);
        map.put("payment-connector-response-transaction-declined", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_DECLINED);
        map.put("payment-connector-response-transaction-capture-failed", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_FAILED);
        map.put("payment-connector-response-transaction-capture-declined", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_DECLINED);
        map.put("payment-connector-response-transaction-cancel-succeeded", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_SUCCEEDED);
        map.put("payment-connector-response-transaction-cancel-failed", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_FAILED);
        map.put("payment-connector-response-transaction-void-succeeded", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_SUCCEEDED);
        map.put("payment-connector-response-transaction-void-declined", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_DECLINED);
        map.put("payment-connector-response-transaction-void-failed", NameEnum.PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_FAILED);
        map.put("payment-connector-external-transaction-request", NameEnum.PAYMENT_CONNECTOR_EXTERNAL_TRANSACTION_REQUEST);
        map.put("payment-connector-report-transaction-settled", NameEnum.PAYMENT_CONNECTOR_REPORT_TRANSACTION_SETTLED);
        map.put("payment-connector-report-chargeback-posted", NameEnum.PAYMENT_CONNECTOR_REPORT_CHARGEBACK_POSTED);
        map.put("payment-connector-report-chargeback-reversal-posted", NameEnum.PAYMENT_CONNECTOR_REPORT_CHARGEBACK_REVERSAL_POSTED);
        map.put("digital-wallet-apple-pay-token-decrypted", NameEnum.DIGITAL_WALLET_APPLE_PAY_TOKEN_DECRYPTED);
        map.put("digital-wallet-google-pay-token-decrypted", NameEnum.DIGITAL_WALLET_GOOGLE_PAY_TOKEN_DECRYPTED);
        map.put("digital-wallet-click-to-pay-token-decrypted", NameEnum.DIGITAL_WALLET_CLICK_TO_PAY_TOKEN_DECRYPTED);
        map.put("network-token-provision-succeeded", NameEnum.NETWORK_TOKEN_PROVISION_SUCCEEDED);
        map.put("network-token-provision-failed", NameEnum.NETWORK_TOKEN_PROVISION_FAILED);
        map.put("network-token-cryptogram-provision-succeeded", NameEnum.NETWORK_TOKEN_CRYPTOGRAM_PROVISION_SUCCEEDED);
        map.put("network-token-cryptogram-provision-failed", NameEnum.NETWORK_TOKEN_CRYPTOGRAM_PROVISION_FAILED);
        map.put("the-giving-block-transaction-conversion-succeeded", NameEnum.THE_GIVING_BLOCK_TRANSACTION_CONVERSION_SUCCEEDED);
        map.put("real-time-account-update", NameEnum.REAL_TIME_ACCOUNT_UPDATE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<Name> {

        protected _Serializer() {
            super(Name.class);
        }

        @Override
        public void serialize(Name value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<Name> {

        protected _Deserializer() {
            super(Name.class);
        }

        @Override
        public Name deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return Name.of(v);
        }
    }
    
    public enum NameEnum {

        TRANSACTION_UPDATED_STATUS("transaction-updated-status"),
        TRANSACTION_SYNC_EVENT("transaction-sync-event"),
        TRANSACTION_SYNC_FAILED_EVENT("transaction-sync-failed-event"),
        TRANSACTION_MODIFIED_EVENT("transaction-modified-event"),
        TRANSACTION_API_REQUEST("transaction-api-request"),
        TRANSACTION_API_RESPONSE("transaction-api-response"),
        BIN_LOOKUP_REQUEST("bin-lookup-request"),
        THREE_D_SECURE_SUCCESS("three-d-secure-success"),
        THREE_D_SECURE_REQUEST_ERROR("three-d-secure-request-error"),
        THREE_D_SECURE_PREPARATION_REQUEST("three-d-secure-preparation-request"),
        THREE_D_SECURE_AUTHENTICATION_REQUEST("three-d-secure-authentication-request"),
        THREE_D_SECURE_RESULT_REQUEST("three-d-secure-result-request"),
        ANTI_FRAUD_DECISION("anti-fraud-decision"),
        ANTI_FRAUD_DECISION_ERROR("anti-fraud-decision-error"),
        ANTI_FRAUD_DECISION_SKIPPED("anti-fraud-decision-skipped"),
        ANTI_FRAUD_WEBHOOK("anti-fraud-webhook"),
        ANTI_FRAUD_TRANSACTION_STATUS_UPDATE("anti-fraud-transaction-status-update"),
        ANTI_FRAUD_TRANSACTION_STATUS_UPDATE_ERROR("anti-fraud-transaction-status-update-error"),
        ANTI_FRAUD_DECISION_UPDATE("anti-fraud-decision-update"),
        ANTI_FRAUD_DECISION_UPDATE_ERROR("anti-fraud-decision-update-error"),
        GIFT_CARD_REDEMPTION_SUCCEEDED("gift-card-redemption-succeeded"),
        GIFT_CARD_REDEMPTION_FAILED("gift-card-redemption-failed"),
        GIFT_CARD_REFUND_SUCCEEDED("gift-card-refund-succeeded"),
        GIFT_CARD_REFUND_FAILED("gift-card-refund-failed"),
        GIFT_CARD_REVERSAL_SUCCEEDED("gift-card-reversal-succeeded"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_SUCCEEDED("payment-connector-response-transaction-authorization-succeeded"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_SUCCEEDED("payment-connector-response-transaction-capture-succeeded"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_FAILED("payment-connector-response-transaction-authorization-failed"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_DECLINED("payment-connector-response-transaction-declined"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_FAILED("payment-connector-response-transaction-capture-failed"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_DECLINED("payment-connector-response-transaction-capture-declined"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_SUCCEEDED("payment-connector-response-transaction-cancel-succeeded"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CANCEL_FAILED("payment-connector-response-transaction-cancel-failed"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_SUCCEEDED("payment-connector-response-transaction-void-succeeded"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_DECLINED("payment-connector-response-transaction-void-declined"),
        PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_FAILED("payment-connector-response-transaction-void-failed"),
        PAYMENT_CONNECTOR_EXTERNAL_TRANSACTION_REQUEST("payment-connector-external-transaction-request"),
        PAYMENT_CONNECTOR_REPORT_TRANSACTION_SETTLED("payment-connector-report-transaction-settled"),
        PAYMENT_CONNECTOR_REPORT_CHARGEBACK_POSTED("payment-connector-report-chargeback-posted"),
        PAYMENT_CONNECTOR_REPORT_CHARGEBACK_REVERSAL_POSTED("payment-connector-report-chargeback-reversal-posted"),
        DIGITAL_WALLET_APPLE_PAY_TOKEN_DECRYPTED("digital-wallet-apple-pay-token-decrypted"),
        DIGITAL_WALLET_GOOGLE_PAY_TOKEN_DECRYPTED("digital-wallet-google-pay-token-decrypted"),
        DIGITAL_WALLET_CLICK_TO_PAY_TOKEN_DECRYPTED("digital-wallet-click-to-pay-token-decrypted"),
        NETWORK_TOKEN_PROVISION_SUCCEEDED("network-token-provision-succeeded"),
        NETWORK_TOKEN_PROVISION_FAILED("network-token-provision-failed"),
        NETWORK_TOKEN_CRYPTOGRAM_PROVISION_SUCCEEDED("network-token-cryptogram-provision-succeeded"),
        NETWORK_TOKEN_CRYPTOGRAM_PROVISION_FAILED("network-token-cryptogram-provision-failed"),
        THE_GIVING_BLOCK_TRANSACTION_CONVERSION_SUCCEEDED("the-giving-block-transaction-conversion-succeeded"),
        REAL_TIME_ACCOUNT_UPDATE("real-time-account-update"),;

        private final String value;

        private NameEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

