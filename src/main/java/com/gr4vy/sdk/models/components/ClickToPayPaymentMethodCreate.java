/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ClickToPayPaymentMethodCreate
 * 
 * <p>Create a Click to Pay payment with a decrypted token and cryptogram. This
 * is mainly used internally but can be used by anyone with their own C2P
 * integration.
 */
public class ClickToPayPaymentMethodCreate {

    /**
     * Aways `click-to-pay`.
     */
    @JsonProperty("method")
    private String method;

    /**
     * The device token.
     */
    @JsonProperty("token")
    private String token;

    /**
     * The payment cryptogram for the device token.
     */
    @JsonProperty("cryptogram")
    private String cryptogram;

    /**
     * The expiration date of the device token.
     */
    @JsonProperty("expiration_date")
    private String expirationDate;

    /**
     * The ID of the buyer to associate this transaction to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_id")
    private JsonNullable<String> buyerId;

    /**
     * The external identifier of the buyer to create a transaction for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_external_identifier")
    private JsonNullable<String> buyerExternalIdentifier;

    /**
     * The external identifier of the payment method to filter by.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    private JsonNullable<String> redirectUrl;

    @JsonCreator
    public ClickToPayPaymentMethodCreate(
            @JsonProperty("token") String token,
            @JsonProperty("cryptogram") String cryptogram,
            @JsonProperty("expiration_date") String expirationDate,
            @JsonProperty("buyer_id") JsonNullable<String> buyerId,
            @JsonProperty("buyer_external_identifier") JsonNullable<String> buyerExternalIdentifier,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("redirect_url") JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(cryptogram, "cryptogram");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.method = Builder._SINGLETON_VALUE_Method.value();
        this.token = token;
        this.cryptogram = cryptogram;
        this.expirationDate = expirationDate;
        this.buyerId = buyerId;
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        this.externalIdentifier = externalIdentifier;
        this.redirectUrl = redirectUrl;
    }
    
    public ClickToPayPaymentMethodCreate(
            String token,
            String cryptogram,
            String expirationDate) {
        this(token, cryptogram, expirationDate, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Aways `click-to-pay`.
     */
    @JsonIgnore
    public String method() {
        return method;
    }

    /**
     * The device token.
     */
    @JsonIgnore
    public String token() {
        return token;
    }

    /**
     * The payment cryptogram for the device token.
     */
    @JsonIgnore
    public String cryptogram() {
        return cryptogram;
    }

    /**
     * The expiration date of the device token.
     */
    @JsonIgnore
    public String expirationDate() {
        return expirationDate;
    }

    /**
     * The ID of the buyer to associate this transaction to.
     */
    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    /**
     * The external identifier of the buyer to create a transaction for.
     */
    @JsonIgnore
    public JsonNullable<String> buyerExternalIdentifier() {
        return buyerExternalIdentifier;
    }

    /**
     * The external identifier of the payment method to filter by.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The device token.
     */
    public ClickToPayPaymentMethodCreate withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * The payment cryptogram for the device token.
     */
    public ClickToPayPaymentMethodCreate withCryptogram(String cryptogram) {
        Utils.checkNotNull(cryptogram, "cryptogram");
        this.cryptogram = cryptogram;
        return this;
    }

    /**
     * The expiration date of the device token.
     */
    public ClickToPayPaymentMethodCreate withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The ID of the buyer to associate this transaction to.
     */
    public ClickToPayPaymentMethodCreate withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    /**
     * The ID of the buyer to associate this transaction to.
     */
    public ClickToPayPaymentMethodCreate withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    /**
     * The external identifier of the buyer to create a transaction for.
     */
    public ClickToPayPaymentMethodCreate withBuyerExternalIdentifier(String buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
        return this;
    }

    /**
     * The external identifier of the buyer to create a transaction for.
     */
    public ClickToPayPaymentMethodCreate withBuyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        return this;
    }

    /**
     * The external identifier of the payment method to filter by.
     */
    public ClickToPayPaymentMethodCreate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The external identifier of the payment method to filter by.
     */
    public ClickToPayPaymentMethodCreate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    public ClickToPayPaymentMethodCreate withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     */
    public ClickToPayPaymentMethodCreate withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClickToPayPaymentMethodCreate other = (ClickToPayPaymentMethodCreate) o;
        return 
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.token, other.token) &&
            Objects.deepEquals(this.cryptogram, other.cryptogram) &&
            Objects.deepEquals(this.expirationDate, other.expirationDate) &&
            Objects.deepEquals(this.buyerId, other.buyerId) &&
            Objects.deepEquals(this.buyerExternalIdentifier, other.buyerExternalIdentifier) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            method,
            token,
            cryptogram,
            expirationDate,
            buyerId,
            buyerExternalIdentifier,
            externalIdentifier,
            redirectUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClickToPayPaymentMethodCreate.class,
                "method", method,
                "token", token,
                "cryptogram", cryptogram,
                "expirationDate", expirationDate,
                "buyerId", buyerId,
                "buyerExternalIdentifier", buyerExternalIdentifier,
                "externalIdentifier", externalIdentifier,
                "redirectUrl", redirectUrl);
    }
    
    public final static class Builder {
 
        private String token;
 
        private String cryptogram;
 
        private String expirationDate;
 
        private JsonNullable<String> buyerId = JsonNullable.undefined();
 
        private JsonNullable<String> buyerExternalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<String> redirectUrl = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The device token.
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }

        /**
         * The payment cryptogram for the device token.
         */
        public Builder cryptogram(String cryptogram) {
            Utils.checkNotNull(cryptogram, "cryptogram");
            this.cryptogram = cryptogram;
            return this;
        }

        /**
         * The expiration date of the device token.
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The ID of the buyer to associate this transaction to.
         */
        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        /**
         * The ID of the buyer to associate this transaction to.
         */
        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }

        /**
         * The external identifier of the buyer to create a transaction for.
         */
        public Builder buyerExternalIdentifier(String buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
            return this;
        }

        /**
         * The external identifier of the buyer to create a transaction for.
         */
        public Builder buyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = buyerExternalIdentifier;
            return this;
        }

        /**
         * The external identifier of the payment method to filter by.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The external identifier of the payment method to filter by.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * The URL to redirect a user back to after the complete 3DS in browser.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * The URL to redirect a user back to after the complete 3DS in browser.
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        public ClickToPayPaymentMethodCreate build() {
            return new ClickToPayPaymentMethodCreate(
                token,
                cryptogram,
                expirationDate,
                buyerId,
                buyerExternalIdentifier,
                externalIdentifier,
                redirectUrl);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"click-to-pay\"",
                        new TypeReference<String>() {});
    }
}
