/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * BrowserInfo
 * 
 * <p>Merchant provided browser info
 */
public class BrowserInfo {

    @JsonProperty("javascript_enabled")
    private boolean javascriptEnabled;

    @JsonProperty("java_enabled")
    private boolean javaEnabled;

    @JsonProperty("language")
    private String language;

    @JsonProperty("color_depth")
    private long colorDepth;

    @JsonProperty("screen_height")
    private long screenHeight;

    @JsonProperty("screen_width")
    private long screenWidth;

    @JsonProperty("time_zone_offset")
    private long timeZoneOffset;

    /**
     * Exact content of the HTTP user-agent header.
     */
    @JsonProperty("user_agent")
    private String userAgent;

    /**
     * The platform that is being used to access the website.
     */
    @JsonProperty("user_device")
    private UserDevice userDevice;

    /**
     * The Accept header of the request from the buyer's browser.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accept_header")
    private JsonNullable<String> acceptHeader;

    @JsonCreator
    public BrowserInfo(
            @JsonProperty("javascript_enabled") boolean javascriptEnabled,
            @JsonProperty("java_enabled") boolean javaEnabled,
            @JsonProperty("language") String language,
            @JsonProperty("color_depth") long colorDepth,
            @JsonProperty("screen_height") long screenHeight,
            @JsonProperty("screen_width") long screenWidth,
            @JsonProperty("time_zone_offset") long timeZoneOffset,
            @JsonProperty("user_agent") String userAgent,
            @JsonProperty("user_device") UserDevice userDevice,
            @JsonProperty("accept_header") JsonNullable<String> acceptHeader) {
        Utils.checkNotNull(javascriptEnabled, "javascriptEnabled");
        Utils.checkNotNull(javaEnabled, "javaEnabled");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(colorDepth, "colorDepth");
        Utils.checkNotNull(screenHeight, "screenHeight");
        Utils.checkNotNull(screenWidth, "screenWidth");
        Utils.checkNotNull(timeZoneOffset, "timeZoneOffset");
        Utils.checkNotNull(userAgent, "userAgent");
        Utils.checkNotNull(userDevice, "userDevice");
        Utils.checkNotNull(acceptHeader, "acceptHeader");
        this.javascriptEnabled = javascriptEnabled;
        this.javaEnabled = javaEnabled;
        this.language = language;
        this.colorDepth = colorDepth;
        this.screenHeight = screenHeight;
        this.screenWidth = screenWidth;
        this.timeZoneOffset = timeZoneOffset;
        this.userAgent = userAgent;
        this.userDevice = userDevice;
        this.acceptHeader = acceptHeader;
    }
    
    public BrowserInfo(
            boolean javascriptEnabled,
            boolean javaEnabled,
            String language,
            long colorDepth,
            long screenHeight,
            long screenWidth,
            long timeZoneOffset,
            String userAgent,
            UserDevice userDevice) {
        this(javascriptEnabled, javaEnabled, language, colorDepth, screenHeight, screenWidth, timeZoneOffset, userAgent, userDevice, JsonNullable.undefined());
    }

    @JsonIgnore
    public boolean javascriptEnabled() {
        return javascriptEnabled;
    }

    @JsonIgnore
    public boolean javaEnabled() {
        return javaEnabled;
    }

    @JsonIgnore
    public String language() {
        return language;
    }

    @JsonIgnore
    public long colorDepth() {
        return colorDepth;
    }

    @JsonIgnore
    public long screenHeight() {
        return screenHeight;
    }

    @JsonIgnore
    public long screenWidth() {
        return screenWidth;
    }

    @JsonIgnore
    public long timeZoneOffset() {
        return timeZoneOffset;
    }

    /**
     * Exact content of the HTTP user-agent header.
     */
    @JsonIgnore
    public String userAgent() {
        return userAgent;
    }

    /**
     * The platform that is being used to access the website.
     */
    @JsonIgnore
    public UserDevice userDevice() {
        return userDevice;
    }

    /**
     * The Accept header of the request from the buyer's browser.
     */
    @JsonIgnore
    public JsonNullable<String> acceptHeader() {
        return acceptHeader;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public BrowserInfo withJavascriptEnabled(boolean javascriptEnabled) {
        Utils.checkNotNull(javascriptEnabled, "javascriptEnabled");
        this.javascriptEnabled = javascriptEnabled;
        return this;
    }

    public BrowserInfo withJavaEnabled(boolean javaEnabled) {
        Utils.checkNotNull(javaEnabled, "javaEnabled");
        this.javaEnabled = javaEnabled;
        return this;
    }

    public BrowserInfo withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    public BrowserInfo withColorDepth(long colorDepth) {
        Utils.checkNotNull(colorDepth, "colorDepth");
        this.colorDepth = colorDepth;
        return this;
    }

    public BrowserInfo withScreenHeight(long screenHeight) {
        Utils.checkNotNull(screenHeight, "screenHeight");
        this.screenHeight = screenHeight;
        return this;
    }

    public BrowserInfo withScreenWidth(long screenWidth) {
        Utils.checkNotNull(screenWidth, "screenWidth");
        this.screenWidth = screenWidth;
        return this;
    }

    public BrowserInfo withTimeZoneOffset(long timeZoneOffset) {
        Utils.checkNotNull(timeZoneOffset, "timeZoneOffset");
        this.timeZoneOffset = timeZoneOffset;
        return this;
    }

    /**
     * Exact content of the HTTP user-agent header.
     */
    public BrowserInfo withUserAgent(String userAgent) {
        Utils.checkNotNull(userAgent, "userAgent");
        this.userAgent = userAgent;
        return this;
    }

    /**
     * The platform that is being used to access the website.
     */
    public BrowserInfo withUserDevice(UserDevice userDevice) {
        Utils.checkNotNull(userDevice, "userDevice");
        this.userDevice = userDevice;
        return this;
    }

    /**
     * The Accept header of the request from the buyer's browser.
     */
    public BrowserInfo withAcceptHeader(String acceptHeader) {
        Utils.checkNotNull(acceptHeader, "acceptHeader");
        this.acceptHeader = JsonNullable.of(acceptHeader);
        return this;
    }

    /**
     * The Accept header of the request from the buyer's browser.
     */
    public BrowserInfo withAcceptHeader(JsonNullable<String> acceptHeader) {
        Utils.checkNotNull(acceptHeader, "acceptHeader");
        this.acceptHeader = acceptHeader;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BrowserInfo other = (BrowserInfo) o;
        return 
            Objects.deepEquals(this.javascriptEnabled, other.javascriptEnabled) &&
            Objects.deepEquals(this.javaEnabled, other.javaEnabled) &&
            Objects.deepEquals(this.language, other.language) &&
            Objects.deepEquals(this.colorDepth, other.colorDepth) &&
            Objects.deepEquals(this.screenHeight, other.screenHeight) &&
            Objects.deepEquals(this.screenWidth, other.screenWidth) &&
            Objects.deepEquals(this.timeZoneOffset, other.timeZoneOffset) &&
            Objects.deepEquals(this.userAgent, other.userAgent) &&
            Objects.deepEquals(this.userDevice, other.userDevice) &&
            Objects.deepEquals(this.acceptHeader, other.acceptHeader);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            javascriptEnabled,
            javaEnabled,
            language,
            colorDepth,
            screenHeight,
            screenWidth,
            timeZoneOffset,
            userAgent,
            userDevice,
            acceptHeader);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BrowserInfo.class,
                "javascriptEnabled", javascriptEnabled,
                "javaEnabled", javaEnabled,
                "language", language,
                "colorDepth", colorDepth,
                "screenHeight", screenHeight,
                "screenWidth", screenWidth,
                "timeZoneOffset", timeZoneOffset,
                "userAgent", userAgent,
                "userDevice", userDevice,
                "acceptHeader", acceptHeader);
    }
    
    public final static class Builder {
 
        private Boolean javascriptEnabled;
 
        private Boolean javaEnabled;
 
        private String language;
 
        private Long colorDepth;
 
        private Long screenHeight;
 
        private Long screenWidth;
 
        private Long timeZoneOffset;
 
        private String userAgent;
 
        private UserDevice userDevice;
 
        private JsonNullable<String> acceptHeader = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder javascriptEnabled(boolean javascriptEnabled) {
            Utils.checkNotNull(javascriptEnabled, "javascriptEnabled");
            this.javascriptEnabled = javascriptEnabled;
            return this;
        }

        public Builder javaEnabled(boolean javaEnabled) {
            Utils.checkNotNull(javaEnabled, "javaEnabled");
            this.javaEnabled = javaEnabled;
            return this;
        }

        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        public Builder colorDepth(long colorDepth) {
            Utils.checkNotNull(colorDepth, "colorDepth");
            this.colorDepth = colorDepth;
            return this;
        }

        public Builder screenHeight(long screenHeight) {
            Utils.checkNotNull(screenHeight, "screenHeight");
            this.screenHeight = screenHeight;
            return this;
        }

        public Builder screenWidth(long screenWidth) {
            Utils.checkNotNull(screenWidth, "screenWidth");
            this.screenWidth = screenWidth;
            return this;
        }

        public Builder timeZoneOffset(long timeZoneOffset) {
            Utils.checkNotNull(timeZoneOffset, "timeZoneOffset");
            this.timeZoneOffset = timeZoneOffset;
            return this;
        }

        /**
         * Exact content of the HTTP user-agent header.
         */
        public Builder userAgent(String userAgent) {
            Utils.checkNotNull(userAgent, "userAgent");
            this.userAgent = userAgent;
            return this;
        }

        /**
         * The platform that is being used to access the website.
         */
        public Builder userDevice(UserDevice userDevice) {
            Utils.checkNotNull(userDevice, "userDevice");
            this.userDevice = userDevice;
            return this;
        }

        /**
         * The Accept header of the request from the buyer's browser.
         */
        public Builder acceptHeader(String acceptHeader) {
            Utils.checkNotNull(acceptHeader, "acceptHeader");
            this.acceptHeader = JsonNullable.of(acceptHeader);
            return this;
        }

        /**
         * The Accept header of the request from the buyer's browser.
         */
        public Builder acceptHeader(JsonNullable<String> acceptHeader) {
            Utils.checkNotNull(acceptHeader, "acceptHeader");
            this.acceptHeader = acceptHeader;
            return this;
        }
        
        public BrowserInfo build() {
            return new BrowserInfo(
                javascriptEnabled,
                javaEnabled,
                language,
                colorDepth,
                screenHeight,
                screenWidth,
                timeZoneOffset,
                userAgent,
                userDevice,
                acceptHeader);
        }
    }
}
