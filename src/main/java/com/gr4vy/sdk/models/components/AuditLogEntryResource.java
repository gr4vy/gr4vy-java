/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class AuditLogEntryResource {
    /**
     * The type of the resource.
     */
    @JsonProperty("type")
    private String type;

    /**
     * The ID of the resource.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The descriptive name of the resource.
     */
    @JsonProperty("name")
    private String name;

    @JsonCreator
    public AuditLogEntryResource(
            @JsonProperty("type") String type,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        this.type = type;
        this.id = id;
        this.name = name;
    }

    /**
     * The type of the resource.
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    /**
     * The ID of the resource.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The descriptive name of the resource.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of the resource.
     */
    public AuditLogEntryResource withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The ID of the resource.
     */
    public AuditLogEntryResource withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The descriptive name of the resource.
     */
    public AuditLogEntryResource withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuditLogEntryResource other = (AuditLogEntryResource) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuditLogEntryResource.class,
                "type", type,
                "id", id,
                "name", name);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String type;

        private String id;

        private String name;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of the resource.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The ID of the resource.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The descriptive name of the resource.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public AuditLogEntryResource build() {

            return new AuditLogEntryResource(
                type, id, name);
        }

    }
}
