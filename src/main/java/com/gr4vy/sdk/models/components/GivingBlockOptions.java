/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class GivingBlockOptions {
    /**
     * The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultCryptocurrency")
    private JsonNullable<String> defaultCryptocurrency;

    @JsonCreator
    public GivingBlockOptions(
            @JsonProperty("defaultCryptocurrency") JsonNullable<String> defaultCryptocurrency) {
        Utils.checkNotNull(defaultCryptocurrency, "defaultCryptocurrency");
        this.defaultCryptocurrency = defaultCryptocurrency;
    }
    
    public GivingBlockOptions() {
        this(JsonNullable.undefined());
    }

    /**
     * The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout.
     */
    @JsonIgnore
    public JsonNullable<String> defaultCryptocurrency() {
        return defaultCryptocurrency;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout.
     */
    public GivingBlockOptions withDefaultCryptocurrency(String defaultCryptocurrency) {
        Utils.checkNotNull(defaultCryptocurrency, "defaultCryptocurrency");
        this.defaultCryptocurrency = JsonNullable.of(defaultCryptocurrency);
        return this;
    }

    /**
     * The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout.
     */
    public GivingBlockOptions withDefaultCryptocurrency(JsonNullable<String> defaultCryptocurrency) {
        Utils.checkNotNull(defaultCryptocurrency, "defaultCryptocurrency");
        this.defaultCryptocurrency = defaultCryptocurrency;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GivingBlockOptions other = (GivingBlockOptions) o;
        return 
            Utils.enhancedDeepEquals(this.defaultCryptocurrency, other.defaultCryptocurrency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            defaultCryptocurrency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GivingBlockOptions.class,
                "defaultCryptocurrency", defaultCryptocurrency);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> defaultCryptocurrency = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout.
         */
        public Builder defaultCryptocurrency(String defaultCryptocurrency) {
            Utils.checkNotNull(defaultCryptocurrency, "defaultCryptocurrency");
            this.defaultCryptocurrency = JsonNullable.of(defaultCryptocurrency);
            return this;
        }

        /**
         * The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout.
         */
        public Builder defaultCryptocurrency(JsonNullable<String> defaultCryptocurrency) {
            Utils.checkNotNull(defaultCryptocurrency, "defaultCryptocurrency");
            this.defaultCryptocurrency = defaultCryptocurrency;
            return this;
        }

        public GivingBlockOptions build() {

            return new GivingBlockOptions(
                defaultCryptocurrency);
        }

    }
}
