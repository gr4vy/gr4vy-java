/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentLink {
    /**
     * The unique identifier for the payment link.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Always `payment-link`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The URL for the payment link.
     */
    @JsonProperty("url")
    private String url;

    /**
     * The expiration date and time for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    private JsonNullable<OffsetDateTime> expiresAt;

    /**
     * The merchant reference for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The statement descriptor for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statement_descriptor")
    private JsonNullable<? extends StatementDescriptor> statementDescriptor;

    /**
     * The locale for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private JsonNullable<String> locale;

    /**
     * The merchant's display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_name")
    private JsonNullable<String> merchantName;

    /**
     * The merchant's website URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_url")
    private JsonNullable<String> merchantUrl;

    /**
     * The merchant's banner image URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_banner_url")
    private JsonNullable<String> merchantBannerUrl;

    /**
     * The merchant's brand color.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_color")
    private JsonNullable<String> merchantColor;

    /**
     * A message from the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_message")
    private JsonNullable<String> merchantMessage;

    /**
     * URL to the merchant's terms and conditions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_terms_and_conditions_url")
    private JsonNullable<String> merchantTermsAndConditionsUrl;

    /**
     * URL to the merchant's favicon.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_favicon_url")
    private JsonNullable<String> merchantFaviconUrl;

    /**
     * The amount for the payment link.
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The country code for the payment link.
     */
    @JsonProperty("country")
    private String country;

    /**
     * The currency code for the payment link.
     */
    @JsonProperty("currency")
    private String currency;


    @JsonProperty("intent")
    private TransactionIntent intent;

    /**
     * The return URL after payment completion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_url")
    private JsonNullable<String> returnUrl;

    /**
     * The cart items for the payment link.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("cart_items")
    private Optional<? extends List<CartItem>> cartItems;

    /**
     * Arbitrary metadata for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, Object>> metadata;

    /**
     * The payment source for the payment link.
     */
    @JsonProperty("payment_source")
    private PaymentLinkPaymentSource paymentSource;

    /**
     * The date and time the payment link was created.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time the payment link was last updated.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;


    @JsonProperty("status")
    private PaymentLinkStatus status;

    /**
     * The buyer associated with the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends TransactionBuyer> buyer;

    /**
     * The shipping details for the payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_details")
    private JsonNullable<? extends ShippingDetails> shippingDetails;

    @JsonCreator
    public PaymentLink(
            @JsonProperty("id") String id,
            @JsonProperty("url") String url,
            @JsonProperty("expires_at") JsonNullable<OffsetDateTime> expiresAt,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("statement_descriptor") JsonNullable<? extends StatementDescriptor> statementDescriptor,
            @JsonProperty("locale") JsonNullable<String> locale,
            @JsonProperty("merchant_name") JsonNullable<String> merchantName,
            @JsonProperty("merchant_url") JsonNullable<String> merchantUrl,
            @JsonProperty("merchant_banner_url") JsonNullable<String> merchantBannerUrl,
            @JsonProperty("merchant_color") JsonNullable<String> merchantColor,
            @JsonProperty("merchant_message") JsonNullable<String> merchantMessage,
            @JsonProperty("merchant_terms_and_conditions_url") JsonNullable<String> merchantTermsAndConditionsUrl,
            @JsonProperty("merchant_favicon_url") JsonNullable<String> merchantFaviconUrl,
            @JsonProperty("amount") long amount,
            @JsonProperty("country") String country,
            @JsonProperty("currency") String currency,
            @JsonProperty("intent") TransactionIntent intent,
            @JsonProperty("return_url") JsonNullable<String> returnUrl,
            @JsonProperty("cart_items") Optional<? extends List<CartItem>> cartItems,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, Object>> metadata,
            @JsonProperty("payment_source") PaymentLinkPaymentSource paymentSource,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("status") PaymentLinkStatus status,
            @JsonProperty("buyer") JsonNullable<? extends TransactionBuyer> buyer,
            @JsonProperty("shipping_details") JsonNullable<? extends ShippingDetails> shippingDetails) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(merchantName, "merchantName");
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
        Utils.checkNotNull(merchantColor, "merchantColor");
        Utils.checkNotNull(merchantMessage, "merchantMessage");
        Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
        Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(intent, "intent");
        Utils.checkNotNull(returnUrl, "returnUrl");
        Utils.checkNotNull(cartItems, "cartItems");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentSource, "paymentSource");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        this.id = id;
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.url = url;
        this.expiresAt = expiresAt;
        this.externalIdentifier = externalIdentifier;
        this.statementDescriptor = statementDescriptor;
        this.locale = locale;
        this.merchantName = merchantName;
        this.merchantUrl = merchantUrl;
        this.merchantBannerUrl = merchantBannerUrl;
        this.merchantColor = merchantColor;
        this.merchantMessage = merchantMessage;
        this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
        this.merchantFaviconUrl = merchantFaviconUrl;
        this.amount = amount;
        this.country = country;
        this.currency = currency;
        this.intent = intent;
        this.returnUrl = returnUrl;
        this.cartItems = cartItems;
        this.metadata = metadata;
        this.paymentSource = paymentSource;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.status = status;
        this.buyer = buyer;
        this.shippingDetails = shippingDetails;
    }
    
    public PaymentLink(
            String id,
            String url,
            long amount,
            String country,
            String currency,
            TransactionIntent intent,
            PaymentLinkPaymentSource paymentSource,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            PaymentLinkStatus status) {
        this(id, url, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), amount, country,
            currency, intent, JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), paymentSource,
            createdAt, updatedAt, status,
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The unique identifier for the payment link.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Always `payment-link`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The URL for the payment link.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * The expiration date and time for the payment link.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> expiresAt() {
        return expiresAt;
    }

    /**
     * The merchant reference for the payment link.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The statement descriptor for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StatementDescriptor> statementDescriptor() {
        return (JsonNullable<StatementDescriptor>) statementDescriptor;
    }

    /**
     * The locale for the payment link.
     */
    @JsonIgnore
    public JsonNullable<String> locale() {
        return locale;
    }

    /**
     * The merchant's display name.
     */
    @JsonIgnore
    public JsonNullable<String> merchantName() {
        return merchantName;
    }

    /**
     * The merchant's website URL.
     */
    @JsonIgnore
    public JsonNullable<String> merchantUrl() {
        return merchantUrl;
    }

    /**
     * The merchant's banner image URL.
     */
    @JsonIgnore
    public JsonNullable<String> merchantBannerUrl() {
        return merchantBannerUrl;
    }

    /**
     * The merchant's brand color.
     */
    @JsonIgnore
    public JsonNullable<String> merchantColor() {
        return merchantColor;
    }

    /**
     * A message from the merchant.
     */
    @JsonIgnore
    public JsonNullable<String> merchantMessage() {
        return merchantMessage;
    }

    /**
     * URL to the merchant's terms and conditions.
     */
    @JsonIgnore
    public JsonNullable<String> merchantTermsAndConditionsUrl() {
        return merchantTermsAndConditionsUrl;
    }

    /**
     * URL to the merchant's favicon.
     */
    @JsonIgnore
    public JsonNullable<String> merchantFaviconUrl() {
        return merchantFaviconUrl;
    }

    /**
     * The amount for the payment link.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The country code for the payment link.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * The currency code for the payment link.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    @JsonIgnore
    public TransactionIntent intent() {
        return intent;
    }

    /**
     * The return URL after payment completion.
     */
    @JsonIgnore
    public JsonNullable<String> returnUrl() {
        return returnUrl;
    }

    /**
     * The cart items for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CartItem>> cartItems() {
        return (Optional<List<CartItem>>) cartItems;
    }

    /**
     * Arbitrary metadata for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> metadata() {
        return (JsonNullable<Map<String, Object>>) metadata;
    }

    /**
     * The payment source for the payment link.
     */
    @JsonIgnore
    public PaymentLinkPaymentSource paymentSource() {
        return paymentSource;
    }

    /**
     * The date and time the payment link was created.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time the payment link was last updated.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public PaymentLinkStatus status() {
        return status;
    }

    /**
     * The buyer associated with the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionBuyer> buyer() {
        return (JsonNullable<TransactionBuyer>) buyer;
    }

    /**
     * The shipping details for the payment link.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ShippingDetails> shippingDetails() {
        return (JsonNullable<ShippingDetails>) shippingDetails;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the payment link.
     */
    public PaymentLink withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The URL for the payment link.
     */
    public PaymentLink withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The expiration date and time for the payment link.
     */
    public PaymentLink withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }

    /**
     * The expiration date and time for the payment link.
     */
    public PaymentLink withExpiresAt(JsonNullable<OffsetDateTime> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * The merchant reference for the payment link.
     */
    public PaymentLink withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant reference for the payment link.
     */
    public PaymentLink withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The statement descriptor for the payment link.
     */
    public PaymentLink withStatementDescriptor(StatementDescriptor statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = JsonNullable.of(statementDescriptor);
        return this;
    }

    /**
     * The statement descriptor for the payment link.
     */
    public PaymentLink withStatementDescriptor(JsonNullable<? extends StatementDescriptor> statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = statementDescriptor;
        return this;
    }

    /**
     * The locale for the payment link.
     */
    public PaymentLink withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = JsonNullable.of(locale);
        return this;
    }

    /**
     * The locale for the payment link.
     */
    public PaymentLink withLocale(JsonNullable<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * The merchant's display name.
     */
    public PaymentLink withMerchantName(String merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = JsonNullable.of(merchantName);
        return this;
    }

    /**
     * The merchant's display name.
     */
    public PaymentLink withMerchantName(JsonNullable<String> merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = merchantName;
        return this;
    }

    /**
     * The merchant's website URL.
     */
    public PaymentLink withMerchantUrl(String merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = JsonNullable.of(merchantUrl);
        return this;
    }

    /**
     * The merchant's website URL.
     */
    public PaymentLink withMerchantUrl(JsonNullable<String> merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = merchantUrl;
        return this;
    }

    /**
     * The merchant's banner image URL.
     */
    public PaymentLink withMerchantBannerUrl(String merchantBannerUrl) {
        Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
        this.merchantBannerUrl = JsonNullable.of(merchantBannerUrl);
        return this;
    }

    /**
     * The merchant's banner image URL.
     */
    public PaymentLink withMerchantBannerUrl(JsonNullable<String> merchantBannerUrl) {
        Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
        this.merchantBannerUrl = merchantBannerUrl;
        return this;
    }

    /**
     * The merchant's brand color.
     */
    public PaymentLink withMerchantColor(String merchantColor) {
        Utils.checkNotNull(merchantColor, "merchantColor");
        this.merchantColor = JsonNullable.of(merchantColor);
        return this;
    }

    /**
     * The merchant's brand color.
     */
    public PaymentLink withMerchantColor(JsonNullable<String> merchantColor) {
        Utils.checkNotNull(merchantColor, "merchantColor");
        this.merchantColor = merchantColor;
        return this;
    }

    /**
     * A message from the merchant.
     */
    public PaymentLink withMerchantMessage(String merchantMessage) {
        Utils.checkNotNull(merchantMessage, "merchantMessage");
        this.merchantMessage = JsonNullable.of(merchantMessage);
        return this;
    }

    /**
     * A message from the merchant.
     */
    public PaymentLink withMerchantMessage(JsonNullable<String> merchantMessage) {
        Utils.checkNotNull(merchantMessage, "merchantMessage");
        this.merchantMessage = merchantMessage;
        return this;
    }

    /**
     * URL to the merchant's terms and conditions.
     */
    public PaymentLink withMerchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
        Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
        this.merchantTermsAndConditionsUrl = JsonNullable.of(merchantTermsAndConditionsUrl);
        return this;
    }

    /**
     * URL to the merchant's terms and conditions.
     */
    public PaymentLink withMerchantTermsAndConditionsUrl(JsonNullable<String> merchantTermsAndConditionsUrl) {
        Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
        this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
        return this;
    }

    /**
     * URL to the merchant's favicon.
     */
    public PaymentLink withMerchantFaviconUrl(String merchantFaviconUrl) {
        Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
        this.merchantFaviconUrl = JsonNullable.of(merchantFaviconUrl);
        return this;
    }

    /**
     * URL to the merchant's favicon.
     */
    public PaymentLink withMerchantFaviconUrl(JsonNullable<String> merchantFaviconUrl) {
        Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
        this.merchantFaviconUrl = merchantFaviconUrl;
        return this;
    }

    /**
     * The amount for the payment link.
     */
    public PaymentLink withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The country code for the payment link.
     */
    public PaymentLink withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The currency code for the payment link.
     */
    public PaymentLink withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public PaymentLink withIntent(TransactionIntent intent) {
        Utils.checkNotNull(intent, "intent");
        this.intent = intent;
        return this;
    }

    /**
     * The return URL after payment completion.
     */
    public PaymentLink withReturnUrl(String returnUrl) {
        Utils.checkNotNull(returnUrl, "returnUrl");
        this.returnUrl = JsonNullable.of(returnUrl);
        return this;
    }

    /**
     * The return URL after payment completion.
     */
    public PaymentLink withReturnUrl(JsonNullable<String> returnUrl) {
        Utils.checkNotNull(returnUrl, "returnUrl");
        this.returnUrl = returnUrl;
        return this;
    }

    /**
     * The cart items for the payment link.
     */
    public PaymentLink withCartItems(List<CartItem> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = Optional.ofNullable(cartItems);
        return this;
    }


    /**
     * The cart items for the payment link.
     */
    public PaymentLink withCartItems(Optional<? extends List<CartItem>> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = cartItems;
        return this;
    }

    /**
     * Arbitrary metadata for the payment link.
     */
    public PaymentLink withMetadata(Map<String, Object> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Arbitrary metadata for the payment link.
     */
    public PaymentLink withMetadata(JsonNullable<? extends Map<String, Object>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The payment source for the payment link.
     */
    public PaymentLink withPaymentSource(PaymentLinkPaymentSource paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = paymentSource;
        return this;
    }

    /**
     * The date and time the payment link was created.
     */
    public PaymentLink withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time the payment link was last updated.
     */
    public PaymentLink withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public PaymentLink withStatus(PaymentLinkStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The buyer associated with the payment link.
     */
    public PaymentLink withBuyer(TransactionBuyer buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * The buyer associated with the payment link.
     */
    public PaymentLink withBuyer(JsonNullable<? extends TransactionBuyer> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * The shipping details for the payment link.
     */
    public PaymentLink withShippingDetails(ShippingDetails shippingDetails) {
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        this.shippingDetails = JsonNullable.of(shippingDetails);
        return this;
    }

    /**
     * The shipping details for the payment link.
     */
    public PaymentLink withShippingDetails(JsonNullable<? extends ShippingDetails> shippingDetails) {
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        this.shippingDetails = shippingDetails;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentLink other = (PaymentLink) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.statementDescriptor, other.statementDescriptor) &&
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.merchantName, other.merchantName) &&
            Utils.enhancedDeepEquals(this.merchantUrl, other.merchantUrl) &&
            Utils.enhancedDeepEquals(this.merchantBannerUrl, other.merchantBannerUrl) &&
            Utils.enhancedDeepEquals(this.merchantColor, other.merchantColor) &&
            Utils.enhancedDeepEquals(this.merchantMessage, other.merchantMessage) &&
            Utils.enhancedDeepEquals(this.merchantTermsAndConditionsUrl, other.merchantTermsAndConditionsUrl) &&
            Utils.enhancedDeepEquals(this.merchantFaviconUrl, other.merchantFaviconUrl) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.intent, other.intent) &&
            Utils.enhancedDeepEquals(this.returnUrl, other.returnUrl) &&
            Utils.enhancedDeepEquals(this.cartItems, other.cartItems) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentSource, other.paymentSource) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.buyer, other.buyer) &&
            Utils.enhancedDeepEquals(this.shippingDetails, other.shippingDetails);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, url,
            expiresAt, externalIdentifier, statementDescriptor,
            locale, merchantName, merchantUrl,
            merchantBannerUrl, merchantColor, merchantMessage,
            merchantTermsAndConditionsUrl, merchantFaviconUrl, amount,
            country, currency, intent,
            returnUrl, cartItems, metadata,
            paymentSource, createdAt, updatedAt,
            status, buyer, shippingDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentLink.class,
                "id", id,
                "type", type,
                "url", url,
                "expiresAt", expiresAt,
                "externalIdentifier", externalIdentifier,
                "statementDescriptor", statementDescriptor,
                "locale", locale,
                "merchantName", merchantName,
                "merchantUrl", merchantUrl,
                "merchantBannerUrl", merchantBannerUrl,
                "merchantColor", merchantColor,
                "merchantMessage", merchantMessage,
                "merchantTermsAndConditionsUrl", merchantTermsAndConditionsUrl,
                "merchantFaviconUrl", merchantFaviconUrl,
                "amount", amount,
                "country", country,
                "currency", currency,
                "intent", intent,
                "returnUrl", returnUrl,
                "cartItems", cartItems,
                "metadata", metadata,
                "paymentSource", paymentSource,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "status", status,
                "buyer", buyer,
                "shippingDetails", shippingDetails);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String url;

        private JsonNullable<OffsetDateTime> expiresAt = JsonNullable.undefined();

        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();

        private JsonNullable<? extends StatementDescriptor> statementDescriptor = JsonNullable.undefined();

        private JsonNullable<String> locale = JsonNullable.undefined();

        private JsonNullable<String> merchantName = JsonNullable.undefined();

        private JsonNullable<String> merchantUrl = JsonNullable.undefined();

        private JsonNullable<String> merchantBannerUrl = JsonNullable.undefined();

        private JsonNullable<String> merchantColor = JsonNullable.undefined();

        private JsonNullable<String> merchantMessage = JsonNullable.undefined();

        private JsonNullable<String> merchantTermsAndConditionsUrl = JsonNullable.undefined();

        private JsonNullable<String> merchantFaviconUrl = JsonNullable.undefined();

        private Long amount;

        private String country;

        private String currency;

        private TransactionIntent intent;

        private JsonNullable<String> returnUrl = JsonNullable.undefined();

        private Optional<? extends List<CartItem>> cartItems = Optional.empty();

        private JsonNullable<? extends Map<String, Object>> metadata = JsonNullable.undefined();

        private PaymentLinkPaymentSource paymentSource;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private PaymentLinkStatus status;

        private JsonNullable<? extends TransactionBuyer> buyer = JsonNullable.undefined();

        private JsonNullable<? extends ShippingDetails> shippingDetails = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier for the payment link.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The URL for the payment link.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The expiration date and time for the payment link.
         */
        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        /**
         * The expiration date and time for the payment link.
         */
        public Builder expiresAt(JsonNullable<OffsetDateTime> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }


        /**
         * The merchant reference for the payment link.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant reference for the payment link.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }


        /**
         * The statement descriptor for the payment link.
         */
        public Builder statementDescriptor(StatementDescriptor statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = JsonNullable.of(statementDescriptor);
            return this;
        }

        /**
         * The statement descriptor for the payment link.
         */
        public Builder statementDescriptor(JsonNullable<? extends StatementDescriptor> statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = statementDescriptor;
            return this;
        }


        /**
         * The locale for the payment link.
         */
        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = JsonNullable.of(locale);
            return this;
        }

        /**
         * The locale for the payment link.
         */
        public Builder locale(JsonNullable<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }


        /**
         * The merchant's display name.
         */
        public Builder merchantName(String merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = JsonNullable.of(merchantName);
            return this;
        }

        /**
         * The merchant's display name.
         */
        public Builder merchantName(JsonNullable<String> merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = merchantName;
            return this;
        }


        /**
         * The merchant's website URL.
         */
        public Builder merchantUrl(String merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = JsonNullable.of(merchantUrl);
            return this;
        }

        /**
         * The merchant's website URL.
         */
        public Builder merchantUrl(JsonNullable<String> merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = merchantUrl;
            return this;
        }


        /**
         * The merchant's banner image URL.
         */
        public Builder merchantBannerUrl(String merchantBannerUrl) {
            Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
            this.merchantBannerUrl = JsonNullable.of(merchantBannerUrl);
            return this;
        }

        /**
         * The merchant's banner image URL.
         */
        public Builder merchantBannerUrl(JsonNullable<String> merchantBannerUrl) {
            Utils.checkNotNull(merchantBannerUrl, "merchantBannerUrl");
            this.merchantBannerUrl = merchantBannerUrl;
            return this;
        }


        /**
         * The merchant's brand color.
         */
        public Builder merchantColor(String merchantColor) {
            Utils.checkNotNull(merchantColor, "merchantColor");
            this.merchantColor = JsonNullable.of(merchantColor);
            return this;
        }

        /**
         * The merchant's brand color.
         */
        public Builder merchantColor(JsonNullable<String> merchantColor) {
            Utils.checkNotNull(merchantColor, "merchantColor");
            this.merchantColor = merchantColor;
            return this;
        }


        /**
         * A message from the merchant.
         */
        public Builder merchantMessage(String merchantMessage) {
            Utils.checkNotNull(merchantMessage, "merchantMessage");
            this.merchantMessage = JsonNullable.of(merchantMessage);
            return this;
        }

        /**
         * A message from the merchant.
         */
        public Builder merchantMessage(JsonNullable<String> merchantMessage) {
            Utils.checkNotNull(merchantMessage, "merchantMessage");
            this.merchantMessage = merchantMessage;
            return this;
        }


        /**
         * URL to the merchant's terms and conditions.
         */
        public Builder merchantTermsAndConditionsUrl(String merchantTermsAndConditionsUrl) {
            Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
            this.merchantTermsAndConditionsUrl = JsonNullable.of(merchantTermsAndConditionsUrl);
            return this;
        }

        /**
         * URL to the merchant's terms and conditions.
         */
        public Builder merchantTermsAndConditionsUrl(JsonNullable<String> merchantTermsAndConditionsUrl) {
            Utils.checkNotNull(merchantTermsAndConditionsUrl, "merchantTermsAndConditionsUrl");
            this.merchantTermsAndConditionsUrl = merchantTermsAndConditionsUrl;
            return this;
        }


        /**
         * URL to the merchant's favicon.
         */
        public Builder merchantFaviconUrl(String merchantFaviconUrl) {
            Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
            this.merchantFaviconUrl = JsonNullable.of(merchantFaviconUrl);
            return this;
        }

        /**
         * URL to the merchant's favicon.
         */
        public Builder merchantFaviconUrl(JsonNullable<String> merchantFaviconUrl) {
            Utils.checkNotNull(merchantFaviconUrl, "merchantFaviconUrl");
            this.merchantFaviconUrl = merchantFaviconUrl;
            return this;
        }


        /**
         * The amount for the payment link.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The country code for the payment link.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * The currency code for the payment link.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder intent(TransactionIntent intent) {
            Utils.checkNotNull(intent, "intent");
            this.intent = intent;
            return this;
        }


        /**
         * The return URL after payment completion.
         */
        public Builder returnUrl(String returnUrl) {
            Utils.checkNotNull(returnUrl, "returnUrl");
            this.returnUrl = JsonNullable.of(returnUrl);
            return this;
        }

        /**
         * The return URL after payment completion.
         */
        public Builder returnUrl(JsonNullable<String> returnUrl) {
            Utils.checkNotNull(returnUrl, "returnUrl");
            this.returnUrl = returnUrl;
            return this;
        }


        /**
         * The cart items for the payment link.
         */
        public Builder cartItems(List<CartItem> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = Optional.ofNullable(cartItems);
            return this;
        }

        /**
         * The cart items for the payment link.
         */
        public Builder cartItems(Optional<? extends List<CartItem>> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = cartItems;
            return this;
        }


        /**
         * Arbitrary metadata for the payment link.
         */
        public Builder metadata(Map<String, Object> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Arbitrary metadata for the payment link.
         */
        public Builder metadata(JsonNullable<? extends Map<String, Object>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The payment source for the payment link.
         */
        public Builder paymentSource(PaymentLinkPaymentSource paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = paymentSource;
            return this;
        }


        /**
         * The date and time the payment link was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time the payment link was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder status(PaymentLinkStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The buyer associated with the payment link.
         */
        public Builder buyer(TransactionBuyer buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * The buyer associated with the payment link.
         */
        public Builder buyer(JsonNullable<? extends TransactionBuyer> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }


        /**
         * The shipping details for the payment link.
         */
        public Builder shippingDetails(ShippingDetails shippingDetails) {
            Utils.checkNotNull(shippingDetails, "shippingDetails");
            this.shippingDetails = JsonNullable.of(shippingDetails);
            return this;
        }

        /**
         * The shipping details for the payment link.
         */
        public Builder shippingDetails(JsonNullable<? extends ShippingDetails> shippingDetails) {
            Utils.checkNotNull(shippingDetails, "shippingDetails");
            this.shippingDetails = shippingDetails;
            return this;
        }

        public PaymentLink build() {

            return new PaymentLink(
                id, url, expiresAt,
                externalIdentifier, statementDescriptor, locale,
                merchantName, merchantUrl, merchantBannerUrl,
                merchantColor, merchantMessage, merchantTermsAndConditionsUrl,
                merchantFaviconUrl, amount, country,
                currency, intent, returnUrl,
                cartItems, metadata, paymentSource,
                createdAt, updatedAt, status,
                buyer, shippingDetails);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-link\"",
                        new TypeReference<Optional<String>>() {});
    }
}
