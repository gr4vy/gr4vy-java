/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class GiftCardService {

    /**
     * Always `gift-card-service`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the gift card service.
     */
    @JsonProperty("id")
    private String id;

    @JsonProperty("gift_card_service_definition_id")
    private GiftCardServiceProvider giftCardServiceDefinitionId;

    /**
     * The display name for the gift card service.
     */
    @JsonProperty("display_name")
    private String displayName;

    @JsonCreator
    public GiftCardService(
            @JsonProperty("id") String id,
            @JsonProperty("gift_card_service_definition_id") GiftCardServiceProvider giftCardServiceDefinitionId,
            @JsonProperty("display_name") String displayName) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(giftCardServiceDefinitionId, "giftCardServiceDefinitionId");
        Utils.checkNotNull(displayName, "displayName");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.giftCardServiceDefinitionId = giftCardServiceDefinitionId;
        this.displayName = displayName;
    }

    /**
     * Always `gift-card-service`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the gift card service.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public GiftCardServiceProvider giftCardServiceDefinitionId() {
        return giftCardServiceDefinitionId;
    }

    /**
     * The display name for the gift card service.
     */
    @JsonIgnore
    public String displayName() {
        return displayName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the gift card service.
     */
    public GiftCardService withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GiftCardService withGiftCardServiceDefinitionId(GiftCardServiceProvider giftCardServiceDefinitionId) {
        Utils.checkNotNull(giftCardServiceDefinitionId, "giftCardServiceDefinitionId");
        this.giftCardServiceDefinitionId = giftCardServiceDefinitionId;
        return this;
    }

    /**
     * The display name for the gift card service.
     */
    public GiftCardService withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GiftCardService other = (GiftCardService) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.giftCardServiceDefinitionId, other.giftCardServiceDefinitionId) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            id,
            giftCardServiceDefinitionId,
            displayName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GiftCardService.class,
                "type", type,
                "id", id,
                "giftCardServiceDefinitionId", giftCardServiceDefinitionId,
                "displayName", displayName);
    }
    
    public final static class Builder {
 
        private String id;
 
        private GiftCardServiceProvider giftCardServiceDefinitionId;
 
        private String displayName;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the gift card service.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder giftCardServiceDefinitionId(GiftCardServiceProvider giftCardServiceDefinitionId) {
            Utils.checkNotNull(giftCardServiceDefinitionId, "giftCardServiceDefinitionId");
            this.giftCardServiceDefinitionId = giftCardServiceDefinitionId;
            return this;
        }

        /**
         * The display name for the gift card service.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }
        
        public GiftCardService build() {
            return new GiftCardService(
                id,
                giftCardServiceDefinitionId,
                displayName);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"gift-card-service\"",
                        new TypeReference<Optional<String>>() {});
    }
}
