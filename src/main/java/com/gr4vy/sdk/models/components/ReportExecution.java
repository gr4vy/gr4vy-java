/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class ReportExecution {
    /**
     * Always `report-execution`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The unique ID for the report execution.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The date this report execution was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date this report execution was last updated.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;


    @JsonProperty("status")
    private ReportExecutionStatus status;


    @JsonProperty("context")
    private ReportExecutionContext context;


    @JsonProperty("report")
    private ReportSummary report;

    @JsonCreator
    public ReportExecution(
            @JsonProperty("id") String id,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("status") ReportExecutionStatus status,
            @JsonProperty("context") ReportExecutionContext context,
            @JsonProperty("report") ReportSummary report) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(context, "context");
        Utils.checkNotNull(report, "report");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.status = status;
        this.context = context;
        this.report = report;
    }

    /**
     * Always `report-execution`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The unique ID for the report execution.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The date this report execution was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date this report execution was last updated.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public ReportExecutionStatus status() {
        return status;
    }

    @JsonIgnore
    public ReportExecutionContext context() {
        return context;
    }

    @JsonIgnore
    public ReportSummary report() {
        return report;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique ID for the report execution.
     */
    public ReportExecution withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The date this report execution was created at.
     */
    public ReportExecution withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date this report execution was last updated.
     */
    public ReportExecution withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public ReportExecution withStatus(ReportExecutionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ReportExecution withContext(ReportExecutionContext context) {
        Utils.checkNotNull(context, "context");
        this.context = context;
        return this;
    }

    public ReportExecution withReport(ReportSummary report) {
        Utils.checkNotNull(report, "report");
        this.report = report;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportExecution other = (ReportExecution) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.context, other.context) &&
            Utils.enhancedDeepEquals(this.report, other.report);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, createdAt,
            updatedAt, status, context,
            report);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportExecution.class,
                "type", type,
                "id", id,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "status", status,
                "context", context,
                "report", report);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private ReportExecutionStatus status;

        private ReportExecutionContext context;

        private ReportSummary report;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique ID for the report execution.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The date this report execution was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date this report execution was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder status(ReportExecutionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder context(ReportExecutionContext context) {
            Utils.checkNotNull(context, "context");
            this.context = context;
            return this;
        }


        public Builder report(ReportSummary report) {
            Utils.checkNotNull(report, "report");
            this.report = report;
            return this;
        }

        public ReportExecution build() {

            return new ReportExecution(
                id, createdAt, updatedAt,
                status, context, report);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"report-execution\"",
                        new TypeReference<Optional<String>>() {});
    }
}
