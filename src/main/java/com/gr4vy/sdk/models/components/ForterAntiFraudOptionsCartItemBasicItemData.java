/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class ForterAntiFraudOptionsCartItemBasicItemData {
    /**
     * Indicates whether the item is a physical good or a service/digital item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends Type> type;

    @JsonCreator
    public ForterAntiFraudOptionsCartItemBasicItemData(
            @JsonProperty("type") JsonNullable<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
    }
    
    public ForterAntiFraudOptionsCartItemBasicItemData() {
        this(JsonNullable.undefined());
    }

    /**
     * Indicates whether the item is a physical good or a service/digital item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Type> type() {
        return (JsonNullable<Type>) type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates whether the item is a physical good or a service/digital item.
     */
    public ForterAntiFraudOptionsCartItemBasicItemData withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Indicates whether the item is a physical good or a service/digital item.
     */
    public ForterAntiFraudOptionsCartItemBasicItemData withType(JsonNullable<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ForterAntiFraudOptionsCartItemBasicItemData other = (ForterAntiFraudOptionsCartItemBasicItemData) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ForterAntiFraudOptionsCartItemBasicItemData.class,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Type> type = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates whether the item is a physical good or a service/digital item.
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Indicates whether the item is a physical good or a service/digital item.
         */
        public Builder type(JsonNullable<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public ForterAntiFraudOptionsCartItemBasicItemData build() {

            return new ForterAntiFraudOptionsCartItemBasicItemData(
                type);
        }

    }
}
