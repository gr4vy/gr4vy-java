/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GiftCard {
    /**
     * Always `gift-card`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the gift card.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;


    @JsonProperty("gift_card_service")
    private GiftCardService giftCardService;

    /**
     * The first 6 digits of the full gift card number.
     */
    @JsonProperty("bin")
    private String bin;

    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    @JsonProperty("sub_bin")
    private String subBin;

    /**
     * The last 4 digits for the gift card.
     */
    @JsonProperty("last4")
    private String last4;

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate
     * than the actual expiry date received by the gift card service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration_date")
    private JsonNullable<OffsetDateTime> expirationDate;

    /**
     * The buyer for which this gift card is stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends Buyer> buyer;

    /**
     * The date this gift card record was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date this gift card record was last updated at.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public GiftCard(
            @JsonProperty("id") String id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("gift_card_service") GiftCardService giftCardService,
            @JsonProperty("bin") String bin,
            @JsonProperty("sub_bin") String subBin,
            @JsonProperty("last4") String last4,
            @JsonProperty("expiration_date") JsonNullable<OffsetDateTime> expirationDate,
            @JsonProperty("buyer") JsonNullable<? extends Buyer> buyer,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(giftCardService, "giftCardService");
        Utils.checkNotNull(bin, "bin");
        Utils.checkNotNull(subBin, "subBin");
        Utils.checkNotNull(last4, "last4");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.giftCardService = giftCardService;
        this.bin = bin;
        this.subBin = subBin;
        this.last4 = last4;
        this.expirationDate = expirationDate;
        this.buyer = buyer;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public GiftCard(
            String id,
            String merchantAccountId,
            GiftCardService giftCardService,
            String bin,
            String subBin,
            String last4,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(id, merchantAccountId, giftCardService,
            bin, subBin, last4,
            JsonNullable.undefined(), JsonNullable.undefined(), createdAt,
            updatedAt);
    }

    /**
     * Always `gift-card`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the gift card.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public GiftCardService giftCardService() {
        return giftCardService;
    }

    /**
     * The first 6 digits of the full gift card number.
     */
    @JsonIgnore
    public String bin() {
        return bin;
    }

    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    @JsonIgnore
    public String subBin() {
        return subBin;
    }

    /**
     * The last 4 digits for the gift card.
     */
    @JsonIgnore
    public String last4() {
        return last4;
    }

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate
     * than the actual expiry date received by the gift card service.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> expirationDate() {
        return expirationDate;
    }

    /**
     * The buyer for which this gift card is stored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Buyer> buyer() {
        return (JsonNullable<Buyer>) buyer;
    }

    /**
     * The date this gift card record was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date this gift card record was last updated at.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID for the gift card.
     */
    public GiftCard withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    public GiftCard withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public GiftCard withGiftCardService(GiftCardService giftCardService) {
        Utils.checkNotNull(giftCardService, "giftCardService");
        this.giftCardService = giftCardService;
        return this;
    }

    /**
     * The first 6 digits of the full gift card number.
     */
    public GiftCard withBin(String bin) {
        Utils.checkNotNull(bin, "bin");
        this.bin = bin;
        return this;
    }

    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    public GiftCard withSubBin(String subBin) {
        Utils.checkNotNull(subBin, "subBin");
        this.subBin = subBin;
        return this;
    }

    /**
     * The last 4 digits for the gift card.
     */
    public GiftCard withLast4(String last4) {
        Utils.checkNotNull(last4, "last4");
        this.last4 = last4;
        return this;
    }

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate
     * than the actual expiry date received by the gift card service.
     */
    public GiftCard withExpirationDate(OffsetDateTime expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = JsonNullable.of(expirationDate);
        return this;
    }

    /**
     * The date and time when this gift card expires. This is a full date/time and may be more accurate
     * than the actual expiry date received by the gift card service.
     */
    public GiftCard withExpirationDate(JsonNullable<OffsetDateTime> expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The buyer for which this gift card is stored.
     */
    public GiftCard withBuyer(Buyer buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * The buyer for which this gift card is stored.
     */
    public GiftCard withBuyer(JsonNullable<? extends Buyer> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * The date this gift card record was created at.
     */
    public GiftCard withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date this gift card record was last updated at.
     */
    public GiftCard withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GiftCard other = (GiftCard) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Utils.enhancedDeepEquals(this.giftCardService, other.giftCardService) &&
            Utils.enhancedDeepEquals(this.bin, other.bin) &&
            Utils.enhancedDeepEquals(this.subBin, other.subBin) &&
            Utils.enhancedDeepEquals(this.last4, other.last4) &&
            Utils.enhancedDeepEquals(this.expirationDate, other.expirationDate) &&
            Utils.enhancedDeepEquals(this.buyer, other.buyer) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, merchantAccountId,
            giftCardService, bin, subBin,
            last4, expirationDate, buyer,
            createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GiftCard.class,
                "type", type,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "giftCardService", giftCardService,
                "bin", bin,
                "subBin", subBin,
                "last4", last4,
                "expirationDate", expirationDate,
                "buyer", buyer,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String merchantAccountId;

        private GiftCardService giftCardService;

        private String bin;

        private String subBin;

        private String last4;

        private JsonNullable<OffsetDateTime> expirationDate = JsonNullable.undefined();

        private JsonNullable<? extends Buyer> buyer = JsonNullable.undefined();

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID for the gift card.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The ID of the merchant account this buyer belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }


        public Builder giftCardService(GiftCardService giftCardService) {
            Utils.checkNotNull(giftCardService, "giftCardService");
            this.giftCardService = giftCardService;
            return this;
        }


        /**
         * The first 6 digits of the full gift card number.
         */
        public Builder bin(String bin) {
            Utils.checkNotNull(bin, "bin");
            this.bin = bin;
            return this;
        }


        /**
         * The 3 digits after the `bin` of the full gift card number.
         */
        public Builder subBin(String subBin) {
            Utils.checkNotNull(subBin, "subBin");
            this.subBin = subBin;
            return this;
        }


        /**
         * The last 4 digits for the gift card.
         */
        public Builder last4(String last4) {
            Utils.checkNotNull(last4, "last4");
            this.last4 = last4;
            return this;
        }


        /**
         * The date and time when this gift card expires. This is a full date/time and may be more accurate
         * than the actual expiry date received by the gift card service.
         */
        public Builder expirationDate(OffsetDateTime expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = JsonNullable.of(expirationDate);
            return this;
        }

        /**
         * The date and time when this gift card expires. This is a full date/time and may be more accurate
         * than the actual expiry date received by the gift card service.
         */
        public Builder expirationDate(JsonNullable<OffsetDateTime> expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }


        /**
         * The buyer for which this gift card is stored.
         */
        public Builder buyer(Buyer buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * The buyer for which this gift card is stored.
         */
        public Builder buyer(JsonNullable<? extends Buyer> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }


        /**
         * The date this gift card record was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date this gift card record was last updated at.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public GiftCard build() {

            return new GiftCard(
                id, merchantAccountId, giftCardService,
                bin, subBin, last4,
                expirationDate, buyer, createdAt,
                updatedAt);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"gift-card\"",
                        new TypeReference<Optional<String>>() {});
    }
}
