/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentServiceDefinitions {
    /**
     * A list of items returned for this request.
     */
    @JsonProperty("items")
    private List<PaymentServiceDefinition> items;

    /**
     * The number of items for this page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Optional<Long> limit;

    /**
     * The cursor pointing at the next page of items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_cursor")
    private JsonNullable<String> nextCursor;

    /**
     * The cursor pointing at the previous page of items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous_cursor")
    private JsonNullable<String> previousCursor;

    @JsonCreator
    public PaymentServiceDefinitions(
            @JsonProperty("items") List<PaymentServiceDefinition> items,
            @JsonProperty("limit") Optional<Long> limit,
            @JsonProperty("next_cursor") JsonNullable<String> nextCursor,
            @JsonProperty("previous_cursor") JsonNullable<String> previousCursor) {
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(nextCursor, "nextCursor");
        Utils.checkNotNull(previousCursor, "previousCursor");
        this.items = items;
        this.limit = limit;
        this.nextCursor = nextCursor;
        this.previousCursor = previousCursor;
    }
    
    public PaymentServiceDefinitions(
            List<PaymentServiceDefinition> items) {
        this(items, Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * A list of items returned for this request.
     */
    @JsonIgnore
    public List<PaymentServiceDefinition> items() {
        return items;
    }

    /**
     * The number of items for this page.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * The cursor pointing at the next page of items.
     */
    @JsonIgnore
    public JsonNullable<String> nextCursor() {
        return nextCursor;
    }

    /**
     * The cursor pointing at the previous page of items.
     */
    @JsonIgnore
    public JsonNullable<String> previousCursor() {
        return previousCursor;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A list of items returned for this request.
     */
    public PaymentServiceDefinitions withItems(List<PaymentServiceDefinition> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    /**
     * The number of items for this page.
     */
    public PaymentServiceDefinitions withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    /**
     * The number of items for this page.
     */
    public PaymentServiceDefinitions withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * The cursor pointing at the next page of items.
     */
    public PaymentServiceDefinitions withNextCursor(String nextCursor) {
        Utils.checkNotNull(nextCursor, "nextCursor");
        this.nextCursor = JsonNullable.of(nextCursor);
        return this;
    }

    /**
     * The cursor pointing at the next page of items.
     */
    public PaymentServiceDefinitions withNextCursor(JsonNullable<String> nextCursor) {
        Utils.checkNotNull(nextCursor, "nextCursor");
        this.nextCursor = nextCursor;
        return this;
    }

    /**
     * The cursor pointing at the previous page of items.
     */
    public PaymentServiceDefinitions withPreviousCursor(String previousCursor) {
        Utils.checkNotNull(previousCursor, "previousCursor");
        this.previousCursor = JsonNullable.of(previousCursor);
        return this;
    }

    /**
     * The cursor pointing at the previous page of items.
     */
    public PaymentServiceDefinitions withPreviousCursor(JsonNullable<String> previousCursor) {
        Utils.checkNotNull(previousCursor, "previousCursor");
        this.previousCursor = previousCursor;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentServiceDefinitions other = (PaymentServiceDefinitions) o;
        return 
            Utils.enhancedDeepEquals(this.items, other.items) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.nextCursor, other.nextCursor) &&
            Utils.enhancedDeepEquals(this.previousCursor, other.previousCursor);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            items, limit, nextCursor,
            previousCursor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentServiceDefinitions.class,
                "items", items,
                "limit", limit,
                "nextCursor", nextCursor,
                "previousCursor", previousCursor);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<PaymentServiceDefinition> items;

        private Optional<Long> limit;

        private JsonNullable<String> nextCursor = JsonNullable.undefined();

        private JsonNullable<String> previousCursor = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A list of items returned for this request.
         */
        public Builder items(List<PaymentServiceDefinition> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }


        /**
         * The number of items for this page.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * The number of items for this page.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        /**
         * The cursor pointing at the next page of items.
         */
        public Builder nextCursor(String nextCursor) {
            Utils.checkNotNull(nextCursor, "nextCursor");
            this.nextCursor = JsonNullable.of(nextCursor);
            return this;
        }

        /**
         * The cursor pointing at the next page of items.
         */
        public Builder nextCursor(JsonNullable<String> nextCursor) {
            Utils.checkNotNull(nextCursor, "nextCursor");
            this.nextCursor = nextCursor;
            return this;
        }


        /**
         * The cursor pointing at the previous page of items.
         */
        public Builder previousCursor(String previousCursor) {
            Utils.checkNotNull(previousCursor, "previousCursor");
            this.previousCursor = JsonNullable.of(previousCursor);
            return this;
        }

        /**
         * The cursor pointing at the previous page of items.
         */
        public Builder previousCursor(JsonNullable<String> previousCursor) {
            Utils.checkNotNull(previousCursor, "previousCursor");
            this.previousCursor = previousCursor;
            return this;
        }

        public PaymentServiceDefinitions build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }

            return new PaymentServiceDefinitions(
                items, limit, nextCursor,
                previousCursor);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Long>>() {});
    }
}
