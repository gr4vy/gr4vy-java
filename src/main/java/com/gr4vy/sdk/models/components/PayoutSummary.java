/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PayoutSummary
 * 
 * <p>PayoutSummary
 * 
 * <p>Represents a summary of a payout.
 */
public class PayoutSummary {

    /**
     * Always `payout`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The buyer used for this payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends TransactionBuyer> buyer;

    /**
     * The type of payout to process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private JsonNullable<? extends PayoutCategory> category;

    /**
     * The date this payout was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * A supported ISO-4217 currency code.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The merchant identifier for this payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The merchant details associated to this payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant")
    private JsonNullable<? extends PayoutMerchantSummary> merchant;

    /**
     * The ID of the merchant account this payout was created for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_account_id")
    private JsonNullable<String> merchantAccountId;

    @JsonProperty("payment_method")
    private TransactionPaymentMethod paymentMethod;

    @JsonProperty("payment_service")
    private PayoutPaymentService paymentService;

    /**
     * The ID of the payout in the underlying payment service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service_payout_id")
    private JsonNullable<String> paymentServicePayoutId;

    @JsonProperty("status")
    private PayoutStatus status;

    /**
     * The date this payout was last updated at.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public PayoutSummary(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("amount") long amount,
            @JsonProperty("buyer") JsonNullable<? extends TransactionBuyer> buyer,
            @JsonProperty("category") JsonNullable<? extends PayoutCategory> category,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("currency") String currency,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("merchant") JsonNullable<? extends PayoutMerchantSummary> merchant,
            @JsonProperty("merchant_account_id") JsonNullable<String> merchantAccountId,
            @JsonProperty("payment_method") TransactionPaymentMethod paymentMethod,
            @JsonProperty("payment_service") PayoutPaymentService paymentService,
            @JsonProperty("payment_service_payout_id") JsonNullable<String> paymentServicePayoutId,
            @JsonProperty("status") PayoutStatus status,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(merchant, "merchant");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(paymentService, "paymentService");
        Utils.checkNotNull(paymentServicePayoutId, "paymentServicePayoutId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.amount = amount;
        this.buyer = buyer;
        this.category = category;
        this.createdAt = createdAt;
        this.currency = currency;
        this.externalIdentifier = externalIdentifier;
        this.merchant = merchant;
        this.merchantAccountId = merchantAccountId;
        this.paymentMethod = paymentMethod;
        this.paymentService = paymentService;
        this.paymentServicePayoutId = paymentServicePayoutId;
        this.status = status;
        this.updatedAt = updatedAt;
    }
    
    public PayoutSummary(
            long amount,
            OffsetDateTime createdAt,
            String currency,
            TransactionPaymentMethod paymentMethod,
            PayoutPaymentService paymentService,
            PayoutStatus status,
            OffsetDateTime updatedAt) {
        this(JsonNullable.undefined(), amount, JsonNullable.undefined(), JsonNullable.undefined(), createdAt, currency, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), paymentMethod, paymentService, JsonNullable.undefined(), status, updatedAt);
    }

    /**
     * Always `payout`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the payout.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The buyer used for this payout.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionBuyer> buyer() {
        return (JsonNullable<TransactionBuyer>) buyer;
    }

    /**
     * The type of payout to process.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayoutCategory> category() {
        return (JsonNullable<PayoutCategory>) category;
    }

    /**
     * The date this payout was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * A supported ISO-4217 currency code.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The merchant identifier for this payout.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The merchant details associated to this payout.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayoutMerchantSummary> merchant() {
        return (JsonNullable<PayoutMerchantSummary>) merchant;
    }

    /**
     * The ID of the merchant account this payout was created for.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public TransactionPaymentMethod paymentMethod() {
        return paymentMethod;
    }

    @JsonIgnore
    public PayoutPaymentService paymentService() {
        return paymentService;
    }

    /**
     * The ID of the payout in the underlying payment service.
     */
    @JsonIgnore
    public JsonNullable<String> paymentServicePayoutId() {
        return paymentServicePayoutId;
    }

    @JsonIgnore
    public PayoutStatus status() {
        return status;
    }

    /**
     * The date this payout was last updated at.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the payout.
     */
    public PayoutSummary withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The ID for the payout.
     */
    public PayoutSummary withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
     */
    public PayoutSummary withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The buyer used for this payout.
     */
    public PayoutSummary withBuyer(TransactionBuyer buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * The buyer used for this payout.
     */
    public PayoutSummary withBuyer(JsonNullable<? extends TransactionBuyer> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * The type of payout to process.
     */
    public PayoutSummary withCategory(PayoutCategory category) {
        Utils.checkNotNull(category, "category");
        this.category = JsonNullable.of(category);
        return this;
    }

    /**
     * The type of payout to process.
     */
    public PayoutSummary withCategory(JsonNullable<? extends PayoutCategory> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * The date this payout was created at.
     */
    public PayoutSummary withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * A supported ISO-4217 currency code.
     */
    public PayoutSummary withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The merchant identifier for this payout.
     */
    public PayoutSummary withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant identifier for this payout.
     */
    public PayoutSummary withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The merchant details associated to this payout.
     */
    public PayoutSummary withMerchant(PayoutMerchantSummary merchant) {
        Utils.checkNotNull(merchant, "merchant");
        this.merchant = JsonNullable.of(merchant);
        return this;
    }

    /**
     * The merchant details associated to this payout.
     */
    public PayoutSummary withMerchant(JsonNullable<? extends PayoutMerchantSummary> merchant) {
        Utils.checkNotNull(merchant, "merchant");
        this.merchant = merchant;
        return this;
    }

    /**
     * The ID of the merchant account this payout was created for.
     */
    public PayoutSummary withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account this payout was created for.
     */
    public PayoutSummary withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public PayoutSummary withPaymentMethod(TransactionPaymentMethod paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    public PayoutSummary withPaymentService(PayoutPaymentService paymentService) {
        Utils.checkNotNull(paymentService, "paymentService");
        this.paymentService = paymentService;
        return this;
    }

    /**
     * The ID of the payout in the underlying payment service.
     */
    public PayoutSummary withPaymentServicePayoutId(String paymentServicePayoutId) {
        Utils.checkNotNull(paymentServicePayoutId, "paymentServicePayoutId");
        this.paymentServicePayoutId = JsonNullable.of(paymentServicePayoutId);
        return this;
    }

    /**
     * The ID of the payout in the underlying payment service.
     */
    public PayoutSummary withPaymentServicePayoutId(JsonNullable<String> paymentServicePayoutId) {
        Utils.checkNotNull(paymentServicePayoutId, "paymentServicePayoutId");
        this.paymentServicePayoutId = paymentServicePayoutId;
        return this;
    }

    public PayoutSummary withStatus(PayoutStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The date this payout was last updated at.
     */
    public PayoutSummary withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayoutSummary other = (PayoutSummary) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.buyer, other.buyer) &&
            Utils.enhancedDeepEquals(this.category, other.category) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.merchant, other.merchant) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.paymentService, other.paymentService) &&
            Utils.enhancedDeepEquals(this.paymentServicePayoutId, other.paymentServicePayoutId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            id,
            amount,
            buyer,
            category,
            createdAt,
            currency,
            externalIdentifier,
            merchant,
            merchantAccountId,
            paymentMethod,
            paymentService,
            paymentServicePayoutId,
            status,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayoutSummary.class,
                "type", type,
                "id", id,
                "amount", amount,
                "buyer", buyer,
                "category", category,
                "createdAt", createdAt,
                "currency", currency,
                "externalIdentifier", externalIdentifier,
                "merchant", merchant,
                "merchantAccountId", merchantAccountId,
                "paymentMethod", paymentMethod,
                "paymentService", paymentService,
                "paymentServicePayoutId", paymentServicePayoutId,
                "status", status,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private Long amount;
 
        private JsonNullable<? extends TransactionBuyer> buyer = JsonNullable.undefined();
 
        private JsonNullable<? extends PayoutCategory> category = JsonNullable.undefined();
 
        private OffsetDateTime createdAt;
 
        private String currency;
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<? extends PayoutMerchantSummary> merchant = JsonNullable.undefined();
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
 
        private TransactionPaymentMethod paymentMethod;
 
        private PayoutPaymentService paymentService;
 
        private JsonNullable<String> paymentServicePayoutId = JsonNullable.undefined();
 
        private PayoutStatus status;
 
        private OffsetDateTime updatedAt;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the payout.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID for the payout.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The buyer used for this payout.
         */
        public Builder buyer(TransactionBuyer buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * The buyer used for this payout.
         */
        public Builder buyer(JsonNullable<? extends TransactionBuyer> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }

        /**
         * The type of payout to process.
         */
        public Builder category(PayoutCategory category) {
            Utils.checkNotNull(category, "category");
            this.category = JsonNullable.of(category);
            return this;
        }

        /**
         * The type of payout to process.
         */
        public Builder category(JsonNullable<? extends PayoutCategory> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }

        /**
         * The date this payout was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * A supported ISO-4217 currency code.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The merchant identifier for this payout.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant identifier for this payout.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * The merchant details associated to this payout.
         */
        public Builder merchant(PayoutMerchantSummary merchant) {
            Utils.checkNotNull(merchant, "merchant");
            this.merchant = JsonNullable.of(merchant);
            return this;
        }

        /**
         * The merchant details associated to this payout.
         */
        public Builder merchant(JsonNullable<? extends PayoutMerchantSummary> merchant) {
            Utils.checkNotNull(merchant, "merchant");
            this.merchant = merchant;
            return this;
        }

        /**
         * The ID of the merchant account this payout was created for.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account this payout was created for.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public Builder paymentMethod(TransactionPaymentMethod paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentService(PayoutPaymentService paymentService) {
            Utils.checkNotNull(paymentService, "paymentService");
            this.paymentService = paymentService;
            return this;
        }

        /**
         * The ID of the payout in the underlying payment service.
         */
        public Builder paymentServicePayoutId(String paymentServicePayoutId) {
            Utils.checkNotNull(paymentServicePayoutId, "paymentServicePayoutId");
            this.paymentServicePayoutId = JsonNullable.of(paymentServicePayoutId);
            return this;
        }

        /**
         * The ID of the payout in the underlying payment service.
         */
        public Builder paymentServicePayoutId(JsonNullable<String> paymentServicePayoutId) {
            Utils.checkNotNull(paymentServicePayoutId, "paymentServicePayoutId");
            this.paymentServicePayoutId = paymentServicePayoutId;
            return this;
        }

        public Builder status(PayoutStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The date this payout was last updated at.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public PayoutSummary build() {
            return new PayoutSummary(
                id,
                amount,
                buyer,
                category,
                createdAt,
                currency,
                externalIdentifier,
                merchant,
                merchantAccountId,
                paymentMethod,
                paymentService,
                paymentServicePayoutId,
                status,
                updatedAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payout\"",
                        new TypeReference<Optional<String>>() {});
    }
}
