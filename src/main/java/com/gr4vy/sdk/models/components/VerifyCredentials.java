/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class VerifyCredentials {

    /**
     * The ID of the payment service definition to verify the fields against
     */
    @JsonProperty("payment_service_definition_id")
    private String paymentServiceDefinitionId;

    /**
     * The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service_id")
    private JsonNullable<String> paymentServiceId;

    /**
     * The fields and their values, or a set of updated fields to merge with existing values.
     */
    @JsonProperty("fields")
    private List<Field> fields;

    @JsonCreator
    public VerifyCredentials(
            @JsonProperty("payment_service_definition_id") String paymentServiceDefinitionId,
            @JsonProperty("payment_service_id") JsonNullable<String> paymentServiceId,
            @JsonProperty("fields") List<Field> fields) {
        Utils.checkNotNull(paymentServiceDefinitionId, "paymentServiceDefinitionId");
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        Utils.checkNotNull(fields, "fields");
        this.paymentServiceDefinitionId = paymentServiceDefinitionId;
        this.paymentServiceId = paymentServiceId;
        this.fields = fields;
    }
    
    public VerifyCredentials(
            String paymentServiceDefinitionId,
            List<Field> fields) {
        this(paymentServiceDefinitionId, JsonNullable.undefined(), fields);
    }

    /**
     * The ID of the payment service definition to verify the fields against
     */
    @JsonIgnore
    public String paymentServiceDefinitionId() {
        return paymentServiceDefinitionId;
    }

    /**
     * The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.
     */
    @JsonIgnore
    public JsonNullable<String> paymentServiceId() {
        return paymentServiceId;
    }

    /**
     * The fields and their values, or a set of updated fields to merge with existing values.
     */
    @JsonIgnore
    public List<Field> fields() {
        return fields;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the payment service definition to verify the fields against
     */
    public VerifyCredentials withPaymentServiceDefinitionId(String paymentServiceDefinitionId) {
        Utils.checkNotNull(paymentServiceDefinitionId, "paymentServiceDefinitionId");
        this.paymentServiceDefinitionId = paymentServiceDefinitionId;
        return this;
    }

    /**
     * The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.
     */
    public VerifyCredentials withPaymentServiceId(String paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = JsonNullable.of(paymentServiceId);
        return this;
    }

    /**
     * The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.
     */
    public VerifyCredentials withPaymentServiceId(JsonNullable<String> paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = paymentServiceId;
        return this;
    }

    /**
     * The fields and their values, or a set of updated fields to merge with existing values.
     */
    public VerifyCredentials withFields(List<Field> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifyCredentials other = (VerifyCredentials) o;
        return 
            Objects.deepEquals(this.paymentServiceDefinitionId, other.paymentServiceDefinitionId) &&
            Objects.deepEquals(this.paymentServiceId, other.paymentServiceId) &&
            Objects.deepEquals(this.fields, other.fields);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentServiceDefinitionId,
            paymentServiceId,
            fields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifyCredentials.class,
                "paymentServiceDefinitionId", paymentServiceDefinitionId,
                "paymentServiceId", paymentServiceId,
                "fields", fields);
    }
    
    public final static class Builder {
 
        private String paymentServiceDefinitionId;
 
        private JsonNullable<String> paymentServiceId = JsonNullable.undefined();
 
        private List<Field> fields;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the payment service definition to verify the fields against
         */
        public Builder paymentServiceDefinitionId(String paymentServiceDefinitionId) {
            Utils.checkNotNull(paymentServiceDefinitionId, "paymentServiceDefinitionId");
            this.paymentServiceDefinitionId = paymentServiceDefinitionId;
            return this;
        }

        /**
         * The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.
         */
        public Builder paymentServiceId(String paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = JsonNullable.of(paymentServiceId);
            return this;
        }

        /**
         * The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.
         */
        public Builder paymentServiceId(JsonNullable<String> paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = paymentServiceId;
            return this;
        }

        /**
         * The fields and their values, or a set of updated fields to merge with existing values.
         */
        public Builder fields(List<Field> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }
        
        public VerifyCredentials build() {
            return new VerifyCredentials(
                paymentServiceDefinitionId,
                paymentServiceId,
                fields);
        }
    }
}
