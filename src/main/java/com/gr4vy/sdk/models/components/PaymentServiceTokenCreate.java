/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class PaymentServiceTokenCreate {

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security_code")
    private JsonNullable<String> securityCode;

    /**
     * The ID of the payment method to use.
     */
    @JsonProperty("payment_service_id")
    private String paymentServiceId;

    /**
     * The redirect URL to redirect a buyer to after they have authorized the payment method.
     */
    @JsonProperty("redirect_url")
    private String redirectUrl;

    @JsonCreator
    public PaymentServiceTokenCreate(
            @JsonProperty("security_code") JsonNullable<String> securityCode,
            @JsonProperty("payment_service_id") String paymentServiceId,
            @JsonProperty("redirect_url") String redirectUrl) {
        Utils.checkNotNull(securityCode, "securityCode");
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.securityCode = securityCode;
        this.paymentServiceId = paymentServiceId;
        this.redirectUrl = redirectUrl;
    }
    
    public PaymentServiceTokenCreate(
            String paymentServiceId,
            String redirectUrl) {
        this(JsonNullable.undefined(), paymentServiceId, redirectUrl);
    }

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    @JsonIgnore
    public JsonNullable<String> securityCode() {
        return securityCode;
    }

    /**
     * The ID of the payment method to use.
     */
    @JsonIgnore
    public String paymentServiceId() {
        return paymentServiceId;
    }

    /**
     * The redirect URL to redirect a buyer to after they have authorized the payment method.
     */
    @JsonIgnore
    public String redirectUrl() {
        return redirectUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    public PaymentServiceTokenCreate withSecurityCode(String securityCode) {
        Utils.checkNotNull(securityCode, "securityCode");
        this.securityCode = JsonNullable.of(securityCode);
        return this;
    }

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    public PaymentServiceTokenCreate withSecurityCode(JsonNullable<String> securityCode) {
        Utils.checkNotNull(securityCode, "securityCode");
        this.securityCode = securityCode;
        return this;
    }

    /**
     * The ID of the payment method to use.
     */
    public PaymentServiceTokenCreate withPaymentServiceId(String paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = paymentServiceId;
        return this;
    }

    /**
     * The redirect URL to redirect a buyer to after they have authorized the payment method.
     */
    public PaymentServiceTokenCreate withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentServiceTokenCreate other = (PaymentServiceTokenCreate) o;
        return 
            Objects.deepEquals(this.securityCode, other.securityCode) &&
            Objects.deepEquals(this.paymentServiceId, other.paymentServiceId) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            securityCode,
            paymentServiceId,
            redirectUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentServiceTokenCreate.class,
                "securityCode", securityCode,
                "paymentServiceId", paymentServiceId,
                "redirectUrl", redirectUrl);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> securityCode = JsonNullable.undefined();
 
        private String paymentServiceId;
 
        private String redirectUrl;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
         */
        public Builder securityCode(String securityCode) {
            Utils.checkNotNull(securityCode, "securityCode");
            this.securityCode = JsonNullable.of(securityCode);
            return this;
        }

        /**
         * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
         */
        public Builder securityCode(JsonNullable<String> securityCode) {
            Utils.checkNotNull(securityCode, "securityCode");
            this.securityCode = securityCode;
            return this;
        }

        /**
         * The ID of the payment method to use.
         */
        public Builder paymentServiceId(String paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = paymentServiceId;
            return this;
        }

        /**
         * The redirect URL to redirect a buyer to after they have authorized the payment method.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        public PaymentServiceTokenCreate build() {
            return new PaymentServiceTokenCreate(
                securityCode,
                paymentServiceId,
                redirectUrl);
        }
    }
}
