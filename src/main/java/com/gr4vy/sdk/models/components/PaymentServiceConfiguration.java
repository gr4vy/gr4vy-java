/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;

public class PaymentServiceConfiguration {

    @JsonProperty("approval_ui_target")
    private ApprovalTarget approvalUiTarget;

    /**
     * Height of the approval interface in either pixels or view height (vh).
     */
    @JsonProperty("approval_ui_height")
    private String approvalUiHeight;

    /**
     * Width of the approval interface in either pixels or view width (vw).
     */
    @JsonProperty("approval_ui_width")
    private String approvalUiWidth;

    /**
     * The maximum number of cart items supported by this connector before we will truncate the list.
     */
    @JsonProperty("cart_items_limit")
    private long cartItemsLimit;

    /**
     * Defines if cart items are required by this connector.
     */
    @JsonProperty("cart_items_required")
    private boolean cartItemsRequired;

    /**
     * Defines if the cart items sum value should match the transaction amount.
     */
    @JsonProperty("cart_items_should_match_amount")
    private boolean cartItemsShouldMatchAmount;

    @JsonCreator
    public PaymentServiceConfiguration(
            @JsonProperty("approval_ui_target") ApprovalTarget approvalUiTarget,
            @JsonProperty("approval_ui_height") String approvalUiHeight,
            @JsonProperty("approval_ui_width") String approvalUiWidth,
            @JsonProperty("cart_items_limit") long cartItemsLimit,
            @JsonProperty("cart_items_required") boolean cartItemsRequired,
            @JsonProperty("cart_items_should_match_amount") boolean cartItemsShouldMatchAmount) {
        Utils.checkNotNull(approvalUiTarget, "approvalUiTarget");
        Utils.checkNotNull(approvalUiHeight, "approvalUiHeight");
        Utils.checkNotNull(approvalUiWidth, "approvalUiWidth");
        Utils.checkNotNull(cartItemsLimit, "cartItemsLimit");
        Utils.checkNotNull(cartItemsRequired, "cartItemsRequired");
        Utils.checkNotNull(cartItemsShouldMatchAmount, "cartItemsShouldMatchAmount");
        this.approvalUiTarget = approvalUiTarget;
        this.approvalUiHeight = approvalUiHeight;
        this.approvalUiWidth = approvalUiWidth;
        this.cartItemsLimit = cartItemsLimit;
        this.cartItemsRequired = cartItemsRequired;
        this.cartItemsShouldMatchAmount = cartItemsShouldMatchAmount;
    }

    @JsonIgnore
    public ApprovalTarget approvalUiTarget() {
        return approvalUiTarget;
    }

    /**
     * Height of the approval interface in either pixels or view height (vh).
     */
    @JsonIgnore
    public String approvalUiHeight() {
        return approvalUiHeight;
    }

    /**
     * Width of the approval interface in either pixels or view width (vw).
     */
    @JsonIgnore
    public String approvalUiWidth() {
        return approvalUiWidth;
    }

    /**
     * The maximum number of cart items supported by this connector before we will truncate the list.
     */
    @JsonIgnore
    public long cartItemsLimit() {
        return cartItemsLimit;
    }

    /**
     * Defines if cart items are required by this connector.
     */
    @JsonIgnore
    public boolean cartItemsRequired() {
        return cartItemsRequired;
    }

    /**
     * Defines if the cart items sum value should match the transaction amount.
     */
    @JsonIgnore
    public boolean cartItemsShouldMatchAmount() {
        return cartItemsShouldMatchAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PaymentServiceConfiguration withApprovalUiTarget(ApprovalTarget approvalUiTarget) {
        Utils.checkNotNull(approvalUiTarget, "approvalUiTarget");
        this.approvalUiTarget = approvalUiTarget;
        return this;
    }

    /**
     * Height of the approval interface in either pixels or view height (vh).
     */
    public PaymentServiceConfiguration withApprovalUiHeight(String approvalUiHeight) {
        Utils.checkNotNull(approvalUiHeight, "approvalUiHeight");
        this.approvalUiHeight = approvalUiHeight;
        return this;
    }

    /**
     * Width of the approval interface in either pixels or view width (vw).
     */
    public PaymentServiceConfiguration withApprovalUiWidth(String approvalUiWidth) {
        Utils.checkNotNull(approvalUiWidth, "approvalUiWidth");
        this.approvalUiWidth = approvalUiWidth;
        return this;
    }

    /**
     * The maximum number of cart items supported by this connector before we will truncate the list.
     */
    public PaymentServiceConfiguration withCartItemsLimit(long cartItemsLimit) {
        Utils.checkNotNull(cartItemsLimit, "cartItemsLimit");
        this.cartItemsLimit = cartItemsLimit;
        return this;
    }

    /**
     * Defines if cart items are required by this connector.
     */
    public PaymentServiceConfiguration withCartItemsRequired(boolean cartItemsRequired) {
        Utils.checkNotNull(cartItemsRequired, "cartItemsRequired");
        this.cartItemsRequired = cartItemsRequired;
        return this;
    }

    /**
     * Defines if the cart items sum value should match the transaction amount.
     */
    public PaymentServiceConfiguration withCartItemsShouldMatchAmount(boolean cartItemsShouldMatchAmount) {
        Utils.checkNotNull(cartItemsShouldMatchAmount, "cartItemsShouldMatchAmount");
        this.cartItemsShouldMatchAmount = cartItemsShouldMatchAmount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentServiceConfiguration other = (PaymentServiceConfiguration) o;
        return 
            Utils.enhancedDeepEquals(this.approvalUiTarget, other.approvalUiTarget) &&
            Utils.enhancedDeepEquals(this.approvalUiHeight, other.approvalUiHeight) &&
            Utils.enhancedDeepEquals(this.approvalUiWidth, other.approvalUiWidth) &&
            Utils.enhancedDeepEquals(this.cartItemsLimit, other.cartItemsLimit) &&
            Utils.enhancedDeepEquals(this.cartItemsRequired, other.cartItemsRequired) &&
            Utils.enhancedDeepEquals(this.cartItemsShouldMatchAmount, other.cartItemsShouldMatchAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            approvalUiTarget,
            approvalUiHeight,
            approvalUiWidth,
            cartItemsLimit,
            cartItemsRequired,
            cartItemsShouldMatchAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentServiceConfiguration.class,
                "approvalUiTarget", approvalUiTarget,
                "approvalUiHeight", approvalUiHeight,
                "approvalUiWidth", approvalUiWidth,
                "cartItemsLimit", cartItemsLimit,
                "cartItemsRequired", cartItemsRequired,
                "cartItemsShouldMatchAmount", cartItemsShouldMatchAmount);
    }
    
    public final static class Builder {
 
        private ApprovalTarget approvalUiTarget;
 
        private String approvalUiHeight;
 
        private String approvalUiWidth;
 
        private Long cartItemsLimit;
 
        private Boolean cartItemsRequired;
 
        private Boolean cartItemsShouldMatchAmount;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder approvalUiTarget(ApprovalTarget approvalUiTarget) {
            Utils.checkNotNull(approvalUiTarget, "approvalUiTarget");
            this.approvalUiTarget = approvalUiTarget;
            return this;
        }

        /**
         * Height of the approval interface in either pixels or view height (vh).
         */
        public Builder approvalUiHeight(String approvalUiHeight) {
            Utils.checkNotNull(approvalUiHeight, "approvalUiHeight");
            this.approvalUiHeight = approvalUiHeight;
            return this;
        }

        /**
         * Width of the approval interface in either pixels or view width (vw).
         */
        public Builder approvalUiWidth(String approvalUiWidth) {
            Utils.checkNotNull(approvalUiWidth, "approvalUiWidth");
            this.approvalUiWidth = approvalUiWidth;
            return this;
        }

        /**
         * The maximum number of cart items supported by this connector before we will truncate the list.
         */
        public Builder cartItemsLimit(long cartItemsLimit) {
            Utils.checkNotNull(cartItemsLimit, "cartItemsLimit");
            this.cartItemsLimit = cartItemsLimit;
            return this;
        }

        /**
         * Defines if cart items are required by this connector.
         */
        public Builder cartItemsRequired(boolean cartItemsRequired) {
            Utils.checkNotNull(cartItemsRequired, "cartItemsRequired");
            this.cartItemsRequired = cartItemsRequired;
            return this;
        }

        /**
         * Defines if the cart items sum value should match the transaction amount.
         */
        public Builder cartItemsShouldMatchAmount(boolean cartItemsShouldMatchAmount) {
            Utils.checkNotNull(cartItemsShouldMatchAmount, "cartItemsShouldMatchAmount");
            this.cartItemsShouldMatchAmount = cartItemsShouldMatchAmount;
            return this;
        }
        
        public PaymentServiceConfiguration build() {
            return new PaymentServiceConfiguration(
                approvalUiTarget,
                approvalUiHeight,
                approvalUiWidth,
                cartItemsLimit,
                cartItemsRequired,
                cartItemsShouldMatchAmount);
        }
    }
}
