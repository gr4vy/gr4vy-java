/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class MockCardOptions {
    /**
     * Allows for mocking the merchant advice code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_advice_code")
    private JsonNullable<? extends MockCardMerchantAdviceCodeOptions> merchantAdviceCode;

    @JsonCreator
    public MockCardOptions(
            @JsonProperty("merchant_advice_code") JsonNullable<? extends MockCardMerchantAdviceCodeOptions> merchantAdviceCode) {
        Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
        this.merchantAdviceCode = merchantAdviceCode;
    }
    
    public MockCardOptions() {
        this(JsonNullable.undefined());
    }

    /**
     * Allows for mocking the merchant advice code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<MockCardMerchantAdviceCodeOptions> merchantAdviceCode() {
        return (JsonNullable<MockCardMerchantAdviceCodeOptions>) merchantAdviceCode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Allows for mocking the merchant advice code.
     */
    public MockCardOptions withMerchantAdviceCode(MockCardMerchantAdviceCodeOptions merchantAdviceCode) {
        Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
        this.merchantAdviceCode = JsonNullable.of(merchantAdviceCode);
        return this;
    }

    /**
     * Allows for mocking the merchant advice code.
     */
    public MockCardOptions withMerchantAdviceCode(JsonNullable<? extends MockCardMerchantAdviceCodeOptions> merchantAdviceCode) {
        Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
        this.merchantAdviceCode = merchantAdviceCode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MockCardOptions other = (MockCardOptions) o;
        return 
            Utils.enhancedDeepEquals(this.merchantAdviceCode, other.merchantAdviceCode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            merchantAdviceCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MockCardOptions.class,
                "merchantAdviceCode", merchantAdviceCode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends MockCardMerchantAdviceCodeOptions> merchantAdviceCode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Allows for mocking the merchant advice code.
         */
        public Builder merchantAdviceCode(MockCardMerchantAdviceCodeOptions merchantAdviceCode) {
            Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
            this.merchantAdviceCode = JsonNullable.of(merchantAdviceCode);
            return this;
        }

        /**
         * Allows for mocking the merchant advice code.
         */
        public Builder merchantAdviceCode(JsonNullable<? extends MockCardMerchantAdviceCodeOptions> merchantAdviceCode) {
            Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
            this.merchantAdviceCode = merchantAdviceCode;
            return this;
        }

        public MockCardOptions build() {

            return new MockCardOptions(
                merchantAdviceCode);
        }

    }
}
