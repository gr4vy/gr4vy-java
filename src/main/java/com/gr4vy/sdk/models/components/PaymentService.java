/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PaymentService {

    /**
     * Always `payment-service`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The ID of the merchant account this job belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * The definition ID of the service that has been configured.
     */
    @JsonProperty("payment_service_definition_id")
    private String paymentServiceDefinitionId;

    /**
     * Defines if this payment service is currently active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    @JsonProperty("method")
    private Method method;

    /**
     * The display name for the payment service.
     */
    @JsonProperty("display_name")
    private String displayName;

    /**
     * Deprecated field used to define the order in which to process payment services
     */
    @JsonProperty("position")
    private long position;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends PaymentServiceStatus> status;

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     */
    @JsonProperty("accepted_currencies")
    private List<String> acceptedCurrencies;

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     */
    @JsonProperty("accepted_countries")
    private List<String> acceptedCountries;

    /**
     * Defines if this payment service support payment method tokenization.
     */
    @JsonProperty("payment_method_tokenization_enabled")
    private boolean paymentMethodTokenizationEnabled;

    /**
     * Defines if this payment service supports network tokens.
     */
    @JsonProperty("network_tokens_enabled")
    private boolean networkTokensEnabled;

    /**
     * Defines if this payment service is open loop.
     */
    @JsonProperty("open_loop")
    private boolean openLoop;

    /**
     * Defines if this payment service has settlement reporting enabled.
     */
    @JsonProperty("settlement_reporting_enabled")
    private boolean settlementReportingEnabled;

    /**
     * Defines if this payment service has 3DS enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("three_d_secure_enabled")
    private JsonNullable<Boolean> threeDSecureEnabled;

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_profile")
    private JsonNullable<? extends Map<String, MerchantProfileSchemeSummary>> merchantProfile;

    /**
     * The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook_url")
    private JsonNullable<String> webhookUrl;

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private JsonNullable<? extends List<Field>> fields;

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reporting_fields")
    private JsonNullable<? extends List<Field>> reportingFields;

    /**
     * Defines if this payment service has been deleted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_deleted")
    private Optional<Boolean> isDeleted;

    /**
     * The date and time when this payment service was first created in our system.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time when this payment service was last updated in our system.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public PaymentService(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("payment_service_definition_id") String paymentServiceDefinitionId,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("method") Method method,
            @JsonProperty("display_name") String displayName,
            @JsonProperty("position") long position,
            @JsonProperty("status") Optional<? extends PaymentServiceStatus> status,
            @JsonProperty("accepted_currencies") List<String> acceptedCurrencies,
            @JsonProperty("accepted_countries") List<String> acceptedCountries,
            @JsonProperty("payment_method_tokenization_enabled") boolean paymentMethodTokenizationEnabled,
            @JsonProperty("network_tokens_enabled") boolean networkTokensEnabled,
            @JsonProperty("open_loop") boolean openLoop,
            @JsonProperty("settlement_reporting_enabled") boolean settlementReportingEnabled,
            @JsonProperty("three_d_secure_enabled") JsonNullable<Boolean> threeDSecureEnabled,
            @JsonProperty("merchant_profile") JsonNullable<? extends Map<String, MerchantProfileSchemeSummary>> merchantProfile,
            @JsonProperty("webhook_url") JsonNullable<String> webhookUrl,
            @JsonProperty("fields") JsonNullable<? extends List<Field>> fields,
            @JsonProperty("reporting_fields") JsonNullable<? extends List<Field>> reportingFields,
            @JsonProperty("is_deleted") Optional<Boolean> isDeleted,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(paymentServiceDefinitionId, "paymentServiceDefinitionId");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(position, "position");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
        Utils.checkNotNull(acceptedCountries, "acceptedCountries");
        Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
        Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
        Utils.checkNotNull(openLoop, "openLoop");
        Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
        Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
        Utils.checkNotNull(merchantProfile, "merchantProfile");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(reportingFields, "reportingFields");
        Utils.checkNotNull(isDeleted, "isDeleted");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.paymentServiceDefinitionId = paymentServiceDefinitionId;
        this.active = active;
        this.method = method;
        this.displayName = displayName;
        this.position = position;
        this.status = status;
        this.acceptedCurrencies = acceptedCurrencies;
        this.acceptedCountries = acceptedCountries;
        this.paymentMethodTokenizationEnabled = paymentMethodTokenizationEnabled;
        this.networkTokensEnabled = networkTokensEnabled;
        this.openLoop = openLoop;
        this.settlementReportingEnabled = settlementReportingEnabled;
        this.threeDSecureEnabled = threeDSecureEnabled;
        this.merchantProfile = merchantProfile;
        this.webhookUrl = webhookUrl;
        this.fields = fields;
        this.reportingFields = reportingFields;
        this.isDeleted = isDeleted;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public PaymentService(
            String merchantAccountId,
            String paymentServiceDefinitionId,
            Method method,
            String displayName,
            long position,
            List<String> acceptedCurrencies,
            List<String> acceptedCountries,
            boolean paymentMethodTokenizationEnabled,
            boolean networkTokensEnabled,
            boolean openLoop,
            boolean settlementReportingEnabled,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(Optional.empty(), merchantAccountId, paymentServiceDefinitionId, Optional.empty(), method, displayName, position, Optional.empty(), acceptedCurrencies, acceptedCountries, paymentMethodTokenizationEnabled, networkTokensEnabled, openLoop, settlementReportingEnabled, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), createdAt, updatedAt);
    }

    /**
     * Always `payment-service`
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The ID of the merchant account this job belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * The definition ID of the service that has been configured.
     */
    @JsonIgnore
    public String paymentServiceDefinitionId() {
        return paymentServiceDefinitionId;
    }

    /**
     * Defines if this payment service is currently active.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    @JsonIgnore
    public Method method() {
        return method;
    }

    /**
     * The display name for the payment service.
     */
    @JsonIgnore
    public String displayName() {
        return displayName;
    }

    /**
     * Deprecated field used to define the order in which to process payment services
     */
    @JsonIgnore
    public long position() {
        return position;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentServiceStatus> status() {
        return (Optional<PaymentServiceStatus>) status;
    }

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     */
    @JsonIgnore
    public List<String> acceptedCurrencies() {
        return acceptedCurrencies;
    }

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     */
    @JsonIgnore
    public List<String> acceptedCountries() {
        return acceptedCountries;
    }

    /**
     * Defines if this payment service support payment method tokenization.
     */
    @JsonIgnore
    public boolean paymentMethodTokenizationEnabled() {
        return paymentMethodTokenizationEnabled;
    }

    /**
     * Defines if this payment service supports network tokens.
     */
    @JsonIgnore
    public boolean networkTokensEnabled() {
        return networkTokensEnabled;
    }

    /**
     * Defines if this payment service is open loop.
     */
    @JsonIgnore
    public boolean openLoop() {
        return openLoop;
    }

    /**
     * Defines if this payment service has settlement reporting enabled.
     */
    @JsonIgnore
    public boolean settlementReportingEnabled() {
        return settlementReportingEnabled;
    }

    /**
     * Defines if this payment service has 3DS enabled.
     */
    @JsonIgnore
    public JsonNullable<Boolean> threeDSecureEnabled() {
        return threeDSecureEnabled;
    }

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, MerchantProfileSchemeSummary>> merchantProfile() {
        return (JsonNullable<Map<String, MerchantProfileSchemeSummary>>) merchantProfile;
    }

    /**
     * The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
     */
    @JsonIgnore
    public JsonNullable<String> webhookUrl() {
        return webhookUrl;
    }

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Field>> fields() {
        return (JsonNullable<List<Field>>) fields;
    }

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Field>> reportingFields() {
        return (JsonNullable<List<Field>>) reportingFields;
    }

    /**
     * Defines if this payment service has been deleted
     */
    @JsonIgnore
    public Optional<Boolean> isDeleted() {
        return isDeleted;
    }

    /**
     * The date and time when this payment service was first created in our system.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time when this payment service was last updated in our system.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PaymentService withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public PaymentService withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the merchant account this job belongs to.
     */
    public PaymentService withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * The definition ID of the service that has been configured.
     */
    public PaymentService withPaymentServiceDefinitionId(String paymentServiceDefinitionId) {
        Utils.checkNotNull(paymentServiceDefinitionId, "paymentServiceDefinitionId");
        this.paymentServiceDefinitionId = paymentServiceDefinitionId;
        return this;
    }

    /**
     * Defines if this payment service is currently active.
     */
    public PaymentService withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Defines if this payment service is currently active.
     */
    public PaymentService withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public PaymentService withMethod(Method method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The display name for the payment service.
     */
    public PaymentService withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * Deprecated field used to define the order in which to process payment services
     */
    public PaymentService withPosition(long position) {
        Utils.checkNotNull(position, "position");
        this.position = position;
        return this;
    }

    public PaymentService withStatus(PaymentServiceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public PaymentService withStatus(Optional<? extends PaymentServiceStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     */
    public PaymentService withAcceptedCurrencies(List<String> acceptedCurrencies) {
        Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
        this.acceptedCurrencies = acceptedCurrencies;
        return this;
    }

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     */
    public PaymentService withAcceptedCountries(List<String> acceptedCountries) {
        Utils.checkNotNull(acceptedCountries, "acceptedCountries");
        this.acceptedCountries = acceptedCountries;
        return this;
    }

    /**
     * Defines if this payment service support payment method tokenization.
     */
    public PaymentService withPaymentMethodTokenizationEnabled(boolean paymentMethodTokenizationEnabled) {
        Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
        this.paymentMethodTokenizationEnabled = paymentMethodTokenizationEnabled;
        return this;
    }

    /**
     * Defines if this payment service supports network tokens.
     */
    public PaymentService withNetworkTokensEnabled(boolean networkTokensEnabled) {
        Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
        this.networkTokensEnabled = networkTokensEnabled;
        return this;
    }

    /**
     * Defines if this payment service is open loop.
     */
    public PaymentService withOpenLoop(boolean openLoop) {
        Utils.checkNotNull(openLoop, "openLoop");
        this.openLoop = openLoop;
        return this;
    }

    /**
     * Defines if this payment service has settlement reporting enabled.
     */
    public PaymentService withSettlementReportingEnabled(boolean settlementReportingEnabled) {
        Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
        this.settlementReportingEnabled = settlementReportingEnabled;
        return this;
    }

    /**
     * Defines if this payment service has 3DS enabled.
     */
    public PaymentService withThreeDSecureEnabled(boolean threeDSecureEnabled) {
        Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
        this.threeDSecureEnabled = JsonNullable.of(threeDSecureEnabled);
        return this;
    }

    /**
     * Defines if this payment service has 3DS enabled.
     */
    public PaymentService withThreeDSecureEnabled(JsonNullable<Boolean> threeDSecureEnabled) {
        Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
        this.threeDSecureEnabled = threeDSecureEnabled;
        return this;
    }

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    public PaymentService withMerchantProfile(Map<String, MerchantProfileSchemeSummary> merchantProfile) {
        Utils.checkNotNull(merchantProfile, "merchantProfile");
        this.merchantProfile = JsonNullable.of(merchantProfile);
        return this;
    }

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     */
    public PaymentService withMerchantProfile(JsonNullable<? extends Map<String, MerchantProfileSchemeSummary>> merchantProfile) {
        Utils.checkNotNull(merchantProfile, "merchantProfile");
        this.merchantProfile = merchantProfile;
        return this;
    }

    /**
     * The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
     */
    public PaymentService withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = JsonNullable.of(webhookUrl);
        return this;
    }

    /**
     * The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
     */
    public PaymentService withWebhookUrl(JsonNullable<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentService withFields(List<Field> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = JsonNullable.of(fields);
        return this;
    }

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentService withFields(JsonNullable<? extends List<Field>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentService withReportingFields(List<Field> reportingFields) {
        Utils.checkNotNull(reportingFields, "reportingFields");
        this.reportingFields = JsonNullable.of(reportingFields);
        return this;
    }

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     */
    public PaymentService withReportingFields(JsonNullable<? extends List<Field>> reportingFields) {
        Utils.checkNotNull(reportingFields, "reportingFields");
        this.reportingFields = reportingFields;
        return this;
    }

    /**
     * Defines if this payment service has been deleted
     */
    public PaymentService withIsDeleted(boolean isDeleted) {
        Utils.checkNotNull(isDeleted, "isDeleted");
        this.isDeleted = Optional.ofNullable(isDeleted);
        return this;
    }

    /**
     * Defines if this payment service has been deleted
     */
    public PaymentService withIsDeleted(Optional<Boolean> isDeleted) {
        Utils.checkNotNull(isDeleted, "isDeleted");
        this.isDeleted = isDeleted;
        return this;
    }

    /**
     * The date and time when this payment service was first created in our system.
     */
    public PaymentService withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when this payment service was last updated in our system.
     */
    public PaymentService withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentService other = (PaymentService) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.paymentServiceDefinitionId, other.paymentServiceDefinitionId) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.position, other.position) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.acceptedCurrencies, other.acceptedCurrencies) &&
            Objects.deepEquals(this.acceptedCountries, other.acceptedCountries) &&
            Objects.deepEquals(this.paymentMethodTokenizationEnabled, other.paymentMethodTokenizationEnabled) &&
            Objects.deepEquals(this.networkTokensEnabled, other.networkTokensEnabled) &&
            Objects.deepEquals(this.openLoop, other.openLoop) &&
            Objects.deepEquals(this.settlementReportingEnabled, other.settlementReportingEnabled) &&
            Objects.deepEquals(this.threeDSecureEnabled, other.threeDSecureEnabled) &&
            Objects.deepEquals(this.merchantProfile, other.merchantProfile) &&
            Objects.deepEquals(this.webhookUrl, other.webhookUrl) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.reportingFields, other.reportingFields) &&
            Objects.deepEquals(this.isDeleted, other.isDeleted) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            merchantAccountId,
            paymentServiceDefinitionId,
            active,
            method,
            displayName,
            position,
            status,
            acceptedCurrencies,
            acceptedCountries,
            paymentMethodTokenizationEnabled,
            networkTokensEnabled,
            openLoop,
            settlementReportingEnabled,
            threeDSecureEnabled,
            merchantProfile,
            webhookUrl,
            fields,
            reportingFields,
            isDeleted,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentService.class,
                "type", type,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "paymentServiceDefinitionId", paymentServiceDefinitionId,
                "active", active,
                "method", method,
                "displayName", displayName,
                "position", position,
                "status", status,
                "acceptedCurrencies", acceptedCurrencies,
                "acceptedCountries", acceptedCountries,
                "paymentMethodTokenizationEnabled", paymentMethodTokenizationEnabled,
                "networkTokensEnabled", networkTokensEnabled,
                "openLoop", openLoop,
                "settlementReportingEnabled", settlementReportingEnabled,
                "threeDSecureEnabled", threeDSecureEnabled,
                "merchantProfile", merchantProfile,
                "webhookUrl", webhookUrl,
                "fields", fields,
                "reportingFields", reportingFields,
                "isDeleted", isDeleted,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id;
 
        private String merchantAccountId;
 
        private String paymentServiceDefinitionId;
 
        private Optional<Boolean> active;
 
        private Method method;
 
        private String displayName;
 
        private Long position;
 
        private Optional<? extends PaymentServiceStatus> status = Optional.empty();
 
        private List<String> acceptedCurrencies;
 
        private List<String> acceptedCountries;
 
        private Boolean paymentMethodTokenizationEnabled;
 
        private Boolean networkTokensEnabled;
 
        private Boolean openLoop;
 
        private Boolean settlementReportingEnabled;
 
        private JsonNullable<Boolean> threeDSecureEnabled = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, MerchantProfileSchemeSummary>> merchantProfile = JsonNullable.undefined();
 
        private JsonNullable<String> webhookUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends List<Field>> fields = JsonNullable.undefined();
 
        private JsonNullable<? extends List<Field>> reportingFields = JsonNullable.undefined();
 
        private Optional<Boolean> isDeleted;
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID of the merchant account this job belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        /**
         * The definition ID of the service that has been configured.
         */
        public Builder paymentServiceDefinitionId(String paymentServiceDefinitionId) {
            Utils.checkNotNull(paymentServiceDefinitionId, "paymentServiceDefinitionId");
            this.paymentServiceDefinitionId = paymentServiceDefinitionId;
            return this;
        }

        /**
         * Defines if this payment service is currently active.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Defines if this payment service is currently active.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder method(Method method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The display name for the payment service.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * Deprecated field used to define the order in which to process payment services
         */
        public Builder position(long position) {
            Utils.checkNotNull(position, "position");
            this.position = position;
            return this;
        }

        public Builder status(PaymentServiceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends PaymentServiceStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
         */
        public Builder acceptedCurrencies(List<String> acceptedCurrencies) {
            Utils.checkNotNull(acceptedCurrencies, "acceptedCurrencies");
            this.acceptedCurrencies = acceptedCurrencies;
            return this;
        }

        /**
         * A list of countries for which this service is enabled, in ISO two-letter code format.
         */
        public Builder acceptedCountries(List<String> acceptedCountries) {
            Utils.checkNotNull(acceptedCountries, "acceptedCountries");
            this.acceptedCountries = acceptedCountries;
            return this;
        }

        /**
         * Defines if this payment service support payment method tokenization.
         */
        public Builder paymentMethodTokenizationEnabled(boolean paymentMethodTokenizationEnabled) {
            Utils.checkNotNull(paymentMethodTokenizationEnabled, "paymentMethodTokenizationEnabled");
            this.paymentMethodTokenizationEnabled = paymentMethodTokenizationEnabled;
            return this;
        }

        /**
         * Defines if this payment service supports network tokens.
         */
        public Builder networkTokensEnabled(boolean networkTokensEnabled) {
            Utils.checkNotNull(networkTokensEnabled, "networkTokensEnabled");
            this.networkTokensEnabled = networkTokensEnabled;
            return this;
        }

        /**
         * Defines if this payment service is open loop.
         */
        public Builder openLoop(boolean openLoop) {
            Utils.checkNotNull(openLoop, "openLoop");
            this.openLoop = openLoop;
            return this;
        }

        /**
         * Defines if this payment service has settlement reporting enabled.
         */
        public Builder settlementReportingEnabled(boolean settlementReportingEnabled) {
            Utils.checkNotNull(settlementReportingEnabled, "settlementReportingEnabled");
            this.settlementReportingEnabled = settlementReportingEnabled;
            return this;
        }

        /**
         * Defines if this payment service has 3DS enabled.
         */
        public Builder threeDSecureEnabled(boolean threeDSecureEnabled) {
            Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
            this.threeDSecureEnabled = JsonNullable.of(threeDSecureEnabled);
            return this;
        }

        /**
         * Defines if this payment service has 3DS enabled.
         */
        public Builder threeDSecureEnabled(JsonNullable<Boolean> threeDSecureEnabled) {
            Utils.checkNotNull(threeDSecureEnabled, "threeDSecureEnabled");
            this.threeDSecureEnabled = threeDSecureEnabled;
            return this;
        }

        /**
         * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
         */
        public Builder merchantProfile(Map<String, MerchantProfileSchemeSummary> merchantProfile) {
            Utils.checkNotNull(merchantProfile, "merchantProfile");
            this.merchantProfile = JsonNullable.of(merchantProfile);
            return this;
        }

        /**
         * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
         */
        public Builder merchantProfile(JsonNullable<? extends Map<String, MerchantProfileSchemeSummary>> merchantProfile) {
            Utils.checkNotNull(merchantProfile, "merchantProfile");
            this.merchantProfile = merchantProfile;
            return this;
        }

        /**
         * The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = JsonNullable.of(webhookUrl);
            return this;
        }

        /**
         * The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
         */
        public Builder webhookUrl(JsonNullable<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder fields(List<Field> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = JsonNullable.of(fields);
            return this;
        }

        /**
         * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder fields(JsonNullable<? extends List<Field>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder reportingFields(List<Field> reportingFields) {
            Utils.checkNotNull(reportingFields, "reportingFields");
            this.reportingFields = JsonNullable.of(reportingFields);
            return this;
        }

        /**
         * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
         */
        public Builder reportingFields(JsonNullable<? extends List<Field>> reportingFields) {
            Utils.checkNotNull(reportingFields, "reportingFields");
            this.reportingFields = reportingFields;
            return this;
        }

        /**
         * Defines if this payment service has been deleted
         */
        public Builder isDeleted(boolean isDeleted) {
            Utils.checkNotNull(isDeleted, "isDeleted");
            this.isDeleted = Optional.ofNullable(isDeleted);
            return this;
        }

        /**
         * Defines if this payment service has been deleted
         */
        public Builder isDeleted(Optional<Boolean> isDeleted) {
            Utils.checkNotNull(isDeleted, "isDeleted");
            this.isDeleted = isDeleted;
            return this;
        }

        /**
         * The date and time when this payment service was first created in our system.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when this payment service was last updated in our system.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public PaymentService build() {
            if (id == null) {
                id = _SINGLETON_VALUE_Id.value();
            }
            if (active == null) {
                active = _SINGLETON_VALUE_Active.value();
            }
            if (isDeleted == null) {
                isDeleted = _SINGLETON_VALUE_IsDeleted.value();
            }
            return new PaymentService(
                id,
                merchantAccountId,
                paymentServiceDefinitionId,
                active,
                method,
                displayName,
                position,
                status,
                acceptedCurrencies,
                acceptedCountries,
                paymentMethodTokenizationEnabled,
                networkTokensEnabled,
                openLoop,
                settlementReportingEnabled,
                threeDSecureEnabled,
                merchantProfile,
                webhookUrl,
                fields,
                reportingFields,
                isDeleted,
                createdAt,
                updatedAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-service\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Id =
                new LazySingletonValue<>(
                        "id",
                        "\"The ID of the payment service\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Active =
                new LazySingletonValue<>(
                        "active",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IsDeleted =
                new LazySingletonValue<>(
                        "is_deleted",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
