/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Airline
 * 
 * <p>Information about an airline travel.
 */
public class Airline {

    /**
     * The unique identifier of the reservation in the global distribution system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("booking_code")
    private JsonNullable<String> bookingCode;

    /**
     * Indicates whether the cardholder is traveling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_cardholder_traveling")
    private JsonNullable<Boolean> isCardholderTraveling;

    /**
     * The address of the place/agency that issued the ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_address")
    private JsonNullable<String> issuedAddress;

    /**
     * The date that the ticket was last issued in the airline reservation system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_at")
    private JsonNullable<OffsetDateTime> issuedAt;

    /**
     * For airline aggregators, three-character IATA code of the airline issuing the ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuing_carrier_code")
    private JsonNullable<String> issuingCarrierCode;

    /**
     * For airline aggregators, name of the airline issuing the ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuing_carrier_name")
    private JsonNullable<String> issuingCarrierName;

    /**
     * For airline aggregators, two-character IATA code of the airline issuing the ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuing_iata_designator")
    private JsonNullable<String> issuingIataDesignator;

    /**
     * For airline aggregators, three-character ICAO code of the airline issuing the ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuing_icao_code")
    private JsonNullable<String> issuingIcaoCode;

    /**
     * An array of separate trip segments. Each leg contains detailed itinerary information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legs")
    private JsonNullable<? extends List<AirlineLeg>> legs;

    /**
     * The Passenger Name Record (PNR) in the airline reservation system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passenger_name_record")
    private JsonNullable<String> passengerNameRecord;

    /**
     * An array of the travelling passengers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passengers")
    private JsonNullable<? extends List<AirlinePassenger>> passengers;

    /**
     * The name of the reservation system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservation_system")
    private JsonNullable<String> reservationSystem;

    /**
     * Indicates whether the ticket is restricted (refundable).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restricted_ticket")
    private JsonNullable<Boolean> restrictedTicket;

    /**
     * The delivery method of the ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticket_delivery_method")
    private JsonNullable<? extends TicketDeliveryMethod> ticketDeliveryMethod;

    /**
     * The airline's unique ticket number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticket_number")
    private JsonNullable<String> ticketNumber;

    /**
     * The IATA travel agency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travel_agency_code")
    private JsonNullable<String> travelAgencyCode;

    /**
     * The reference number of the invoice that was issued by the travel agency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travel_agency_invoice_number")
    private JsonNullable<String> travelAgencyInvoiceNumber;

    /**
     * The name of the travel agency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travel_agency_name")
    private JsonNullable<String> travelAgencyName;

    /**
     * The name of the travel agency plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travel_agency_plan_name")
    private JsonNullable<String> travelAgencyPlanName;

    @JsonCreator
    public Airline(
            @JsonProperty("booking_code") JsonNullable<String> bookingCode,
            @JsonProperty("is_cardholder_traveling") JsonNullable<Boolean> isCardholderTraveling,
            @JsonProperty("issued_address") JsonNullable<String> issuedAddress,
            @JsonProperty("issued_at") JsonNullable<OffsetDateTime> issuedAt,
            @JsonProperty("issuing_carrier_code") JsonNullable<String> issuingCarrierCode,
            @JsonProperty("issuing_carrier_name") JsonNullable<String> issuingCarrierName,
            @JsonProperty("issuing_iata_designator") JsonNullable<String> issuingIataDesignator,
            @JsonProperty("issuing_icao_code") JsonNullable<String> issuingIcaoCode,
            @JsonProperty("legs") JsonNullable<? extends List<AirlineLeg>> legs,
            @JsonProperty("passenger_name_record") JsonNullable<String> passengerNameRecord,
            @JsonProperty("passengers") JsonNullable<? extends List<AirlinePassenger>> passengers,
            @JsonProperty("reservation_system") JsonNullable<String> reservationSystem,
            @JsonProperty("restricted_ticket") JsonNullable<Boolean> restrictedTicket,
            @JsonProperty("ticket_delivery_method") JsonNullable<? extends TicketDeliveryMethod> ticketDeliveryMethod,
            @JsonProperty("ticket_number") JsonNullable<String> ticketNumber,
            @JsonProperty("travel_agency_code") JsonNullable<String> travelAgencyCode,
            @JsonProperty("travel_agency_invoice_number") JsonNullable<String> travelAgencyInvoiceNumber,
            @JsonProperty("travel_agency_name") JsonNullable<String> travelAgencyName,
            @JsonProperty("travel_agency_plan_name") JsonNullable<String> travelAgencyPlanName) {
        Utils.checkNotNull(bookingCode, "bookingCode");
        Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
        Utils.checkNotNull(issuedAddress, "issuedAddress");
        Utils.checkNotNull(issuedAt, "issuedAt");
        Utils.checkNotNull(issuingCarrierCode, "issuingCarrierCode");
        Utils.checkNotNull(issuingCarrierName, "issuingCarrierName");
        Utils.checkNotNull(issuingIataDesignator, "issuingIataDesignator");
        Utils.checkNotNull(issuingIcaoCode, "issuingIcaoCode");
        Utils.checkNotNull(legs, "legs");
        Utils.checkNotNull(passengerNameRecord, "passengerNameRecord");
        Utils.checkNotNull(passengers, "passengers");
        Utils.checkNotNull(reservationSystem, "reservationSystem");
        Utils.checkNotNull(restrictedTicket, "restrictedTicket");
        Utils.checkNotNull(ticketDeliveryMethod, "ticketDeliveryMethod");
        Utils.checkNotNull(ticketNumber, "ticketNumber");
        Utils.checkNotNull(travelAgencyCode, "travelAgencyCode");
        Utils.checkNotNull(travelAgencyInvoiceNumber, "travelAgencyInvoiceNumber");
        Utils.checkNotNull(travelAgencyName, "travelAgencyName");
        Utils.checkNotNull(travelAgencyPlanName, "travelAgencyPlanName");
        this.bookingCode = bookingCode;
        this.isCardholderTraveling = isCardholderTraveling;
        this.issuedAddress = issuedAddress;
        this.issuedAt = issuedAt;
        this.issuingCarrierCode = issuingCarrierCode;
        this.issuingCarrierName = issuingCarrierName;
        this.issuingIataDesignator = issuingIataDesignator;
        this.issuingIcaoCode = issuingIcaoCode;
        this.legs = legs;
        this.passengerNameRecord = passengerNameRecord;
        this.passengers = passengers;
        this.reservationSystem = reservationSystem;
        this.restrictedTicket = restrictedTicket;
        this.ticketDeliveryMethod = ticketDeliveryMethod;
        this.ticketNumber = ticketNumber;
        this.travelAgencyCode = travelAgencyCode;
        this.travelAgencyInvoiceNumber = travelAgencyInvoiceNumber;
        this.travelAgencyName = travelAgencyName;
        this.travelAgencyPlanName = travelAgencyPlanName;
    }
    
    public Airline() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The unique identifier of the reservation in the global distribution system.
     */
    @JsonIgnore
    public JsonNullable<String> bookingCode() {
        return bookingCode;
    }

    /**
     * Indicates whether the cardholder is traveling.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isCardholderTraveling() {
        return isCardholderTraveling;
    }

    /**
     * The address of the place/agency that issued the ticket.
     */
    @JsonIgnore
    public JsonNullable<String> issuedAddress() {
        return issuedAddress;
    }

    /**
     * The date that the ticket was last issued in the airline reservation system.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> issuedAt() {
        return issuedAt;
    }

    /**
     * For airline aggregators, three-character IATA code of the airline issuing the ticket.
     */
    @JsonIgnore
    public JsonNullable<String> issuingCarrierCode() {
        return issuingCarrierCode;
    }

    /**
     * For airline aggregators, name of the airline issuing the ticket.
     */
    @JsonIgnore
    public JsonNullable<String> issuingCarrierName() {
        return issuingCarrierName;
    }

    /**
     * For airline aggregators, two-character IATA code of the airline issuing the ticket.
     */
    @JsonIgnore
    public JsonNullable<String> issuingIataDesignator() {
        return issuingIataDesignator;
    }

    /**
     * For airline aggregators, three-character ICAO code of the airline issuing the ticket.
     */
    @JsonIgnore
    public JsonNullable<String> issuingIcaoCode() {
        return issuingIcaoCode;
    }

    /**
     * An array of separate trip segments. Each leg contains detailed itinerary information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<AirlineLeg>> legs() {
        return (JsonNullable<List<AirlineLeg>>) legs;
    }

    /**
     * The Passenger Name Record (PNR) in the airline reservation system.
     */
    @JsonIgnore
    public JsonNullable<String> passengerNameRecord() {
        return passengerNameRecord;
    }

    /**
     * An array of the travelling passengers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<AirlinePassenger>> passengers() {
        return (JsonNullable<List<AirlinePassenger>>) passengers;
    }

    /**
     * The name of the reservation system.
     */
    @JsonIgnore
    public JsonNullable<String> reservationSystem() {
        return reservationSystem;
    }

    /**
     * Indicates whether the ticket is restricted (refundable).
     */
    @JsonIgnore
    public JsonNullable<Boolean> restrictedTicket() {
        return restrictedTicket;
    }

    /**
     * The delivery method of the ticket.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TicketDeliveryMethod> ticketDeliveryMethod() {
        return (JsonNullable<TicketDeliveryMethod>) ticketDeliveryMethod;
    }

    /**
     * The airline's unique ticket number.
     */
    @JsonIgnore
    public JsonNullable<String> ticketNumber() {
        return ticketNumber;
    }

    /**
     * The IATA travel agency code.
     */
    @JsonIgnore
    public JsonNullable<String> travelAgencyCode() {
        return travelAgencyCode;
    }

    /**
     * The reference number of the invoice that was issued by the travel agency.
     */
    @JsonIgnore
    public JsonNullable<String> travelAgencyInvoiceNumber() {
        return travelAgencyInvoiceNumber;
    }

    /**
     * The name of the travel agency.
     */
    @JsonIgnore
    public JsonNullable<String> travelAgencyName() {
        return travelAgencyName;
    }

    /**
     * The name of the travel agency plan.
     */
    @JsonIgnore
    public JsonNullable<String> travelAgencyPlanName() {
        return travelAgencyPlanName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique identifier of the reservation in the global distribution system.
     */
    public Airline withBookingCode(String bookingCode) {
        Utils.checkNotNull(bookingCode, "bookingCode");
        this.bookingCode = JsonNullable.of(bookingCode);
        return this;
    }

    /**
     * The unique identifier of the reservation in the global distribution system.
     */
    public Airline withBookingCode(JsonNullable<String> bookingCode) {
        Utils.checkNotNull(bookingCode, "bookingCode");
        this.bookingCode = bookingCode;
        return this;
    }

    /**
     * Indicates whether the cardholder is traveling.
     */
    public Airline withIsCardholderTraveling(boolean isCardholderTraveling) {
        Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
        this.isCardholderTraveling = JsonNullable.of(isCardholderTraveling);
        return this;
    }

    /**
     * Indicates whether the cardholder is traveling.
     */
    public Airline withIsCardholderTraveling(JsonNullable<Boolean> isCardholderTraveling) {
        Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
        this.isCardholderTraveling = isCardholderTraveling;
        return this;
    }

    /**
     * The address of the place/agency that issued the ticket.
     */
    public Airline withIssuedAddress(String issuedAddress) {
        Utils.checkNotNull(issuedAddress, "issuedAddress");
        this.issuedAddress = JsonNullable.of(issuedAddress);
        return this;
    }

    /**
     * The address of the place/agency that issued the ticket.
     */
    public Airline withIssuedAddress(JsonNullable<String> issuedAddress) {
        Utils.checkNotNull(issuedAddress, "issuedAddress");
        this.issuedAddress = issuedAddress;
        return this;
    }

    /**
     * The date that the ticket was last issued in the airline reservation system.
     */
    public Airline withIssuedAt(OffsetDateTime issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = JsonNullable.of(issuedAt);
        return this;
    }

    /**
     * The date that the ticket was last issued in the airline reservation system.
     */
    public Airline withIssuedAt(JsonNullable<OffsetDateTime> issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * For airline aggregators, three-character IATA code of the airline issuing the ticket.
     */
    public Airline withIssuingCarrierCode(String issuingCarrierCode) {
        Utils.checkNotNull(issuingCarrierCode, "issuingCarrierCode");
        this.issuingCarrierCode = JsonNullable.of(issuingCarrierCode);
        return this;
    }

    /**
     * For airline aggregators, three-character IATA code of the airline issuing the ticket.
     */
    public Airline withIssuingCarrierCode(JsonNullable<String> issuingCarrierCode) {
        Utils.checkNotNull(issuingCarrierCode, "issuingCarrierCode");
        this.issuingCarrierCode = issuingCarrierCode;
        return this;
    }

    /**
     * For airline aggregators, name of the airline issuing the ticket.
     */
    public Airline withIssuingCarrierName(String issuingCarrierName) {
        Utils.checkNotNull(issuingCarrierName, "issuingCarrierName");
        this.issuingCarrierName = JsonNullable.of(issuingCarrierName);
        return this;
    }

    /**
     * For airline aggregators, name of the airline issuing the ticket.
     */
    public Airline withIssuingCarrierName(JsonNullable<String> issuingCarrierName) {
        Utils.checkNotNull(issuingCarrierName, "issuingCarrierName");
        this.issuingCarrierName = issuingCarrierName;
        return this;
    }

    /**
     * For airline aggregators, two-character IATA code of the airline issuing the ticket.
     */
    public Airline withIssuingIataDesignator(String issuingIataDesignator) {
        Utils.checkNotNull(issuingIataDesignator, "issuingIataDesignator");
        this.issuingIataDesignator = JsonNullable.of(issuingIataDesignator);
        return this;
    }

    /**
     * For airline aggregators, two-character IATA code of the airline issuing the ticket.
     */
    public Airline withIssuingIataDesignator(JsonNullable<String> issuingIataDesignator) {
        Utils.checkNotNull(issuingIataDesignator, "issuingIataDesignator");
        this.issuingIataDesignator = issuingIataDesignator;
        return this;
    }

    /**
     * For airline aggregators, three-character ICAO code of the airline issuing the ticket.
     */
    public Airline withIssuingIcaoCode(String issuingIcaoCode) {
        Utils.checkNotNull(issuingIcaoCode, "issuingIcaoCode");
        this.issuingIcaoCode = JsonNullable.of(issuingIcaoCode);
        return this;
    }

    /**
     * For airline aggregators, three-character ICAO code of the airline issuing the ticket.
     */
    public Airline withIssuingIcaoCode(JsonNullable<String> issuingIcaoCode) {
        Utils.checkNotNull(issuingIcaoCode, "issuingIcaoCode");
        this.issuingIcaoCode = issuingIcaoCode;
        return this;
    }

    /**
     * An array of separate trip segments. Each leg contains detailed itinerary information.
     */
    public Airline withLegs(List<AirlineLeg> legs) {
        Utils.checkNotNull(legs, "legs");
        this.legs = JsonNullable.of(legs);
        return this;
    }

    /**
     * An array of separate trip segments. Each leg contains detailed itinerary information.
     */
    public Airline withLegs(JsonNullable<? extends List<AirlineLeg>> legs) {
        Utils.checkNotNull(legs, "legs");
        this.legs = legs;
        return this;
    }

    /**
     * The Passenger Name Record (PNR) in the airline reservation system.
     */
    public Airline withPassengerNameRecord(String passengerNameRecord) {
        Utils.checkNotNull(passengerNameRecord, "passengerNameRecord");
        this.passengerNameRecord = JsonNullable.of(passengerNameRecord);
        return this;
    }

    /**
     * The Passenger Name Record (PNR) in the airline reservation system.
     */
    public Airline withPassengerNameRecord(JsonNullable<String> passengerNameRecord) {
        Utils.checkNotNull(passengerNameRecord, "passengerNameRecord");
        this.passengerNameRecord = passengerNameRecord;
        return this;
    }

    /**
     * An array of the travelling passengers.
     */
    public Airline withPassengers(List<AirlinePassenger> passengers) {
        Utils.checkNotNull(passengers, "passengers");
        this.passengers = JsonNullable.of(passengers);
        return this;
    }

    /**
     * An array of the travelling passengers.
     */
    public Airline withPassengers(JsonNullable<? extends List<AirlinePassenger>> passengers) {
        Utils.checkNotNull(passengers, "passengers");
        this.passengers = passengers;
        return this;
    }

    /**
     * The name of the reservation system.
     */
    public Airline withReservationSystem(String reservationSystem) {
        Utils.checkNotNull(reservationSystem, "reservationSystem");
        this.reservationSystem = JsonNullable.of(reservationSystem);
        return this;
    }

    /**
     * The name of the reservation system.
     */
    public Airline withReservationSystem(JsonNullable<String> reservationSystem) {
        Utils.checkNotNull(reservationSystem, "reservationSystem");
        this.reservationSystem = reservationSystem;
        return this;
    }

    /**
     * Indicates whether the ticket is restricted (refundable).
     */
    public Airline withRestrictedTicket(boolean restrictedTicket) {
        Utils.checkNotNull(restrictedTicket, "restrictedTicket");
        this.restrictedTicket = JsonNullable.of(restrictedTicket);
        return this;
    }

    /**
     * Indicates whether the ticket is restricted (refundable).
     */
    public Airline withRestrictedTicket(JsonNullable<Boolean> restrictedTicket) {
        Utils.checkNotNull(restrictedTicket, "restrictedTicket");
        this.restrictedTicket = restrictedTicket;
        return this;
    }

    /**
     * The delivery method of the ticket.
     */
    public Airline withTicketDeliveryMethod(TicketDeliveryMethod ticketDeliveryMethod) {
        Utils.checkNotNull(ticketDeliveryMethod, "ticketDeliveryMethod");
        this.ticketDeliveryMethod = JsonNullable.of(ticketDeliveryMethod);
        return this;
    }

    /**
     * The delivery method of the ticket.
     */
    public Airline withTicketDeliveryMethod(JsonNullable<? extends TicketDeliveryMethod> ticketDeliveryMethod) {
        Utils.checkNotNull(ticketDeliveryMethod, "ticketDeliveryMethod");
        this.ticketDeliveryMethod = ticketDeliveryMethod;
        return this;
    }

    /**
     * The airline's unique ticket number.
     */
    public Airline withTicketNumber(String ticketNumber) {
        Utils.checkNotNull(ticketNumber, "ticketNumber");
        this.ticketNumber = JsonNullable.of(ticketNumber);
        return this;
    }

    /**
     * The airline's unique ticket number.
     */
    public Airline withTicketNumber(JsonNullable<String> ticketNumber) {
        Utils.checkNotNull(ticketNumber, "ticketNumber");
        this.ticketNumber = ticketNumber;
        return this;
    }

    /**
     * The IATA travel agency code.
     */
    public Airline withTravelAgencyCode(String travelAgencyCode) {
        Utils.checkNotNull(travelAgencyCode, "travelAgencyCode");
        this.travelAgencyCode = JsonNullable.of(travelAgencyCode);
        return this;
    }

    /**
     * The IATA travel agency code.
     */
    public Airline withTravelAgencyCode(JsonNullable<String> travelAgencyCode) {
        Utils.checkNotNull(travelAgencyCode, "travelAgencyCode");
        this.travelAgencyCode = travelAgencyCode;
        return this;
    }

    /**
     * The reference number of the invoice that was issued by the travel agency.
     */
    public Airline withTravelAgencyInvoiceNumber(String travelAgencyInvoiceNumber) {
        Utils.checkNotNull(travelAgencyInvoiceNumber, "travelAgencyInvoiceNumber");
        this.travelAgencyInvoiceNumber = JsonNullable.of(travelAgencyInvoiceNumber);
        return this;
    }

    /**
     * The reference number of the invoice that was issued by the travel agency.
     */
    public Airline withTravelAgencyInvoiceNumber(JsonNullable<String> travelAgencyInvoiceNumber) {
        Utils.checkNotNull(travelAgencyInvoiceNumber, "travelAgencyInvoiceNumber");
        this.travelAgencyInvoiceNumber = travelAgencyInvoiceNumber;
        return this;
    }

    /**
     * The name of the travel agency.
     */
    public Airline withTravelAgencyName(String travelAgencyName) {
        Utils.checkNotNull(travelAgencyName, "travelAgencyName");
        this.travelAgencyName = JsonNullable.of(travelAgencyName);
        return this;
    }

    /**
     * The name of the travel agency.
     */
    public Airline withTravelAgencyName(JsonNullable<String> travelAgencyName) {
        Utils.checkNotNull(travelAgencyName, "travelAgencyName");
        this.travelAgencyName = travelAgencyName;
        return this;
    }

    /**
     * The name of the travel agency plan.
     */
    public Airline withTravelAgencyPlanName(String travelAgencyPlanName) {
        Utils.checkNotNull(travelAgencyPlanName, "travelAgencyPlanName");
        this.travelAgencyPlanName = JsonNullable.of(travelAgencyPlanName);
        return this;
    }

    /**
     * The name of the travel agency plan.
     */
    public Airline withTravelAgencyPlanName(JsonNullable<String> travelAgencyPlanName) {
        Utils.checkNotNull(travelAgencyPlanName, "travelAgencyPlanName");
        this.travelAgencyPlanName = travelAgencyPlanName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Airline other = (Airline) o;
        return 
            Objects.deepEquals(this.bookingCode, other.bookingCode) &&
            Objects.deepEquals(this.isCardholderTraveling, other.isCardholderTraveling) &&
            Objects.deepEquals(this.issuedAddress, other.issuedAddress) &&
            Objects.deepEquals(this.issuedAt, other.issuedAt) &&
            Objects.deepEquals(this.issuingCarrierCode, other.issuingCarrierCode) &&
            Objects.deepEquals(this.issuingCarrierName, other.issuingCarrierName) &&
            Objects.deepEquals(this.issuingIataDesignator, other.issuingIataDesignator) &&
            Objects.deepEquals(this.issuingIcaoCode, other.issuingIcaoCode) &&
            Objects.deepEquals(this.legs, other.legs) &&
            Objects.deepEquals(this.passengerNameRecord, other.passengerNameRecord) &&
            Objects.deepEquals(this.passengers, other.passengers) &&
            Objects.deepEquals(this.reservationSystem, other.reservationSystem) &&
            Objects.deepEquals(this.restrictedTicket, other.restrictedTicket) &&
            Objects.deepEquals(this.ticketDeliveryMethod, other.ticketDeliveryMethod) &&
            Objects.deepEquals(this.ticketNumber, other.ticketNumber) &&
            Objects.deepEquals(this.travelAgencyCode, other.travelAgencyCode) &&
            Objects.deepEquals(this.travelAgencyInvoiceNumber, other.travelAgencyInvoiceNumber) &&
            Objects.deepEquals(this.travelAgencyName, other.travelAgencyName) &&
            Objects.deepEquals(this.travelAgencyPlanName, other.travelAgencyPlanName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bookingCode,
            isCardholderTraveling,
            issuedAddress,
            issuedAt,
            issuingCarrierCode,
            issuingCarrierName,
            issuingIataDesignator,
            issuingIcaoCode,
            legs,
            passengerNameRecord,
            passengers,
            reservationSystem,
            restrictedTicket,
            ticketDeliveryMethod,
            ticketNumber,
            travelAgencyCode,
            travelAgencyInvoiceNumber,
            travelAgencyName,
            travelAgencyPlanName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Airline.class,
                "bookingCode", bookingCode,
                "isCardholderTraveling", isCardholderTraveling,
                "issuedAddress", issuedAddress,
                "issuedAt", issuedAt,
                "issuingCarrierCode", issuingCarrierCode,
                "issuingCarrierName", issuingCarrierName,
                "issuingIataDesignator", issuingIataDesignator,
                "issuingIcaoCode", issuingIcaoCode,
                "legs", legs,
                "passengerNameRecord", passengerNameRecord,
                "passengers", passengers,
                "reservationSystem", reservationSystem,
                "restrictedTicket", restrictedTicket,
                "ticketDeliveryMethod", ticketDeliveryMethod,
                "ticketNumber", ticketNumber,
                "travelAgencyCode", travelAgencyCode,
                "travelAgencyInvoiceNumber", travelAgencyInvoiceNumber,
                "travelAgencyName", travelAgencyName,
                "travelAgencyPlanName", travelAgencyPlanName);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> bookingCode = JsonNullable.undefined();
 
        private JsonNullable<Boolean> isCardholderTraveling = JsonNullable.undefined();
 
        private JsonNullable<String> issuedAddress = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> issuedAt = JsonNullable.undefined();
 
        private JsonNullable<String> issuingCarrierCode = JsonNullable.undefined();
 
        private JsonNullable<String> issuingCarrierName = JsonNullable.undefined();
 
        private JsonNullable<String> issuingIataDesignator = JsonNullable.undefined();
 
        private JsonNullable<String> issuingIcaoCode = JsonNullable.undefined();
 
        private JsonNullable<? extends List<AirlineLeg>> legs = JsonNullable.undefined();
 
        private JsonNullable<String> passengerNameRecord = JsonNullable.undefined();
 
        private JsonNullable<? extends List<AirlinePassenger>> passengers = JsonNullable.undefined();
 
        private JsonNullable<String> reservationSystem = JsonNullable.undefined();
 
        private JsonNullable<Boolean> restrictedTicket = JsonNullable.undefined();
 
        private JsonNullable<? extends TicketDeliveryMethod> ticketDeliveryMethod = JsonNullable.undefined();
 
        private JsonNullable<String> ticketNumber = JsonNullable.undefined();
 
        private JsonNullable<String> travelAgencyCode = JsonNullable.undefined();
 
        private JsonNullable<String> travelAgencyInvoiceNumber = JsonNullable.undefined();
 
        private JsonNullable<String> travelAgencyName = JsonNullable.undefined();
 
        private JsonNullable<String> travelAgencyPlanName = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the reservation in the global distribution system.
         */
        public Builder bookingCode(String bookingCode) {
            Utils.checkNotNull(bookingCode, "bookingCode");
            this.bookingCode = JsonNullable.of(bookingCode);
            return this;
        }

        /**
         * The unique identifier of the reservation in the global distribution system.
         */
        public Builder bookingCode(JsonNullable<String> bookingCode) {
            Utils.checkNotNull(bookingCode, "bookingCode");
            this.bookingCode = bookingCode;
            return this;
        }

        /**
         * Indicates whether the cardholder is traveling.
         */
        public Builder isCardholderTraveling(boolean isCardholderTraveling) {
            Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
            this.isCardholderTraveling = JsonNullable.of(isCardholderTraveling);
            return this;
        }

        /**
         * Indicates whether the cardholder is traveling.
         */
        public Builder isCardholderTraveling(JsonNullable<Boolean> isCardholderTraveling) {
            Utils.checkNotNull(isCardholderTraveling, "isCardholderTraveling");
            this.isCardholderTraveling = isCardholderTraveling;
            return this;
        }

        /**
         * The address of the place/agency that issued the ticket.
         */
        public Builder issuedAddress(String issuedAddress) {
            Utils.checkNotNull(issuedAddress, "issuedAddress");
            this.issuedAddress = JsonNullable.of(issuedAddress);
            return this;
        }

        /**
         * The address of the place/agency that issued the ticket.
         */
        public Builder issuedAddress(JsonNullable<String> issuedAddress) {
            Utils.checkNotNull(issuedAddress, "issuedAddress");
            this.issuedAddress = issuedAddress;
            return this;
        }

        /**
         * The date that the ticket was last issued in the airline reservation system.
         */
        public Builder issuedAt(OffsetDateTime issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = JsonNullable.of(issuedAt);
            return this;
        }

        /**
         * The date that the ticket was last issued in the airline reservation system.
         */
        public Builder issuedAt(JsonNullable<OffsetDateTime> issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = issuedAt;
            return this;
        }

        /**
         * For airline aggregators, three-character IATA code of the airline issuing the ticket.
         */
        public Builder issuingCarrierCode(String issuingCarrierCode) {
            Utils.checkNotNull(issuingCarrierCode, "issuingCarrierCode");
            this.issuingCarrierCode = JsonNullable.of(issuingCarrierCode);
            return this;
        }

        /**
         * For airline aggregators, three-character IATA code of the airline issuing the ticket.
         */
        public Builder issuingCarrierCode(JsonNullable<String> issuingCarrierCode) {
            Utils.checkNotNull(issuingCarrierCode, "issuingCarrierCode");
            this.issuingCarrierCode = issuingCarrierCode;
            return this;
        }

        /**
         * For airline aggregators, name of the airline issuing the ticket.
         */
        public Builder issuingCarrierName(String issuingCarrierName) {
            Utils.checkNotNull(issuingCarrierName, "issuingCarrierName");
            this.issuingCarrierName = JsonNullable.of(issuingCarrierName);
            return this;
        }

        /**
         * For airline aggregators, name of the airline issuing the ticket.
         */
        public Builder issuingCarrierName(JsonNullable<String> issuingCarrierName) {
            Utils.checkNotNull(issuingCarrierName, "issuingCarrierName");
            this.issuingCarrierName = issuingCarrierName;
            return this;
        }

        /**
         * For airline aggregators, two-character IATA code of the airline issuing the ticket.
         */
        public Builder issuingIataDesignator(String issuingIataDesignator) {
            Utils.checkNotNull(issuingIataDesignator, "issuingIataDesignator");
            this.issuingIataDesignator = JsonNullable.of(issuingIataDesignator);
            return this;
        }

        /**
         * For airline aggregators, two-character IATA code of the airline issuing the ticket.
         */
        public Builder issuingIataDesignator(JsonNullable<String> issuingIataDesignator) {
            Utils.checkNotNull(issuingIataDesignator, "issuingIataDesignator");
            this.issuingIataDesignator = issuingIataDesignator;
            return this;
        }

        /**
         * For airline aggregators, three-character ICAO code of the airline issuing the ticket.
         */
        public Builder issuingIcaoCode(String issuingIcaoCode) {
            Utils.checkNotNull(issuingIcaoCode, "issuingIcaoCode");
            this.issuingIcaoCode = JsonNullable.of(issuingIcaoCode);
            return this;
        }

        /**
         * For airline aggregators, three-character ICAO code of the airline issuing the ticket.
         */
        public Builder issuingIcaoCode(JsonNullable<String> issuingIcaoCode) {
            Utils.checkNotNull(issuingIcaoCode, "issuingIcaoCode");
            this.issuingIcaoCode = issuingIcaoCode;
            return this;
        }

        /**
         * An array of separate trip segments. Each leg contains detailed itinerary information.
         */
        public Builder legs(List<AirlineLeg> legs) {
            Utils.checkNotNull(legs, "legs");
            this.legs = JsonNullable.of(legs);
            return this;
        }

        /**
         * An array of separate trip segments. Each leg contains detailed itinerary information.
         */
        public Builder legs(JsonNullable<? extends List<AirlineLeg>> legs) {
            Utils.checkNotNull(legs, "legs");
            this.legs = legs;
            return this;
        }

        /**
         * The Passenger Name Record (PNR) in the airline reservation system.
         */
        public Builder passengerNameRecord(String passengerNameRecord) {
            Utils.checkNotNull(passengerNameRecord, "passengerNameRecord");
            this.passengerNameRecord = JsonNullable.of(passengerNameRecord);
            return this;
        }

        /**
         * The Passenger Name Record (PNR) in the airline reservation system.
         */
        public Builder passengerNameRecord(JsonNullable<String> passengerNameRecord) {
            Utils.checkNotNull(passengerNameRecord, "passengerNameRecord");
            this.passengerNameRecord = passengerNameRecord;
            return this;
        }

        /**
         * An array of the travelling passengers.
         */
        public Builder passengers(List<AirlinePassenger> passengers) {
            Utils.checkNotNull(passengers, "passengers");
            this.passengers = JsonNullable.of(passengers);
            return this;
        }

        /**
         * An array of the travelling passengers.
         */
        public Builder passengers(JsonNullable<? extends List<AirlinePassenger>> passengers) {
            Utils.checkNotNull(passengers, "passengers");
            this.passengers = passengers;
            return this;
        }

        /**
         * The name of the reservation system.
         */
        public Builder reservationSystem(String reservationSystem) {
            Utils.checkNotNull(reservationSystem, "reservationSystem");
            this.reservationSystem = JsonNullable.of(reservationSystem);
            return this;
        }

        /**
         * The name of the reservation system.
         */
        public Builder reservationSystem(JsonNullable<String> reservationSystem) {
            Utils.checkNotNull(reservationSystem, "reservationSystem");
            this.reservationSystem = reservationSystem;
            return this;
        }

        /**
         * Indicates whether the ticket is restricted (refundable).
         */
        public Builder restrictedTicket(boolean restrictedTicket) {
            Utils.checkNotNull(restrictedTicket, "restrictedTicket");
            this.restrictedTicket = JsonNullable.of(restrictedTicket);
            return this;
        }

        /**
         * Indicates whether the ticket is restricted (refundable).
         */
        public Builder restrictedTicket(JsonNullable<Boolean> restrictedTicket) {
            Utils.checkNotNull(restrictedTicket, "restrictedTicket");
            this.restrictedTicket = restrictedTicket;
            return this;
        }

        /**
         * The delivery method of the ticket.
         */
        public Builder ticketDeliveryMethod(TicketDeliveryMethod ticketDeliveryMethod) {
            Utils.checkNotNull(ticketDeliveryMethod, "ticketDeliveryMethod");
            this.ticketDeliveryMethod = JsonNullable.of(ticketDeliveryMethod);
            return this;
        }

        /**
         * The delivery method of the ticket.
         */
        public Builder ticketDeliveryMethod(JsonNullable<? extends TicketDeliveryMethod> ticketDeliveryMethod) {
            Utils.checkNotNull(ticketDeliveryMethod, "ticketDeliveryMethod");
            this.ticketDeliveryMethod = ticketDeliveryMethod;
            return this;
        }

        /**
         * The airline's unique ticket number.
         */
        public Builder ticketNumber(String ticketNumber) {
            Utils.checkNotNull(ticketNumber, "ticketNumber");
            this.ticketNumber = JsonNullable.of(ticketNumber);
            return this;
        }

        /**
         * The airline's unique ticket number.
         */
        public Builder ticketNumber(JsonNullable<String> ticketNumber) {
            Utils.checkNotNull(ticketNumber, "ticketNumber");
            this.ticketNumber = ticketNumber;
            return this;
        }

        /**
         * The IATA travel agency code.
         */
        public Builder travelAgencyCode(String travelAgencyCode) {
            Utils.checkNotNull(travelAgencyCode, "travelAgencyCode");
            this.travelAgencyCode = JsonNullable.of(travelAgencyCode);
            return this;
        }

        /**
         * The IATA travel agency code.
         */
        public Builder travelAgencyCode(JsonNullable<String> travelAgencyCode) {
            Utils.checkNotNull(travelAgencyCode, "travelAgencyCode");
            this.travelAgencyCode = travelAgencyCode;
            return this;
        }

        /**
         * The reference number of the invoice that was issued by the travel agency.
         */
        public Builder travelAgencyInvoiceNumber(String travelAgencyInvoiceNumber) {
            Utils.checkNotNull(travelAgencyInvoiceNumber, "travelAgencyInvoiceNumber");
            this.travelAgencyInvoiceNumber = JsonNullable.of(travelAgencyInvoiceNumber);
            return this;
        }

        /**
         * The reference number of the invoice that was issued by the travel agency.
         */
        public Builder travelAgencyInvoiceNumber(JsonNullable<String> travelAgencyInvoiceNumber) {
            Utils.checkNotNull(travelAgencyInvoiceNumber, "travelAgencyInvoiceNumber");
            this.travelAgencyInvoiceNumber = travelAgencyInvoiceNumber;
            return this;
        }

        /**
         * The name of the travel agency.
         */
        public Builder travelAgencyName(String travelAgencyName) {
            Utils.checkNotNull(travelAgencyName, "travelAgencyName");
            this.travelAgencyName = JsonNullable.of(travelAgencyName);
            return this;
        }

        /**
         * The name of the travel agency.
         */
        public Builder travelAgencyName(JsonNullable<String> travelAgencyName) {
            Utils.checkNotNull(travelAgencyName, "travelAgencyName");
            this.travelAgencyName = travelAgencyName;
            return this;
        }

        /**
         * The name of the travel agency plan.
         */
        public Builder travelAgencyPlanName(String travelAgencyPlanName) {
            Utils.checkNotNull(travelAgencyPlanName, "travelAgencyPlanName");
            this.travelAgencyPlanName = JsonNullable.of(travelAgencyPlanName);
            return this;
        }

        /**
         * The name of the travel agency plan.
         */
        public Builder travelAgencyPlanName(JsonNullable<String> travelAgencyPlanName) {
            Utils.checkNotNull(travelAgencyPlanName, "travelAgencyPlanName");
            this.travelAgencyPlanName = travelAgencyPlanName;
            return this;
        }
        
        public Airline build() {
            return new Airline(
                bookingCode,
                isCardholderTraveling,
                issuedAddress,
                issuedAt,
                issuingCarrierCode,
                issuingCarrierName,
                issuingIataDesignator,
                issuingIcaoCode,
                legs,
                passengerNameRecord,
                passengers,
                reservationSystem,
                restrictedTicket,
                ticketDeliveryMethod,
                ticketNumber,
                travelAgencyCode,
                travelAgencyInvoiceNumber,
                travelAgencyName,
                travelAgencyPlanName);
        }
    }
}
