/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Optional;


public class TransactionEvent {
    /**
     * Always `transaction-event`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the event.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The specific event name.
     */
    @JsonProperty("name")
    private Name name;

    /**
     * The date this event was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;


    @JsonProperty("context")
    private Map<String, Object> context;

    @JsonCreator
    public TransactionEvent(
            @JsonProperty("id") String id,
            @JsonProperty("name") Name name,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("context") Map<String, Object> context) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(createdAt, "createdAt");
        context = Utils.emptyMapIfNull(context);
        Utils.checkNotNull(context, "context");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.name = name;
        this.createdAt = createdAt;
        this.context = context;
    }

    /**
     * Always `transaction-event`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the event.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The specific event name.
     */
    @JsonIgnore
    public Name name() {
        return name;
    }

    /**
     * The date this event was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Map<String, Object> context() {
        return context;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID for the event.
     */
    public TransactionEvent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The specific event name.
     */
    public TransactionEvent withName(Name name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The date this event was created at.
     */
    public TransactionEvent withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public TransactionEvent withContext(Map<String, Object> context) {
        Utils.checkNotNull(context, "context");
        this.context = context;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionEvent other = (TransactionEvent) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.context, other.context);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, name,
            createdAt, context);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionEvent.class,
                "type", type,
                "id", id,
                "name", name,
                "createdAt", createdAt,
                "context", context);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Name name;

        private OffsetDateTime createdAt;

        private Map<String, Object> context;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID for the event.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The specific event name.
         */
        public Builder name(Name name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The date this event was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder context(Map<String, Object> context) {
            Utils.checkNotNull(context, "context");
            this.context = context;
            return this;
        }

        public TransactionEvent build() {

            return new TransactionEvent(
                id, name, createdAt,
                context);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"transaction-event\"",
                        new TypeReference<Optional<String>>() {});
    }
}
