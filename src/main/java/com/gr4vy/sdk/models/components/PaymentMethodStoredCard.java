/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class PaymentMethodStoredCard {
    /**
     * Set to `id` to use a stored card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<String> method;

    /**
     * The ID of the stored card to use.
     */
    @JsonProperty("id")
    private String id;

    @JsonCreator
    public PaymentMethodStoredCard(
            @JsonProperty("id") String id) {
        Utils.checkNotNull(id, "id");
        this.method = Builder._SINGLETON_VALUE_Method.value();
        this.id = id;
    }

    /**
     * Set to `id` to use a stored card.
     */
    @JsonIgnore
    public Optional<String> method() {
        return method;
    }

    /**
     * The ID of the stored card to use.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the stored card to use.
     */
    public PaymentMethodStoredCard withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentMethodStoredCard other = (PaymentMethodStoredCard) o;
        return 
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            method, id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentMethodStoredCard.class,
                "method", method,
                "id", id);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the stored card to use.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public PaymentMethodStoredCard build() {

            return new PaymentMethodStoredCard(
                id);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"id\"",
                        new TypeReference<Optional<String>>() {});
    }
}
