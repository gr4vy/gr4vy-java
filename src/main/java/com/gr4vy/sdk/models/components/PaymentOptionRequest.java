/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentOptionRequest {
    /**
     * The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    /**
     * The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<String> currency;

    /**
     * The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<Long> amount;

    /**
     * The locale used to determine the labels for each payment option.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private Optional<String> locale;

    /**
     * The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cart_items")
    private JsonNullable<? extends List<CartItem>> cartItems;

    @JsonCreator
    public PaymentOptionRequest(
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("currency") JsonNullable<String> currency,
            @JsonProperty("amount") JsonNullable<Long> amount,
            @JsonProperty("locale") Optional<String> locale,
            @JsonProperty("cart_items") JsonNullable<? extends List<CartItem>> cartItems) {
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(cartItems, "cartItems");
        this.metadata = metadata;
        this.country = country;
        this.currency = currency;
        this.amount = amount;
        this.locale = locale;
        this.cartItems = cartItems;
    }
    
    public PaymentOptionRequest() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    /**
     * The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    /**
     * The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @JsonIgnore
    public JsonNullable<Long> amount() {
        return amount;
    }

    /**
     * The locale used to determine the labels for each payment option.
     */
    @JsonIgnore
    public Optional<String> locale() {
        return locale;
    }

    /**
     * The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CartItem>> cartItems() {
        return (JsonNullable<List<CartItem>>) cartItems;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.
     */
    public PaymentOptionRequest withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.
     */
    public PaymentOptionRequest withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withAmount(JsonNullable<Long> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The locale used to determine the labels for each payment option.
     */
    public PaymentOptionRequest withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }


    /**
     * The locale used to determine the labels for each payment option.
     */
    public PaymentOptionRequest withLocale(Optional<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withCartItems(List<CartItem> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = JsonNullable.of(cartItems);
        return this;
    }

    /**
     * The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display.
     */
    public PaymentOptionRequest withCartItems(JsonNullable<? extends List<CartItem>> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = cartItems;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentOptionRequest other = (PaymentOptionRequest) o;
        return 
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.cartItems, other.cartItems);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            metadata, country, currency,
            amount, locale, cartItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentOptionRequest.class,
                "metadata", metadata,
                "country", country,
                "currency", currency,
                "amount", amount,
                "locale", locale,
                "cartItems", cartItems);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();

        private JsonNullable<String> country = JsonNullable.undefined();

        private JsonNullable<String> currency = JsonNullable.undefined();

        private JsonNullable<Long> amount = JsonNullable.undefined();

        private Optional<String> locale;

        private JsonNullable<? extends List<CartItem>> cartItems = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.
         */
        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.
         */
        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder amount(JsonNullable<Long> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The locale used to determine the labels for each payment option.
         */
        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        /**
         * The locale used to determine the labels for each payment option.
         */
        public Builder locale(Optional<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }


        /**
         * The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder cartItems(List<CartItem> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = JsonNullable.of(cartItems);
            return this;
        }

        /**
         * The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display.
         */
        public Builder cartItems(JsonNullable<? extends List<CartItem>> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = cartItems;
            return this;
        }

        public PaymentOptionRequest build() {
            if (locale == null) {
                locale = _SINGLETON_VALUE_Locale.value();
            }

            return new PaymentOptionRequest(
                metadata, country, currency,
                amount, locale, cartItems);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Locale =
                new LazySingletonValue<>(
                        "locale",
                        "\"en\"",
                        new TypeReference<Optional<String>>() {});
    }
}
