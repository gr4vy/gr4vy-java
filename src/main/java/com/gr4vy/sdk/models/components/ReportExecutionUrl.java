/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;

public class ReportExecutionUrl {

    /**
     * A signed URL to download the report execution file.
     */
    @JsonProperty("url")
    private String url;

    /**
     * The date and time when the download URL expires.
     */
    @JsonProperty("expires_at")
    private OffsetDateTime expiresAt;

    @JsonCreator
    public ReportExecutionUrl(
            @JsonProperty("url") String url,
            @JsonProperty("expires_at") OffsetDateTime expiresAt) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.url = url;
        this.expiresAt = expiresAt;
    }

    /**
     * A signed URL to download the report execution file.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * The date and time when the download URL expires.
     */
    @JsonIgnore
    public OffsetDateTime expiresAt() {
        return expiresAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A signed URL to download the report execution file.
     */
    public ReportExecutionUrl withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The date and time when the download URL expires.
     */
    public ReportExecutionUrl withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportExecutionUrl other = (ReportExecutionUrl) o;
        return 
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            url,
            expiresAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportExecutionUrl.class,
                "url", url,
                "expiresAt", expiresAt);
    }
    
    public final static class Builder {
 
        private String url;
 
        private OffsetDateTime expiresAt;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A signed URL to download the report execution file.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The date and time when the download URL expires.
         */
        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }
        
        public ReportExecutionUrl build() {
            return new ReportExecutionUrl(
                url,
                expiresAt);
        }
    }
}
