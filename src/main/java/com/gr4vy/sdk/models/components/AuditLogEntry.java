/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class AuditLogEntry {

    /**
     * Always `audit-log`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the audit log entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The ID of the merchant account this entry was created for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_account_id")
    private JsonNullable<String> merchantAccountId;

    @JsonProperty("resource")
    private AuditLogEntryResource resource;

    @JsonProperty("action")
    private AuditLogAction action;

    @JsonProperty("user")
    private AuditLogEntryUser user;

    /**
     * The date and time that the action was performed.
     */
    @JsonProperty("timestamp")
    private OffsetDateTime timestamp;

    @JsonCreator
    public AuditLogEntry(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("merchant_account_id") JsonNullable<String> merchantAccountId,
            @JsonProperty("resource") AuditLogEntryResource resource,
            @JsonProperty("action") AuditLogAction action,
            @JsonProperty("user") AuditLogEntryUser user,
            @JsonProperty("timestamp") OffsetDateTime timestamp) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(user, "user");
        Utils.checkNotNull(timestamp, "timestamp");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.resource = resource;
        this.action = action;
        this.user = user;
        this.timestamp = timestamp;
    }
    
    public AuditLogEntry(
            AuditLogEntryResource resource,
            AuditLogAction action,
            AuditLogEntryUser user,
            OffsetDateTime timestamp) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), resource, action, user, timestamp);
    }

    /**
     * Always `audit-log`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the audit log entry.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The ID of the merchant account this entry was created for.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public AuditLogEntryResource resource() {
        return resource;
    }

    @JsonIgnore
    public AuditLogAction action() {
        return action;
    }

    @JsonIgnore
    public AuditLogEntryUser user() {
        return user;
    }

    /**
     * The date and time that the action was performed.
     */
    @JsonIgnore
    public OffsetDateTime timestamp() {
        return timestamp;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the audit log entry.
     */
    public AuditLogEntry withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The ID for the audit log entry.
     */
    public AuditLogEntry withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the merchant account this entry was created for.
     */
    public AuditLogEntry withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account this entry was created for.
     */
    public AuditLogEntry withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public AuditLogEntry withResource(AuditLogEntryResource resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public AuditLogEntry withAction(AuditLogAction action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    public AuditLogEntry withUser(AuditLogEntryUser user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    /**
     * The date and time that the action was performed.
     */
    public AuditLogEntry withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuditLogEntry other = (AuditLogEntry) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.action, other.action) &&
            Objects.deepEquals(this.user, other.user) &&
            Objects.deepEquals(this.timestamp, other.timestamp);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            merchantAccountId,
            resource,
            action,
            user,
            timestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuditLogEntry.class,
                "type", type,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "resource", resource,
                "action", action,
                "user", user,
                "timestamp", timestamp);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
 
        private AuditLogEntryResource resource;
 
        private AuditLogAction action;
 
        private AuditLogEntryUser user;
 
        private OffsetDateTime timestamp;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the audit log entry.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID for the audit log entry.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID of the merchant account this entry was created for.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account this entry was created for.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public Builder resource(AuditLogEntryResource resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        public Builder action(AuditLogAction action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }

        public Builder user(AuditLogEntryUser user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }

        /**
         * The date and time that the action was performed.
         */
        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }
        
        public AuditLogEntry build() {
            return new AuditLogEntry(
                id,
                merchantAccountId,
                resource,
                action,
                user,
                timestamp);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"audit-log\"",
                        new TypeReference<Optional<String>>() {});
    }
}
