/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AccountUpdaterJob {

    /**
     * Always `account-updater-job`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the account updater job.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the merchant account this job belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * A list of the payment methods that have been scheduled for an update.
     */
    @JsonProperty("inquiries")
    private List<AccountUpdaterInquirySummary> inquiries;

    /**
     * The date and time when this payment method was first created in our system.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time when this payment method was last updated in our system.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public AccountUpdaterJob(
            @JsonProperty("id") String id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("inquiries") List<AccountUpdaterInquirySummary> inquiries,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(inquiries, "inquiries");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.inquiries = inquiries;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    /**
     * Always `account-updater-job`
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the account updater job.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The ID of the merchant account this job belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * A list of the payment methods that have been scheduled for an update.
     */
    @JsonIgnore
    public List<AccountUpdaterInquirySummary> inquiries() {
        return inquiries;
    }

    /**
     * The date and time when this payment method was first created in our system.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time when this payment method was last updated in our system.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the account updater job.
     */
    public AccountUpdaterJob withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the merchant account this job belongs to.
     */
    public AccountUpdaterJob withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * A list of the payment methods that have been scheduled for an update.
     */
    public AccountUpdaterJob withInquiries(List<AccountUpdaterInquirySummary> inquiries) {
        Utils.checkNotNull(inquiries, "inquiries");
        this.inquiries = inquiries;
        return this;
    }

    /**
     * The date and time when this payment method was first created in our system.
     */
    public AccountUpdaterJob withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when this payment method was last updated in our system.
     */
    public AccountUpdaterJob withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountUpdaterJob other = (AccountUpdaterJob) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.inquiries, other.inquiries) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            merchantAccountId,
            inquiries,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountUpdaterJob.class,
                "type", type,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "inquiries", inquiries,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String merchantAccountId;
 
        private List<AccountUpdaterInquirySummary> inquiries;
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the account updater job.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID of the merchant account this job belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        /**
         * A list of the payment methods that have been scheduled for an update.
         */
        public Builder inquiries(List<AccountUpdaterInquirySummary> inquiries) {
            Utils.checkNotNull(inquiries, "inquiries");
            this.inquiries = inquiries;
            return this;
        }

        /**
         * The date and time when this payment method was first created in our system.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when this payment method was last updated in our system.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public AccountUpdaterJob build() {
            return new AccountUpdaterJob(
                id,
                merchantAccountId,
                inquiries,
                createdAt,
                updatedAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"account-updater-job\"",
                        new TypeReference<Optional<String>>() {});
    }
}
