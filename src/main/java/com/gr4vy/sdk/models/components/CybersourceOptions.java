/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class CybersourceOptions {
    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource, and this overrides the connector configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta_key_merchant_id")
    private JsonNullable<String> metaKeyMerchantId;

    /**
     * A list of merchant defined data to be passed to the Cybersource. Each key needs to be a numeric
     * string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_defined_information")
    private JsonNullable<? extends Map<String, String>> merchantDefinedInformation;

    /**
     * The shipping method for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ship_to_method")
    private JsonNullable<String> shipToMethod;

    @JsonCreator
    public CybersourceOptions(
            @JsonProperty("meta_key_merchant_id") JsonNullable<String> metaKeyMerchantId,
            @JsonProperty("merchant_defined_information") JsonNullable<? extends Map<String, String>> merchantDefinedInformation,
            @JsonProperty("ship_to_method") JsonNullable<String> shipToMethod) {
        Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
        Utils.checkNotNull(merchantDefinedInformation, "merchantDefinedInformation");
        Utils.checkNotNull(shipToMethod, "shipToMethod");
        this.metaKeyMerchantId = metaKeyMerchantId;
        this.merchantDefinedInformation = merchantDefinedInformation;
        this.shipToMethod = shipToMethod;
    }
    
    public CybersourceOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource, and this overrides the connector configuration.
     */
    @JsonIgnore
    public JsonNullable<String> metaKeyMerchantId() {
        return metaKeyMerchantId;
    }

    /**
     * A list of merchant defined data to be passed to the Cybersource. Each key needs to be a numeric
     * string.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> merchantDefinedInformation() {
        return (JsonNullable<Map<String, String>>) merchantDefinedInformation;
    }

    /**
     * The shipping method for this transaction.
     */
    @JsonIgnore
    public JsonNullable<String> shipToMethod() {
        return shipToMethod;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource, and this overrides the connector configuration.
     */
    public CybersourceOptions withMetaKeyMerchantId(String metaKeyMerchantId) {
        Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
        this.metaKeyMerchantId = JsonNullable.of(metaKeyMerchantId);
        return this;
    }

    /**
     * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
     * Cybersource, and this overrides the connector configuration.
     */
    public CybersourceOptions withMetaKeyMerchantId(JsonNullable<String> metaKeyMerchantId) {
        Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
        this.metaKeyMerchantId = metaKeyMerchantId;
        return this;
    }

    /**
     * A list of merchant defined data to be passed to the Cybersource. Each key needs to be a numeric
     * string.
     */
    public CybersourceOptions withMerchantDefinedInformation(Map<String, String> merchantDefinedInformation) {
        Utils.checkNotNull(merchantDefinedInformation, "merchantDefinedInformation");
        this.merchantDefinedInformation = JsonNullable.of(merchantDefinedInformation);
        return this;
    }

    /**
     * A list of merchant defined data to be passed to the Cybersource. Each key needs to be a numeric
     * string.
     */
    public CybersourceOptions withMerchantDefinedInformation(JsonNullable<? extends Map<String, String>> merchantDefinedInformation) {
        Utils.checkNotNull(merchantDefinedInformation, "merchantDefinedInformation");
        this.merchantDefinedInformation = merchantDefinedInformation;
        return this;
    }

    /**
     * The shipping method for this transaction.
     */
    public CybersourceOptions withShipToMethod(String shipToMethod) {
        Utils.checkNotNull(shipToMethod, "shipToMethod");
        this.shipToMethod = JsonNullable.of(shipToMethod);
        return this;
    }

    /**
     * The shipping method for this transaction.
     */
    public CybersourceOptions withShipToMethod(JsonNullable<String> shipToMethod) {
        Utils.checkNotNull(shipToMethod, "shipToMethod");
        this.shipToMethod = shipToMethod;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CybersourceOptions other = (CybersourceOptions) o;
        return 
            Utils.enhancedDeepEquals(this.metaKeyMerchantId, other.metaKeyMerchantId) &&
            Utils.enhancedDeepEquals(this.merchantDefinedInformation, other.merchantDefinedInformation) &&
            Utils.enhancedDeepEquals(this.shipToMethod, other.shipToMethod);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            metaKeyMerchantId, merchantDefinedInformation, shipToMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CybersourceOptions.class,
                "metaKeyMerchantId", metaKeyMerchantId,
                "merchantDefinedInformation", merchantDefinedInformation,
                "shipToMethod", shipToMethod);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> metaKeyMerchantId = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, String>> merchantDefinedInformation = JsonNullable.undefined();

        private JsonNullable<String> shipToMethod = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
         * Cybersource, and this overrides the connector configuration.
         */
        public Builder metaKeyMerchantId(String metaKeyMerchantId) {
            Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
            this.metaKeyMerchantId = JsonNullable.of(metaKeyMerchantId);
            return this;
        }

        /**
         * The merchant ID to use for this transaction. This requires a meta key to be set up for use with
         * Cybersource, and this overrides the connector configuration.
         */
        public Builder metaKeyMerchantId(JsonNullable<String> metaKeyMerchantId) {
            Utils.checkNotNull(metaKeyMerchantId, "metaKeyMerchantId");
            this.metaKeyMerchantId = metaKeyMerchantId;
            return this;
        }


        /**
         * A list of merchant defined data to be passed to the Cybersource. Each key needs to be a numeric
         * string.
         */
        public Builder merchantDefinedInformation(Map<String, String> merchantDefinedInformation) {
            Utils.checkNotNull(merchantDefinedInformation, "merchantDefinedInformation");
            this.merchantDefinedInformation = JsonNullable.of(merchantDefinedInformation);
            return this;
        }

        /**
         * A list of merchant defined data to be passed to the Cybersource. Each key needs to be a numeric
         * string.
         */
        public Builder merchantDefinedInformation(JsonNullable<? extends Map<String, String>> merchantDefinedInformation) {
            Utils.checkNotNull(merchantDefinedInformation, "merchantDefinedInformation");
            this.merchantDefinedInformation = merchantDefinedInformation;
            return this;
        }


        /**
         * The shipping method for this transaction.
         */
        public Builder shipToMethod(String shipToMethod) {
            Utils.checkNotNull(shipToMethod, "shipToMethod");
            this.shipToMethod = JsonNullable.of(shipToMethod);
            return this;
        }

        /**
         * The shipping method for this transaction.
         */
        public Builder shipToMethod(JsonNullable<String> shipToMethod) {
            Utils.checkNotNull(shipToMethod, "shipToMethod");
            this.shipToMethod = shipToMethod;
            return this;
        }

        public CybersourceOptions build() {

            return new CybersourceOptions(
                metaKeyMerchantId, merchantDefinedInformation, shipToMethod);
        }

    }
}
