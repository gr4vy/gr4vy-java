/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class GiftCardRedemption {

    /**
     * Always `gift-card-redemption`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the gift card redemption.
     */
    @JsonProperty("id")
    private String id;

    @JsonProperty("status")
    private GiftCardRedemptionStatus status;

    /**
     * The amount redeemed for this gift card.
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The amount refunded for this gift card. This can not be larger than `amount`.
     */
    @JsonProperty("refunded_amount")
    private long refundedAmount;

    /**
     * The gift card service's unique ID for the redemption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gift_card_service_redemption_id")
    private JsonNullable<String> giftCardServiceRedemptionId;

    /**
     * If this gift card redemption resulted in an error, this will contain the internal code for the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_code")
    private JsonNullable<? extends GiftCardErrorCode> errorCode;

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_error_code")
    private JsonNullable<String> rawErrorCode;

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_error_message")
    private JsonNullable<String> rawErrorMessage;

    @JsonProperty("gift_card")
    private TransactionGiftCard giftCard;

    @JsonCreator
    public GiftCardRedemption(
            @JsonProperty("id") String id,
            @JsonProperty("status") GiftCardRedemptionStatus status,
            @JsonProperty("amount") long amount,
            @JsonProperty("refunded_amount") long refundedAmount,
            @JsonProperty("gift_card_service_redemption_id") JsonNullable<String> giftCardServiceRedemptionId,
            @JsonProperty("error_code") JsonNullable<? extends GiftCardErrorCode> errorCode,
            @JsonProperty("raw_error_code") JsonNullable<String> rawErrorCode,
            @JsonProperty("raw_error_message") JsonNullable<String> rawErrorMessage,
            @JsonProperty("gift_card") TransactionGiftCard giftCard) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        Utils.checkNotNull(giftCardServiceRedemptionId, "giftCardServiceRedemptionId");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(rawErrorCode, "rawErrorCode");
        Utils.checkNotNull(rawErrorMessage, "rawErrorMessage");
        Utils.checkNotNull(giftCard, "giftCard");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.status = status;
        this.amount = amount;
        this.refundedAmount = refundedAmount;
        this.giftCardServiceRedemptionId = giftCardServiceRedemptionId;
        this.errorCode = errorCode;
        this.rawErrorCode = rawErrorCode;
        this.rawErrorMessage = rawErrorMessage;
        this.giftCard = giftCard;
    }
    
    public GiftCardRedemption(
            String id,
            GiftCardRedemptionStatus status,
            long amount,
            long refundedAmount,
            TransactionGiftCard giftCard) {
        this(id, status, amount, refundedAmount, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), giftCard);
    }

    /**
     * Always `gift-card-redemption`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the gift card redemption.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public GiftCardRedemptionStatus status() {
        return status;
    }

    /**
     * The amount redeemed for this gift card.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The amount refunded for this gift card. This can not be larger than `amount`.
     */
    @JsonIgnore
    public long refundedAmount() {
        return refundedAmount;
    }

    /**
     * The gift card service's unique ID for the redemption.
     */
    @JsonIgnore
    public JsonNullable<String> giftCardServiceRedemptionId() {
        return giftCardServiceRedemptionId;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the internal code for the error.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GiftCardErrorCode> errorCode() {
        return (JsonNullable<GiftCardErrorCode>) errorCode;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
     */
    @JsonIgnore
    public JsonNullable<String> rawErrorCode() {
        return rawErrorCode;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
     */
    @JsonIgnore
    public JsonNullable<String> rawErrorMessage() {
        return rawErrorMessage;
    }

    @JsonIgnore
    public TransactionGiftCard giftCard() {
        return giftCard;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the gift card redemption.
     */
    public GiftCardRedemption withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GiftCardRedemption withStatus(GiftCardRedemptionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The amount redeemed for this gift card.
     */
    public GiftCardRedemption withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The amount refunded for this gift card. This can not be larger than `amount`.
     */
    public GiftCardRedemption withRefundedAmount(long refundedAmount) {
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        this.refundedAmount = refundedAmount;
        return this;
    }

    /**
     * The gift card service's unique ID for the redemption.
     */
    public GiftCardRedemption withGiftCardServiceRedemptionId(String giftCardServiceRedemptionId) {
        Utils.checkNotNull(giftCardServiceRedemptionId, "giftCardServiceRedemptionId");
        this.giftCardServiceRedemptionId = JsonNullable.of(giftCardServiceRedemptionId);
        return this;
    }

    /**
     * The gift card service's unique ID for the redemption.
     */
    public GiftCardRedemption withGiftCardServiceRedemptionId(JsonNullable<String> giftCardServiceRedemptionId) {
        Utils.checkNotNull(giftCardServiceRedemptionId, "giftCardServiceRedemptionId");
        this.giftCardServiceRedemptionId = giftCardServiceRedemptionId;
        return this;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the internal code for the error.
     */
    public GiftCardRedemption withErrorCode(GiftCardErrorCode errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = JsonNullable.of(errorCode);
        return this;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the internal code for the error.
     */
    public GiftCardRedemption withErrorCode(JsonNullable<? extends GiftCardErrorCode> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
     */
    public GiftCardRedemption withRawErrorCode(String rawErrorCode) {
        Utils.checkNotNull(rawErrorCode, "rawErrorCode");
        this.rawErrorCode = JsonNullable.of(rawErrorCode);
        return this;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
     */
    public GiftCardRedemption withRawErrorCode(JsonNullable<String> rawErrorCode) {
        Utils.checkNotNull(rawErrorCode, "rawErrorCode");
        this.rawErrorCode = rawErrorCode;
        return this;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
     */
    public GiftCardRedemption withRawErrorMessage(String rawErrorMessage) {
        Utils.checkNotNull(rawErrorMessage, "rawErrorMessage");
        this.rawErrorMessage = JsonNullable.of(rawErrorMessage);
        return this;
    }

    /**
     * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
     */
    public GiftCardRedemption withRawErrorMessage(JsonNullable<String> rawErrorMessage) {
        Utils.checkNotNull(rawErrorMessage, "rawErrorMessage");
        this.rawErrorMessage = rawErrorMessage;
        return this;
    }

    public GiftCardRedemption withGiftCard(TransactionGiftCard giftCard) {
        Utils.checkNotNull(giftCard, "giftCard");
        this.giftCard = giftCard;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GiftCardRedemption other = (GiftCardRedemption) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.refundedAmount, other.refundedAmount) &&
            Utils.enhancedDeepEquals(this.giftCardServiceRedemptionId, other.giftCardServiceRedemptionId) &&
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode) &&
            Utils.enhancedDeepEquals(this.rawErrorCode, other.rawErrorCode) &&
            Utils.enhancedDeepEquals(this.rawErrorMessage, other.rawErrorMessage) &&
            Utils.enhancedDeepEquals(this.giftCard, other.giftCard);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            id,
            status,
            amount,
            refundedAmount,
            giftCardServiceRedemptionId,
            errorCode,
            rawErrorCode,
            rawErrorMessage,
            giftCard);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GiftCardRedemption.class,
                "type", type,
                "id", id,
                "status", status,
                "amount", amount,
                "refundedAmount", refundedAmount,
                "giftCardServiceRedemptionId", giftCardServiceRedemptionId,
                "errorCode", errorCode,
                "rawErrorCode", rawErrorCode,
                "rawErrorMessage", rawErrorMessage,
                "giftCard", giftCard);
    }
    
    public final static class Builder {
 
        private String id;
 
        private GiftCardRedemptionStatus status;
 
        private Long amount;
 
        private Long refundedAmount;
 
        private JsonNullable<String> giftCardServiceRedemptionId = JsonNullable.undefined();
 
        private JsonNullable<? extends GiftCardErrorCode> errorCode = JsonNullable.undefined();
 
        private JsonNullable<String> rawErrorCode = JsonNullable.undefined();
 
        private JsonNullable<String> rawErrorMessage = JsonNullable.undefined();
 
        private TransactionGiftCard giftCard;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the gift card redemption.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder status(GiftCardRedemptionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The amount redeemed for this gift card.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The amount refunded for this gift card. This can not be larger than `amount`.
         */
        public Builder refundedAmount(long refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = refundedAmount;
            return this;
        }

        /**
         * The gift card service's unique ID for the redemption.
         */
        public Builder giftCardServiceRedemptionId(String giftCardServiceRedemptionId) {
            Utils.checkNotNull(giftCardServiceRedemptionId, "giftCardServiceRedemptionId");
            this.giftCardServiceRedemptionId = JsonNullable.of(giftCardServiceRedemptionId);
            return this;
        }

        /**
         * The gift card service's unique ID for the redemption.
         */
        public Builder giftCardServiceRedemptionId(JsonNullable<String> giftCardServiceRedemptionId) {
            Utils.checkNotNull(giftCardServiceRedemptionId, "giftCardServiceRedemptionId");
            this.giftCardServiceRedemptionId = giftCardServiceRedemptionId;
            return this;
        }

        /**
         * If this gift card redemption resulted in an error, this will contain the internal code for the error.
         */
        public Builder errorCode(GiftCardErrorCode errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = JsonNullable.of(errorCode);
            return this;
        }

        /**
         * If this gift card redemption resulted in an error, this will contain the internal code for the error.
         */
        public Builder errorCode(JsonNullable<? extends GiftCardErrorCode> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }

        /**
         * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
         */
        public Builder rawErrorCode(String rawErrorCode) {
            Utils.checkNotNull(rawErrorCode, "rawErrorCode");
            this.rawErrorCode = JsonNullable.of(rawErrorCode);
            return this;
        }

        /**
         * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
         */
        public Builder rawErrorCode(JsonNullable<String> rawErrorCode) {
            Utils.checkNotNull(rawErrorCode, "rawErrorCode");
            this.rawErrorCode = rawErrorCode;
            return this;
        }

        /**
         * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
         */
        public Builder rawErrorMessage(String rawErrorMessage) {
            Utils.checkNotNull(rawErrorMessage, "rawErrorMessage");
            this.rawErrorMessage = JsonNullable.of(rawErrorMessage);
            return this;
        }

        /**
         * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
         */
        public Builder rawErrorMessage(JsonNullable<String> rawErrorMessage) {
            Utils.checkNotNull(rawErrorMessage, "rawErrorMessage");
            this.rawErrorMessage = rawErrorMessage;
            return this;
        }

        public Builder giftCard(TransactionGiftCard giftCard) {
            Utils.checkNotNull(giftCard, "giftCard");
            this.giftCard = giftCard;
            return this;
        }
        
        public GiftCardRedemption build() {
            return new GiftCardRedemption(
                id,
                status,
                amount,
                refundedAmount,
                giftCardServiceRedemptionId,
                errorCode,
                rawErrorCode,
                rawErrorMessage,
                giftCard);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"gift-card-redemption\"",
                        new TypeReference<Optional<String>>() {});
    }
}
