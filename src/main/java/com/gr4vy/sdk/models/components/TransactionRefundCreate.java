/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class TransactionRefundCreate {

    /**
     * The amount requested to refund. If omitted, a full refund will be requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<Long> amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_type")
    private Optional<? extends RefundTargetType> targetType;

    /**
     * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_id")
    private JsonNullable<String> targetId;

    /**
     * An optional reason to attach extra context to the refund request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private JsonNullable<String> reason;

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    @JsonCreator
    public TransactionRefundCreate(
            @JsonProperty("amount") JsonNullable<Long> amount,
            @JsonProperty("target_type") Optional<? extends RefundTargetType> targetType,
            @JsonProperty("target_id") JsonNullable<String> targetId,
            @JsonProperty("reason") JsonNullable<String> reason,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(targetType, "targetType");
        Utils.checkNotNull(targetId, "targetId");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.amount = amount;
        this.targetType = targetType;
        this.targetId = targetId;
        this.reason = reason;
        this.externalIdentifier = externalIdentifier;
    }
    
    public TransactionRefundCreate() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The amount requested to refund. If omitted, a full refund will be requested.
     */
    @JsonIgnore
    public JsonNullable<Long> amount() {
        return amount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RefundTargetType> targetType() {
        return (Optional<RefundTargetType>) targetType;
    }

    /**
     * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
     */
    @JsonIgnore
    public JsonNullable<String> targetId() {
        return targetId;
    }

    /**
     * An optional reason to attach extra context to the refund request.
     */
    @JsonIgnore
    public JsonNullable<String> reason() {
        return reason;
    }

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The amount requested to refund. If omitted, a full refund will be requested.
     */
    public TransactionRefundCreate withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount requested to refund. If omitted, a full refund will be requested.
     */
    public TransactionRefundCreate withAmount(JsonNullable<Long> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public TransactionRefundCreate withTargetType(RefundTargetType targetType) {
        Utils.checkNotNull(targetType, "targetType");
        this.targetType = Optional.ofNullable(targetType);
        return this;
    }

    public TransactionRefundCreate withTargetType(Optional<? extends RefundTargetType> targetType) {
        Utils.checkNotNull(targetType, "targetType");
        this.targetType = targetType;
        return this;
    }

    /**
     * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
     */
    public TransactionRefundCreate withTargetId(String targetId) {
        Utils.checkNotNull(targetId, "targetId");
        this.targetId = JsonNullable.of(targetId);
        return this;
    }

    /**
     * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
     */
    public TransactionRefundCreate withTargetId(JsonNullable<String> targetId) {
        Utils.checkNotNull(targetId, "targetId");
        this.targetId = targetId;
        return this;
    }

    /**
     * An optional reason to attach extra context to the refund request.
     */
    public TransactionRefundCreate withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = JsonNullable.of(reason);
        return this;
    }

    /**
     * An optional reason to attach extra context to the refund request.
     */
    public TransactionRefundCreate withReason(JsonNullable<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    public TransactionRefundCreate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the refund against your own records.
     */
    public TransactionRefundCreate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionRefundCreate other = (TransactionRefundCreate) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.targetType, other.targetType) &&
            Objects.deepEquals(this.targetId, other.targetId) &&
            Objects.deepEquals(this.reason, other.reason) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            targetType,
            targetId,
            reason,
            externalIdentifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionRefundCreate.class,
                "amount", amount,
                "targetType", targetType,
                "targetId", targetId,
                "reason", reason,
                "externalIdentifier", externalIdentifier);
    }
    
    public final static class Builder {
 
        private JsonNullable<Long> amount = JsonNullable.undefined();
 
        private Optional<? extends RefundTargetType> targetType = Optional.empty();
 
        private JsonNullable<String> targetId = JsonNullable.undefined();
 
        private JsonNullable<String> reason = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The amount requested to refund. If omitted, a full refund will be requested.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount requested to refund. If omitted, a full refund will be requested.
         */
        public Builder amount(JsonNullable<Long> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder targetType(RefundTargetType targetType) {
            Utils.checkNotNull(targetType, "targetType");
            this.targetType = Optional.ofNullable(targetType);
            return this;
        }

        public Builder targetType(Optional<? extends RefundTargetType> targetType) {
            Utils.checkNotNull(targetType, "targetType");
            this.targetType = targetType;
            return this;
        }

        /**
         * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
         */
        public Builder targetId(String targetId) {
            Utils.checkNotNull(targetId, "targetId");
            this.targetId = JsonNullable.of(targetId);
            return this;
        }

        /**
         * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
         */
        public Builder targetId(JsonNullable<String> targetId) {
            Utils.checkNotNull(targetId, "targetId");
            this.targetId = targetId;
            return this;
        }

        /**
         * An optional reason to attach extra context to the refund request.
         */
        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = JsonNullable.of(reason);
            return this;
        }

        /**
         * An optional reason to attach extra context to the refund request.
         */
        public Builder reason(JsonNullable<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        /**
         * An external identifier that can be used to match the refund against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the refund against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }
        
        public TransactionRefundCreate build() {
            return new TransactionRefundCreate(
                amount,
                targetType,
                targetId,
                reason,
                externalIdentifier);
        }
    }
}
