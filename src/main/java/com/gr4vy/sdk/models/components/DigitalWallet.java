/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class DigitalWallet {

    /**
     * Always `digital-wallet`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the digital wallet.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the merchant account this digital wallet belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    @JsonProperty("provider")
    private DigitalWalletProvider provider;

    /**
     * The name of the merchant the digital wallet is registered to.
     */
    @JsonProperty("merchant_name")
    private String merchantName;

    /**
     * The consumer facing name of the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_display_name")
    private JsonNullable<String> merchantDisplayName;

    /**
     * The main URL of the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_url")
    private JsonNullable<String> merchantUrl;

    /**
     * The country code where the merchant is registered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_country_code")
    private JsonNullable<String> merchantCountryCode;

    /**
     * The list of domain names that a digital wallet can be used on (deprecated).
     */
    @JsonProperty("domain_names")
    private List<String> domainNames;

    /**
     * The number of active custom certificates registered for this digital wallet (Apple Pay only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_certificate_count")
    private Optional<Long> activeCertificateCount;

    /**
     * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_certificate_count")
    private Optional<Long> pendingCertificateCount;

    /**
     * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expired_certificate_count")
    private Optional<Long> expiredCertificateCount;

    /**
     * Custom attributes for some digital wallets. Currently only used by Click to Pay.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private JsonNullable<? extends Map<String, Object>> fields;

    /**
     * The date this buyer was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date this buyer was last updated at.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public DigitalWallet(
            @JsonProperty("id") String id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("provider") DigitalWalletProvider provider,
            @JsonProperty("merchant_name") String merchantName,
            @JsonProperty("merchant_display_name") JsonNullable<String> merchantDisplayName,
            @JsonProperty("merchant_url") JsonNullable<String> merchantUrl,
            @JsonProperty("merchant_country_code") JsonNullable<String> merchantCountryCode,
            @JsonProperty("domain_names") List<String> domainNames,
            @JsonProperty("active_certificate_count") Optional<Long> activeCertificateCount,
            @JsonProperty("pending_certificate_count") Optional<Long> pendingCertificateCount,
            @JsonProperty("expired_certificate_count") Optional<Long> expiredCertificateCount,
            @JsonProperty("fields") JsonNullable<? extends Map<String, Object>> fields,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(merchantName, "merchantName");
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        Utils.checkNotNull(domainNames, "domainNames");
        Utils.checkNotNull(activeCertificateCount, "activeCertificateCount");
        Utils.checkNotNull(pendingCertificateCount, "pendingCertificateCount");
        Utils.checkNotNull(expiredCertificateCount, "expiredCertificateCount");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.provider = provider;
        this.merchantName = merchantName;
        this.merchantDisplayName = merchantDisplayName;
        this.merchantUrl = merchantUrl;
        this.merchantCountryCode = merchantCountryCode;
        this.domainNames = domainNames;
        this.activeCertificateCount = activeCertificateCount;
        this.pendingCertificateCount = pendingCertificateCount;
        this.expiredCertificateCount = expiredCertificateCount;
        this.fields = fields;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public DigitalWallet(
            String id,
            String merchantAccountId,
            DigitalWalletProvider provider,
            String merchantName,
            List<String> domainNames,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(id, merchantAccountId, provider, merchantName, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), domainNames, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), createdAt, updatedAt);
    }

    /**
     * Always `digital-wallet`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the digital wallet.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The ID of the merchant account this digital wallet belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public DigitalWalletProvider provider() {
        return provider;
    }

    /**
     * The name of the merchant the digital wallet is registered to.
     */
    @JsonIgnore
    public String merchantName() {
        return merchantName;
    }

    /**
     * The consumer facing name of the merchant.
     */
    @JsonIgnore
    public JsonNullable<String> merchantDisplayName() {
        return merchantDisplayName;
    }

    /**
     * The main URL of the merchant.
     */
    @JsonIgnore
    public JsonNullable<String> merchantUrl() {
        return merchantUrl;
    }

    /**
     * The country code where the merchant is registered.
     */
    @JsonIgnore
    public JsonNullable<String> merchantCountryCode() {
        return merchantCountryCode;
    }

    /**
     * The list of domain names that a digital wallet can be used on (deprecated).
     */
    @JsonIgnore
    public List<String> domainNames() {
        return domainNames;
    }

    /**
     * The number of active custom certificates registered for this digital wallet (Apple Pay only).
     */
    @JsonIgnore
    public Optional<Long> activeCertificateCount() {
        return activeCertificateCount;
    }

    /**
     * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
     */
    @JsonIgnore
    public Optional<Long> pendingCertificateCount() {
        return pendingCertificateCount;
    }

    /**
     * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
     */
    @JsonIgnore
    public Optional<Long> expiredCertificateCount() {
        return expiredCertificateCount;
    }

    /**
     * Custom attributes for some digital wallets. Currently only used by Click to Pay.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> fields() {
        return (JsonNullable<Map<String, Object>>) fields;
    }

    /**
     * The date this buyer was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date this buyer was last updated at.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the digital wallet.
     */
    public DigitalWallet withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the merchant account this digital wallet belongs to.
     */
    public DigitalWallet withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public DigitalWallet withProvider(DigitalWalletProvider provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * The name of the merchant the digital wallet is registered to.
     */
    public DigitalWallet withMerchantName(String merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = merchantName;
        return this;
    }

    /**
     * The consumer facing name of the merchant.
     */
    public DigitalWallet withMerchantDisplayName(String merchantDisplayName) {
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        this.merchantDisplayName = JsonNullable.of(merchantDisplayName);
        return this;
    }

    /**
     * The consumer facing name of the merchant.
     */
    public DigitalWallet withMerchantDisplayName(JsonNullable<String> merchantDisplayName) {
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        this.merchantDisplayName = merchantDisplayName;
        return this;
    }

    /**
     * The main URL of the merchant.
     */
    public DigitalWallet withMerchantUrl(String merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = JsonNullable.of(merchantUrl);
        return this;
    }

    /**
     * The main URL of the merchant.
     */
    public DigitalWallet withMerchantUrl(JsonNullable<String> merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = merchantUrl;
        return this;
    }

    /**
     * The country code where the merchant is registered.
     */
    public DigitalWallet withMerchantCountryCode(String merchantCountryCode) {
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        this.merchantCountryCode = JsonNullable.of(merchantCountryCode);
        return this;
    }

    /**
     * The country code where the merchant is registered.
     */
    public DigitalWallet withMerchantCountryCode(JsonNullable<String> merchantCountryCode) {
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        this.merchantCountryCode = merchantCountryCode;
        return this;
    }

    /**
     * The list of domain names that a digital wallet can be used on (deprecated).
     */
    public DigitalWallet withDomainNames(List<String> domainNames) {
        Utils.checkNotNull(domainNames, "domainNames");
        this.domainNames = domainNames;
        return this;
    }

    /**
     * The number of active custom certificates registered for this digital wallet (Apple Pay only).
     */
    public DigitalWallet withActiveCertificateCount(long activeCertificateCount) {
        Utils.checkNotNull(activeCertificateCount, "activeCertificateCount");
        this.activeCertificateCount = Optional.ofNullable(activeCertificateCount);
        return this;
    }

    /**
     * The number of active custom certificates registered for this digital wallet (Apple Pay only).
     */
    public DigitalWallet withActiveCertificateCount(Optional<Long> activeCertificateCount) {
        Utils.checkNotNull(activeCertificateCount, "activeCertificateCount");
        this.activeCertificateCount = activeCertificateCount;
        return this;
    }

    /**
     * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
     */
    public DigitalWallet withPendingCertificateCount(long pendingCertificateCount) {
        Utils.checkNotNull(pendingCertificateCount, "pendingCertificateCount");
        this.pendingCertificateCount = Optional.ofNullable(pendingCertificateCount);
        return this;
    }

    /**
     * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
     */
    public DigitalWallet withPendingCertificateCount(Optional<Long> pendingCertificateCount) {
        Utils.checkNotNull(pendingCertificateCount, "pendingCertificateCount");
        this.pendingCertificateCount = pendingCertificateCount;
        return this;
    }

    /**
     * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
     */
    public DigitalWallet withExpiredCertificateCount(long expiredCertificateCount) {
        Utils.checkNotNull(expiredCertificateCount, "expiredCertificateCount");
        this.expiredCertificateCount = Optional.ofNullable(expiredCertificateCount);
        return this;
    }

    /**
     * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
     */
    public DigitalWallet withExpiredCertificateCount(Optional<Long> expiredCertificateCount) {
        Utils.checkNotNull(expiredCertificateCount, "expiredCertificateCount");
        this.expiredCertificateCount = expiredCertificateCount;
        return this;
    }

    /**
     * Custom attributes for some digital wallets. Currently only used by Click to Pay.
     */
    public DigitalWallet withFields(Map<String, Object> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = JsonNullable.of(fields);
        return this;
    }

    /**
     * Custom attributes for some digital wallets. Currently only used by Click to Pay.
     */
    public DigitalWallet withFields(JsonNullable<? extends Map<String, Object>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * The date this buyer was created at.
     */
    public DigitalWallet withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date this buyer was last updated at.
     */
    public DigitalWallet withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DigitalWallet other = (DigitalWallet) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.merchantName, other.merchantName) &&
            Objects.deepEquals(this.merchantDisplayName, other.merchantDisplayName) &&
            Objects.deepEquals(this.merchantUrl, other.merchantUrl) &&
            Objects.deepEquals(this.merchantCountryCode, other.merchantCountryCode) &&
            Objects.deepEquals(this.domainNames, other.domainNames) &&
            Objects.deepEquals(this.activeCertificateCount, other.activeCertificateCount) &&
            Objects.deepEquals(this.pendingCertificateCount, other.pendingCertificateCount) &&
            Objects.deepEquals(this.expiredCertificateCount, other.expiredCertificateCount) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            merchantAccountId,
            provider,
            merchantName,
            merchantDisplayName,
            merchantUrl,
            merchantCountryCode,
            domainNames,
            activeCertificateCount,
            pendingCertificateCount,
            expiredCertificateCount,
            fields,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DigitalWallet.class,
                "type", type,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "provider", provider,
                "merchantName", merchantName,
                "merchantDisplayName", merchantDisplayName,
                "merchantUrl", merchantUrl,
                "merchantCountryCode", merchantCountryCode,
                "domainNames", domainNames,
                "activeCertificateCount", activeCertificateCount,
                "pendingCertificateCount", pendingCertificateCount,
                "expiredCertificateCount", expiredCertificateCount,
                "fields", fields,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String merchantAccountId;
 
        private DigitalWalletProvider provider;
 
        private String merchantName;
 
        private JsonNullable<String> merchantDisplayName = JsonNullable.undefined();
 
        private JsonNullable<String> merchantUrl = JsonNullable.undefined();
 
        private JsonNullable<String> merchantCountryCode = JsonNullable.undefined();
 
        private List<String> domainNames;
 
        private Optional<Long> activeCertificateCount;
 
        private Optional<Long> pendingCertificateCount;
 
        private Optional<Long> expiredCertificateCount;
 
        private JsonNullable<? extends Map<String, Object>> fields = JsonNullable.undefined();
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the digital wallet.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID of the merchant account this digital wallet belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public Builder provider(DigitalWalletProvider provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        /**
         * The name of the merchant the digital wallet is registered to.
         */
        public Builder merchantName(String merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = merchantName;
            return this;
        }

        /**
         * The consumer facing name of the merchant.
         */
        public Builder merchantDisplayName(String merchantDisplayName) {
            Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
            this.merchantDisplayName = JsonNullable.of(merchantDisplayName);
            return this;
        }

        /**
         * The consumer facing name of the merchant.
         */
        public Builder merchantDisplayName(JsonNullable<String> merchantDisplayName) {
            Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
            this.merchantDisplayName = merchantDisplayName;
            return this;
        }

        /**
         * The main URL of the merchant.
         */
        public Builder merchantUrl(String merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = JsonNullable.of(merchantUrl);
            return this;
        }

        /**
         * The main URL of the merchant.
         */
        public Builder merchantUrl(JsonNullable<String> merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = merchantUrl;
            return this;
        }

        /**
         * The country code where the merchant is registered.
         */
        public Builder merchantCountryCode(String merchantCountryCode) {
            Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
            this.merchantCountryCode = JsonNullable.of(merchantCountryCode);
            return this;
        }

        /**
         * The country code where the merchant is registered.
         */
        public Builder merchantCountryCode(JsonNullable<String> merchantCountryCode) {
            Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
            this.merchantCountryCode = merchantCountryCode;
            return this;
        }

        /**
         * The list of domain names that a digital wallet can be used on (deprecated).
         */
        public Builder domainNames(List<String> domainNames) {
            Utils.checkNotNull(domainNames, "domainNames");
            this.domainNames = domainNames;
            return this;
        }

        /**
         * The number of active custom certificates registered for this digital wallet (Apple Pay only).
         */
        public Builder activeCertificateCount(long activeCertificateCount) {
            Utils.checkNotNull(activeCertificateCount, "activeCertificateCount");
            this.activeCertificateCount = Optional.ofNullable(activeCertificateCount);
            return this;
        }

        /**
         * The number of active custom certificates registered for this digital wallet (Apple Pay only).
         */
        public Builder activeCertificateCount(Optional<Long> activeCertificateCount) {
            Utils.checkNotNull(activeCertificateCount, "activeCertificateCount");
            this.activeCertificateCount = activeCertificateCount;
            return this;
        }

        /**
         * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
         */
        public Builder pendingCertificateCount(long pendingCertificateCount) {
            Utils.checkNotNull(pendingCertificateCount, "pendingCertificateCount");
            this.pendingCertificateCount = Optional.ofNullable(pendingCertificateCount);
            return this;
        }

        /**
         * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
         */
        public Builder pendingCertificateCount(Optional<Long> pendingCertificateCount) {
            Utils.checkNotNull(pendingCertificateCount, "pendingCertificateCount");
            this.pendingCertificateCount = pendingCertificateCount;
            return this;
        }

        /**
         * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
         */
        public Builder expiredCertificateCount(long expiredCertificateCount) {
            Utils.checkNotNull(expiredCertificateCount, "expiredCertificateCount");
            this.expiredCertificateCount = Optional.ofNullable(expiredCertificateCount);
            return this;
        }

        /**
         * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
         */
        public Builder expiredCertificateCount(Optional<Long> expiredCertificateCount) {
            Utils.checkNotNull(expiredCertificateCount, "expiredCertificateCount");
            this.expiredCertificateCount = expiredCertificateCount;
            return this;
        }

        /**
         * Custom attributes for some digital wallets. Currently only used by Click to Pay.
         */
        public Builder fields(Map<String, Object> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = JsonNullable.of(fields);
            return this;
        }

        /**
         * Custom attributes for some digital wallets. Currently only used by Click to Pay.
         */
        public Builder fields(JsonNullable<? extends Map<String, Object>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * The date this buyer was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date this buyer was last updated at.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public DigitalWallet build() {
            if (activeCertificateCount == null) {
                activeCertificateCount = _SINGLETON_VALUE_ActiveCertificateCount.value();
            }
            if (pendingCertificateCount == null) {
                pendingCertificateCount = _SINGLETON_VALUE_PendingCertificateCount.value();
            }
            if (expiredCertificateCount == null) {
                expiredCertificateCount = _SINGLETON_VALUE_ExpiredCertificateCount.value();
            }
            return new DigitalWallet(
                id,
                merchantAccountId,
                provider,
                merchantName,
                merchantDisplayName,
                merchantUrl,
                merchantCountryCode,
                domainNames,
                activeCertificateCount,
                pendingCertificateCount,
                expiredCertificateCount,
                fields,
                createdAt,
                updatedAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"digital-wallet\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_ActiveCertificateCount =
                new LazySingletonValue<>(
                        "active_certificate_count",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_PendingCertificateCount =
                new LazySingletonValue<>(
                        "pending_certificate_count",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_ExpiredCertificateCount =
                new LazySingletonValue<>(
                        "expired_certificate_count",
                        "0",
                        new TypeReference<Optional<Long>>() {});
    }
}
