/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class WpayEverdaypayOptions {
    /**
     * A dictionary of merchant defined data, to be passed to Wpay for anti-fraud control.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_defined_data")
    private JsonNullable<? extends Map<String, String>> merchantDefinedData;

    /**
     * The customer ID for the Everyday Rewards account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    private JsonNullable<String> customerId;

    /**
     * The access token for the Everyday Rewards account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewardsAccessToken")
    private JsonNullable<String> rewardsAccessToken;

    /**
     * The ID of the device on which the payment is occuring.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceId")
    private JsonNullable<String> deviceId;

    /**
     * Whether the transaction should redirect post-payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postPaymentRedirect")
    private JsonNullable<Boolean> postPaymentRedirect;

    @JsonCreator
    public WpayEverdaypayOptions(
            @JsonProperty("merchant_defined_data") JsonNullable<? extends Map<String, String>> merchantDefinedData,
            @JsonProperty("customerId") JsonNullable<String> customerId,
            @JsonProperty("rewardsAccessToken") JsonNullable<String> rewardsAccessToken,
            @JsonProperty("deviceId") JsonNullable<String> deviceId,
            @JsonProperty("postPaymentRedirect") JsonNullable<Boolean> postPaymentRedirect) {
        Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(rewardsAccessToken, "rewardsAccessToken");
        Utils.checkNotNull(deviceId, "deviceId");
        Utils.checkNotNull(postPaymentRedirect, "postPaymentRedirect");
        this.merchantDefinedData = merchantDefinedData;
        this.customerId = customerId;
        this.rewardsAccessToken = rewardsAccessToken;
        this.deviceId = deviceId;
        this.postPaymentRedirect = postPaymentRedirect;
    }
    
    public WpayEverdaypayOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A dictionary of merchant defined data, to be passed to Wpay for anti-fraud control.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> merchantDefinedData() {
        return (JsonNullable<Map<String, String>>) merchantDefinedData;
    }

    /**
     * The customer ID for the Everyday Rewards account.
     */
    @JsonIgnore
    public JsonNullable<String> customerId() {
        return customerId;
    }

    /**
     * The access token for the Everyday Rewards account.
     */
    @JsonIgnore
    public JsonNullable<String> rewardsAccessToken() {
        return rewardsAccessToken;
    }

    /**
     * The ID of the device on which the payment is occuring.
     */
    @JsonIgnore
    public JsonNullable<String> deviceId() {
        return deviceId;
    }

    /**
     * Whether the transaction should redirect post-payment
     */
    @JsonIgnore
    public JsonNullable<Boolean> postPaymentRedirect() {
        return postPaymentRedirect;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A dictionary of merchant defined data, to be passed to Wpay for anti-fraud control.
     */
    public WpayEverdaypayOptions withMerchantDefinedData(Map<String, String> merchantDefinedData) {
        Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
        this.merchantDefinedData = JsonNullable.of(merchantDefinedData);
        return this;
    }

    /**
     * A dictionary of merchant defined data, to be passed to Wpay for anti-fraud control.
     */
    public WpayEverdaypayOptions withMerchantDefinedData(JsonNullable<? extends Map<String, String>> merchantDefinedData) {
        Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
        this.merchantDefinedData = merchantDefinedData;
        return this;
    }

    /**
     * The customer ID for the Everyday Rewards account.
     */
    public WpayEverdaypayOptions withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = JsonNullable.of(customerId);
        return this;
    }

    /**
     * The customer ID for the Everyday Rewards account.
     */
    public WpayEverdaypayOptions withCustomerId(JsonNullable<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The access token for the Everyday Rewards account.
     */
    public WpayEverdaypayOptions withRewardsAccessToken(String rewardsAccessToken) {
        Utils.checkNotNull(rewardsAccessToken, "rewardsAccessToken");
        this.rewardsAccessToken = JsonNullable.of(rewardsAccessToken);
        return this;
    }

    /**
     * The access token for the Everyday Rewards account.
     */
    public WpayEverdaypayOptions withRewardsAccessToken(JsonNullable<String> rewardsAccessToken) {
        Utils.checkNotNull(rewardsAccessToken, "rewardsAccessToken");
        this.rewardsAccessToken = rewardsAccessToken;
        return this;
    }

    /**
     * The ID of the device on which the payment is occuring.
     */
    public WpayEverdaypayOptions withDeviceId(String deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = JsonNullable.of(deviceId);
        return this;
    }

    /**
     * The ID of the device on which the payment is occuring.
     */
    public WpayEverdaypayOptions withDeviceId(JsonNullable<String> deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = deviceId;
        return this;
    }

    /**
     * Whether the transaction should redirect post-payment
     */
    public WpayEverdaypayOptions withPostPaymentRedirect(boolean postPaymentRedirect) {
        Utils.checkNotNull(postPaymentRedirect, "postPaymentRedirect");
        this.postPaymentRedirect = JsonNullable.of(postPaymentRedirect);
        return this;
    }

    /**
     * Whether the transaction should redirect post-payment
     */
    public WpayEverdaypayOptions withPostPaymentRedirect(JsonNullable<Boolean> postPaymentRedirect) {
        Utils.checkNotNull(postPaymentRedirect, "postPaymentRedirect");
        this.postPaymentRedirect = postPaymentRedirect;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WpayEverdaypayOptions other = (WpayEverdaypayOptions) o;
        return 
            Utils.enhancedDeepEquals(this.merchantDefinedData, other.merchantDefinedData) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.rewardsAccessToken, other.rewardsAccessToken) &&
            Utils.enhancedDeepEquals(this.deviceId, other.deviceId) &&
            Utils.enhancedDeepEquals(this.postPaymentRedirect, other.postPaymentRedirect);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            merchantDefinedData, customerId, rewardsAccessToken,
            deviceId, postPaymentRedirect);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WpayEverdaypayOptions.class,
                "merchantDefinedData", merchantDefinedData,
                "customerId", customerId,
                "rewardsAccessToken", rewardsAccessToken,
                "deviceId", deviceId,
                "postPaymentRedirect", postPaymentRedirect);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Map<String, String>> merchantDefinedData = JsonNullable.undefined();

        private JsonNullable<String> customerId = JsonNullable.undefined();

        private JsonNullable<String> rewardsAccessToken = JsonNullable.undefined();

        private JsonNullable<String> deviceId = JsonNullable.undefined();

        private JsonNullable<Boolean> postPaymentRedirect = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A dictionary of merchant defined data, to be passed to Wpay for anti-fraud control.
         */
        public Builder merchantDefinedData(Map<String, String> merchantDefinedData) {
            Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
            this.merchantDefinedData = JsonNullable.of(merchantDefinedData);
            return this;
        }

        /**
         * A dictionary of merchant defined data, to be passed to Wpay for anti-fraud control.
         */
        public Builder merchantDefinedData(JsonNullable<? extends Map<String, String>> merchantDefinedData) {
            Utils.checkNotNull(merchantDefinedData, "merchantDefinedData");
            this.merchantDefinedData = merchantDefinedData;
            return this;
        }


        /**
         * The customer ID for the Everyday Rewards account.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = JsonNullable.of(customerId);
            return this;
        }

        /**
         * The customer ID for the Everyday Rewards account.
         */
        public Builder customerId(JsonNullable<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * The access token for the Everyday Rewards account.
         */
        public Builder rewardsAccessToken(String rewardsAccessToken) {
            Utils.checkNotNull(rewardsAccessToken, "rewardsAccessToken");
            this.rewardsAccessToken = JsonNullable.of(rewardsAccessToken);
            return this;
        }

        /**
         * The access token for the Everyday Rewards account.
         */
        public Builder rewardsAccessToken(JsonNullable<String> rewardsAccessToken) {
            Utils.checkNotNull(rewardsAccessToken, "rewardsAccessToken");
            this.rewardsAccessToken = rewardsAccessToken;
            return this;
        }


        /**
         * The ID of the device on which the payment is occuring.
         */
        public Builder deviceId(String deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = JsonNullable.of(deviceId);
            return this;
        }

        /**
         * The ID of the device on which the payment is occuring.
         */
        public Builder deviceId(JsonNullable<String> deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = deviceId;
            return this;
        }


        /**
         * Whether the transaction should redirect post-payment
         */
        public Builder postPaymentRedirect(boolean postPaymentRedirect) {
            Utils.checkNotNull(postPaymentRedirect, "postPaymentRedirect");
            this.postPaymentRedirect = JsonNullable.of(postPaymentRedirect);
            return this;
        }

        /**
         * Whether the transaction should redirect post-payment
         */
        public Builder postPaymentRedirect(JsonNullable<Boolean> postPaymentRedirect) {
            Utils.checkNotNull(postPaymentRedirect, "postPaymentRedirect");
            this.postPaymentRedirect = postPaymentRedirect;
            return this;
        }

        public WpayEverdaypayOptions build() {

            return new WpayEverdaypayOptions(
                merchantDefinedData, customerId, rewardsAccessToken,
                deviceId, postPaymentRedirect);
        }

    }
}
