/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PaymentMethod
 * 
 * <p>Payment Method
 * 
 * <p>A stored payment method.
 */
public class PaymentMethod {

    /**
     * Always `payment-method`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_url")
    private JsonNullable<String> approvalUrl;

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<String> currency;

    /**
     * Details for credit or debit card payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private JsonNullable<? extends PaymentMethodDetailsCard> details;

    /**
     * The expiration date for the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration_date")
    private JsonNullable<String> expirationDate;

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    private JsonNullable<String> fingerprint;

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private JsonNullable<String> label;

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_replaced_at")
    private JsonNullable<OffsetDateTime> lastReplacedAt;

    @JsonProperty("method")
    private Method method;

    /**
     * The mode to use with this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private JsonNullable<? extends Mode> mode;

    /**
     * The scheme of the card. Only applies to card payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme")
    private JsonNullable<? extends CardScheme> scheme;

    /**
     * The ID for the payment method.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_schemes")
    private JsonNullable<? extends List<CardScheme>> additionalSchemes;

    /**
     * The timestamp when this payment method was last used in a transaction for client initiated transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cit_last_used_at")
    private JsonNullable<OffsetDateTime> citLastUsedAt;

    /**
     * The number of times this payment method has been used in transactions for client initiated transactions.
     */
    @JsonProperty("cit_usage_count")
    private long citUsageCount;

    /**
     * Whether this card has a pending replacement that hasn't been applied yet.
     */
    @JsonProperty("has_replacement")
    private boolean hasReplacement;

    /**
     * The timestamp when this payment method was last used in a transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_used_at")
    private JsonNullable<OffsetDateTime> lastUsedAt;

    /**
     * The number of times this payment method has been used in transactions.
     */
    @JsonProperty("usage_count")
    private long usageCount;

    /**
     * The optional buyer for which this payment method has been stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends Buyer> buyer;

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    @JsonProperty("status")
    private PaymentMethodStatus status;

    /**
     * The date and time when this payment method was first created in our system.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time when this payment method was last updated in our system.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public PaymentMethod(
            @JsonProperty("approval_url") JsonNullable<String> approvalUrl,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("currency") JsonNullable<String> currency,
            @JsonProperty("details") JsonNullable<? extends PaymentMethodDetailsCard> details,
            @JsonProperty("expiration_date") JsonNullable<String> expirationDate,
            @JsonProperty("fingerprint") JsonNullable<String> fingerprint,
            @JsonProperty("label") JsonNullable<String> label,
            @JsonProperty("last_replaced_at") JsonNullable<OffsetDateTime> lastReplacedAt,
            @JsonProperty("method") Method method,
            @JsonProperty("mode") JsonNullable<? extends Mode> mode,
            @JsonProperty("scheme") JsonNullable<? extends CardScheme> scheme,
            @JsonProperty("id") String id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("additional_schemes") JsonNullable<? extends List<CardScheme>> additionalSchemes,
            @JsonProperty("cit_last_used_at") JsonNullable<OffsetDateTime> citLastUsedAt,
            @JsonProperty("cit_usage_count") long citUsageCount,
            @JsonProperty("has_replacement") boolean hasReplacement,
            @JsonProperty("last_used_at") JsonNullable<OffsetDateTime> lastUsedAt,
            @JsonProperty("usage_count") long usageCount,
            @JsonProperty("buyer") JsonNullable<? extends Buyer> buyer,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("status") PaymentMethodStatus status,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(details, "details");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(fingerprint, "fingerprint");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(scheme, "scheme");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(additionalSchemes, "additionalSchemes");
        Utils.checkNotNull(citLastUsedAt, "citLastUsedAt");
        Utils.checkNotNull(citUsageCount, "citUsageCount");
        Utils.checkNotNull(hasReplacement, "hasReplacement");
        Utils.checkNotNull(lastUsedAt, "lastUsedAt");
        Utils.checkNotNull(usageCount, "usageCount");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.approvalUrl = approvalUrl;
        this.country = country;
        this.currency = currency;
        this.details = details;
        this.expirationDate = expirationDate;
        this.fingerprint = fingerprint;
        this.label = label;
        this.lastReplacedAt = lastReplacedAt;
        this.method = method;
        this.mode = mode;
        this.scheme = scheme;
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.additionalSchemes = additionalSchemes;
        this.citLastUsedAt = citLastUsedAt;
        this.citUsageCount = citUsageCount;
        this.hasReplacement = hasReplacement;
        this.lastUsedAt = lastUsedAt;
        this.usageCount = usageCount;
        this.buyer = buyer;
        this.externalIdentifier = externalIdentifier;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public PaymentMethod(
            Method method,
            String id,
            String merchantAccountId,
            long citUsageCount,
            boolean hasReplacement,
            long usageCount,
            PaymentMethodStatus status,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), method, JsonNullable.undefined(), JsonNullable.undefined(), id, merchantAccountId, JsonNullable.undefined(), JsonNullable.undefined(), citUsageCount, hasReplacement, JsonNullable.undefined(), usageCount, JsonNullable.undefined(), JsonNullable.undefined(), status, createdAt, updatedAt);
    }

    /**
     * Always `payment-method`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    @JsonIgnore
    public JsonNullable<String> approvalUrl() {
        return approvalUrl;
    }

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    /**
     * Details for credit or debit card payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PaymentMethodDetailsCard> details() {
        return (JsonNullable<PaymentMethodDetailsCard>) details;
    }

    /**
     * The expiration date for the payment method.
     */
    @JsonIgnore
    public JsonNullable<String> expirationDate() {
        return expirationDate;
    }

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    @JsonIgnore
    public JsonNullable<String> fingerprint() {
        return fingerprint;
    }

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    @JsonIgnore
    public JsonNullable<String> label() {
        return label;
    }

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastReplacedAt() {
        return lastReplacedAt;
    }

    @JsonIgnore
    public Method method() {
        return method;
    }

    /**
     * The mode to use with this payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Mode> mode() {
        return (JsonNullable<Mode>) mode;
    }

    /**
     * The scheme of the card. Only applies to card payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardScheme> scheme() {
        return (JsonNullable<CardScheme>) scheme;
    }

    /**
     * The ID for the payment method.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CardScheme>> additionalSchemes() {
        return (JsonNullable<List<CardScheme>>) additionalSchemes;
    }

    /**
     * The timestamp when this payment method was last used in a transaction for client initiated transactions.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> citLastUsedAt() {
        return citLastUsedAt;
    }

    /**
     * The number of times this payment method has been used in transactions for client initiated transactions.
     */
    @JsonIgnore
    public long citUsageCount() {
        return citUsageCount;
    }

    /**
     * Whether this card has a pending replacement that hasn't been applied yet.
     */
    @JsonIgnore
    public boolean hasReplacement() {
        return hasReplacement;
    }

    /**
     * The timestamp when this payment method was last used in a transaction.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastUsedAt() {
        return lastUsedAt;
    }

    /**
     * The number of times this payment method has been used in transactions.
     */
    @JsonIgnore
    public long usageCount() {
        return usageCount;
    }

    /**
     * The optional buyer for which this payment method has been stored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Buyer> buyer() {
        return (JsonNullable<Buyer>) buyer;
    }

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    @JsonIgnore
    public PaymentMethodStatus status() {
        return status;
    }

    /**
     * The date and time when this payment method was first created in our system.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time when this payment method was last updated in our system.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    public PaymentMethod withApprovalUrl(String approvalUrl) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        this.approvalUrl = JsonNullable.of(approvalUrl);
        return this;
    }

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    public PaymentMethod withApprovalUrl(JsonNullable<String> approvalUrl) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        this.approvalUrl = approvalUrl;
        return this;
    }

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    public PaymentMethod withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    public PaymentMethod withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    public PaymentMethod withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    public PaymentMethod withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Details for credit or debit card payment method.
     */
    public PaymentMethod withDetails(PaymentMethodDetailsCard details) {
        Utils.checkNotNull(details, "details");
        this.details = JsonNullable.of(details);
        return this;
    }

    /**
     * Details for credit or debit card payment method.
     */
    public PaymentMethod withDetails(JsonNullable<? extends PaymentMethodDetailsCard> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }

    /**
     * The expiration date for the payment method.
     */
    public PaymentMethod withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = JsonNullable.of(expirationDate);
        return this;
    }

    /**
     * The expiration date for the payment method.
     */
    public PaymentMethod withExpirationDate(JsonNullable<String> expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    public PaymentMethod withFingerprint(String fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = JsonNullable.of(fingerprint);
        return this;
    }

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    public PaymentMethod withFingerprint(JsonNullable<String> fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = fingerprint;
        return this;
    }

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    public PaymentMethod withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = JsonNullable.of(label);
        return this;
    }

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    public PaymentMethod withLabel(JsonNullable<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    public PaymentMethod withLastReplacedAt(OffsetDateTime lastReplacedAt) {
        Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
        this.lastReplacedAt = JsonNullable.of(lastReplacedAt);
        return this;
    }

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    public PaymentMethod withLastReplacedAt(JsonNullable<OffsetDateTime> lastReplacedAt) {
        Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
        this.lastReplacedAt = lastReplacedAt;
        return this;
    }

    public PaymentMethod withMethod(Method method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The mode to use with this payment method.
     */
    public PaymentMethod withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = JsonNullable.of(mode);
        return this;
    }

    /**
     * The mode to use with this payment method.
     */
    public PaymentMethod withMode(JsonNullable<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The scheme of the card. Only applies to card payments.
     */
    public PaymentMethod withScheme(CardScheme scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = JsonNullable.of(scheme);
        return this;
    }

    /**
     * The scheme of the card. Only applies to card payments.
     */
    public PaymentMethod withScheme(JsonNullable<? extends CardScheme> scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = scheme;
        return this;
    }

    /**
     * The ID for the payment method.
     */
    public PaymentMethod withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the merchant account this buyer belongs to.
     */
    public PaymentMethod withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
     */
    public PaymentMethod withAdditionalSchemes(List<CardScheme> additionalSchemes) {
        Utils.checkNotNull(additionalSchemes, "additionalSchemes");
        this.additionalSchemes = JsonNullable.of(additionalSchemes);
        return this;
    }

    /**
     * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
     */
    public PaymentMethod withAdditionalSchemes(JsonNullable<? extends List<CardScheme>> additionalSchemes) {
        Utils.checkNotNull(additionalSchemes, "additionalSchemes");
        this.additionalSchemes = additionalSchemes;
        return this;
    }

    /**
     * The timestamp when this payment method was last used in a transaction for client initiated transactions.
     */
    public PaymentMethod withCitLastUsedAt(OffsetDateTime citLastUsedAt) {
        Utils.checkNotNull(citLastUsedAt, "citLastUsedAt");
        this.citLastUsedAt = JsonNullable.of(citLastUsedAt);
        return this;
    }

    /**
     * The timestamp when this payment method was last used in a transaction for client initiated transactions.
     */
    public PaymentMethod withCitLastUsedAt(JsonNullable<OffsetDateTime> citLastUsedAt) {
        Utils.checkNotNull(citLastUsedAt, "citLastUsedAt");
        this.citLastUsedAt = citLastUsedAt;
        return this;
    }

    /**
     * The number of times this payment method has been used in transactions for client initiated transactions.
     */
    public PaymentMethod withCitUsageCount(long citUsageCount) {
        Utils.checkNotNull(citUsageCount, "citUsageCount");
        this.citUsageCount = citUsageCount;
        return this;
    }

    /**
     * Whether this card has a pending replacement that hasn't been applied yet.
     */
    public PaymentMethod withHasReplacement(boolean hasReplacement) {
        Utils.checkNotNull(hasReplacement, "hasReplacement");
        this.hasReplacement = hasReplacement;
        return this;
    }

    /**
     * The timestamp when this payment method was last used in a transaction.
     */
    public PaymentMethod withLastUsedAt(OffsetDateTime lastUsedAt) {
        Utils.checkNotNull(lastUsedAt, "lastUsedAt");
        this.lastUsedAt = JsonNullable.of(lastUsedAt);
        return this;
    }

    /**
     * The timestamp when this payment method was last used in a transaction.
     */
    public PaymentMethod withLastUsedAt(JsonNullable<OffsetDateTime> lastUsedAt) {
        Utils.checkNotNull(lastUsedAt, "lastUsedAt");
        this.lastUsedAt = lastUsedAt;
        return this;
    }

    /**
     * The number of times this payment method has been used in transactions.
     */
    public PaymentMethod withUsageCount(long usageCount) {
        Utils.checkNotNull(usageCount, "usageCount");
        this.usageCount = usageCount;
        return this;
    }

    /**
     * The optional buyer for which this payment method has been stored.
     */
    public PaymentMethod withBuyer(Buyer buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * The optional buyer for which this payment method has been stored.
     */
    public PaymentMethod withBuyer(JsonNullable<? extends Buyer> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    public PaymentMethod withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    public PaymentMethod withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    public PaymentMethod withStatus(PaymentMethodStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The date and time when this payment method was first created in our system.
     */
    public PaymentMethod withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when this payment method was last updated in our system.
     */
    public PaymentMethod withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentMethod other = (PaymentMethod) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.approvalUrl, other.approvalUrl) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.details, other.details) &&
            Objects.deepEquals(this.expirationDate, other.expirationDate) &&
            Objects.deepEquals(this.fingerprint, other.fingerprint) &&
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.lastReplacedAt, other.lastReplacedAt) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.scheme, other.scheme) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.additionalSchemes, other.additionalSchemes) &&
            Objects.deepEquals(this.citLastUsedAt, other.citLastUsedAt) &&
            Objects.deepEquals(this.citUsageCount, other.citUsageCount) &&
            Objects.deepEquals(this.hasReplacement, other.hasReplacement) &&
            Objects.deepEquals(this.lastUsedAt, other.lastUsedAt) &&
            Objects.deepEquals(this.usageCount, other.usageCount) &&
            Objects.deepEquals(this.buyer, other.buyer) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            approvalUrl,
            country,
            currency,
            details,
            expirationDate,
            fingerprint,
            label,
            lastReplacedAt,
            method,
            mode,
            scheme,
            id,
            merchantAccountId,
            additionalSchemes,
            citLastUsedAt,
            citUsageCount,
            hasReplacement,
            lastUsedAt,
            usageCount,
            buyer,
            externalIdentifier,
            status,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentMethod.class,
                "type", type,
                "approvalUrl", approvalUrl,
                "country", country,
                "currency", currency,
                "details", details,
                "expirationDate", expirationDate,
                "fingerprint", fingerprint,
                "label", label,
                "lastReplacedAt", lastReplacedAt,
                "method", method,
                "mode", mode,
                "scheme", scheme,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "additionalSchemes", additionalSchemes,
                "citLastUsedAt", citLastUsedAt,
                "citUsageCount", citUsageCount,
                "hasReplacement", hasReplacement,
                "lastUsedAt", lastUsedAt,
                "usageCount", usageCount,
                "buyer", buyer,
                "externalIdentifier", externalIdentifier,
                "status", status,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> approvalUrl = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> currency = JsonNullable.undefined();
 
        private JsonNullable<? extends PaymentMethodDetailsCard> details = JsonNullable.undefined();
 
        private JsonNullable<String> expirationDate = JsonNullable.undefined();
 
        private JsonNullable<String> fingerprint = JsonNullable.undefined();
 
        private JsonNullable<String> label = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> lastReplacedAt = JsonNullable.undefined();
 
        private Method method;
 
        private JsonNullable<? extends Mode> mode = JsonNullable.undefined();
 
        private JsonNullable<? extends CardScheme> scheme = JsonNullable.undefined();
 
        private String id;
 
        private String merchantAccountId;
 
        private JsonNullable<? extends List<CardScheme>> additionalSchemes = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> citLastUsedAt = JsonNullable.undefined();
 
        private Long citUsageCount;
 
        private Boolean hasReplacement;
 
        private JsonNullable<OffsetDateTime> lastUsedAt = JsonNullable.undefined();
 
        private Long usageCount;
 
        private JsonNullable<? extends Buyer> buyer = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private PaymentMethodStatus status;
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The optional URL that the buyer needs to be redirected to to further authorize their payment.
         */
        public Builder approvalUrl(String approvalUrl) {
            Utils.checkNotNull(approvalUrl, "approvalUrl");
            this.approvalUrl = JsonNullable.of(approvalUrl);
            return this;
        }

        /**
         * The optional URL that the buyer needs to be redirected to to further authorize their payment.
         */
        public Builder approvalUrl(JsonNullable<String> approvalUrl) {
            Utils.checkNotNull(approvalUrl, "approvalUrl");
            this.approvalUrl = approvalUrl;
            return this;
        }

        /**
         * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
         */
        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Details for credit or debit card payment method.
         */
        public Builder details(PaymentMethodDetailsCard details) {
            Utils.checkNotNull(details, "details");
            this.details = JsonNullable.of(details);
            return this;
        }

        /**
         * Details for credit or debit card payment method.
         */
        public Builder details(JsonNullable<? extends PaymentMethodDetailsCard> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }

        /**
         * The expiration date for the payment method.
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = JsonNullable.of(expirationDate);
            return this;
        }

        /**
         * The expiration date for the payment method.
         */
        public Builder expirationDate(JsonNullable<String> expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The unique hash derived from the payment method identifier (e.g. card number).
         */
        public Builder fingerprint(String fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = JsonNullable.of(fingerprint);
            return this;
        }

        /**
         * The unique hash derived from the payment method identifier (e.g. card number).
         */
        public Builder fingerprint(JsonNullable<String> fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = fingerprint;
            return this;
        }

        /**
         * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = JsonNullable.of(label);
            return this;
        }

        /**
         * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
         */
        public Builder label(JsonNullable<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        /**
         * The date and time when this card was last replaced by the account updater.
         */
        public Builder lastReplacedAt(OffsetDateTime lastReplacedAt) {
            Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
            this.lastReplacedAt = JsonNullable.of(lastReplacedAt);
            return this;
        }

        /**
         * The date and time when this card was last replaced by the account updater.
         */
        public Builder lastReplacedAt(JsonNullable<OffsetDateTime> lastReplacedAt) {
            Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
            this.lastReplacedAt = lastReplacedAt;
            return this;
        }

        public Builder method(Method method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The mode to use with this payment method.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = JsonNullable.of(mode);
            return this;
        }

        /**
         * The mode to use with this payment method.
         */
        public Builder mode(JsonNullable<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * The scheme of the card. Only applies to card payments.
         */
        public Builder scheme(CardScheme scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = JsonNullable.of(scheme);
            return this;
        }

        /**
         * The scheme of the card. Only applies to card payments.
         */
        public Builder scheme(JsonNullable<? extends CardScheme> scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = scheme;
            return this;
        }

        /**
         * The ID for the payment method.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID of the merchant account this buyer belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        /**
         * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
         */
        public Builder additionalSchemes(List<CardScheme> additionalSchemes) {
            Utils.checkNotNull(additionalSchemes, "additionalSchemes");
            this.additionalSchemes = JsonNullable.of(additionalSchemes);
            return this;
        }

        /**
         * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
         */
        public Builder additionalSchemes(JsonNullable<? extends List<CardScheme>> additionalSchemes) {
            Utils.checkNotNull(additionalSchemes, "additionalSchemes");
            this.additionalSchemes = additionalSchemes;
            return this;
        }

        /**
         * The timestamp when this payment method was last used in a transaction for client initiated transactions.
         */
        public Builder citLastUsedAt(OffsetDateTime citLastUsedAt) {
            Utils.checkNotNull(citLastUsedAt, "citLastUsedAt");
            this.citLastUsedAt = JsonNullable.of(citLastUsedAt);
            return this;
        }

        /**
         * The timestamp when this payment method was last used in a transaction for client initiated transactions.
         */
        public Builder citLastUsedAt(JsonNullable<OffsetDateTime> citLastUsedAt) {
            Utils.checkNotNull(citLastUsedAt, "citLastUsedAt");
            this.citLastUsedAt = citLastUsedAt;
            return this;
        }

        /**
         * The number of times this payment method has been used in transactions for client initiated transactions.
         */
        public Builder citUsageCount(long citUsageCount) {
            Utils.checkNotNull(citUsageCount, "citUsageCount");
            this.citUsageCount = citUsageCount;
            return this;
        }

        /**
         * Whether this card has a pending replacement that hasn't been applied yet.
         */
        public Builder hasReplacement(boolean hasReplacement) {
            Utils.checkNotNull(hasReplacement, "hasReplacement");
            this.hasReplacement = hasReplacement;
            return this;
        }

        /**
         * The timestamp when this payment method was last used in a transaction.
         */
        public Builder lastUsedAt(OffsetDateTime lastUsedAt) {
            Utils.checkNotNull(lastUsedAt, "lastUsedAt");
            this.lastUsedAt = JsonNullable.of(lastUsedAt);
            return this;
        }

        /**
         * The timestamp when this payment method was last used in a transaction.
         */
        public Builder lastUsedAt(JsonNullable<OffsetDateTime> lastUsedAt) {
            Utils.checkNotNull(lastUsedAt, "lastUsedAt");
            this.lastUsedAt = lastUsedAt;
            return this;
        }

        /**
         * The number of times this payment method has been used in transactions.
         */
        public Builder usageCount(long usageCount) {
            Utils.checkNotNull(usageCount, "usageCount");
            this.usageCount = usageCount;
            return this;
        }

        /**
         * The optional buyer for which this payment method has been stored.
         */
        public Builder buyer(Buyer buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * The optional buyer for which this payment method has been stored.
         */
        public Builder buyer(JsonNullable<? extends Buyer> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }

        /**
         * The merchant reference that can be used to match the payment method against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant reference that can be used to match the payment method against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        public Builder status(PaymentMethodStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The date and time when this payment method was first created in our system.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when this payment method was last updated in our system.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public PaymentMethod build() {
            return new PaymentMethod(
                approvalUrl,
                country,
                currency,
                details,
                expirationDate,
                fingerprint,
                label,
                lastReplacedAt,
                method,
                mode,
                scheme,
                id,
                merchantAccountId,
                additionalSchemes,
                citLastUsedAt,
                citUsageCount,
                hasReplacement,
                lastUsedAt,
                usageCount,
                buyer,
                externalIdentifier,
                status,
                createdAt,
                updatedAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-method\"",
                        new TypeReference<Optional<String>>() {});
    }
}
