/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class CartItem {
    /**
     * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The quantity of this item in the cart. This value cannot be negative or zero.
     */
    @JsonProperty("quantity")
    private long quantity;

    /**
     * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
     */
    @JsonProperty("unit_amount")
    private long unitAmount;

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private JsonNullable<Long> discountAmount;

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<Long> taxAmount;

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The SKU or product code for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The product URL for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_url")
    private JsonNullable<String> productUrl;

    /**
     * The URL for the image of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private JsonNullable<String> imageUrl;

    /**
     * A list of strings containing product categories for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private JsonNullable<? extends List<String>> categories;

    /**
     * The product type of the cart item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_type")
    private JsonNullable<? extends ProductType> productType;

    /**
     * The seller country of the cart item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seller_country")
    private JsonNullable<String> sellerCountry;

    /**
     * Whether the item is exempt of tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_exempt")
    private JsonNullable<Boolean> taxExempt;

    /**
     * The unit of measure or the unit of measure code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_of_measure")
    private JsonNullable<String> unitOfMeasure;

    /**
     * Item commodity code. Generally a UNSPSC code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commodity_code")
    private JsonNullable<String> commodityCode;

    /**
     * Brief item description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duty_amount")
    private JsonNullable<Long> dutyAmount;

    /**
     * Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_amount")
    private JsonNullable<Long> shippingAmount;

    @JsonCreator
    public CartItem(
            @JsonProperty("name") String name,
            @JsonProperty("quantity") long quantity,
            @JsonProperty("unit_amount") long unitAmount,
            @JsonProperty("discount_amount") JsonNullable<Long> discountAmount,
            @JsonProperty("tax_amount") JsonNullable<Long> taxAmount,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("product_url") JsonNullable<String> productUrl,
            @JsonProperty("image_url") JsonNullable<String> imageUrl,
            @JsonProperty("categories") JsonNullable<? extends List<String>> categories,
            @JsonProperty("product_type") JsonNullable<? extends ProductType> productType,
            @JsonProperty("seller_country") JsonNullable<String> sellerCountry,
            @JsonProperty("tax_exempt") JsonNullable<Boolean> taxExempt,
            @JsonProperty("unit_of_measure") JsonNullable<String> unitOfMeasure,
            @JsonProperty("commodity_code") JsonNullable<String> commodityCode,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("duty_amount") JsonNullable<Long> dutyAmount,
            @JsonProperty("shipping_amount") JsonNullable<Long> shippingAmount) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitAmount, "unitAmount");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(productUrl, "productUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(productType, "productType");
        Utils.checkNotNull(sellerCountry, "sellerCountry");
        Utils.checkNotNull(taxExempt, "taxExempt");
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        Utils.checkNotNull(commodityCode, "commodityCode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(dutyAmount, "dutyAmount");
        Utils.checkNotNull(shippingAmount, "shippingAmount");
        this.name = name;
        this.quantity = quantity;
        this.unitAmount = unitAmount;
        this.discountAmount = discountAmount;
        this.taxAmount = taxAmount;
        this.externalIdentifier = externalIdentifier;
        this.sku = sku;
        this.productUrl = productUrl;
        this.imageUrl = imageUrl;
        this.categories = categories;
        this.productType = productType;
        this.sellerCountry = sellerCountry;
        this.taxExempt = taxExempt;
        this.unitOfMeasure = unitOfMeasure;
        this.commodityCode = commodityCode;
        this.description = description;
        this.dutyAmount = dutyAmount;
        this.shippingAmount = shippingAmount;
    }
    
    public CartItem(
            String name,
            long quantity,
            long unitAmount) {
        this(name, quantity, unitAmount,
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The quantity of this item in the cart. This value cannot be negative or zero.
     */
    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    /**
     * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
     */
    @JsonIgnore
    public long unitAmount() {
        return unitAmount;
    }

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonIgnore
    public JsonNullable<Long> discountAmount() {
        return discountAmount;
    }

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonIgnore
    public JsonNullable<Long> taxAmount() {
        return taxAmount;
    }

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The SKU or product code for the item.
     */
    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    /**
     * The product URL for the item.
     */
    @JsonIgnore
    public JsonNullable<String> productUrl() {
        return productUrl;
    }

    /**
     * The URL for the image of the item.
     */
    @JsonIgnore
    public JsonNullable<String> imageUrl() {
        return imageUrl;
    }

    /**
     * A list of strings containing product categories for the item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> categories() {
        return (JsonNullable<List<String>>) categories;
    }

    /**
     * The product type of the cart item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProductType> productType() {
        return (JsonNullable<ProductType>) productType;
    }

    /**
     * The seller country of the cart item.
     */
    @JsonIgnore
    public JsonNullable<String> sellerCountry() {
        return sellerCountry;
    }

    /**
     * Whether the item is exempt of tax.
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxExempt() {
        return taxExempt;
    }

    /**
     * The unit of measure or the unit of measure code.
     */
    @JsonIgnore
    public JsonNullable<String> unitOfMeasure() {
        return unitOfMeasure;
    }

    /**
     * Item commodity code. Generally a UNSPSC code.
     */
    @JsonIgnore
    public JsonNullable<String> commodityCode() {
        return commodityCode;
    }

    /**
     * Brief item description.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    @JsonIgnore
    public JsonNullable<Long> dutyAmount() {
        return dutyAmount;
    }

    /**
     * Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    @JsonIgnore
    public JsonNullable<Long> shippingAmount() {
        return shippingAmount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     */
    public CartItem withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The quantity of this item in the cart. This value cannot be negative or zero.
     */
    public CartItem withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
     */
    public CartItem withUnitAmount(long unitAmount) {
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.unitAmount = unitAmount;
        return this;
    }

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withDiscountAmount(long discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withDiscountAmount(JsonNullable<Long> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withTaxAmount(long taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withTaxAmount(JsonNullable<Long> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    public CartItem withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    public CartItem withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The SKU or product code for the item.
     */
    public CartItem withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    /**
     * The SKU or product code for the item.
     */
    public CartItem withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * The product URL for the item.
     */
    public CartItem withProductUrl(String productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = JsonNullable.of(productUrl);
        return this;
    }

    /**
     * The product URL for the item.
     */
    public CartItem withProductUrl(JsonNullable<String> productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = productUrl;
        return this;
    }

    /**
     * The URL for the image of the item.
     */
    public CartItem withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = JsonNullable.of(imageUrl);
        return this;
    }

    /**
     * The URL for the image of the item.
     */
    public CartItem withImageUrl(JsonNullable<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * A list of strings containing product categories for the item.
     */
    public CartItem withCategories(List<String> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = JsonNullable.of(categories);
        return this;
    }

    /**
     * A list of strings containing product categories for the item.
     */
    public CartItem withCategories(JsonNullable<? extends List<String>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * The product type of the cart item.
     */
    public CartItem withProductType(ProductType productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = JsonNullable.of(productType);
        return this;
    }

    /**
     * The product type of the cart item.
     */
    public CartItem withProductType(JsonNullable<? extends ProductType> productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = productType;
        return this;
    }

    /**
     * The seller country of the cart item.
     */
    public CartItem withSellerCountry(String sellerCountry) {
        Utils.checkNotNull(sellerCountry, "sellerCountry");
        this.sellerCountry = JsonNullable.of(sellerCountry);
        return this;
    }

    /**
     * The seller country of the cart item.
     */
    public CartItem withSellerCountry(JsonNullable<String> sellerCountry) {
        Utils.checkNotNull(sellerCountry, "sellerCountry");
        this.sellerCountry = sellerCountry;
        return this;
    }

    /**
     * Whether the item is exempt of tax.
     */
    public CartItem withTaxExempt(boolean taxExempt) {
        Utils.checkNotNull(taxExempt, "taxExempt");
        this.taxExempt = JsonNullable.of(taxExempt);
        return this;
    }

    /**
     * Whether the item is exempt of tax.
     */
    public CartItem withTaxExempt(JsonNullable<Boolean> taxExempt) {
        Utils.checkNotNull(taxExempt, "taxExempt");
        this.taxExempt = taxExempt;
        return this;
    }

    /**
     * The unit of measure or the unit of measure code.
     */
    public CartItem withUnitOfMeasure(String unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
        return this;
    }

    /**
     * The unit of measure or the unit of measure code.
     */
    public CartItem withUnitOfMeasure(JsonNullable<String> unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = unitOfMeasure;
        return this;
    }

    /**
     * Item commodity code. Generally a UNSPSC code.
     */
    public CartItem withCommodityCode(String commodityCode) {
        Utils.checkNotNull(commodityCode, "commodityCode");
        this.commodityCode = JsonNullable.of(commodityCode);
        return this;
    }

    /**
     * Item commodity code. Generally a UNSPSC code.
     */
    public CartItem withCommodityCode(JsonNullable<String> commodityCode) {
        Utils.checkNotNull(commodityCode, "commodityCode");
        this.commodityCode = commodityCode;
        return this;
    }

    /**
     * Brief item description.
     */
    public CartItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Brief item description.
     */
    public CartItem withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    public CartItem withDutyAmount(long dutyAmount) {
        Utils.checkNotNull(dutyAmount, "dutyAmount");
        this.dutyAmount = JsonNullable.of(dutyAmount);
        return this;
    }

    /**
     * Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    public CartItem withDutyAmount(JsonNullable<Long> dutyAmount) {
        Utils.checkNotNull(dutyAmount, "dutyAmount");
        this.dutyAmount = dutyAmount;
        return this;
    }

    /**
     * Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    public CartItem withShippingAmount(long shippingAmount) {
        Utils.checkNotNull(shippingAmount, "shippingAmount");
        this.shippingAmount = JsonNullable.of(shippingAmount);
        return this;
    }

    /**
     * Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     */
    public CartItem withShippingAmount(JsonNullable<Long> shippingAmount) {
        Utils.checkNotNull(shippingAmount, "shippingAmount");
        this.shippingAmount = shippingAmount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CartItem other = (CartItem) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.unitAmount, other.unitAmount) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.productUrl, other.productUrl) &&
            Utils.enhancedDeepEquals(this.imageUrl, other.imageUrl) &&
            Utils.enhancedDeepEquals(this.categories, other.categories) &&
            Utils.enhancedDeepEquals(this.productType, other.productType) &&
            Utils.enhancedDeepEquals(this.sellerCountry, other.sellerCountry) &&
            Utils.enhancedDeepEquals(this.taxExempt, other.taxExempt) &&
            Utils.enhancedDeepEquals(this.unitOfMeasure, other.unitOfMeasure) &&
            Utils.enhancedDeepEquals(this.commodityCode, other.commodityCode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.dutyAmount, other.dutyAmount) &&
            Utils.enhancedDeepEquals(this.shippingAmount, other.shippingAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, quantity, unitAmount,
            discountAmount, taxAmount, externalIdentifier,
            sku, productUrl, imageUrl,
            categories, productType, sellerCountry,
            taxExempt, unitOfMeasure, commodityCode,
            description, dutyAmount, shippingAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CartItem.class,
                "name", name,
                "quantity", quantity,
                "unitAmount", unitAmount,
                "discountAmount", discountAmount,
                "taxAmount", taxAmount,
                "externalIdentifier", externalIdentifier,
                "sku", sku,
                "productUrl", productUrl,
                "imageUrl", imageUrl,
                "categories", categories,
                "productType", productType,
                "sellerCountry", sellerCountry,
                "taxExempt", taxExempt,
                "unitOfMeasure", unitOfMeasure,
                "commodityCode", commodityCode,
                "description", description,
                "dutyAmount", dutyAmount,
                "shippingAmount", shippingAmount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private Long quantity;

        private Long unitAmount;

        private JsonNullable<Long> discountAmount = JsonNullable.undefined();

        private JsonNullable<Long> taxAmount = JsonNullable.undefined();

        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();

        private JsonNullable<String> sku = JsonNullable.undefined();

        private JsonNullable<String> productUrl = JsonNullable.undefined();

        private JsonNullable<String> imageUrl = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> categories = JsonNullable.undefined();

        private JsonNullable<? extends ProductType> productType = JsonNullable.undefined();

        private JsonNullable<String> sellerCountry = JsonNullable.undefined();

        private JsonNullable<Boolean> taxExempt = JsonNullable.undefined();

        private JsonNullable<String> unitOfMeasure = JsonNullable.undefined();

        private JsonNullable<String> commodityCode = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<Long> dutyAmount = JsonNullable.undefined();

        private JsonNullable<Long> shippingAmount = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The quantity of this item in the cart. This value cannot be negative or zero.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
         */
        public Builder unitAmount(long unitAmount) {
            Utils.checkNotNull(unitAmount, "unitAmount");
            this.unitAmount = unitAmount;
            return this;
        }


        /**
         * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder discountAmount(long discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder discountAmount(JsonNullable<Long> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }


        /**
         * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder taxAmount(long taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder taxAmount(JsonNullable<Long> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }


        /**
         * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }


        /**
         * The SKU or product code for the item.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The SKU or product code for the item.
         */
        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        /**
         * The product URL for the item.
         */
        public Builder productUrl(String productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = JsonNullable.of(productUrl);
            return this;
        }

        /**
         * The product URL for the item.
         */
        public Builder productUrl(JsonNullable<String> productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = productUrl;
            return this;
        }


        /**
         * The URL for the image of the item.
         */
        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = JsonNullable.of(imageUrl);
            return this;
        }

        /**
         * The URL for the image of the item.
         */
        public Builder imageUrl(JsonNullable<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }


        /**
         * A list of strings containing product categories for the item.
         */
        public Builder categories(List<String> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = JsonNullable.of(categories);
            return this;
        }

        /**
         * A list of strings containing product categories for the item.
         */
        public Builder categories(JsonNullable<? extends List<String>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }


        /**
         * The product type of the cart item.
         */
        public Builder productType(ProductType productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = JsonNullable.of(productType);
            return this;
        }

        /**
         * The product type of the cart item.
         */
        public Builder productType(JsonNullable<? extends ProductType> productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = productType;
            return this;
        }


        /**
         * The seller country of the cart item.
         */
        public Builder sellerCountry(String sellerCountry) {
            Utils.checkNotNull(sellerCountry, "sellerCountry");
            this.sellerCountry = JsonNullable.of(sellerCountry);
            return this;
        }

        /**
         * The seller country of the cart item.
         */
        public Builder sellerCountry(JsonNullable<String> sellerCountry) {
            Utils.checkNotNull(sellerCountry, "sellerCountry");
            this.sellerCountry = sellerCountry;
            return this;
        }


        /**
         * Whether the item is exempt of tax.
         */
        public Builder taxExempt(boolean taxExempt) {
            Utils.checkNotNull(taxExempt, "taxExempt");
            this.taxExempt = JsonNullable.of(taxExempt);
            return this;
        }

        /**
         * Whether the item is exempt of tax.
         */
        public Builder taxExempt(JsonNullable<Boolean> taxExempt) {
            Utils.checkNotNull(taxExempt, "taxExempt");
            this.taxExempt = taxExempt;
            return this;
        }


        /**
         * The unit of measure or the unit of measure code.
         */
        public Builder unitOfMeasure(String unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
            return this;
        }

        /**
         * The unit of measure or the unit of measure code.
         */
        public Builder unitOfMeasure(JsonNullable<String> unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }


        /**
         * Item commodity code. Generally a UNSPSC code.
         */
        public Builder commodityCode(String commodityCode) {
            Utils.checkNotNull(commodityCode, "commodityCode");
            this.commodityCode = JsonNullable.of(commodityCode);
            return this;
        }

        /**
         * Item commodity code. Generally a UNSPSC code.
         */
        public Builder commodityCode(JsonNullable<String> commodityCode) {
            Utils.checkNotNull(commodityCode, "commodityCode");
            this.commodityCode = commodityCode;
            return this;
        }


        /**
         * Brief item description.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Brief item description.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
         */
        public Builder dutyAmount(long dutyAmount) {
            Utils.checkNotNull(dutyAmount, "dutyAmount");
            this.dutyAmount = JsonNullable.of(dutyAmount);
            return this;
        }

        /**
         * Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
         */
        public Builder dutyAmount(JsonNullable<Long> dutyAmount) {
            Utils.checkNotNull(dutyAmount, "dutyAmount");
            this.dutyAmount = dutyAmount;
            return this;
        }


        /**
         * Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
         */
        public Builder shippingAmount(long shippingAmount) {
            Utils.checkNotNull(shippingAmount, "shippingAmount");
            this.shippingAmount = JsonNullable.of(shippingAmount);
            return this;
        }

        /**
         * Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
         */
        public Builder shippingAmount(JsonNullable<Long> shippingAmount) {
            Utils.checkNotNull(shippingAmount, "shippingAmount");
            this.shippingAmount = shippingAmount;
            return this;
        }

        public CartItem build() {

            return new CartItem(
                name, quantity, unitAmount,
                discountAmount, taxAmount, externalIdentifier,
                sku, productUrl, imageUrl,
                categories, productType, sellerCountry,
                taxExempt, unitOfMeasure, commodityCode,
                description, dutyAmount, shippingAmount);
        }

    }
}
