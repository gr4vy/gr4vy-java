/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PaymentOption {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonProperty("method")
    private String method;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon_url")
    private JsonNullable<String> iconUrl;

    @JsonProperty("mode")
    private Mode mode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private JsonNullable<String> label;

    @JsonProperty("can_store_payment_method")
    private boolean canStorePaymentMethod;

    @JsonProperty("can_delay_capture")
    private boolean canDelayCapture;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    private JsonNullable<? extends Context> context;

    @JsonCreator
    public PaymentOption(
            @JsonProperty("method") String method,
            @JsonProperty("icon_url") JsonNullable<String> iconUrl,
            @JsonProperty("mode") Mode mode,
            @JsonProperty("label") JsonNullable<String> label,
            @JsonProperty("can_store_payment_method") boolean canStorePaymentMethod,
            @JsonProperty("can_delay_capture") boolean canDelayCapture,
            @JsonProperty("context") JsonNullable<? extends Context> context) {
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(iconUrl, "iconUrl");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(canStorePaymentMethod, "canStorePaymentMethod");
        Utils.checkNotNull(canDelayCapture, "canDelayCapture");
        Utils.checkNotNull(context, "context");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.method = method;
        this.iconUrl = iconUrl;
        this.mode = mode;
        this.label = label;
        this.canStorePaymentMethod = canStorePaymentMethod;
        this.canDelayCapture = canDelayCapture;
        this.context = context;
    }
    
    public PaymentOption(
            String method,
            Mode mode,
            boolean canStorePaymentMethod,
            boolean canDelayCapture) {
        this(method, JsonNullable.undefined(), mode, JsonNullable.undefined(), canStorePaymentMethod, canDelayCapture, JsonNullable.undefined());
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public String method() {
        return method;
    }

    @JsonIgnore
    public JsonNullable<String> iconUrl() {
        return iconUrl;
    }

    @JsonIgnore
    public Mode mode() {
        return mode;
    }

    @JsonIgnore
    public JsonNullable<String> label() {
        return label;
    }

    @JsonIgnore
    public boolean canStorePaymentMethod() {
        return canStorePaymentMethod;
    }

    @JsonIgnore
    public boolean canDelayCapture() {
        return canDelayCapture;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Context> context() {
        return (JsonNullable<Context>) context;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PaymentOption withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    public PaymentOption withIconUrl(String iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = JsonNullable.of(iconUrl);
        return this;
    }

    public PaymentOption withIconUrl(JsonNullable<String> iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = iconUrl;
        return this;
    }

    public PaymentOption withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    public PaymentOption withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = JsonNullable.of(label);
        return this;
    }

    public PaymentOption withLabel(JsonNullable<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public PaymentOption withCanStorePaymentMethod(boolean canStorePaymentMethod) {
        Utils.checkNotNull(canStorePaymentMethod, "canStorePaymentMethod");
        this.canStorePaymentMethod = canStorePaymentMethod;
        return this;
    }

    public PaymentOption withCanDelayCapture(boolean canDelayCapture) {
        Utils.checkNotNull(canDelayCapture, "canDelayCapture");
        this.canDelayCapture = canDelayCapture;
        return this;
    }

    public PaymentOption withContext(Context context) {
        Utils.checkNotNull(context, "context");
        this.context = JsonNullable.of(context);
        return this;
    }

    public PaymentOption withContext(JsonNullable<? extends Context> context) {
        Utils.checkNotNull(context, "context");
        this.context = context;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentOption other = (PaymentOption) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.iconUrl, other.iconUrl) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.canStorePaymentMethod, other.canStorePaymentMethod) &&
            Utils.enhancedDeepEquals(this.canDelayCapture, other.canDelayCapture) &&
            Utils.enhancedDeepEquals(this.context, other.context);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            method,
            iconUrl,
            mode,
            label,
            canStorePaymentMethod,
            canDelayCapture,
            context);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentOption.class,
                "type", type,
                "method", method,
                "iconUrl", iconUrl,
                "mode", mode,
                "label", label,
                "canStorePaymentMethod", canStorePaymentMethod,
                "canDelayCapture", canDelayCapture,
                "context", context);
    }
    
    public final static class Builder {
 
        private String method;
 
        private JsonNullable<String> iconUrl = JsonNullable.undefined();
 
        private Mode mode;
 
        private JsonNullable<String> label = JsonNullable.undefined();
 
        private Boolean canStorePaymentMethod;
 
        private Boolean canDelayCapture;
 
        private JsonNullable<? extends Context> context = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        public Builder iconUrl(String iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = JsonNullable.of(iconUrl);
            return this;
        }

        public Builder iconUrl(JsonNullable<String> iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = iconUrl;
            return this;
        }

        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = JsonNullable.of(label);
            return this;
        }

        public Builder label(JsonNullable<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        public Builder canStorePaymentMethod(boolean canStorePaymentMethod) {
            Utils.checkNotNull(canStorePaymentMethod, "canStorePaymentMethod");
            this.canStorePaymentMethod = canStorePaymentMethod;
            return this;
        }

        public Builder canDelayCapture(boolean canDelayCapture) {
            Utils.checkNotNull(canDelayCapture, "canDelayCapture");
            this.canDelayCapture = canDelayCapture;
            return this;
        }

        public Builder context(Context context) {
            Utils.checkNotNull(context, "context");
            this.context = JsonNullable.of(context);
            return this;
        }

        public Builder context(JsonNullable<? extends Context> context) {
            Utils.checkNotNull(context, "context");
            this.context = context;
            return this;
        }
        
        public PaymentOption build() {
            return new PaymentOption(
                method,
                iconUrl,
                mode,
                label,
                canStorePaymentMethod,
                canDelayCapture,
                context);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-option\"",
                        new TypeReference<Optional<String>>() {});
    }
}
