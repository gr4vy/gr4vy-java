/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Report {

    /**
     * Always `report`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The unique ID for the report.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The merchant account ID this report belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * The name of the report.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The ID of the user who created the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator_id")
    private JsonNullable<String> creatorId;

    /**
     * The display name of the report creator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator_display_name")
    private JsonNullable<String> creatorDisplayName;

    /**
     * The type of the report creator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator_type")
    private JsonNullable<? extends ReportCreatorType> creatorType;

    /**
     * The date this report was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date this report was last updated.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    /**
     * The next scheduled execution time for the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_execution_at")
    private JsonNullable<OffsetDateTime> nextExecutionAt;

    /**
     * A description of the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    @JsonProperty("schedule")
    private ReportSchedule schedule;

    /**
     * Whether the report schedule is enabled.
     */
    @JsonProperty("schedule_enabled")
    private boolean scheduleEnabled;

    /**
     * The timezone for the report schedule.
     */
    @JsonProperty("schedule_timezone")
    private String scheduleTimezone;

    @JsonProperty("spec")
    private ReportSpec spec;

    /**
     * The latest execution summary for the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latest_execution")
    private JsonNullable<? extends ReportExecutionSummary> latestExecution;

    @JsonCreator
    public Report(
            @JsonProperty("id") String id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("name") String name,
            @JsonProperty("creator_id") JsonNullable<String> creatorId,
            @JsonProperty("creator_display_name") JsonNullable<String> creatorDisplayName,
            @JsonProperty("creator_type") JsonNullable<? extends ReportCreatorType> creatorType,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("next_execution_at") JsonNullable<OffsetDateTime> nextExecutionAt,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("schedule") ReportSchedule schedule,
            @JsonProperty("schedule_enabled") boolean scheduleEnabled,
            @JsonProperty("schedule_timezone") String scheduleTimezone,
            @JsonProperty("spec") ReportSpec spec,
            @JsonProperty("latest_execution") JsonNullable<? extends ReportExecutionSummary> latestExecution) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(creatorId, "creatorId");
        Utils.checkNotNull(creatorDisplayName, "creatorDisplayName");
        Utils.checkNotNull(creatorType, "creatorType");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(nextExecutionAt, "nextExecutionAt");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(schedule, "schedule");
        Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
        Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
        Utils.checkNotNull(spec, "spec");
        Utils.checkNotNull(latestExecution, "latestExecution");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.name = name;
        this.creatorId = creatorId;
        this.creatorDisplayName = creatorDisplayName;
        this.creatorType = creatorType;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.nextExecutionAt = nextExecutionAt;
        this.description = description;
        this.schedule = schedule;
        this.scheduleEnabled = scheduleEnabled;
        this.scheduleTimezone = scheduleTimezone;
        this.spec = spec;
        this.latestExecution = latestExecution;
    }
    
    public Report(
            String id,
            String merchantAccountId,
            String name,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            ReportSchedule schedule,
            boolean scheduleEnabled,
            String scheduleTimezone,
            ReportSpec spec) {
        this(id, merchantAccountId, name, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), createdAt, updatedAt, JsonNullable.undefined(), JsonNullable.undefined(), schedule, scheduleEnabled, scheduleTimezone, spec, JsonNullable.undefined());
    }

    /**
     * Always `report`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The unique ID for the report.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The merchant account ID this report belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * The name of the report.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The ID of the user who created the report.
     */
    @JsonIgnore
    public JsonNullable<String> creatorId() {
        return creatorId;
    }

    /**
     * The display name of the report creator.
     */
    @JsonIgnore
    public JsonNullable<String> creatorDisplayName() {
        return creatorDisplayName;
    }

    /**
     * The type of the report creator.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReportCreatorType> creatorType() {
        return (JsonNullable<ReportCreatorType>) creatorType;
    }

    /**
     * The date this report was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date this report was last updated.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    /**
     * The next scheduled execution time for the report.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> nextExecutionAt() {
        return nextExecutionAt;
    }

    /**
     * A description of the report.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @JsonIgnore
    public ReportSchedule schedule() {
        return schedule;
    }

    /**
     * Whether the report schedule is enabled.
     */
    @JsonIgnore
    public boolean scheduleEnabled() {
        return scheduleEnabled;
    }

    /**
     * The timezone for the report schedule.
     */
    @JsonIgnore
    public String scheduleTimezone() {
        return scheduleTimezone;
    }

    @JsonIgnore
    public ReportSpec spec() {
        return spec;
    }

    /**
     * The latest execution summary for the report.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReportExecutionSummary> latestExecution() {
        return (JsonNullable<ReportExecutionSummary>) latestExecution;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique ID for the report.
     */
    public Report withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The merchant account ID this report belongs to.
     */
    public Report withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * The name of the report.
     */
    public Report withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the user who created the report.
     */
    public Report withCreatorId(String creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = JsonNullable.of(creatorId);
        return this;
    }

    /**
     * The ID of the user who created the report.
     */
    public Report withCreatorId(JsonNullable<String> creatorId) {
        Utils.checkNotNull(creatorId, "creatorId");
        this.creatorId = creatorId;
        return this;
    }

    /**
     * The display name of the report creator.
     */
    public Report withCreatorDisplayName(String creatorDisplayName) {
        Utils.checkNotNull(creatorDisplayName, "creatorDisplayName");
        this.creatorDisplayName = JsonNullable.of(creatorDisplayName);
        return this;
    }

    /**
     * The display name of the report creator.
     */
    public Report withCreatorDisplayName(JsonNullable<String> creatorDisplayName) {
        Utils.checkNotNull(creatorDisplayName, "creatorDisplayName");
        this.creatorDisplayName = creatorDisplayName;
        return this;
    }

    /**
     * The type of the report creator.
     */
    public Report withCreatorType(ReportCreatorType creatorType) {
        Utils.checkNotNull(creatorType, "creatorType");
        this.creatorType = JsonNullable.of(creatorType);
        return this;
    }

    /**
     * The type of the report creator.
     */
    public Report withCreatorType(JsonNullable<? extends ReportCreatorType> creatorType) {
        Utils.checkNotNull(creatorType, "creatorType");
        this.creatorType = creatorType;
        return this;
    }

    /**
     * The date this report was created at.
     */
    public Report withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date this report was last updated.
     */
    public Report withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The next scheduled execution time for the report.
     */
    public Report withNextExecutionAt(OffsetDateTime nextExecutionAt) {
        Utils.checkNotNull(nextExecutionAt, "nextExecutionAt");
        this.nextExecutionAt = JsonNullable.of(nextExecutionAt);
        return this;
    }

    /**
     * The next scheduled execution time for the report.
     */
    public Report withNextExecutionAt(JsonNullable<OffsetDateTime> nextExecutionAt) {
        Utils.checkNotNull(nextExecutionAt, "nextExecutionAt");
        this.nextExecutionAt = nextExecutionAt;
        return this;
    }

    /**
     * A description of the report.
     */
    public Report withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the report.
     */
    public Report withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public Report withSchedule(ReportSchedule schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = schedule;
        return this;
    }

    /**
     * Whether the report schedule is enabled.
     */
    public Report withScheduleEnabled(boolean scheduleEnabled) {
        Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
        this.scheduleEnabled = scheduleEnabled;
        return this;
    }

    /**
     * The timezone for the report schedule.
     */
    public Report withScheduleTimezone(String scheduleTimezone) {
        Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
        this.scheduleTimezone = scheduleTimezone;
        return this;
    }

    public Report withSpec(ReportSpec spec) {
        Utils.checkNotNull(spec, "spec");
        this.spec = spec;
        return this;
    }

    /**
     * The latest execution summary for the report.
     */
    public Report withLatestExecution(ReportExecutionSummary latestExecution) {
        Utils.checkNotNull(latestExecution, "latestExecution");
        this.latestExecution = JsonNullable.of(latestExecution);
        return this;
    }

    /**
     * The latest execution summary for the report.
     */
    public Report withLatestExecution(JsonNullable<? extends ReportExecutionSummary> latestExecution) {
        Utils.checkNotNull(latestExecution, "latestExecution");
        this.latestExecution = latestExecution;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Report other = (Report) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.creatorId, other.creatorId) &&
            Objects.deepEquals(this.creatorDisplayName, other.creatorDisplayName) &&
            Objects.deepEquals(this.creatorType, other.creatorType) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.nextExecutionAt, other.nextExecutionAt) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.schedule, other.schedule) &&
            Objects.deepEquals(this.scheduleEnabled, other.scheduleEnabled) &&
            Objects.deepEquals(this.scheduleTimezone, other.scheduleTimezone) &&
            Objects.deepEquals(this.spec, other.spec) &&
            Objects.deepEquals(this.latestExecution, other.latestExecution);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            merchantAccountId,
            name,
            creatorId,
            creatorDisplayName,
            creatorType,
            createdAt,
            updatedAt,
            nextExecutionAt,
            description,
            schedule,
            scheduleEnabled,
            scheduleTimezone,
            spec,
            latestExecution);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Report.class,
                "type", type,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "name", name,
                "creatorId", creatorId,
                "creatorDisplayName", creatorDisplayName,
                "creatorType", creatorType,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "nextExecutionAt", nextExecutionAt,
                "description", description,
                "schedule", schedule,
                "scheduleEnabled", scheduleEnabled,
                "scheduleTimezone", scheduleTimezone,
                "spec", spec,
                "latestExecution", latestExecution);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String merchantAccountId;
 
        private String name;
 
        private JsonNullable<String> creatorId = JsonNullable.undefined();
 
        private JsonNullable<String> creatorDisplayName = JsonNullable.undefined();
 
        private JsonNullable<? extends ReportCreatorType> creatorType = JsonNullable.undefined();
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
 
        private JsonNullable<OffsetDateTime> nextExecutionAt = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private ReportSchedule schedule;
 
        private Boolean scheduleEnabled;
 
        private String scheduleTimezone;
 
        private ReportSpec spec;
 
        private JsonNullable<? extends ReportExecutionSummary> latestExecution = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique ID for the report.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The merchant account ID this report belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        /**
         * The name of the report.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The ID of the user who created the report.
         */
        public Builder creatorId(String creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = JsonNullable.of(creatorId);
            return this;
        }

        /**
         * The ID of the user who created the report.
         */
        public Builder creatorId(JsonNullable<String> creatorId) {
            Utils.checkNotNull(creatorId, "creatorId");
            this.creatorId = creatorId;
            return this;
        }

        /**
         * The display name of the report creator.
         */
        public Builder creatorDisplayName(String creatorDisplayName) {
            Utils.checkNotNull(creatorDisplayName, "creatorDisplayName");
            this.creatorDisplayName = JsonNullable.of(creatorDisplayName);
            return this;
        }

        /**
         * The display name of the report creator.
         */
        public Builder creatorDisplayName(JsonNullable<String> creatorDisplayName) {
            Utils.checkNotNull(creatorDisplayName, "creatorDisplayName");
            this.creatorDisplayName = creatorDisplayName;
            return this;
        }

        /**
         * The type of the report creator.
         */
        public Builder creatorType(ReportCreatorType creatorType) {
            Utils.checkNotNull(creatorType, "creatorType");
            this.creatorType = JsonNullable.of(creatorType);
            return this;
        }

        /**
         * The type of the report creator.
         */
        public Builder creatorType(JsonNullable<? extends ReportCreatorType> creatorType) {
            Utils.checkNotNull(creatorType, "creatorType");
            this.creatorType = creatorType;
            return this;
        }

        /**
         * The date this report was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date this report was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The next scheduled execution time for the report.
         */
        public Builder nextExecutionAt(OffsetDateTime nextExecutionAt) {
            Utils.checkNotNull(nextExecutionAt, "nextExecutionAt");
            this.nextExecutionAt = JsonNullable.of(nextExecutionAt);
            return this;
        }

        /**
         * The next scheduled execution time for the report.
         */
        public Builder nextExecutionAt(JsonNullable<OffsetDateTime> nextExecutionAt) {
            Utils.checkNotNull(nextExecutionAt, "nextExecutionAt");
            this.nextExecutionAt = nextExecutionAt;
            return this;
        }

        /**
         * A description of the report.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the report.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder schedule(ReportSchedule schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = schedule;
            return this;
        }

        /**
         * Whether the report schedule is enabled.
         */
        public Builder scheduleEnabled(boolean scheduleEnabled) {
            Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
            this.scheduleEnabled = scheduleEnabled;
            return this;
        }

        /**
         * The timezone for the report schedule.
         */
        public Builder scheduleTimezone(String scheduleTimezone) {
            Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
            this.scheduleTimezone = scheduleTimezone;
            return this;
        }

        public Builder spec(ReportSpec spec) {
            Utils.checkNotNull(spec, "spec");
            this.spec = spec;
            return this;
        }

        /**
         * The latest execution summary for the report.
         */
        public Builder latestExecution(ReportExecutionSummary latestExecution) {
            Utils.checkNotNull(latestExecution, "latestExecution");
            this.latestExecution = JsonNullable.of(latestExecution);
            return this;
        }

        /**
         * The latest execution summary for the report.
         */
        public Builder latestExecution(JsonNullable<? extends ReportExecutionSummary> latestExecution) {
            Utils.checkNotNull(latestExecution, "latestExecution");
            this.latestExecution = latestExecution;
            return this;
        }
        
        public Report build() {
            return new Report(
                id,
                merchantAccountId,
                name,
                creatorId,
                creatorDisplayName,
                creatorType,
                createdAt,
                updatedAt,
                nextExecutionAt,
                description,
                schedule,
                scheduleEnabled,
                scheduleTimezone,
                spec,
                latestExecution);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"report\"",
                        new TypeReference<Optional<String>>() {});
    }
}
