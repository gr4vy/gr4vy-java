/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionUpdate {
    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * Additional information about the transaction stored as key-value pairs. If provided, the whole value
     * will be overridden.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    /**
     * Allows for passing optional configuration per connection to take advantage of connection specific
     * features. When provided, the data is only passed to the target connection type to prevent sharing
     * configuration across connections. Please note that each of the keys this object are in kebab-case,
     * for example `cybersource-anti-fraud` as they represent the ID of the connector.
     * 
     * <p>All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an
     * external API that the connector uses. If provided, the whole value will be overridden.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_options")
    private JsonNullable<? extends TransactionConnectionOptions> connectionOptions;

    @JsonCreator
    public TransactionUpdate(
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("connection_options") JsonNullable<? extends TransactionConnectionOptions> connectionOptions) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.externalIdentifier = externalIdentifier;
        this.metadata = metadata;
        this.connectionOptions = connectionOptions;
    }
    
    public TransactionUpdate() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * Additional information about the transaction stored as key-value pairs. If provided, the whole value
     * will be overridden.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    /**
     * Allows for passing optional configuration per connection to take advantage of connection specific
     * features. When provided, the data is only passed to the target connection type to prevent sharing
     * configuration across connections. Please note that each of the keys this object are in kebab-case,
     * for example `cybersource-anti-fraud` as they represent the ID of the connector.
     * 
     * <p>All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an
     * external API that the connector uses. If provided, the whole value will be overridden.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionConnectionOptions> connectionOptions() {
        return (JsonNullable<TransactionConnectionOptions>) connectionOptions;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public TransactionUpdate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public TransactionUpdate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * Additional information about the transaction stored as key-value pairs. If provided, the whole value
     * will be overridden.
     */
    public TransactionUpdate withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Additional information about the transaction stored as key-value pairs. If provided, the whole value
     * will be overridden.
     */
    public TransactionUpdate withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Allows for passing optional configuration per connection to take advantage of connection specific
     * features. When provided, the data is only passed to the target connection type to prevent sharing
     * configuration across connections. Please note that each of the keys this object are in kebab-case,
     * for example `cybersource-anti-fraud` as they represent the ID of the connector.
     * 
     * <p>All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an
     * external API that the connector uses. If provided, the whole value will be overridden.
     */
    public TransactionUpdate withConnectionOptions(TransactionConnectionOptions connectionOptions) {
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.connectionOptions = JsonNullable.of(connectionOptions);
        return this;
    }

    /**
     * Allows for passing optional configuration per connection to take advantage of connection specific
     * features. When provided, the data is only passed to the target connection type to prevent sharing
     * configuration across connections. Please note that each of the keys this object are in kebab-case,
     * for example `cybersource-anti-fraud` as they represent the ID of the connector.
     * 
     * <p>All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an
     * external API that the connector uses. If provided, the whole value will be overridden.
     */
    public TransactionUpdate withConnectionOptions(JsonNullable<? extends TransactionConnectionOptions> connectionOptions) {
        Utils.checkNotNull(connectionOptions, "connectionOptions");
        this.connectionOptions = connectionOptions;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionUpdate other = (TransactionUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.connectionOptions, other.connectionOptions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalIdentifier, metadata, connectionOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionUpdate.class,
                "externalIdentifier", externalIdentifier,
                "metadata", metadata,
                "connectionOptions", connectionOptions);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();

        private JsonNullable<? extends TransactionConnectionOptions> connectionOptions = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }


        /**
         * Additional information about the transaction stored as key-value pairs. If provided, the whole value
         * will be overridden.
         */
        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Additional information about the transaction stored as key-value pairs. If provided, the whole value
         * will be overridden.
         */
        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * Allows for passing optional configuration per connection to take advantage of connection specific
         * features. When provided, the data is only passed to the target connection type to prevent sharing
         * configuration across connections. Please note that each of the keys this object are in kebab-case,
         * for example `cybersource-anti-fraud` as they represent the ID of the connector.
         * 
         * <p>All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an
         * external API that the connector uses. If provided, the whole value will be overridden.
         */
        public Builder connectionOptions(TransactionConnectionOptions connectionOptions) {
            Utils.checkNotNull(connectionOptions, "connectionOptions");
            this.connectionOptions = JsonNullable.of(connectionOptions);
            return this;
        }

        /**
         * Allows for passing optional configuration per connection to take advantage of connection specific
         * features. When provided, the data is only passed to the target connection type to prevent sharing
         * configuration across connections. Please note that each of the keys this object are in kebab-case,
         * for example `cybersource-anti-fraud` as they represent the ID of the connector.
         * 
         * <p>All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an
         * external API that the connector uses. If provided, the whole value will be overridden.
         */
        public Builder connectionOptions(JsonNullable<? extends TransactionConnectionOptions> connectionOptions) {
            Utils.checkNotNull(connectionOptions, "connectionOptions");
            this.connectionOptions = connectionOptions;
            return this;
        }

        public TransactionUpdate build() {

            return new TransactionUpdate(
                externalIdentifier, metadata, connectionOptions);
        }

    }
}
