/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class CheckoutPayoutOptions {
    /**
     * The processing channel to be used for the payment.
     */
    @JsonProperty("processing_channel_id")
    private String processingChannelId;

    /**
     * The ID of the currency account that will fund the payout.
     */
    @JsonProperty("source_id")
    private String sourceId;

    @JsonCreator
    public CheckoutPayoutOptions(
            @JsonProperty("processing_channel_id") String processingChannelId,
            @JsonProperty("source_id") String sourceId) {
        Utils.checkNotNull(processingChannelId, "processingChannelId");
        Utils.checkNotNull(sourceId, "sourceId");
        this.processingChannelId = processingChannelId;
        this.sourceId = sourceId;
    }

    /**
     * The processing channel to be used for the payment.
     */
    @JsonIgnore
    public String processingChannelId() {
        return processingChannelId;
    }

    /**
     * The ID of the currency account that will fund the payout.
     */
    @JsonIgnore
    public String sourceId() {
        return sourceId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The processing channel to be used for the payment.
     */
    public CheckoutPayoutOptions withProcessingChannelId(String processingChannelId) {
        Utils.checkNotNull(processingChannelId, "processingChannelId");
        this.processingChannelId = processingChannelId;
        return this;
    }

    /**
     * The ID of the currency account that will fund the payout.
     */
    public CheckoutPayoutOptions withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckoutPayoutOptions other = (CheckoutPayoutOptions) o;
        return 
            Utils.enhancedDeepEquals(this.processingChannelId, other.processingChannelId) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            processingChannelId, sourceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CheckoutPayoutOptions.class,
                "processingChannelId", processingChannelId,
                "sourceId", sourceId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String processingChannelId;

        private String sourceId;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The processing channel to be used for the payment.
         */
        public Builder processingChannelId(String processingChannelId) {
            Utils.checkNotNull(processingChannelId, "processingChannelId");
            this.processingChannelId = processingChannelId;
            return this;
        }


        /**
         * The ID of the currency account that will fund the payout.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        public CheckoutPayoutOptions build() {

            return new CheckoutPayoutOptions(
                processingChannelId, sourceId);
        }

    }
}
