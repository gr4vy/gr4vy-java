/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;

/**
 * GiftCardTransactionCreate
 * 
 * <p>Create a charge against a gift card
 */
public class GiftCardTransactionCreate {

    /**
     * The 16-19 digit number for the gift card.
     */
    @JsonProperty("number")
    private String number;

    /**
     * The PIN for this gift card.
     */
    @JsonProperty("pin")
    private String pin;

    /**
     * The monetary amount for this transaction to charge against the gift card, in the smallest currency unit (for example, cents or pence).
     */
    @JsonProperty("amount")
    private long amount;

    @JsonCreator
    public GiftCardTransactionCreate(
            @JsonProperty("number") String number,
            @JsonProperty("pin") String pin,
            @JsonProperty("amount") long amount) {
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(pin, "pin");
        Utils.checkNotNull(amount, "amount");
        this.number = number;
        this.pin = pin;
        this.amount = amount;
    }

    /**
     * The 16-19 digit number for the gift card.
     */
    @JsonIgnore
    public String number() {
        return number;
    }

    /**
     * The PIN for this gift card.
     */
    @JsonIgnore
    public String pin() {
        return pin;
    }

    /**
     * The monetary amount for this transaction to charge against the gift card, in the smallest currency unit (for example, cents or pence).
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The 16-19 digit number for the gift card.
     */
    public GiftCardTransactionCreate withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The PIN for this gift card.
     */
    public GiftCardTransactionCreate withPin(String pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = pin;
        return this;
    }

    /**
     * The monetary amount for this transaction to charge against the gift card, in the smallest currency unit (for example, cents or pence).
     */
    public GiftCardTransactionCreate withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GiftCardTransactionCreate other = (GiftCardTransactionCreate) o;
        return 
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.pin, other.pin) &&
            Utils.enhancedDeepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            number,
            pin,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GiftCardTransactionCreate.class,
                "number", number,
                "pin", pin,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private String number;
 
        private String pin;
 
        private Long amount;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The 16-19 digit number for the gift card.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * The PIN for this gift card.
         */
        public Builder pin(String pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = pin;
            return this;
        }

        /**
         * The monetary amount for this transaction to charge against the gift card, in the smallest currency unit (for example, cents or pence).
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public GiftCardTransactionCreate build() {
            return new GiftCardTransactionCreate(
                number,
                pin,
                amount);
        }
    }
}
