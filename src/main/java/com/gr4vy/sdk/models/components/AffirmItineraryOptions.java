/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class AffirmItineraryOptions {
    /**
     * The type of itinerary object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * The booking/itinerary number (if applicable).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * Readable description of the itinerary item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The name of the venue where the event is hosted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("venue")
    private JsonNullable<String> venue;

    /**
     * The address object that can be parsed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private JsonNullable<String> location;

    /**
     * The start date of this itinerary item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_start")
    private JsonNullable<String> dateStart;

    /**
     * The corporation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("management")
    private JsonNullable<String> management;

    @JsonCreator
    public AffirmItineraryOptions(
            @JsonProperty("type") JsonNullable<String> type,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("venue") JsonNullable<String> venue,
            @JsonProperty("location") JsonNullable<String> location,
            @JsonProperty("date_start") JsonNullable<String> dateStart,
            @JsonProperty("management") JsonNullable<String> management) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(venue, "venue");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(dateStart, "dateStart");
        Utils.checkNotNull(management, "management");
        this.type = type;
        this.sku = sku;
        this.displayName = displayName;
        this.venue = venue;
        this.location = location;
        this.dateStart = dateStart;
        this.management = management;
    }
    
    public AffirmItineraryOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The type of itinerary object.
     */
    @JsonIgnore
    public JsonNullable<String> type() {
        return type;
    }

    /**
     * The booking/itinerary number (if applicable).
     */
    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    /**
     * Readable description of the itinerary item.
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The name of the venue where the event is hosted.
     */
    @JsonIgnore
    public JsonNullable<String> venue() {
        return venue;
    }

    /**
     * The address object that can be parsed.
     */
    @JsonIgnore
    public JsonNullable<String> location() {
        return location;
    }

    /**
     * The start date of this itinerary item.
     */
    @JsonIgnore
    public JsonNullable<String> dateStart() {
        return dateStart;
    }

    /**
     * The corporation.
     */
    @JsonIgnore
    public JsonNullable<String> management() {
        return management;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of itinerary object.
     */
    public AffirmItineraryOptions withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of itinerary object.
     */
    public AffirmItineraryOptions withType(JsonNullable<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The booking/itinerary number (if applicable).
     */
    public AffirmItineraryOptions withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    /**
     * The booking/itinerary number (if applicable).
     */
    public AffirmItineraryOptions withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * Readable description of the itinerary item.
     */
    public AffirmItineraryOptions withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * Readable description of the itinerary item.
     */
    public AffirmItineraryOptions withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The name of the venue where the event is hosted.
     */
    public AffirmItineraryOptions withVenue(String venue) {
        Utils.checkNotNull(venue, "venue");
        this.venue = JsonNullable.of(venue);
        return this;
    }

    /**
     * The name of the venue where the event is hosted.
     */
    public AffirmItineraryOptions withVenue(JsonNullable<String> venue) {
        Utils.checkNotNull(venue, "venue");
        this.venue = venue;
        return this;
    }

    /**
     * The address object that can be parsed.
     */
    public AffirmItineraryOptions withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = JsonNullable.of(location);
        return this;
    }

    /**
     * The address object that can be parsed.
     */
    public AffirmItineraryOptions withLocation(JsonNullable<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    /**
     * The start date of this itinerary item.
     */
    public AffirmItineraryOptions withDateStart(String dateStart) {
        Utils.checkNotNull(dateStart, "dateStart");
        this.dateStart = JsonNullable.of(dateStart);
        return this;
    }

    /**
     * The start date of this itinerary item.
     */
    public AffirmItineraryOptions withDateStart(JsonNullable<String> dateStart) {
        Utils.checkNotNull(dateStart, "dateStart");
        this.dateStart = dateStart;
        return this;
    }

    /**
     * The corporation.
     */
    public AffirmItineraryOptions withManagement(String management) {
        Utils.checkNotNull(management, "management");
        this.management = JsonNullable.of(management);
        return this;
    }

    /**
     * The corporation.
     */
    public AffirmItineraryOptions withManagement(JsonNullable<String> management) {
        Utils.checkNotNull(management, "management");
        this.management = management;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AffirmItineraryOptions other = (AffirmItineraryOptions) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.venue, other.venue) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.dateStart, other.dateStart) &&
            Utils.enhancedDeepEquals(this.management, other.management);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, sku, displayName,
            venue, location, dateStart,
            management);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AffirmItineraryOptions.class,
                "type", type,
                "sku", sku,
                "displayName", displayName,
                "venue", venue,
                "location", location,
                "dateStart", dateStart,
                "management", management);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> type = JsonNullable.undefined();

        private JsonNullable<String> sku = JsonNullable.undefined();

        private JsonNullable<String> displayName = JsonNullable.undefined();

        private JsonNullable<String> venue = JsonNullable.undefined();

        private JsonNullable<String> location = JsonNullable.undefined();

        private JsonNullable<String> dateStart = JsonNullable.undefined();

        private JsonNullable<String> management = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of itinerary object.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of itinerary object.
         */
        public Builder type(JsonNullable<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The booking/itinerary number (if applicable).
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The booking/itinerary number (if applicable).
         */
        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        /**
         * Readable description of the itinerary item.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * Readable description of the itinerary item.
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }


        /**
         * The name of the venue where the event is hosted.
         */
        public Builder venue(String venue) {
            Utils.checkNotNull(venue, "venue");
            this.venue = JsonNullable.of(venue);
            return this;
        }

        /**
         * The name of the venue where the event is hosted.
         */
        public Builder venue(JsonNullable<String> venue) {
            Utils.checkNotNull(venue, "venue");
            this.venue = venue;
            return this;
        }


        /**
         * The address object that can be parsed.
         */
        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = JsonNullable.of(location);
            return this;
        }

        /**
         * The address object that can be parsed.
         */
        public Builder location(JsonNullable<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }


        /**
         * The start date of this itinerary item.
         */
        public Builder dateStart(String dateStart) {
            Utils.checkNotNull(dateStart, "dateStart");
            this.dateStart = JsonNullable.of(dateStart);
            return this;
        }

        /**
         * The start date of this itinerary item.
         */
        public Builder dateStart(JsonNullable<String> dateStart) {
            Utils.checkNotNull(dateStart, "dateStart");
            this.dateStart = dateStart;
            return this;
        }


        /**
         * The corporation.
         */
        public Builder management(String management) {
            Utils.checkNotNull(management, "management");
            this.management = JsonNullable.of(management);
            return this;
        }

        /**
         * The corporation.
         */
        public Builder management(JsonNullable<String> management) {
            Utils.checkNotNull(management, "management");
            this.management = management;
            return this;
        }

        public AffirmItineraryOptions build() {

            return new AffirmItineraryOptions(
                type, sku, displayName,
                venue, location, dateStart,
                management);
        }

    }
}
