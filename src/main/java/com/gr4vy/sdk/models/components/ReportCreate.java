/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ReportCreate {

    /**
     * The name of the report.
     */
    @JsonProperty("name")
    private String name;

    /**
     * A description of the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    @JsonProperty("schedule")
    private ReportSchedule schedule;

    /**
     * Whether the report schedule is enabled.
     */
    @JsonProperty("schedule_enabled")
    private boolean scheduleEnabled;

    /**
     * The timezone for the report schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule_timezone")
    private Optional<String> scheduleTimezone;

    /**
     * The report specification.
     */
    @JsonProperty("spec")
    private Spec spec;

    @JsonCreator
    public ReportCreate(
            @JsonProperty("name") String name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("schedule") ReportSchedule schedule,
            @JsonProperty("schedule_enabled") boolean scheduleEnabled,
            @JsonProperty("schedule_timezone") Optional<String> scheduleTimezone,
            @JsonProperty("spec") Spec spec) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(schedule, "schedule");
        Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
        Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
        Utils.checkNotNull(spec, "spec");
        this.name = name;
        this.description = description;
        this.schedule = schedule;
        this.scheduleEnabled = scheduleEnabled;
        this.scheduleTimezone = scheduleTimezone;
        this.spec = spec;
    }
    
    public ReportCreate(
            String name,
            ReportSchedule schedule,
            boolean scheduleEnabled,
            Spec spec) {
        this(name, JsonNullable.undefined(), schedule, scheduleEnabled, Optional.empty(), spec);
    }

    /**
     * The name of the report.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A description of the report.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @JsonIgnore
    public ReportSchedule schedule() {
        return schedule;
    }

    /**
     * Whether the report schedule is enabled.
     */
    @JsonIgnore
    public boolean scheduleEnabled() {
        return scheduleEnabled;
    }

    /**
     * The timezone for the report schedule.
     */
    @JsonIgnore
    public Optional<String> scheduleTimezone() {
        return scheduleTimezone;
    }

    /**
     * The report specification.
     */
    @JsonIgnore
    public Spec spec() {
        return spec;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the report.
     */
    public ReportCreate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A description of the report.
     */
    public ReportCreate withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the report.
     */
    public ReportCreate withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ReportCreate withSchedule(ReportSchedule schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = schedule;
        return this;
    }

    /**
     * Whether the report schedule is enabled.
     */
    public ReportCreate withScheduleEnabled(boolean scheduleEnabled) {
        Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
        this.scheduleEnabled = scheduleEnabled;
        return this;
    }

    /**
     * The timezone for the report schedule.
     */
    public ReportCreate withScheduleTimezone(String scheduleTimezone) {
        Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
        this.scheduleTimezone = Optional.ofNullable(scheduleTimezone);
        return this;
    }

    /**
     * The timezone for the report schedule.
     */
    public ReportCreate withScheduleTimezone(Optional<String> scheduleTimezone) {
        Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
        this.scheduleTimezone = scheduleTimezone;
        return this;
    }

    /**
     * The report specification.
     */
    public ReportCreate withSpec(Spec spec) {
        Utils.checkNotNull(spec, "spec");
        this.spec = spec;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportCreate other = (ReportCreate) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.schedule, other.schedule) &&
            Utils.enhancedDeepEquals(this.scheduleEnabled, other.scheduleEnabled) &&
            Utils.enhancedDeepEquals(this.scheduleTimezone, other.scheduleTimezone) &&
            Utils.enhancedDeepEquals(this.spec, other.spec);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name,
            description,
            schedule,
            scheduleEnabled,
            scheduleTimezone,
            spec);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportCreate.class,
                "name", name,
                "description", description,
                "schedule", schedule,
                "scheduleEnabled", scheduleEnabled,
                "scheduleTimezone", scheduleTimezone,
                "spec", spec);
    }
    
    public final static class Builder {
 
        private String name;
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private ReportSchedule schedule;
 
        private Boolean scheduleEnabled;
 
        private Optional<String> scheduleTimezone;
 
        private Spec spec;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the report.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A description of the report.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the report.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder schedule(ReportSchedule schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = schedule;
            return this;
        }

        /**
         * Whether the report schedule is enabled.
         */
        public Builder scheduleEnabled(boolean scheduleEnabled) {
            Utils.checkNotNull(scheduleEnabled, "scheduleEnabled");
            this.scheduleEnabled = scheduleEnabled;
            return this;
        }

        /**
         * The timezone for the report schedule.
         */
        public Builder scheduleTimezone(String scheduleTimezone) {
            Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
            this.scheduleTimezone = Optional.ofNullable(scheduleTimezone);
            return this;
        }

        /**
         * The timezone for the report schedule.
         */
        public Builder scheduleTimezone(Optional<String> scheduleTimezone) {
            Utils.checkNotNull(scheduleTimezone, "scheduleTimezone");
            this.scheduleTimezone = scheduleTimezone;
            return this;
        }

        /**
         * The report specification.
         */
        public Builder spec(Spec spec) {
            Utils.checkNotNull(spec, "spec");
            this.spec = spec;
            return this;
        }
        
        public ReportCreate build() {
            if (scheduleTimezone == null) {
                scheduleTimezone = _SINGLETON_VALUE_ScheduleTimezone.value();
            }
            return new ReportCreate(
                name,
                description,
                schedule,
                scheduleEnabled,
                scheduleTimezone,
                spec);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_ScheduleTimezone =
                new LazySingletonValue<>(
                        "schedule_timezone",
                        "\"Etc/UTC\"",
                        new TypeReference<Optional<String>>() {});
    }
}
