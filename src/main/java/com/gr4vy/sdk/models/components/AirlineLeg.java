/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;


public class AirlineLeg {
    /**
     * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrival_airport")
    private JsonNullable<String> arrivalAirport;

    /**
     * The date and time of travel in local time at the arrival airport.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrival_at")
    private JsonNullable<OffsetDateTime> arrivalAt;

    /**
     * Arrival city name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrival_city")
    private JsonNullable<String> arrivalCity;

    /**
     * Arrival country code in ISO 3166 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrival_country")
    private JsonNullable<String> arrivalCountry;

    /**
     * 3 character airline code as set by IATA.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier_code")
    private JsonNullable<String> carrierCode;

    /**
     * Name of the airline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier_name")
    private JsonNullable<String> carrierName;

    /**
     * Two-character IATA code of the airline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iata_designator")
    private JsonNullable<String> iataDesignator;

    /**
     * Three-character ICAO code of the airline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icao_code")
    private JsonNullable<String> icaoCode;

    /**
     * Coupon number associated with the leg.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon_number")
    private JsonNullable<String> couponNumber;

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departure_airport")
    private JsonNullable<String> departureAirport;

    /**
     * The date and time of travel in local time at the departure airport.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departure_at")
    private JsonNullable<OffsetDateTime> departureAt;

    /**
     * Departure city name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departure_city")
    private JsonNullable<String> departureCity;

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departure_country")
    private JsonNullable<String> departureCountry;

    /**
     * Departure tax amount charged by a country when a person is leaving the country.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departure_tax_amount")
    private JsonNullable<Long> departureTaxAmount;

    /**
     * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fare_amount")
    private JsonNullable<Long> fareAmount;

    /**
     * The alphanumeric code for the booking class of a ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fare_basis_code")
    private JsonNullable<String> fareBasisCode;

    /**
     * Fee amount for current leg of the trip.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fee_amount")
    private JsonNullable<Long> feeAmount;

    /**
     * Indicates service class (first class, business class, etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flight_class")
    private JsonNullable<String> flightClass;

    /**
     * Unique identifier of the flight number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flight_number")
    private JsonNullable<String> flightNumber;

    /**
     * The route type of the flight.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("route_type")
    private JsonNullable<? extends RouteType> routeType;

    /**
     * Indicates seat class (first class, business class, etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seat_class")
    private JsonNullable<String> seatClass;

    /**
     * Indicates whether a stopover is allowed on this ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stop_over")
    private JsonNullable<Boolean> stopOver;

    /**
     * Amount of the taxes for current leg of the trip.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<Long> taxAmount;

    @JsonCreator
    public AirlineLeg(
            @JsonProperty("arrival_airport") JsonNullable<String> arrivalAirport,
            @JsonProperty("arrival_at") JsonNullable<OffsetDateTime> arrivalAt,
            @JsonProperty("arrival_city") JsonNullable<String> arrivalCity,
            @JsonProperty("arrival_country") JsonNullable<String> arrivalCountry,
            @JsonProperty("carrier_code") JsonNullable<String> carrierCode,
            @JsonProperty("carrier_name") JsonNullable<String> carrierName,
            @JsonProperty("iata_designator") JsonNullable<String> iataDesignator,
            @JsonProperty("icao_code") JsonNullable<String> icaoCode,
            @JsonProperty("coupon_number") JsonNullable<String> couponNumber,
            @JsonProperty("departure_airport") JsonNullable<String> departureAirport,
            @JsonProperty("departure_at") JsonNullable<OffsetDateTime> departureAt,
            @JsonProperty("departure_city") JsonNullable<String> departureCity,
            @JsonProperty("departure_country") JsonNullable<String> departureCountry,
            @JsonProperty("departure_tax_amount") JsonNullable<Long> departureTaxAmount,
            @JsonProperty("fare_amount") JsonNullable<Long> fareAmount,
            @JsonProperty("fare_basis_code") JsonNullable<String> fareBasisCode,
            @JsonProperty("fee_amount") JsonNullable<Long> feeAmount,
            @JsonProperty("flight_class") JsonNullable<String> flightClass,
            @JsonProperty("flight_number") JsonNullable<String> flightNumber,
            @JsonProperty("route_type") JsonNullable<? extends RouteType> routeType,
            @JsonProperty("seat_class") JsonNullable<String> seatClass,
            @JsonProperty("stop_over") JsonNullable<Boolean> stopOver,
            @JsonProperty("tax_amount") JsonNullable<Long> taxAmount) {
        Utils.checkNotNull(arrivalAirport, "arrivalAirport");
        Utils.checkNotNull(arrivalAt, "arrivalAt");
        Utils.checkNotNull(arrivalCity, "arrivalCity");
        Utils.checkNotNull(arrivalCountry, "arrivalCountry");
        Utils.checkNotNull(carrierCode, "carrierCode");
        Utils.checkNotNull(carrierName, "carrierName");
        Utils.checkNotNull(iataDesignator, "iataDesignator");
        Utils.checkNotNull(icaoCode, "icaoCode");
        Utils.checkNotNull(couponNumber, "couponNumber");
        Utils.checkNotNull(departureAirport, "departureAirport");
        Utils.checkNotNull(departureAt, "departureAt");
        Utils.checkNotNull(departureCity, "departureCity");
        Utils.checkNotNull(departureCountry, "departureCountry");
        Utils.checkNotNull(departureTaxAmount, "departureTaxAmount");
        Utils.checkNotNull(fareAmount, "fareAmount");
        Utils.checkNotNull(fareBasisCode, "fareBasisCode");
        Utils.checkNotNull(feeAmount, "feeAmount");
        Utils.checkNotNull(flightClass, "flightClass");
        Utils.checkNotNull(flightNumber, "flightNumber");
        Utils.checkNotNull(routeType, "routeType");
        Utils.checkNotNull(seatClass, "seatClass");
        Utils.checkNotNull(stopOver, "stopOver");
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.arrivalAirport = arrivalAirport;
        this.arrivalAt = arrivalAt;
        this.arrivalCity = arrivalCity;
        this.arrivalCountry = arrivalCountry;
        this.carrierCode = carrierCode;
        this.carrierName = carrierName;
        this.iataDesignator = iataDesignator;
        this.icaoCode = icaoCode;
        this.couponNumber = couponNumber;
        this.departureAirport = departureAirport;
        this.departureAt = departureAt;
        this.departureCity = departureCity;
        this.departureCountry = departureCountry;
        this.departureTaxAmount = departureTaxAmount;
        this.fareAmount = fareAmount;
        this.fareBasisCode = fareBasisCode;
        this.feeAmount = feeAmount;
        this.flightClass = flightClass;
        this.flightNumber = flightNumber;
        this.routeType = routeType;
        this.seatClass = seatClass;
        this.stopOver = stopOver;
        this.taxAmount = taxAmount;
    }
    
    public AirlineLeg() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    @JsonIgnore
    public JsonNullable<String> arrivalAirport() {
        return arrivalAirport;
    }

    /**
     * The date and time of travel in local time at the arrival airport.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> arrivalAt() {
        return arrivalAt;
    }

    /**
     * Arrival city name.
     */
    @JsonIgnore
    public JsonNullable<String> arrivalCity() {
        return arrivalCity;
    }

    /**
     * Arrival country code in ISO 3166 format.
     */
    @JsonIgnore
    public JsonNullable<String> arrivalCountry() {
        return arrivalCountry;
    }

    /**
     * 3 character airline code as set by IATA.
     */
    @JsonIgnore
    public JsonNullable<String> carrierCode() {
        return carrierCode;
    }

    /**
     * Name of the airline.
     */
    @JsonIgnore
    public JsonNullable<String> carrierName() {
        return carrierName;
    }

    /**
     * Two-character IATA code of the airline.
     */
    @JsonIgnore
    public JsonNullable<String> iataDesignator() {
        return iataDesignator;
    }

    /**
     * Three-character ICAO code of the airline.
     */
    @JsonIgnore
    public JsonNullable<String> icaoCode() {
        return icaoCode;
    }

    /**
     * Coupon number associated with the leg.
     */
    @JsonIgnore
    public JsonNullable<String> couponNumber() {
        return couponNumber;
    }

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    @JsonIgnore
    public JsonNullable<String> departureAirport() {
        return departureAirport;
    }

    /**
     * The date and time of travel in local time at the departure airport.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> departureAt() {
        return departureAt;
    }

    /**
     * Departure city name.
     */
    @JsonIgnore
    public JsonNullable<String> departureCity() {
        return departureCity;
    }

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    @JsonIgnore
    public JsonNullable<String> departureCountry() {
        return departureCountry;
    }

    /**
     * Departure tax amount charged by a country when a person is leaving the country.
     */
    @JsonIgnore
    public JsonNullable<Long> departureTaxAmount() {
        return departureTaxAmount;
    }

    /**
     * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
     */
    @JsonIgnore
    public JsonNullable<Long> fareAmount() {
        return fareAmount;
    }

    /**
     * The alphanumeric code for the booking class of a ticket.
     */
    @JsonIgnore
    public JsonNullable<String> fareBasisCode() {
        return fareBasisCode;
    }

    /**
     * Fee amount for current leg of the trip.
     */
    @JsonIgnore
    public JsonNullable<Long> feeAmount() {
        return feeAmount;
    }

    /**
     * Indicates service class (first class, business class, etc.).
     */
    @JsonIgnore
    public JsonNullable<String> flightClass() {
        return flightClass;
    }

    /**
     * Unique identifier of the flight number.
     */
    @JsonIgnore
    public JsonNullable<String> flightNumber() {
        return flightNumber;
    }

    /**
     * The route type of the flight.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<RouteType> routeType() {
        return (JsonNullable<RouteType>) routeType;
    }

    /**
     * Indicates seat class (first class, business class, etc.).
     */
    @JsonIgnore
    public JsonNullable<String> seatClass() {
        return seatClass;
    }

    /**
     * Indicates whether a stopover is allowed on this ticket.
     */
    @JsonIgnore
    public JsonNullable<Boolean> stopOver() {
        return stopOver;
    }

    /**
     * Amount of the taxes for current leg of the trip.
     */
    @JsonIgnore
    public JsonNullable<Long> taxAmount() {
        return taxAmount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    public AirlineLeg withArrivalAirport(String arrivalAirport) {
        Utils.checkNotNull(arrivalAirport, "arrivalAirport");
        this.arrivalAirport = JsonNullable.of(arrivalAirport);
        return this;
    }

    /**
     * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    public AirlineLeg withArrivalAirport(JsonNullable<String> arrivalAirport) {
        Utils.checkNotNull(arrivalAirport, "arrivalAirport");
        this.arrivalAirport = arrivalAirport;
        return this;
    }

    /**
     * The date and time of travel in local time at the arrival airport.
     */
    public AirlineLeg withArrivalAt(OffsetDateTime arrivalAt) {
        Utils.checkNotNull(arrivalAt, "arrivalAt");
        this.arrivalAt = JsonNullable.of(arrivalAt);
        return this;
    }

    /**
     * The date and time of travel in local time at the arrival airport.
     */
    public AirlineLeg withArrivalAt(JsonNullable<OffsetDateTime> arrivalAt) {
        Utils.checkNotNull(arrivalAt, "arrivalAt");
        this.arrivalAt = arrivalAt;
        return this;
    }

    /**
     * Arrival city name.
     */
    public AirlineLeg withArrivalCity(String arrivalCity) {
        Utils.checkNotNull(arrivalCity, "arrivalCity");
        this.arrivalCity = JsonNullable.of(arrivalCity);
        return this;
    }

    /**
     * Arrival city name.
     */
    public AirlineLeg withArrivalCity(JsonNullable<String> arrivalCity) {
        Utils.checkNotNull(arrivalCity, "arrivalCity");
        this.arrivalCity = arrivalCity;
        return this;
    }

    /**
     * Arrival country code in ISO 3166 format.
     */
    public AirlineLeg withArrivalCountry(String arrivalCountry) {
        Utils.checkNotNull(arrivalCountry, "arrivalCountry");
        this.arrivalCountry = JsonNullable.of(arrivalCountry);
        return this;
    }

    /**
     * Arrival country code in ISO 3166 format.
     */
    public AirlineLeg withArrivalCountry(JsonNullable<String> arrivalCountry) {
        Utils.checkNotNull(arrivalCountry, "arrivalCountry");
        this.arrivalCountry = arrivalCountry;
        return this;
    }

    /**
     * 3 character airline code as set by IATA.
     */
    public AirlineLeg withCarrierCode(String carrierCode) {
        Utils.checkNotNull(carrierCode, "carrierCode");
        this.carrierCode = JsonNullable.of(carrierCode);
        return this;
    }

    /**
     * 3 character airline code as set by IATA.
     */
    public AirlineLeg withCarrierCode(JsonNullable<String> carrierCode) {
        Utils.checkNotNull(carrierCode, "carrierCode");
        this.carrierCode = carrierCode;
        return this;
    }

    /**
     * Name of the airline.
     */
    public AirlineLeg withCarrierName(String carrierName) {
        Utils.checkNotNull(carrierName, "carrierName");
        this.carrierName = JsonNullable.of(carrierName);
        return this;
    }

    /**
     * Name of the airline.
     */
    public AirlineLeg withCarrierName(JsonNullable<String> carrierName) {
        Utils.checkNotNull(carrierName, "carrierName");
        this.carrierName = carrierName;
        return this;
    }

    /**
     * Two-character IATA code of the airline.
     */
    public AirlineLeg withIataDesignator(String iataDesignator) {
        Utils.checkNotNull(iataDesignator, "iataDesignator");
        this.iataDesignator = JsonNullable.of(iataDesignator);
        return this;
    }

    /**
     * Two-character IATA code of the airline.
     */
    public AirlineLeg withIataDesignator(JsonNullable<String> iataDesignator) {
        Utils.checkNotNull(iataDesignator, "iataDesignator");
        this.iataDesignator = iataDesignator;
        return this;
    }

    /**
     * Three-character ICAO code of the airline.
     */
    public AirlineLeg withIcaoCode(String icaoCode) {
        Utils.checkNotNull(icaoCode, "icaoCode");
        this.icaoCode = JsonNullable.of(icaoCode);
        return this;
    }

    /**
     * Three-character ICAO code of the airline.
     */
    public AirlineLeg withIcaoCode(JsonNullable<String> icaoCode) {
        Utils.checkNotNull(icaoCode, "icaoCode");
        this.icaoCode = icaoCode;
        return this;
    }

    /**
     * Coupon number associated with the leg.
     */
    public AirlineLeg withCouponNumber(String couponNumber) {
        Utils.checkNotNull(couponNumber, "couponNumber");
        this.couponNumber = JsonNullable.of(couponNumber);
        return this;
    }

    /**
     * Coupon number associated with the leg.
     */
    public AirlineLeg withCouponNumber(JsonNullable<String> couponNumber) {
        Utils.checkNotNull(couponNumber, "couponNumber");
        this.couponNumber = couponNumber;
        return this;
    }

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    public AirlineLeg withDepartureAirport(String departureAirport) {
        Utils.checkNotNull(departureAirport, "departureAirport");
        this.departureAirport = JsonNullable.of(departureAirport);
        return this;
    }

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    public AirlineLeg withDepartureAirport(JsonNullable<String> departureAirport) {
        Utils.checkNotNull(departureAirport, "departureAirport");
        this.departureAirport = departureAirport;
        return this;
    }

    /**
     * The date and time of travel in local time at the departure airport.
     */
    public AirlineLeg withDepartureAt(OffsetDateTime departureAt) {
        Utils.checkNotNull(departureAt, "departureAt");
        this.departureAt = JsonNullable.of(departureAt);
        return this;
    }

    /**
     * The date and time of travel in local time at the departure airport.
     */
    public AirlineLeg withDepartureAt(JsonNullable<OffsetDateTime> departureAt) {
        Utils.checkNotNull(departureAt, "departureAt");
        this.departureAt = departureAt;
        return this;
    }

    /**
     * Departure city name.
     */
    public AirlineLeg withDepartureCity(String departureCity) {
        Utils.checkNotNull(departureCity, "departureCity");
        this.departureCity = JsonNullable.of(departureCity);
        return this;
    }

    /**
     * Departure city name.
     */
    public AirlineLeg withDepartureCity(JsonNullable<String> departureCity) {
        Utils.checkNotNull(departureCity, "departureCity");
        this.departureCity = departureCity;
        return this;
    }

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    public AirlineLeg withDepartureCountry(String departureCountry) {
        Utils.checkNotNull(departureCountry, "departureCountry");
        this.departureCountry = JsonNullable.of(departureCountry);
        return this;
    }

    /**
     * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
     */
    public AirlineLeg withDepartureCountry(JsonNullable<String> departureCountry) {
        Utils.checkNotNull(departureCountry, "departureCountry");
        this.departureCountry = departureCountry;
        return this;
    }

    /**
     * Departure tax amount charged by a country when a person is leaving the country.
     */
    public AirlineLeg withDepartureTaxAmount(long departureTaxAmount) {
        Utils.checkNotNull(departureTaxAmount, "departureTaxAmount");
        this.departureTaxAmount = JsonNullable.of(departureTaxAmount);
        return this;
    }

    /**
     * Departure tax amount charged by a country when a person is leaving the country.
     */
    public AirlineLeg withDepartureTaxAmount(JsonNullable<Long> departureTaxAmount) {
        Utils.checkNotNull(departureTaxAmount, "departureTaxAmount");
        this.departureTaxAmount = departureTaxAmount;
        return this;
    }

    /**
     * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
     */
    public AirlineLeg withFareAmount(long fareAmount) {
        Utils.checkNotNull(fareAmount, "fareAmount");
        this.fareAmount = JsonNullable.of(fareAmount);
        return this;
    }

    /**
     * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
     */
    public AirlineLeg withFareAmount(JsonNullable<Long> fareAmount) {
        Utils.checkNotNull(fareAmount, "fareAmount");
        this.fareAmount = fareAmount;
        return this;
    }

    /**
     * The alphanumeric code for the booking class of a ticket.
     */
    public AirlineLeg withFareBasisCode(String fareBasisCode) {
        Utils.checkNotNull(fareBasisCode, "fareBasisCode");
        this.fareBasisCode = JsonNullable.of(fareBasisCode);
        return this;
    }

    /**
     * The alphanumeric code for the booking class of a ticket.
     */
    public AirlineLeg withFareBasisCode(JsonNullable<String> fareBasisCode) {
        Utils.checkNotNull(fareBasisCode, "fareBasisCode");
        this.fareBasisCode = fareBasisCode;
        return this;
    }

    /**
     * Fee amount for current leg of the trip.
     */
    public AirlineLeg withFeeAmount(long feeAmount) {
        Utils.checkNotNull(feeAmount, "feeAmount");
        this.feeAmount = JsonNullable.of(feeAmount);
        return this;
    }

    /**
     * Fee amount for current leg of the trip.
     */
    public AirlineLeg withFeeAmount(JsonNullable<Long> feeAmount) {
        Utils.checkNotNull(feeAmount, "feeAmount");
        this.feeAmount = feeAmount;
        return this;
    }

    /**
     * Indicates service class (first class, business class, etc.).
     */
    public AirlineLeg withFlightClass(String flightClass) {
        Utils.checkNotNull(flightClass, "flightClass");
        this.flightClass = JsonNullable.of(flightClass);
        return this;
    }

    /**
     * Indicates service class (first class, business class, etc.).
     */
    public AirlineLeg withFlightClass(JsonNullable<String> flightClass) {
        Utils.checkNotNull(flightClass, "flightClass");
        this.flightClass = flightClass;
        return this;
    }

    /**
     * Unique identifier of the flight number.
     */
    public AirlineLeg withFlightNumber(String flightNumber) {
        Utils.checkNotNull(flightNumber, "flightNumber");
        this.flightNumber = JsonNullable.of(flightNumber);
        return this;
    }

    /**
     * Unique identifier of the flight number.
     */
    public AirlineLeg withFlightNumber(JsonNullable<String> flightNumber) {
        Utils.checkNotNull(flightNumber, "flightNumber");
        this.flightNumber = flightNumber;
        return this;
    }

    /**
     * The route type of the flight.
     */
    public AirlineLeg withRouteType(RouteType routeType) {
        Utils.checkNotNull(routeType, "routeType");
        this.routeType = JsonNullable.of(routeType);
        return this;
    }

    /**
     * The route type of the flight.
     */
    public AirlineLeg withRouteType(JsonNullable<? extends RouteType> routeType) {
        Utils.checkNotNull(routeType, "routeType");
        this.routeType = routeType;
        return this;
    }

    /**
     * Indicates seat class (first class, business class, etc.).
     */
    public AirlineLeg withSeatClass(String seatClass) {
        Utils.checkNotNull(seatClass, "seatClass");
        this.seatClass = JsonNullable.of(seatClass);
        return this;
    }

    /**
     * Indicates seat class (first class, business class, etc.).
     */
    public AirlineLeg withSeatClass(JsonNullable<String> seatClass) {
        Utils.checkNotNull(seatClass, "seatClass");
        this.seatClass = seatClass;
        return this;
    }

    /**
     * Indicates whether a stopover is allowed on this ticket.
     */
    public AirlineLeg withStopOver(boolean stopOver) {
        Utils.checkNotNull(stopOver, "stopOver");
        this.stopOver = JsonNullable.of(stopOver);
        return this;
    }

    /**
     * Indicates whether a stopover is allowed on this ticket.
     */
    public AirlineLeg withStopOver(JsonNullable<Boolean> stopOver) {
        Utils.checkNotNull(stopOver, "stopOver");
        this.stopOver = stopOver;
        return this;
    }

    /**
     * Amount of the taxes for current leg of the trip.
     */
    public AirlineLeg withTaxAmount(long taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

    /**
     * Amount of the taxes for current leg of the trip.
     */
    public AirlineLeg withTaxAmount(JsonNullable<Long> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AirlineLeg other = (AirlineLeg) o;
        return 
            Utils.enhancedDeepEquals(this.arrivalAirport, other.arrivalAirport) &&
            Utils.enhancedDeepEquals(this.arrivalAt, other.arrivalAt) &&
            Utils.enhancedDeepEquals(this.arrivalCity, other.arrivalCity) &&
            Utils.enhancedDeepEquals(this.arrivalCountry, other.arrivalCountry) &&
            Utils.enhancedDeepEquals(this.carrierCode, other.carrierCode) &&
            Utils.enhancedDeepEquals(this.carrierName, other.carrierName) &&
            Utils.enhancedDeepEquals(this.iataDesignator, other.iataDesignator) &&
            Utils.enhancedDeepEquals(this.icaoCode, other.icaoCode) &&
            Utils.enhancedDeepEquals(this.couponNumber, other.couponNumber) &&
            Utils.enhancedDeepEquals(this.departureAirport, other.departureAirport) &&
            Utils.enhancedDeepEquals(this.departureAt, other.departureAt) &&
            Utils.enhancedDeepEquals(this.departureCity, other.departureCity) &&
            Utils.enhancedDeepEquals(this.departureCountry, other.departureCountry) &&
            Utils.enhancedDeepEquals(this.departureTaxAmount, other.departureTaxAmount) &&
            Utils.enhancedDeepEquals(this.fareAmount, other.fareAmount) &&
            Utils.enhancedDeepEquals(this.fareBasisCode, other.fareBasisCode) &&
            Utils.enhancedDeepEquals(this.feeAmount, other.feeAmount) &&
            Utils.enhancedDeepEquals(this.flightClass, other.flightClass) &&
            Utils.enhancedDeepEquals(this.flightNumber, other.flightNumber) &&
            Utils.enhancedDeepEquals(this.routeType, other.routeType) &&
            Utils.enhancedDeepEquals(this.seatClass, other.seatClass) &&
            Utils.enhancedDeepEquals(this.stopOver, other.stopOver) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            arrivalAirport, arrivalAt, arrivalCity,
            arrivalCountry, carrierCode, carrierName,
            iataDesignator, icaoCode, couponNumber,
            departureAirport, departureAt, departureCity,
            departureCountry, departureTaxAmount, fareAmount,
            fareBasisCode, feeAmount, flightClass,
            flightNumber, routeType, seatClass,
            stopOver, taxAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AirlineLeg.class,
                "arrivalAirport", arrivalAirport,
                "arrivalAt", arrivalAt,
                "arrivalCity", arrivalCity,
                "arrivalCountry", arrivalCountry,
                "carrierCode", carrierCode,
                "carrierName", carrierName,
                "iataDesignator", iataDesignator,
                "icaoCode", icaoCode,
                "couponNumber", couponNumber,
                "departureAirport", departureAirport,
                "departureAt", departureAt,
                "departureCity", departureCity,
                "departureCountry", departureCountry,
                "departureTaxAmount", departureTaxAmount,
                "fareAmount", fareAmount,
                "fareBasisCode", fareBasisCode,
                "feeAmount", feeAmount,
                "flightClass", flightClass,
                "flightNumber", flightNumber,
                "routeType", routeType,
                "seatClass", seatClass,
                "stopOver", stopOver,
                "taxAmount", taxAmount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> arrivalAirport = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> arrivalAt = JsonNullable.undefined();

        private JsonNullable<String> arrivalCity = JsonNullable.undefined();

        private JsonNullable<String> arrivalCountry = JsonNullable.undefined();

        private JsonNullable<String> carrierCode = JsonNullable.undefined();

        private JsonNullable<String> carrierName = JsonNullable.undefined();

        private JsonNullable<String> iataDesignator = JsonNullable.undefined();

        private JsonNullable<String> icaoCode = JsonNullable.undefined();

        private JsonNullable<String> couponNumber = JsonNullable.undefined();

        private JsonNullable<String> departureAirport = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> departureAt = JsonNullable.undefined();

        private JsonNullable<String> departureCity = JsonNullable.undefined();

        private JsonNullable<String> departureCountry = JsonNullable.undefined();

        private JsonNullable<Long> departureTaxAmount = JsonNullable.undefined();

        private JsonNullable<Long> fareAmount = JsonNullable.undefined();

        private JsonNullable<String> fareBasisCode = JsonNullable.undefined();

        private JsonNullable<Long> feeAmount = JsonNullable.undefined();

        private JsonNullable<String> flightClass = JsonNullable.undefined();

        private JsonNullable<String> flightNumber = JsonNullable.undefined();

        private JsonNullable<? extends RouteType> routeType = JsonNullable.undefined();

        private JsonNullable<String> seatClass = JsonNullable.undefined();

        private JsonNullable<Boolean> stopOver = JsonNullable.undefined();

        private JsonNullable<Long> taxAmount = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
         */
        public Builder arrivalAirport(String arrivalAirport) {
            Utils.checkNotNull(arrivalAirport, "arrivalAirport");
            this.arrivalAirport = JsonNullable.of(arrivalAirport);
            return this;
        }

        /**
         * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
         */
        public Builder arrivalAirport(JsonNullable<String> arrivalAirport) {
            Utils.checkNotNull(arrivalAirport, "arrivalAirport");
            this.arrivalAirport = arrivalAirport;
            return this;
        }


        /**
         * The date and time of travel in local time at the arrival airport.
         */
        public Builder arrivalAt(OffsetDateTime arrivalAt) {
            Utils.checkNotNull(arrivalAt, "arrivalAt");
            this.arrivalAt = JsonNullable.of(arrivalAt);
            return this;
        }

        /**
         * The date and time of travel in local time at the arrival airport.
         */
        public Builder arrivalAt(JsonNullable<OffsetDateTime> arrivalAt) {
            Utils.checkNotNull(arrivalAt, "arrivalAt");
            this.arrivalAt = arrivalAt;
            return this;
        }


        /**
         * Arrival city name.
         */
        public Builder arrivalCity(String arrivalCity) {
            Utils.checkNotNull(arrivalCity, "arrivalCity");
            this.arrivalCity = JsonNullable.of(arrivalCity);
            return this;
        }

        /**
         * Arrival city name.
         */
        public Builder arrivalCity(JsonNullable<String> arrivalCity) {
            Utils.checkNotNull(arrivalCity, "arrivalCity");
            this.arrivalCity = arrivalCity;
            return this;
        }


        /**
         * Arrival country code in ISO 3166 format.
         */
        public Builder arrivalCountry(String arrivalCountry) {
            Utils.checkNotNull(arrivalCountry, "arrivalCountry");
            this.arrivalCountry = JsonNullable.of(arrivalCountry);
            return this;
        }

        /**
         * Arrival country code in ISO 3166 format.
         */
        public Builder arrivalCountry(JsonNullable<String> arrivalCountry) {
            Utils.checkNotNull(arrivalCountry, "arrivalCountry");
            this.arrivalCountry = arrivalCountry;
            return this;
        }


        /**
         * 3 character airline code as set by IATA.
         */
        public Builder carrierCode(String carrierCode) {
            Utils.checkNotNull(carrierCode, "carrierCode");
            this.carrierCode = JsonNullable.of(carrierCode);
            return this;
        }

        /**
         * 3 character airline code as set by IATA.
         */
        public Builder carrierCode(JsonNullable<String> carrierCode) {
            Utils.checkNotNull(carrierCode, "carrierCode");
            this.carrierCode = carrierCode;
            return this;
        }


        /**
         * Name of the airline.
         */
        public Builder carrierName(String carrierName) {
            Utils.checkNotNull(carrierName, "carrierName");
            this.carrierName = JsonNullable.of(carrierName);
            return this;
        }

        /**
         * Name of the airline.
         */
        public Builder carrierName(JsonNullable<String> carrierName) {
            Utils.checkNotNull(carrierName, "carrierName");
            this.carrierName = carrierName;
            return this;
        }


        /**
         * Two-character IATA code of the airline.
         */
        public Builder iataDesignator(String iataDesignator) {
            Utils.checkNotNull(iataDesignator, "iataDesignator");
            this.iataDesignator = JsonNullable.of(iataDesignator);
            return this;
        }

        /**
         * Two-character IATA code of the airline.
         */
        public Builder iataDesignator(JsonNullable<String> iataDesignator) {
            Utils.checkNotNull(iataDesignator, "iataDesignator");
            this.iataDesignator = iataDesignator;
            return this;
        }


        /**
         * Three-character ICAO code of the airline.
         */
        public Builder icaoCode(String icaoCode) {
            Utils.checkNotNull(icaoCode, "icaoCode");
            this.icaoCode = JsonNullable.of(icaoCode);
            return this;
        }

        /**
         * Three-character ICAO code of the airline.
         */
        public Builder icaoCode(JsonNullable<String> icaoCode) {
            Utils.checkNotNull(icaoCode, "icaoCode");
            this.icaoCode = icaoCode;
            return this;
        }


        /**
         * Coupon number associated with the leg.
         */
        public Builder couponNumber(String couponNumber) {
            Utils.checkNotNull(couponNumber, "couponNumber");
            this.couponNumber = JsonNullable.of(couponNumber);
            return this;
        }

        /**
         * Coupon number associated with the leg.
         */
        public Builder couponNumber(JsonNullable<String> couponNumber) {
            Utils.checkNotNull(couponNumber, "couponNumber");
            this.couponNumber = couponNumber;
            return this;
        }


        /**
         * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
         */
        public Builder departureAirport(String departureAirport) {
            Utils.checkNotNull(departureAirport, "departureAirport");
            this.departureAirport = JsonNullable.of(departureAirport);
            return this;
        }

        /**
         * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
         */
        public Builder departureAirport(JsonNullable<String> departureAirport) {
            Utils.checkNotNull(departureAirport, "departureAirport");
            this.departureAirport = departureAirport;
            return this;
        }


        /**
         * The date and time of travel in local time at the departure airport.
         */
        public Builder departureAt(OffsetDateTime departureAt) {
            Utils.checkNotNull(departureAt, "departureAt");
            this.departureAt = JsonNullable.of(departureAt);
            return this;
        }

        /**
         * The date and time of travel in local time at the departure airport.
         */
        public Builder departureAt(JsonNullable<OffsetDateTime> departureAt) {
            Utils.checkNotNull(departureAt, "departureAt");
            this.departureAt = departureAt;
            return this;
        }


        /**
         * Departure city name.
         */
        public Builder departureCity(String departureCity) {
            Utils.checkNotNull(departureCity, "departureCity");
            this.departureCity = JsonNullable.of(departureCity);
            return this;
        }

        /**
         * Departure city name.
         */
        public Builder departureCity(JsonNullable<String> departureCity) {
            Utils.checkNotNull(departureCity, "departureCity");
            this.departureCity = departureCity;
            return this;
        }


        /**
         * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
         */
        public Builder departureCountry(String departureCountry) {
            Utils.checkNotNull(departureCountry, "departureCountry");
            this.departureCountry = JsonNullable.of(departureCountry);
            return this;
        }

        /**
         * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
         */
        public Builder departureCountry(JsonNullable<String> departureCountry) {
            Utils.checkNotNull(departureCountry, "departureCountry");
            this.departureCountry = departureCountry;
            return this;
        }


        /**
         * Departure tax amount charged by a country when a person is leaving the country.
         */
        public Builder departureTaxAmount(long departureTaxAmount) {
            Utils.checkNotNull(departureTaxAmount, "departureTaxAmount");
            this.departureTaxAmount = JsonNullable.of(departureTaxAmount);
            return this;
        }

        /**
         * Departure tax amount charged by a country when a person is leaving the country.
         */
        public Builder departureTaxAmount(JsonNullable<Long> departureTaxAmount) {
            Utils.checkNotNull(departureTaxAmount, "departureTaxAmount");
            this.departureTaxAmount = departureTaxAmount;
            return this;
        }


        /**
         * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
         */
        public Builder fareAmount(long fareAmount) {
            Utils.checkNotNull(fareAmount, "fareAmount");
            this.fareAmount = JsonNullable.of(fareAmount);
            return this;
        }

        /**
         * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
         */
        public Builder fareAmount(JsonNullable<Long> fareAmount) {
            Utils.checkNotNull(fareAmount, "fareAmount");
            this.fareAmount = fareAmount;
            return this;
        }


        /**
         * The alphanumeric code for the booking class of a ticket.
         */
        public Builder fareBasisCode(String fareBasisCode) {
            Utils.checkNotNull(fareBasisCode, "fareBasisCode");
            this.fareBasisCode = JsonNullable.of(fareBasisCode);
            return this;
        }

        /**
         * The alphanumeric code for the booking class of a ticket.
         */
        public Builder fareBasisCode(JsonNullable<String> fareBasisCode) {
            Utils.checkNotNull(fareBasisCode, "fareBasisCode");
            this.fareBasisCode = fareBasisCode;
            return this;
        }


        /**
         * Fee amount for current leg of the trip.
         */
        public Builder feeAmount(long feeAmount) {
            Utils.checkNotNull(feeAmount, "feeAmount");
            this.feeAmount = JsonNullable.of(feeAmount);
            return this;
        }

        /**
         * Fee amount for current leg of the trip.
         */
        public Builder feeAmount(JsonNullable<Long> feeAmount) {
            Utils.checkNotNull(feeAmount, "feeAmount");
            this.feeAmount = feeAmount;
            return this;
        }


        /**
         * Indicates service class (first class, business class, etc.).
         */
        public Builder flightClass(String flightClass) {
            Utils.checkNotNull(flightClass, "flightClass");
            this.flightClass = JsonNullable.of(flightClass);
            return this;
        }

        /**
         * Indicates service class (first class, business class, etc.).
         */
        public Builder flightClass(JsonNullable<String> flightClass) {
            Utils.checkNotNull(flightClass, "flightClass");
            this.flightClass = flightClass;
            return this;
        }


        /**
         * Unique identifier of the flight number.
         */
        public Builder flightNumber(String flightNumber) {
            Utils.checkNotNull(flightNumber, "flightNumber");
            this.flightNumber = JsonNullable.of(flightNumber);
            return this;
        }

        /**
         * Unique identifier of the flight number.
         */
        public Builder flightNumber(JsonNullable<String> flightNumber) {
            Utils.checkNotNull(flightNumber, "flightNumber");
            this.flightNumber = flightNumber;
            return this;
        }


        /**
         * The route type of the flight.
         */
        public Builder routeType(RouteType routeType) {
            Utils.checkNotNull(routeType, "routeType");
            this.routeType = JsonNullable.of(routeType);
            return this;
        }

        /**
         * The route type of the flight.
         */
        public Builder routeType(JsonNullable<? extends RouteType> routeType) {
            Utils.checkNotNull(routeType, "routeType");
            this.routeType = routeType;
            return this;
        }


        /**
         * Indicates seat class (first class, business class, etc.).
         */
        public Builder seatClass(String seatClass) {
            Utils.checkNotNull(seatClass, "seatClass");
            this.seatClass = JsonNullable.of(seatClass);
            return this;
        }

        /**
         * Indicates seat class (first class, business class, etc.).
         */
        public Builder seatClass(JsonNullable<String> seatClass) {
            Utils.checkNotNull(seatClass, "seatClass");
            this.seatClass = seatClass;
            return this;
        }


        /**
         * Indicates whether a stopover is allowed on this ticket.
         */
        public Builder stopOver(boolean stopOver) {
            Utils.checkNotNull(stopOver, "stopOver");
            this.stopOver = JsonNullable.of(stopOver);
            return this;
        }

        /**
         * Indicates whether a stopover is allowed on this ticket.
         */
        public Builder stopOver(JsonNullable<Boolean> stopOver) {
            Utils.checkNotNull(stopOver, "stopOver");
            this.stopOver = stopOver;
            return this;
        }


        /**
         * Amount of the taxes for current leg of the trip.
         */
        public Builder taxAmount(long taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Amount of the taxes for current leg of the trip.
         */
        public Builder taxAmount(JsonNullable<Long> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        public AirlineLeg build() {

            return new AirlineLeg(
                arrivalAirport, arrivalAt, arrivalCity,
                arrivalCountry, carrierCode, carrierName,
                iataDesignator, icaoCode, couponNumber,
                departureAirport, departureAt, departureCity,
                departureCountry, departureTaxAmount, fareAmount,
                fareBasisCode, feeAmount, flightClass,
                flightNumber, routeType, seatClass,
                stopOver, taxAmount);
        }

    }
}
