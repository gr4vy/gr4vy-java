/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * RedirectPaymentMethodCreateMethod
 * 
 * <p>The method to use, this can be any of the methods that support redirect requests.
 */
@JsonDeserialize(using = RedirectPaymentMethodCreateMethod._Deserializer.class)
@JsonSerialize(using = RedirectPaymentMethodCreateMethod._Serializer.class)
public class RedirectPaymentMethodCreateMethod {

    public static final RedirectPaymentMethodCreateMethod ABITAB = new RedirectPaymentMethodCreateMethod("abitab");
    public static final RedirectPaymentMethodCreateMethod AFFIRM = new RedirectPaymentMethodCreateMethod("affirm");
    public static final RedirectPaymentMethodCreateMethod AFTERPAY = new RedirectPaymentMethodCreateMethod("afterpay");
    public static final RedirectPaymentMethodCreateMethod ALIPAY = new RedirectPaymentMethodCreateMethod("alipay");
    public static final RedirectPaymentMethodCreateMethod ALIPAYHK = new RedirectPaymentMethodCreateMethod("alipayhk");
    public static final RedirectPaymentMethodCreateMethod ARCUSPAYNETWORK = new RedirectPaymentMethodCreateMethod("arcuspaynetwork");
    public static final RedirectPaymentMethodCreateMethod BACS = new RedirectPaymentMethodCreateMethod("bacs");
    public static final RedirectPaymentMethodCreateMethod BANCONTACT = new RedirectPaymentMethodCreateMethod("bancontact");
    public static final RedirectPaymentMethodCreateMethod BANKED = new RedirectPaymentMethodCreateMethod("banked");
    public static final RedirectPaymentMethodCreateMethod BCP = new RedirectPaymentMethodCreateMethod("bcp");
    public static final RedirectPaymentMethodCreateMethod BECS = new RedirectPaymentMethodCreateMethod("becs");
    public static final RedirectPaymentMethodCreateMethod BITPAY = new RedirectPaymentMethodCreateMethod("bitpay");
    public static final RedirectPaymentMethodCreateMethod BLIK = new RedirectPaymentMethodCreateMethod("blik");
    public static final RedirectPaymentMethodCreateMethod BOLETO = new RedirectPaymentMethodCreateMethod("boleto");
    public static final RedirectPaymentMethodCreateMethod BOOST = new RedirectPaymentMethodCreateMethod("boost");
    public static final RedirectPaymentMethodCreateMethod CASHAPP = new RedirectPaymentMethodCreateMethod("cashapp");
    public static final RedirectPaymentMethodCreateMethod CLEARPAY = new RedirectPaymentMethodCreateMethod("clearpay");
    public static final RedirectPaymentMethodCreateMethod DANA = new RedirectPaymentMethodCreateMethod("dana");
    public static final RedirectPaymentMethodCreateMethod DCB = new RedirectPaymentMethodCreateMethod("dcb");
    public static final RedirectPaymentMethodCreateMethod DLOCAL = new RedirectPaymentMethodCreateMethod("dlocal");
    public static final RedirectPaymentMethodCreateMethod EBANX = new RedirectPaymentMethodCreateMethod("ebanx");
    public static final RedirectPaymentMethodCreateMethod EFECTY = new RedirectPaymentMethodCreateMethod("efecty");
    public static final RedirectPaymentMethodCreateMethod EPS = new RedirectPaymentMethodCreateMethod("eps");
    public static final RedirectPaymentMethodCreateMethod EVERYDAYPAY = new RedirectPaymentMethodCreateMethod("everydaypay");
    public static final RedirectPaymentMethodCreateMethod GCASH = new RedirectPaymentMethodCreateMethod("gcash");
    public static final RedirectPaymentMethodCreateMethod GEM = new RedirectPaymentMethodCreateMethod("gem");
    public static final RedirectPaymentMethodCreateMethod GEMDS = new RedirectPaymentMethodCreateMethod("gemds");
    public static final RedirectPaymentMethodCreateMethod GIROPAY = new RedirectPaymentMethodCreateMethod("giropay");
    public static final RedirectPaymentMethodCreateMethod GIVINGBLOCK = new RedirectPaymentMethodCreateMethod("givingblock");
    public static final RedirectPaymentMethodCreateMethod GOCARDLESS = new RedirectPaymentMethodCreateMethod("gocardless");
    public static final RedirectPaymentMethodCreateMethod GOPAY = new RedirectPaymentMethodCreateMethod("gopay");
    public static final RedirectPaymentMethodCreateMethod GRABPAY = new RedirectPaymentMethodCreateMethod("grabpay");
    public static final RedirectPaymentMethodCreateMethod IDEAL = new RedirectPaymentMethodCreateMethod("ideal");
    public static final RedirectPaymentMethodCreateMethod KAKAOPAY = new RedirectPaymentMethodCreateMethod("kakaopay");
    public static final RedirectPaymentMethodCreateMethod KCP = new RedirectPaymentMethodCreateMethod("kcp");
    public static final RedirectPaymentMethodCreateMethod KHIPU = new RedirectPaymentMethodCreateMethod("khipu");
    public static final RedirectPaymentMethodCreateMethod KLARNA = new RedirectPaymentMethodCreateMethod("klarna");
    public static final RedirectPaymentMethodCreateMethod LATITUDE = new RedirectPaymentMethodCreateMethod("latitude");
    public static final RedirectPaymentMethodCreateMethod LATITUDEDS = new RedirectPaymentMethodCreateMethod("latitudeds");
    public static final RedirectPaymentMethodCreateMethod LAYBUY = new RedirectPaymentMethodCreateMethod("laybuy");
    public static final RedirectPaymentMethodCreateMethod LINEPAY = new RedirectPaymentMethodCreateMethod("linepay");
    public static final RedirectPaymentMethodCreateMethod LINKAJA = new RedirectPaymentMethodCreateMethod("linkaja");
    public static final RedirectPaymentMethodCreateMethod MAYBANKQRPAY = new RedirectPaymentMethodCreateMethod("maybankqrpay");
    public static final RedirectPaymentMethodCreateMethod MERCADOPAGO = new RedirectPaymentMethodCreateMethod("mercadopago");
    public static final RedirectPaymentMethodCreateMethod MULTIBANCO = new RedirectPaymentMethodCreateMethod("multibanco");
    public static final RedirectPaymentMethodCreateMethod MULTIPAGO = new RedirectPaymentMethodCreateMethod("multipago");
    public static final RedirectPaymentMethodCreateMethod NETBANKING = new RedirectPaymentMethodCreateMethod("netbanking");
    public static final RedirectPaymentMethodCreateMethod NUPAY = new RedirectPaymentMethodCreateMethod("nupay");
    public static final RedirectPaymentMethodCreateMethod NEQUI = new RedirectPaymentMethodCreateMethod("nequi");
    public static final RedirectPaymentMethodCreateMethod ONEY10X = new RedirectPaymentMethodCreateMethod("oney_10x");
    public static final RedirectPaymentMethodCreateMethod ONEY12X = new RedirectPaymentMethodCreateMethod("oney_12x");
    public static final RedirectPaymentMethodCreateMethod ONEY3X = new RedirectPaymentMethodCreateMethod("oney_3x");
    public static final RedirectPaymentMethodCreateMethod ONEY4X = new RedirectPaymentMethodCreateMethod("oney_4x");
    public static final RedirectPaymentMethodCreateMethod ONEY6X = new RedirectPaymentMethodCreateMethod("oney_6x");
    public static final RedirectPaymentMethodCreateMethod OVO = new RedirectPaymentMethodCreateMethod("ovo");
    public static final RedirectPaymentMethodCreateMethod OXXO = new RedirectPaymentMethodCreateMethod("oxxo");
    public static final RedirectPaymentMethodCreateMethod PAGOEFECTIVO = new RedirectPaymentMethodCreateMethod("pagoefectivo");
    public static final RedirectPaymentMethodCreateMethod PAYID = new RedirectPaymentMethodCreateMethod("payid");
    public static final RedirectPaymentMethodCreateMethod PAYMAYA = new RedirectPaymentMethodCreateMethod("paymaya");
    public static final RedirectPaymentMethodCreateMethod PAYPAL = new RedirectPaymentMethodCreateMethod("paypal");
    public static final RedirectPaymentMethodCreateMethod PAYPALPAYLATER = new RedirectPaymentMethodCreateMethod("paypalpaylater");
    public static final RedirectPaymentMethodCreateMethod PAYTO = new RedirectPaymentMethodCreateMethod("payto");
    public static final RedirectPaymentMethodCreateMethod PAYVALIDA = new RedirectPaymentMethodCreateMethod("payvalida");
    public static final RedirectPaymentMethodCreateMethod PICPAY = new RedirectPaymentMethodCreateMethod("picpay");
    public static final RedirectPaymentMethodCreateMethod PIX = new RedirectPaymentMethodCreateMethod("pix");
    public static final RedirectPaymentMethodCreateMethod PSE = new RedirectPaymentMethodCreateMethod("pse");
    public static final RedirectPaymentMethodCreateMethod RABBITLINEPAY = new RedirectPaymentMethodCreateMethod("rabbitlinepay");
    public static final RedirectPaymentMethodCreateMethod RAPIPAGO = new RedirectPaymentMethodCreateMethod("rapipago");
    public static final RedirectPaymentMethodCreateMethod RAZORPAY = new RedirectPaymentMethodCreateMethod("razorpay");
    public static final RedirectPaymentMethodCreateMethod REDPAGOS = new RedirectPaymentMethodCreateMethod("redpagos");
    public static final RedirectPaymentMethodCreateMethod SCALAPAY = new RedirectPaymentMethodCreateMethod("scalapay");
    public static final RedirectPaymentMethodCreateMethod SEPA = new RedirectPaymentMethodCreateMethod("sepa");
    public static final RedirectPaymentMethodCreateMethod SERVIPAG = new RedirectPaymentMethodCreateMethod("servipag");
    public static final RedirectPaymentMethodCreateMethod SHOPEEPAY = new RedirectPaymentMethodCreateMethod("shopeepay");
    public static final RedirectPaymentMethodCreateMethod SINGTELDASH = new RedirectPaymentMethodCreateMethod("singteldash");
    public static final RedirectPaymentMethodCreateMethod SMARTPAY = new RedirectPaymentMethodCreateMethod("smartpay");
    public static final RedirectPaymentMethodCreateMethod SOFORT = new RedirectPaymentMethodCreateMethod("sofort");
    public static final RedirectPaymentMethodCreateMethod SPEI = new RedirectPaymentMethodCreateMethod("spei");
    public static final RedirectPaymentMethodCreateMethod STITCH = new RedirectPaymentMethodCreateMethod("stitch");
    public static final RedirectPaymentMethodCreateMethod STRIPEDD = new RedirectPaymentMethodCreateMethod("stripedd");
    public static final RedirectPaymentMethodCreateMethod TAPI = new RedirectPaymentMethodCreateMethod("tapi");
    public static final RedirectPaymentMethodCreateMethod TAPIFINTECHS = new RedirectPaymentMethodCreateMethod("tapifintechs");
    public static final RedirectPaymentMethodCreateMethod THAIQR = new RedirectPaymentMethodCreateMethod("thaiqr");
    public static final RedirectPaymentMethodCreateMethod TOUCHNGO = new RedirectPaymentMethodCreateMethod("touchngo");
    public static final RedirectPaymentMethodCreateMethod TRUEMONEY = new RedirectPaymentMethodCreateMethod("truemoney");
    public static final RedirectPaymentMethodCreateMethod TRUSTLY = new RedirectPaymentMethodCreateMethod("trustly");
    public static final RedirectPaymentMethodCreateMethod TRUSTLYEUROPE = new RedirectPaymentMethodCreateMethod("trustlyeurope");
    public static final RedirectPaymentMethodCreateMethod UPI = new RedirectPaymentMethodCreateMethod("upi");
    public static final RedirectPaymentMethodCreateMethod VENMO = new RedirectPaymentMethodCreateMethod("venmo");
    public static final RedirectPaymentMethodCreateMethod VIPPS = new RedirectPaymentMethodCreateMethod("vipps");
    public static final RedirectPaymentMethodCreateMethod WAAVE = new RedirectPaymentMethodCreateMethod("waave");
    public static final RedirectPaymentMethodCreateMethod WEBPAY = new RedirectPaymentMethodCreateMethod("webpay");
    public static final RedirectPaymentMethodCreateMethod WECHAT = new RedirectPaymentMethodCreateMethod("wechat");
    public static final RedirectPaymentMethodCreateMethod YAPE = new RedirectPaymentMethodCreateMethod("yape");
    public static final RedirectPaymentMethodCreateMethod ZIPPAY = new RedirectPaymentMethodCreateMethod("zippay");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, RedirectPaymentMethodCreateMethod> values = createValuesMap();
    private static final Map<String, RedirectPaymentMethodCreateMethodEnum> enums = createEnumsMap();

    private final String value;

    private RedirectPaymentMethodCreateMethod(String value) {
        this.value = value;
    }

    /**
     * Returns a RedirectPaymentMethodCreateMethod with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as RedirectPaymentMethodCreateMethod
     */ 
    public static RedirectPaymentMethodCreateMethod of(String value) {
        synchronized (RedirectPaymentMethodCreateMethod.class) {
            return values.computeIfAbsent(value, v -> new RedirectPaymentMethodCreateMethod(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<RedirectPaymentMethodCreateMethodEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        RedirectPaymentMethodCreateMethod other = (RedirectPaymentMethodCreateMethod) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "RedirectPaymentMethodCreateMethod [value=" + value + "]";
    }

    // return an array just like an enum
    public static RedirectPaymentMethodCreateMethod[] values() {
        synchronized (RedirectPaymentMethodCreateMethod.class) {
            return values.values().toArray(new RedirectPaymentMethodCreateMethod[] {});
        }
    }

    private static final Map<String, RedirectPaymentMethodCreateMethod> createValuesMap() {
        Map<String, RedirectPaymentMethodCreateMethod> map = new LinkedHashMap<>();
        map.put("abitab", ABITAB);
        map.put("affirm", AFFIRM);
        map.put("afterpay", AFTERPAY);
        map.put("alipay", ALIPAY);
        map.put("alipayhk", ALIPAYHK);
        map.put("arcuspaynetwork", ARCUSPAYNETWORK);
        map.put("bacs", BACS);
        map.put("bancontact", BANCONTACT);
        map.put("banked", BANKED);
        map.put("bcp", BCP);
        map.put("becs", BECS);
        map.put("bitpay", BITPAY);
        map.put("blik", BLIK);
        map.put("boleto", BOLETO);
        map.put("boost", BOOST);
        map.put("cashapp", CASHAPP);
        map.put("clearpay", CLEARPAY);
        map.put("dana", DANA);
        map.put("dcb", DCB);
        map.put("dlocal", DLOCAL);
        map.put("ebanx", EBANX);
        map.put("efecty", EFECTY);
        map.put("eps", EPS);
        map.put("everydaypay", EVERYDAYPAY);
        map.put("gcash", GCASH);
        map.put("gem", GEM);
        map.put("gemds", GEMDS);
        map.put("giropay", GIROPAY);
        map.put("givingblock", GIVINGBLOCK);
        map.put("gocardless", GOCARDLESS);
        map.put("gopay", GOPAY);
        map.put("grabpay", GRABPAY);
        map.put("ideal", IDEAL);
        map.put("kakaopay", KAKAOPAY);
        map.put("kcp", KCP);
        map.put("khipu", KHIPU);
        map.put("klarna", KLARNA);
        map.put("latitude", LATITUDE);
        map.put("latitudeds", LATITUDEDS);
        map.put("laybuy", LAYBUY);
        map.put("linepay", LINEPAY);
        map.put("linkaja", LINKAJA);
        map.put("maybankqrpay", MAYBANKQRPAY);
        map.put("mercadopago", MERCADOPAGO);
        map.put("multibanco", MULTIBANCO);
        map.put("multipago", MULTIPAGO);
        map.put("netbanking", NETBANKING);
        map.put("nupay", NUPAY);
        map.put("nequi", NEQUI);
        map.put("oney_10x", ONEY10X);
        map.put("oney_12x", ONEY12X);
        map.put("oney_3x", ONEY3X);
        map.put("oney_4x", ONEY4X);
        map.put("oney_6x", ONEY6X);
        map.put("ovo", OVO);
        map.put("oxxo", OXXO);
        map.put("pagoefectivo", PAGOEFECTIVO);
        map.put("payid", PAYID);
        map.put("paymaya", PAYMAYA);
        map.put("paypal", PAYPAL);
        map.put("paypalpaylater", PAYPALPAYLATER);
        map.put("payto", PAYTO);
        map.put("payvalida", PAYVALIDA);
        map.put("picpay", PICPAY);
        map.put("pix", PIX);
        map.put("pse", PSE);
        map.put("rabbitlinepay", RABBITLINEPAY);
        map.put("rapipago", RAPIPAGO);
        map.put("razorpay", RAZORPAY);
        map.put("redpagos", REDPAGOS);
        map.put("scalapay", SCALAPAY);
        map.put("sepa", SEPA);
        map.put("servipag", SERVIPAG);
        map.put("shopeepay", SHOPEEPAY);
        map.put("singteldash", SINGTELDASH);
        map.put("smartpay", SMARTPAY);
        map.put("sofort", SOFORT);
        map.put("spei", SPEI);
        map.put("stitch", STITCH);
        map.put("stripedd", STRIPEDD);
        map.put("tapi", TAPI);
        map.put("tapifintechs", TAPIFINTECHS);
        map.put("thaiqr", THAIQR);
        map.put("touchngo", TOUCHNGO);
        map.put("truemoney", TRUEMONEY);
        map.put("trustly", TRUSTLY);
        map.put("trustlyeurope", TRUSTLYEUROPE);
        map.put("upi", UPI);
        map.put("venmo", VENMO);
        map.put("vipps", VIPPS);
        map.put("waave", WAAVE);
        map.put("webpay", WEBPAY);
        map.put("wechat", WECHAT);
        map.put("yape", YAPE);
        map.put("zippay", ZIPPAY);
        return map;
    }

    private static final Map<String, RedirectPaymentMethodCreateMethodEnum> createEnumsMap() {
        Map<String, RedirectPaymentMethodCreateMethodEnum> map = new HashMap<>();
        map.put("abitab", RedirectPaymentMethodCreateMethodEnum.ABITAB);
        map.put("affirm", RedirectPaymentMethodCreateMethodEnum.AFFIRM);
        map.put("afterpay", RedirectPaymentMethodCreateMethodEnum.AFTERPAY);
        map.put("alipay", RedirectPaymentMethodCreateMethodEnum.ALIPAY);
        map.put("alipayhk", RedirectPaymentMethodCreateMethodEnum.ALIPAYHK);
        map.put("arcuspaynetwork", RedirectPaymentMethodCreateMethodEnum.ARCUSPAYNETWORK);
        map.put("bacs", RedirectPaymentMethodCreateMethodEnum.BACS);
        map.put("bancontact", RedirectPaymentMethodCreateMethodEnum.BANCONTACT);
        map.put("banked", RedirectPaymentMethodCreateMethodEnum.BANKED);
        map.put("bcp", RedirectPaymentMethodCreateMethodEnum.BCP);
        map.put("becs", RedirectPaymentMethodCreateMethodEnum.BECS);
        map.put("bitpay", RedirectPaymentMethodCreateMethodEnum.BITPAY);
        map.put("blik", RedirectPaymentMethodCreateMethodEnum.BLIK);
        map.put("boleto", RedirectPaymentMethodCreateMethodEnum.BOLETO);
        map.put("boost", RedirectPaymentMethodCreateMethodEnum.BOOST);
        map.put("cashapp", RedirectPaymentMethodCreateMethodEnum.CASHAPP);
        map.put("clearpay", RedirectPaymentMethodCreateMethodEnum.CLEARPAY);
        map.put("dana", RedirectPaymentMethodCreateMethodEnum.DANA);
        map.put("dcb", RedirectPaymentMethodCreateMethodEnum.DCB);
        map.put("dlocal", RedirectPaymentMethodCreateMethodEnum.DLOCAL);
        map.put("ebanx", RedirectPaymentMethodCreateMethodEnum.EBANX);
        map.put("efecty", RedirectPaymentMethodCreateMethodEnum.EFECTY);
        map.put("eps", RedirectPaymentMethodCreateMethodEnum.EPS);
        map.put("everydaypay", RedirectPaymentMethodCreateMethodEnum.EVERYDAYPAY);
        map.put("gcash", RedirectPaymentMethodCreateMethodEnum.GCASH);
        map.put("gem", RedirectPaymentMethodCreateMethodEnum.GEM);
        map.put("gemds", RedirectPaymentMethodCreateMethodEnum.GEMDS);
        map.put("giropay", RedirectPaymentMethodCreateMethodEnum.GIROPAY);
        map.put("givingblock", RedirectPaymentMethodCreateMethodEnum.GIVINGBLOCK);
        map.put("gocardless", RedirectPaymentMethodCreateMethodEnum.GOCARDLESS);
        map.put("gopay", RedirectPaymentMethodCreateMethodEnum.GOPAY);
        map.put("grabpay", RedirectPaymentMethodCreateMethodEnum.GRABPAY);
        map.put("ideal", RedirectPaymentMethodCreateMethodEnum.IDEAL);
        map.put("kakaopay", RedirectPaymentMethodCreateMethodEnum.KAKAOPAY);
        map.put("kcp", RedirectPaymentMethodCreateMethodEnum.KCP);
        map.put("khipu", RedirectPaymentMethodCreateMethodEnum.KHIPU);
        map.put("klarna", RedirectPaymentMethodCreateMethodEnum.KLARNA);
        map.put("latitude", RedirectPaymentMethodCreateMethodEnum.LATITUDE);
        map.put("latitudeds", RedirectPaymentMethodCreateMethodEnum.LATITUDEDS);
        map.put("laybuy", RedirectPaymentMethodCreateMethodEnum.LAYBUY);
        map.put("linepay", RedirectPaymentMethodCreateMethodEnum.LINEPAY);
        map.put("linkaja", RedirectPaymentMethodCreateMethodEnum.LINKAJA);
        map.put("maybankqrpay", RedirectPaymentMethodCreateMethodEnum.MAYBANKQRPAY);
        map.put("mercadopago", RedirectPaymentMethodCreateMethodEnum.MERCADOPAGO);
        map.put("multibanco", RedirectPaymentMethodCreateMethodEnum.MULTIBANCO);
        map.put("multipago", RedirectPaymentMethodCreateMethodEnum.MULTIPAGO);
        map.put("netbanking", RedirectPaymentMethodCreateMethodEnum.NETBANKING);
        map.put("nupay", RedirectPaymentMethodCreateMethodEnum.NUPAY);
        map.put("nequi", RedirectPaymentMethodCreateMethodEnum.NEQUI);
        map.put("oney_10x", RedirectPaymentMethodCreateMethodEnum.ONEY10X);
        map.put("oney_12x", RedirectPaymentMethodCreateMethodEnum.ONEY12X);
        map.put("oney_3x", RedirectPaymentMethodCreateMethodEnum.ONEY3X);
        map.put("oney_4x", RedirectPaymentMethodCreateMethodEnum.ONEY4X);
        map.put("oney_6x", RedirectPaymentMethodCreateMethodEnum.ONEY6X);
        map.put("ovo", RedirectPaymentMethodCreateMethodEnum.OVO);
        map.put("oxxo", RedirectPaymentMethodCreateMethodEnum.OXXO);
        map.put("pagoefectivo", RedirectPaymentMethodCreateMethodEnum.PAGOEFECTIVO);
        map.put("payid", RedirectPaymentMethodCreateMethodEnum.PAYID);
        map.put("paymaya", RedirectPaymentMethodCreateMethodEnum.PAYMAYA);
        map.put("paypal", RedirectPaymentMethodCreateMethodEnum.PAYPAL);
        map.put("paypalpaylater", RedirectPaymentMethodCreateMethodEnum.PAYPALPAYLATER);
        map.put("payto", RedirectPaymentMethodCreateMethodEnum.PAYTO);
        map.put("payvalida", RedirectPaymentMethodCreateMethodEnum.PAYVALIDA);
        map.put("picpay", RedirectPaymentMethodCreateMethodEnum.PICPAY);
        map.put("pix", RedirectPaymentMethodCreateMethodEnum.PIX);
        map.put("pse", RedirectPaymentMethodCreateMethodEnum.PSE);
        map.put("rabbitlinepay", RedirectPaymentMethodCreateMethodEnum.RABBITLINEPAY);
        map.put("rapipago", RedirectPaymentMethodCreateMethodEnum.RAPIPAGO);
        map.put("razorpay", RedirectPaymentMethodCreateMethodEnum.RAZORPAY);
        map.put("redpagos", RedirectPaymentMethodCreateMethodEnum.REDPAGOS);
        map.put("scalapay", RedirectPaymentMethodCreateMethodEnum.SCALAPAY);
        map.put("sepa", RedirectPaymentMethodCreateMethodEnum.SEPA);
        map.put("servipag", RedirectPaymentMethodCreateMethodEnum.SERVIPAG);
        map.put("shopeepay", RedirectPaymentMethodCreateMethodEnum.SHOPEEPAY);
        map.put("singteldash", RedirectPaymentMethodCreateMethodEnum.SINGTELDASH);
        map.put("smartpay", RedirectPaymentMethodCreateMethodEnum.SMARTPAY);
        map.put("sofort", RedirectPaymentMethodCreateMethodEnum.SOFORT);
        map.put("spei", RedirectPaymentMethodCreateMethodEnum.SPEI);
        map.put("stitch", RedirectPaymentMethodCreateMethodEnum.STITCH);
        map.put("stripedd", RedirectPaymentMethodCreateMethodEnum.STRIPEDD);
        map.put("tapi", RedirectPaymentMethodCreateMethodEnum.TAPI);
        map.put("tapifintechs", RedirectPaymentMethodCreateMethodEnum.TAPIFINTECHS);
        map.put("thaiqr", RedirectPaymentMethodCreateMethodEnum.THAIQR);
        map.put("touchngo", RedirectPaymentMethodCreateMethodEnum.TOUCHNGO);
        map.put("truemoney", RedirectPaymentMethodCreateMethodEnum.TRUEMONEY);
        map.put("trustly", RedirectPaymentMethodCreateMethodEnum.TRUSTLY);
        map.put("trustlyeurope", RedirectPaymentMethodCreateMethodEnum.TRUSTLYEUROPE);
        map.put("upi", RedirectPaymentMethodCreateMethodEnum.UPI);
        map.put("venmo", RedirectPaymentMethodCreateMethodEnum.VENMO);
        map.put("vipps", RedirectPaymentMethodCreateMethodEnum.VIPPS);
        map.put("waave", RedirectPaymentMethodCreateMethodEnum.WAAVE);
        map.put("webpay", RedirectPaymentMethodCreateMethodEnum.WEBPAY);
        map.put("wechat", RedirectPaymentMethodCreateMethodEnum.WECHAT);
        map.put("yape", RedirectPaymentMethodCreateMethodEnum.YAPE);
        map.put("zippay", RedirectPaymentMethodCreateMethodEnum.ZIPPAY);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<RedirectPaymentMethodCreateMethod> {

        protected _Serializer() {
            super(RedirectPaymentMethodCreateMethod.class);
        }

        @Override
        public void serialize(RedirectPaymentMethodCreateMethod value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<RedirectPaymentMethodCreateMethod> {

        protected _Deserializer() {
            super(RedirectPaymentMethodCreateMethod.class);
        }

        @Override
        public RedirectPaymentMethodCreateMethod deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return RedirectPaymentMethodCreateMethod.of(v);
        }
    }
    
    public enum RedirectPaymentMethodCreateMethodEnum {

        ABITAB("abitab"),
        AFFIRM("affirm"),
        AFTERPAY("afterpay"),
        ALIPAY("alipay"),
        ALIPAYHK("alipayhk"),
        ARCUSPAYNETWORK("arcuspaynetwork"),
        BACS("bacs"),
        BANCONTACT("bancontact"),
        BANKED("banked"),
        BCP("bcp"),
        BECS("becs"),
        BITPAY("bitpay"),
        BLIK("blik"),
        BOLETO("boleto"),
        BOOST("boost"),
        CASHAPP("cashapp"),
        CLEARPAY("clearpay"),
        DANA("dana"),
        DCB("dcb"),
        DLOCAL("dlocal"),
        EBANX("ebanx"),
        EFECTY("efecty"),
        EPS("eps"),
        EVERYDAYPAY("everydaypay"),
        GCASH("gcash"),
        GEM("gem"),
        GEMDS("gemds"),
        GIROPAY("giropay"),
        GIVINGBLOCK("givingblock"),
        GOCARDLESS("gocardless"),
        GOPAY("gopay"),
        GRABPAY("grabpay"),
        IDEAL("ideal"),
        KAKAOPAY("kakaopay"),
        KCP("kcp"),
        KHIPU("khipu"),
        KLARNA("klarna"),
        LATITUDE("latitude"),
        LATITUDEDS("latitudeds"),
        LAYBUY("laybuy"),
        LINEPAY("linepay"),
        LINKAJA("linkaja"),
        MAYBANKQRPAY("maybankqrpay"),
        MERCADOPAGO("mercadopago"),
        MULTIBANCO("multibanco"),
        MULTIPAGO("multipago"),
        NETBANKING("netbanking"),
        NUPAY("nupay"),
        NEQUI("nequi"),
        ONEY10X("oney_10x"),
        ONEY12X("oney_12x"),
        ONEY3X("oney_3x"),
        ONEY4X("oney_4x"),
        ONEY6X("oney_6x"),
        OVO("ovo"),
        OXXO("oxxo"),
        PAGOEFECTIVO("pagoefectivo"),
        PAYID("payid"),
        PAYMAYA("paymaya"),
        PAYPAL("paypal"),
        PAYPALPAYLATER("paypalpaylater"),
        PAYTO("payto"),
        PAYVALIDA("payvalida"),
        PICPAY("picpay"),
        PIX("pix"),
        PSE("pse"),
        RABBITLINEPAY("rabbitlinepay"),
        RAPIPAGO("rapipago"),
        RAZORPAY("razorpay"),
        REDPAGOS("redpagos"),
        SCALAPAY("scalapay"),
        SEPA("sepa"),
        SERVIPAG("servipag"),
        SHOPEEPAY("shopeepay"),
        SINGTELDASH("singteldash"),
        SMARTPAY("smartpay"),
        SOFORT("sofort"),
        SPEI("spei"),
        STITCH("stitch"),
        STRIPEDD("stripedd"),
        TAPI("tapi"),
        TAPIFINTECHS("tapifintechs"),
        THAIQR("thaiqr"),
        TOUCHNGO("touchngo"),
        TRUEMONEY("truemoney"),
        TRUSTLY("trustly"),
        TRUSTLYEUROPE("trustlyeurope"),
        UPI("upi"),
        VENMO("venmo"),
        VIPPS("vipps"),
        WAAVE("waave"),
        WEBPAY("webpay"),
        WECHAT("wechat"),
        YAPE("yape"),
        ZIPPAY("zippay"),;

        private final String value;

        private RedirectPaymentMethodCreateMethodEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

