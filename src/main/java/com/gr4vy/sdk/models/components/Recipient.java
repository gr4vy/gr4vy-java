/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Recipient
 * 
 * <p>Recipient of an account funding transaction
 */
public class Recipient {
    /**
     * The first name of the recipient.
     */
    @JsonProperty("first_name")
    private String firstName;

    /**
     * The last name of the recipient.
     */
    @JsonProperty("last_name")
    private String lastName;

    /**
     * The recipient of the fund's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private JsonNullable<? extends Address> address;

    /**
     * The account number of the recipient. Depending on the type of funds transfer, this could be a wallet
     * ID, bank accoutn number, or email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_number")
    private JsonNullable<String> accountNumber;

    /**
     * The date of birth of the recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_of_birth")
    private JsonNullable<LocalDate> dateOfBirth;

    @JsonCreator
    public Recipient(
            @JsonProperty("first_name") String firstName,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("address") JsonNullable<? extends Address> address,
            @JsonProperty("account_number") JsonNullable<String> accountNumber,
            @JsonProperty("date_of_birth") JsonNullable<LocalDate> dateOfBirth) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.firstName = firstName;
        this.lastName = lastName;
        this.address = address;
        this.accountNumber = accountNumber;
        this.dateOfBirth = dateOfBirth;
    }
    
    public Recipient(
            String firstName,
            String lastName) {
        this(firstName, lastName, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The first name of the recipient.
     */
    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    /**
     * The last name of the recipient.
     */
    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * The recipient of the fund's address.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Address> address() {
        return (JsonNullable<Address>) address;
    }

    /**
     * The account number of the recipient. Depending on the type of funds transfer, this could be a wallet
     * ID, bank accoutn number, or email address.
     */
    @JsonIgnore
    public JsonNullable<String> accountNumber() {
        return accountNumber;
    }

    /**
     * The date of birth of the recipient.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> dateOfBirth() {
        return dateOfBirth;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The first name of the recipient.
     */
    public Recipient withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the recipient.
     */
    public Recipient withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The recipient of the fund's address.
     */
    public Recipient withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = JsonNullable.of(address);
        return this;
    }

    /**
     * The recipient of the fund's address.
     */
    public Recipient withAddress(JsonNullable<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * The account number of the recipient. Depending on the type of funds transfer, this could be a wallet
     * ID, bank accoutn number, or email address.
     */
    public Recipient withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * The account number of the recipient. Depending on the type of funds transfer, this could be a wallet
     * ID, bank accoutn number, or email address.
     */
    public Recipient withAccountNumber(JsonNullable<String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The date of birth of the recipient.
     */
    public Recipient withDateOfBirth(LocalDate dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = JsonNullable.of(dateOfBirth);
        return this;
    }

    /**
     * The date of birth of the recipient.
     */
    public Recipient withDateOfBirth(JsonNullable<LocalDate> dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = dateOfBirth;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Recipient other = (Recipient) o;
        return 
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.address, other.address) &&
            Utils.enhancedDeepEquals(this.accountNumber, other.accountNumber) &&
            Utils.enhancedDeepEquals(this.dateOfBirth, other.dateOfBirth);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            firstName, lastName, address,
            accountNumber, dateOfBirth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Recipient.class,
                "firstName", firstName,
                "lastName", lastName,
                "address", address,
                "accountNumber", accountNumber,
                "dateOfBirth", dateOfBirth);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String firstName;

        private String lastName;

        private JsonNullable<? extends Address> address = JsonNullable.undefined();

        private JsonNullable<String> accountNumber = JsonNullable.undefined();

        private JsonNullable<LocalDate> dateOfBirth = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The first name of the recipient.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * The last name of the recipient.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * The recipient of the fund's address.
         */
        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = JsonNullable.of(address);
            return this;
        }

        /**
         * The recipient of the fund's address.
         */
        public Builder address(JsonNullable<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }


        /**
         * The account number of the recipient. Depending on the type of funds transfer, this could be a wallet
         * ID, bank accoutn number, or email address.
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * The account number of the recipient. Depending on the type of funds transfer, this could be a wallet
         * ID, bank accoutn number, or email address.
         */
        public Builder accountNumber(JsonNullable<String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }


        /**
         * The date of birth of the recipient.
         */
        public Builder dateOfBirth(LocalDate dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = JsonNullable.of(dateOfBirth);
            return this;
        }

        /**
         * The date of birth of the recipient.
         */
        public Builder dateOfBirth(JsonNullable<LocalDate> dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        public Recipient build() {

            return new Recipient(
                firstName, lastName, address,
                accountNumber, dateOfBirth);
        }

    }
}
