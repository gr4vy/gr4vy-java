/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;

public class CryptogramCreate {

    /**
     * Defines if the request is merchant initiated or not.
     */
    @JsonProperty("merchant_initiated")
    private boolean merchantInitiated;

    @JsonCreator
    public CryptogramCreate(
            @JsonProperty("merchant_initiated") boolean merchantInitiated) {
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        this.merchantInitiated = merchantInitiated;
    }

    /**
     * Defines if the request is merchant initiated or not.
     */
    @JsonIgnore
    public boolean merchantInitiated() {
        return merchantInitiated;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Defines if the request is merchant initiated or not.
     */
    public CryptogramCreate withMerchantInitiated(boolean merchantInitiated) {
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        this.merchantInitiated = merchantInitiated;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CryptogramCreate other = (CryptogramCreate) o;
        return 
            Utils.enhancedDeepEquals(this.merchantInitiated, other.merchantInitiated);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            merchantInitiated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CryptogramCreate.class,
                "merchantInitiated", merchantInitiated);
    }
    
    public final static class Builder {
 
        private Boolean merchantInitiated;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Defines if the request is merchant initiated or not.
         */
        public Builder merchantInitiated(boolean merchantInitiated) {
            Utils.checkNotNull(merchantInitiated, "merchantInitiated");
            this.merchantInitiated = merchantInitiated;
            return this;
        }
        
        public CryptogramCreate build() {
            return new CryptogramCreate(
                merchantInitiated);
        }
    }
}
