/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Settlement
 * 
 * <p>A settlement record for a transaction.
 */
public class Settlement {
    /**
     * The unique identifier for the record.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The merchant account this record belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * The date and time the record was created, in ISO 8601 format.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date and time the record was last updated, in ISO 8601 format.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    /**
     * The date and time the record was posted, in ISO 8601 format.
     */
    @JsonProperty("posted_at")
    private OffsetDateTime postedAt;

    /**
     * The date and time the record was ingested, in ISO 8601 format.
     */
    @JsonProperty("ingested_at")
    private OffsetDateTime ingestedAt;

    /**
     * ISO 4217 currency code.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The total amount in the smallest currency unit (e.g. cents).
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The exchange rate, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exchange_rate")
    private JsonNullable<Double> exchangeRate;

    /**
     * The commission amount deducted in the smallest currency unit.
     */
    @JsonProperty("commission")
    private long commission;

    /**
     * The interchange fee, if applicable, in the smallest currency unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interchange")
    private JsonNullable<Long> interchange;

    /**
     * The markup fee, if applicable, in the smallest currency unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("markup")
    private JsonNullable<Long> markup;

    /**
     * The scheme fee, if applicable, in the smallest currency unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme_fee")
    private JsonNullable<Long> schemeFee;

    /**
     * The report ID from the payment service.
     */
    @JsonProperty("payment_service_report_id")
    private String paymentServiceReportId;

    /**
     * List of file IDs for the payment service report.
     */
    @JsonProperty("payment_service_report_file_ids")
    private List<String> paymentServiceReportFileIds;

    /**
     * The transaction this record is associated with.
     */
    @JsonProperty("transaction_id")
    private String transactionId;

    /**
     * Always `settlement`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public Settlement(
            @JsonProperty("id") String id,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("posted_at") OffsetDateTime postedAt,
            @JsonProperty("ingested_at") OffsetDateTime ingestedAt,
            @JsonProperty("currency") String currency,
            @JsonProperty("amount") long amount,
            @JsonProperty("exchange_rate") JsonNullable<Double> exchangeRate,
            @JsonProperty("commission") long commission,
            @JsonProperty("interchange") JsonNullable<Long> interchange,
            @JsonProperty("markup") JsonNullable<Long> markup,
            @JsonProperty("scheme_fee") JsonNullable<Long> schemeFee,
            @JsonProperty("payment_service_report_id") String paymentServiceReportId,
            @JsonProperty("payment_service_report_file_ids") List<String> paymentServiceReportFileIds,
            @JsonProperty("transaction_id") String transactionId) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(postedAt, "postedAt");
        Utils.checkNotNull(ingestedAt, "ingestedAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(exchangeRate, "exchangeRate");
        Utils.checkNotNull(commission, "commission");
        Utils.checkNotNull(interchange, "interchange");
        Utils.checkNotNull(markup, "markup");
        Utils.checkNotNull(schemeFee, "schemeFee");
        Utils.checkNotNull(paymentServiceReportId, "paymentServiceReportId");
        Utils.checkNotNull(paymentServiceReportFileIds, "paymentServiceReportFileIds");
        Utils.checkNotNull(transactionId, "transactionId");
        this.id = id;
        this.merchantAccountId = merchantAccountId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.postedAt = postedAt;
        this.ingestedAt = ingestedAt;
        this.currency = currency;
        this.amount = amount;
        this.exchangeRate = exchangeRate;
        this.commission = commission;
        this.interchange = interchange;
        this.markup = markup;
        this.schemeFee = schemeFee;
        this.paymentServiceReportId = paymentServiceReportId;
        this.paymentServiceReportFileIds = paymentServiceReportFileIds;
        this.transactionId = transactionId;
        this.type = Builder._SINGLETON_VALUE_Type.value();
    }
    
    public Settlement(
            String id,
            String merchantAccountId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            OffsetDateTime postedAt,
            OffsetDateTime ingestedAt,
            String currency,
            long amount,
            long commission,
            String paymentServiceReportId,
            List<String> paymentServiceReportFileIds,
            String transactionId) {
        this(id, merchantAccountId, createdAt,
            updatedAt, postedAt, ingestedAt,
            currency, amount, JsonNullable.undefined(),
            commission, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), paymentServiceReportId, paymentServiceReportFileIds,
            transactionId);
    }

    /**
     * The unique identifier for the record.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The merchant account this record belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * The date and time the record was created, in ISO 8601 format.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date and time the record was last updated, in ISO 8601 format.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time the record was posted, in ISO 8601 format.
     */
    @JsonIgnore
    public OffsetDateTime postedAt() {
        return postedAt;
    }

    /**
     * The date and time the record was ingested, in ISO 8601 format.
     */
    @JsonIgnore
    public OffsetDateTime ingestedAt() {
        return ingestedAt;
    }

    /**
     * ISO 4217 currency code.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The total amount in the smallest currency unit (e.g. cents).
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The exchange rate, if applicable.
     */
    @JsonIgnore
    public JsonNullable<Double> exchangeRate() {
        return exchangeRate;
    }

    /**
     * The commission amount deducted in the smallest currency unit.
     */
    @JsonIgnore
    public long commission() {
        return commission;
    }

    /**
     * The interchange fee, if applicable, in the smallest currency unit.
     */
    @JsonIgnore
    public JsonNullable<Long> interchange() {
        return interchange;
    }

    /**
     * The markup fee, if applicable, in the smallest currency unit.
     */
    @JsonIgnore
    public JsonNullable<Long> markup() {
        return markup;
    }

    /**
     * The scheme fee, if applicable, in the smallest currency unit.
     */
    @JsonIgnore
    public JsonNullable<Long> schemeFee() {
        return schemeFee;
    }

    /**
     * The report ID from the payment service.
     */
    @JsonIgnore
    public String paymentServiceReportId() {
        return paymentServiceReportId;
    }

    /**
     * List of file IDs for the payment service report.
     */
    @JsonIgnore
    public List<String> paymentServiceReportFileIds() {
        return paymentServiceReportFileIds;
    }

    /**
     * The transaction this record is associated with.
     */
    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    /**
     * Always `settlement`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the record.
     */
    public Settlement withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The merchant account this record belongs to.
     */
    public Settlement withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * The date and time the record was created, in ISO 8601 format.
     */
    public Settlement withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time the record was last updated, in ISO 8601 format.
     */
    public Settlement withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time the record was posted, in ISO 8601 format.
     */
    public Settlement withPostedAt(OffsetDateTime postedAt) {
        Utils.checkNotNull(postedAt, "postedAt");
        this.postedAt = postedAt;
        return this;
    }

    /**
     * The date and time the record was ingested, in ISO 8601 format.
     */
    public Settlement withIngestedAt(OffsetDateTime ingestedAt) {
        Utils.checkNotNull(ingestedAt, "ingestedAt");
        this.ingestedAt = ingestedAt;
        return this;
    }

    /**
     * ISO 4217 currency code.
     */
    public Settlement withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The total amount in the smallest currency unit (e.g. cents).
     */
    public Settlement withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The exchange rate, if applicable.
     */
    public Settlement withExchangeRate(double exchangeRate) {
        Utils.checkNotNull(exchangeRate, "exchangeRate");
        this.exchangeRate = JsonNullable.of(exchangeRate);
        return this;
    }

    /**
     * The exchange rate, if applicable.
     */
    public Settlement withExchangeRate(JsonNullable<Double> exchangeRate) {
        Utils.checkNotNull(exchangeRate, "exchangeRate");
        this.exchangeRate = exchangeRate;
        return this;
    }

    /**
     * The commission amount deducted in the smallest currency unit.
     */
    public Settlement withCommission(long commission) {
        Utils.checkNotNull(commission, "commission");
        this.commission = commission;
        return this;
    }

    /**
     * The interchange fee, if applicable, in the smallest currency unit.
     */
    public Settlement withInterchange(long interchange) {
        Utils.checkNotNull(interchange, "interchange");
        this.interchange = JsonNullable.of(interchange);
        return this;
    }

    /**
     * The interchange fee, if applicable, in the smallest currency unit.
     */
    public Settlement withInterchange(JsonNullable<Long> interchange) {
        Utils.checkNotNull(interchange, "interchange");
        this.interchange = interchange;
        return this;
    }

    /**
     * The markup fee, if applicable, in the smallest currency unit.
     */
    public Settlement withMarkup(long markup) {
        Utils.checkNotNull(markup, "markup");
        this.markup = JsonNullable.of(markup);
        return this;
    }

    /**
     * The markup fee, if applicable, in the smallest currency unit.
     */
    public Settlement withMarkup(JsonNullable<Long> markup) {
        Utils.checkNotNull(markup, "markup");
        this.markup = markup;
        return this;
    }

    /**
     * The scheme fee, if applicable, in the smallest currency unit.
     */
    public Settlement withSchemeFee(long schemeFee) {
        Utils.checkNotNull(schemeFee, "schemeFee");
        this.schemeFee = JsonNullable.of(schemeFee);
        return this;
    }

    /**
     * The scheme fee, if applicable, in the smallest currency unit.
     */
    public Settlement withSchemeFee(JsonNullable<Long> schemeFee) {
        Utils.checkNotNull(schemeFee, "schemeFee");
        this.schemeFee = schemeFee;
        return this;
    }

    /**
     * The report ID from the payment service.
     */
    public Settlement withPaymentServiceReportId(String paymentServiceReportId) {
        Utils.checkNotNull(paymentServiceReportId, "paymentServiceReportId");
        this.paymentServiceReportId = paymentServiceReportId;
        return this;
    }

    /**
     * List of file IDs for the payment service report.
     */
    public Settlement withPaymentServiceReportFileIds(List<String> paymentServiceReportFileIds) {
        Utils.checkNotNull(paymentServiceReportFileIds, "paymentServiceReportFileIds");
        this.paymentServiceReportFileIds = paymentServiceReportFileIds;
        return this;
    }

    /**
     * The transaction this record is associated with.
     */
    public Settlement withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Settlement other = (Settlement) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.postedAt, other.postedAt) &&
            Utils.enhancedDeepEquals(this.ingestedAt, other.ingestedAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.exchangeRate, other.exchangeRate) &&
            Utils.enhancedDeepEquals(this.commission, other.commission) &&
            Utils.enhancedDeepEquals(this.interchange, other.interchange) &&
            Utils.enhancedDeepEquals(this.markup, other.markup) &&
            Utils.enhancedDeepEquals(this.schemeFee, other.schemeFee) &&
            Utils.enhancedDeepEquals(this.paymentServiceReportId, other.paymentServiceReportId) &&
            Utils.enhancedDeepEquals(this.paymentServiceReportFileIds, other.paymentServiceReportFileIds) &&
            Utils.enhancedDeepEquals(this.transactionId, other.transactionId) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, merchantAccountId, createdAt,
            updatedAt, postedAt, ingestedAt,
            currency, amount, exchangeRate,
            commission, interchange, markup,
            schemeFee, paymentServiceReportId, paymentServiceReportFileIds,
            transactionId, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Settlement.class,
                "id", id,
                "merchantAccountId", merchantAccountId,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "postedAt", postedAt,
                "ingestedAt", ingestedAt,
                "currency", currency,
                "amount", amount,
                "exchangeRate", exchangeRate,
                "commission", commission,
                "interchange", interchange,
                "markup", markup,
                "schemeFee", schemeFee,
                "paymentServiceReportId", paymentServiceReportId,
                "paymentServiceReportFileIds", paymentServiceReportFileIds,
                "transactionId", transactionId,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String merchantAccountId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private OffsetDateTime postedAt;

        private OffsetDateTime ingestedAt;

        private String currency;

        private Long amount;

        private JsonNullable<Double> exchangeRate = JsonNullable.undefined();

        private Long commission;

        private JsonNullable<Long> interchange = JsonNullable.undefined();

        private JsonNullable<Long> markup = JsonNullable.undefined();

        private JsonNullable<Long> schemeFee = JsonNullable.undefined();

        private String paymentServiceReportId;

        private List<String> paymentServiceReportFileIds;

        private String transactionId;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier for the record.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The merchant account this record belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }


        /**
         * The date and time the record was created, in ISO 8601 format.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time the record was last updated, in ISO 8601 format.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The date and time the record was posted, in ISO 8601 format.
         */
        public Builder postedAt(OffsetDateTime postedAt) {
            Utils.checkNotNull(postedAt, "postedAt");
            this.postedAt = postedAt;
            return this;
        }


        /**
         * The date and time the record was ingested, in ISO 8601 format.
         */
        public Builder ingestedAt(OffsetDateTime ingestedAt) {
            Utils.checkNotNull(ingestedAt, "ingestedAt");
            this.ingestedAt = ingestedAt;
            return this;
        }


        /**
         * ISO 4217 currency code.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The total amount in the smallest currency unit (e.g. cents).
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The exchange rate, if applicable.
         */
        public Builder exchangeRate(double exchangeRate) {
            Utils.checkNotNull(exchangeRate, "exchangeRate");
            this.exchangeRate = JsonNullable.of(exchangeRate);
            return this;
        }

        /**
         * The exchange rate, if applicable.
         */
        public Builder exchangeRate(JsonNullable<Double> exchangeRate) {
            Utils.checkNotNull(exchangeRate, "exchangeRate");
            this.exchangeRate = exchangeRate;
            return this;
        }


        /**
         * The commission amount deducted in the smallest currency unit.
         */
        public Builder commission(long commission) {
            Utils.checkNotNull(commission, "commission");
            this.commission = commission;
            return this;
        }


        /**
         * The interchange fee, if applicable, in the smallest currency unit.
         */
        public Builder interchange(long interchange) {
            Utils.checkNotNull(interchange, "interchange");
            this.interchange = JsonNullable.of(interchange);
            return this;
        }

        /**
         * The interchange fee, if applicable, in the smallest currency unit.
         */
        public Builder interchange(JsonNullable<Long> interchange) {
            Utils.checkNotNull(interchange, "interchange");
            this.interchange = interchange;
            return this;
        }


        /**
         * The markup fee, if applicable, in the smallest currency unit.
         */
        public Builder markup(long markup) {
            Utils.checkNotNull(markup, "markup");
            this.markup = JsonNullable.of(markup);
            return this;
        }

        /**
         * The markup fee, if applicable, in the smallest currency unit.
         */
        public Builder markup(JsonNullable<Long> markup) {
            Utils.checkNotNull(markup, "markup");
            this.markup = markup;
            return this;
        }


        /**
         * The scheme fee, if applicable, in the smallest currency unit.
         */
        public Builder schemeFee(long schemeFee) {
            Utils.checkNotNull(schemeFee, "schemeFee");
            this.schemeFee = JsonNullable.of(schemeFee);
            return this;
        }

        /**
         * The scheme fee, if applicable, in the smallest currency unit.
         */
        public Builder schemeFee(JsonNullable<Long> schemeFee) {
            Utils.checkNotNull(schemeFee, "schemeFee");
            this.schemeFee = schemeFee;
            return this;
        }


        /**
         * The report ID from the payment service.
         */
        public Builder paymentServiceReportId(String paymentServiceReportId) {
            Utils.checkNotNull(paymentServiceReportId, "paymentServiceReportId");
            this.paymentServiceReportId = paymentServiceReportId;
            return this;
        }


        /**
         * List of file IDs for the payment service report.
         */
        public Builder paymentServiceReportFileIds(List<String> paymentServiceReportFileIds) {
            Utils.checkNotNull(paymentServiceReportFileIds, "paymentServiceReportFileIds");
            this.paymentServiceReportFileIds = paymentServiceReportFileIds;
            return this;
        }


        /**
         * The transaction this record is associated with.
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }

        public Settlement build() {

            return new Settlement(
                id, merchantAccountId, createdAt,
                updatedAt, postedAt, ingestedAt,
                currency, amount, exchangeRate,
                commission, interchange, markup,
                schemeFee, paymentServiceReportId, paymentServiceReportFileIds,
                transactionId);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"settlement\"",
                        new TypeReference<Optional<String>>() {});
    }
}
