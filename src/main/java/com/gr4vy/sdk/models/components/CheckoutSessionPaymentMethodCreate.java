/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gr4vy.sdk.utils.LazySingletonValue;
import com.gr4vy.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CheckoutSessionPaymentMethodCreate {

    /**
     * Always `checkout-session`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<String> method;

    /**
     * The ID for the checkout session.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_id")
    private JsonNullable<String> buyerId;

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_external_identifier")
    private JsonNullable<String> buyerExternalIdentifier;

    @JsonCreator
    public CheckoutSessionPaymentMethodCreate(
            @JsonProperty("id") String id,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("buyer_id") JsonNullable<String> buyerId,
            @JsonProperty("buyer_external_identifier") JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.method = Builder._SINGLETON_VALUE_Method.value();
        this.id = id;
        this.externalIdentifier = externalIdentifier;
        this.buyerId = buyerId;
        this.buyerExternalIdentifier = buyerExternalIdentifier;
    }
    
    public CheckoutSessionPaymentMethodCreate(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Always `checkout-session`
     */
    @JsonIgnore
    public Optional<String> method() {
        return method;
    }

    /**
     * The ID for the checkout session.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    @JsonIgnore
    public JsonNullable<String> buyerExternalIdentifier() {
        return buyerExternalIdentifier;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the checkout session.
     */
    public CheckoutSessionPaymentMethodCreate withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    public CheckoutSessionPaymentMethodCreate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant reference that can be used to match the payment method against your own records.
     */
    public CheckoutSessionPaymentMethodCreate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    public CheckoutSessionPaymentMethodCreate withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    /**
     * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
     */
    public CheckoutSessionPaymentMethodCreate withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    public CheckoutSessionPaymentMethodCreate withBuyerExternalIdentifier(String buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
        return this;
    }

    /**
     * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
     */
    public CheckoutSessionPaymentMethodCreate withBuyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
        Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
        this.buyerExternalIdentifier = buyerExternalIdentifier;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckoutSessionPaymentMethodCreate other = (CheckoutSessionPaymentMethodCreate) o;
        return 
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Utils.enhancedDeepEquals(this.buyerId, other.buyerId) &&
            Utils.enhancedDeepEquals(this.buyerExternalIdentifier, other.buyerExternalIdentifier);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            method,
            id,
            externalIdentifier,
            buyerId,
            buyerExternalIdentifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CheckoutSessionPaymentMethodCreate.class,
                "method", method,
                "id", id,
                "externalIdentifier", externalIdentifier,
                "buyerId", buyerId,
                "buyerExternalIdentifier", buyerExternalIdentifier);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<String> buyerId = JsonNullable.undefined();
 
        private JsonNullable<String> buyerExternalIdentifier = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the checkout session.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The merchant reference that can be used to match the payment method against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant reference that can be used to match the payment method against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
         */
        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        /**
         * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
         */
        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }

        /**
         * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
         */
        public Builder buyerExternalIdentifier(String buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = JsonNullable.of(buyerExternalIdentifier);
            return this;
        }

        /**
         * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
         */
        public Builder buyerExternalIdentifier(JsonNullable<String> buyerExternalIdentifier) {
            Utils.checkNotNull(buyerExternalIdentifier, "buyerExternalIdentifier");
            this.buyerExternalIdentifier = buyerExternalIdentifier;
            return this;
        }
        
        public CheckoutSessionPaymentMethodCreate build() {
            return new CheckoutSessionPaymentMethodCreate(
                id,
                externalIdentifier,
                buyerId,
                buyerExternalIdentifier);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"checkout-session\"",
                        new TypeReference<Optional<String>>() {});
    }
}
