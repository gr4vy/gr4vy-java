/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListMerchantAccountsRequest {

    /**
     * A pointer to the page of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    /**
     * The maximum number of items that are at returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * The search term to filter merchant accounts by.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search")
    private JsonNullable<String> search;

    @JsonCreator
    public ListMerchantAccountsRequest(
            JsonNullable<String> cursor,
            Optional<Long> limit,
            JsonNullable<String> search) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(search, "search");
        this.cursor = cursor;
        this.limit = limit;
        this.search = search;
    }
    
    public ListMerchantAccountsRequest() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * A pointer to the page of results to return.
     */
    @JsonIgnore
    public JsonNullable<String> cursor() {
        return cursor;
    }

    /**
     * The maximum number of items that are at returned.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * The search term to filter merchant accounts by.
     */
    @JsonIgnore
    public JsonNullable<String> search() {
        return search;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A pointer to the page of results to return.
     */
    public ListMerchantAccountsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    /**
     * A pointer to the page of results to return.
     */
    public ListMerchantAccountsRequest withCursor(JsonNullable<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListMerchantAccountsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * The maximum number of items that are at returned.
     */
    public ListMerchantAccountsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * The search term to filter merchant accounts by.
     */
    public ListMerchantAccountsRequest withSearch(String search) {
        Utils.checkNotNull(search, "search");
        this.search = JsonNullable.of(search);
        return this;
    }

    /**
     * The search term to filter merchant accounts by.
     */
    public ListMerchantAccountsRequest withSearch(JsonNullable<String> search) {
        Utils.checkNotNull(search, "search");
        this.search = search;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListMerchantAccountsRequest other = (ListMerchantAccountsRequest) o;
        return 
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.search, other.search);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cursor,
            limit,
            search);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListMerchantAccountsRequest.class,
                "cursor", cursor,
                "limit", limit,
                "search", search);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> cursor = JsonNullable.undefined();
 
        private Optional<Long> limit;
 
        private JsonNullable<String> search = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * A pointer to the page of results to return.
         */
        public Builder cursor(JsonNullable<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * The maximum number of items that are at returned.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * The search term to filter merchant accounts by.
         */
        public Builder search(String search) {
            Utils.checkNotNull(search, "search");
            this.search = JsonNullable.of(search);
            return this;
        }

        /**
         * The search term to filter merchant accounts by.
         */
        public Builder search(JsonNullable<String> search) {
            Utils.checkNotNull(search, "search");
            this.search = search;
            return this;
        }
        
        public ListMerchantAccountsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            return new ListMerchantAccountsRequest(
                cursor,
                limit,
                search);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Long>>() {});
    }
}
