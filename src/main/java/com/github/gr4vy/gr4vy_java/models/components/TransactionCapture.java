/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TransactionCapture
 * 
 * <p>Request body for capturing an authorized transaction
 */
public class TransactionCapture {

    /**
     * The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<Long> amount;

    /**
     * The airline data to submit to the payment service during the capture call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("airline")
    private JsonNullable<? extends Airline> airline;

    @JsonCreator
    public TransactionCapture(
            @JsonProperty("amount") JsonNullable<Long> amount,
            @JsonProperty("airline") JsonNullable<? extends Airline> airline) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(airline, "airline");
        this.amount = amount;
        this.airline = airline;
    }
    
    public TransactionCapture() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.
     */
    @JsonIgnore
    public JsonNullable<Long> amount() {
        return amount;
    }

    /**
     * The airline data to submit to the payment service during the capture call.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Airline> airline() {
        return (JsonNullable<Airline>) airline;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.
     */
    public TransactionCapture withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.
     */
    public TransactionCapture withAmount(JsonNullable<Long> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The airline data to submit to the payment service during the capture call.
     */
    public TransactionCapture withAirline(Airline airline) {
        Utils.checkNotNull(airline, "airline");
        this.airline = JsonNullable.of(airline);
        return this;
    }

    /**
     * The airline data to submit to the payment service during the capture call.
     */
    public TransactionCapture withAirline(JsonNullable<? extends Airline> airline) {
        Utils.checkNotNull(airline, "airline");
        this.airline = airline;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionCapture other = (TransactionCapture) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.airline, other.airline);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            airline);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionCapture.class,
                "amount", amount,
                "airline", airline);
    }
    
    public final static class Builder {
 
        private JsonNullable<Long> amount = JsonNullable.undefined();
 
        private JsonNullable<? extends Airline> airline = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.
         */
        public Builder amount(JsonNullable<Long> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The airline data to submit to the payment service during the capture call.
         */
        public Builder airline(Airline airline) {
            Utils.checkNotNull(airline, "airline");
            this.airline = JsonNullable.of(airline);
            return this;
        }

        /**
         * The airline data to submit to the payment service during the capture call.
         */
        public Builder airline(JsonNullable<? extends Airline> airline) {
            Utils.checkNotNull(airline, "airline");
            this.airline = airline;
            return this;
        }
        
        public TransactionCapture build() {
            return new TransactionCapture(
                amount,
                airline);
        }
    }
}
