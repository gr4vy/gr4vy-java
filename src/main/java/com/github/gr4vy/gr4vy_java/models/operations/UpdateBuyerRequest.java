/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.models.components.BuyerUpdate;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateBuyerRequest {

    /**
     * The ID of the buyer to edit.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=buyer_id")
    private String buyerId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeout_in_seconds")
    private Optional<Double> timeoutInSeconds;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> xGr4vyMerchantAccountId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private BuyerUpdate buyerUpdate;

    @JsonCreator
    public UpdateBuyerRequest(
            String buyerId,
            Optional<Double> timeoutInSeconds,
            JsonNullable<String> xGr4vyMerchantAccountId,
            BuyerUpdate buyerUpdate) {
        Utils.checkNotNull(buyerId, "buyerId");
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        Utils.checkNotNull(buyerUpdate, "buyerUpdate");
        this.buyerId = buyerId;
        this.timeoutInSeconds = timeoutInSeconds;
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
        this.buyerUpdate = buyerUpdate;
    }
    
    public UpdateBuyerRequest(
            String buyerId,
            BuyerUpdate buyerUpdate) {
        this(buyerId, Optional.empty(), JsonNullable.undefined(), buyerUpdate);
    }

    /**
     * The ID of the buyer to edit.
     */
    @JsonIgnore
    public String buyerId() {
        return buyerId;
    }

    @JsonIgnore
    public Optional<Double> timeoutInSeconds() {
        return timeoutInSeconds;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> xGr4vyMerchantAccountId() {
        return xGr4vyMerchantAccountId;
    }

    @JsonIgnore
    public BuyerUpdate buyerUpdate() {
        return buyerUpdate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the buyer to edit.
     */
    public UpdateBuyerRequest withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    public UpdateBuyerRequest withTimeoutInSeconds(double timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
        return this;
    }

    public UpdateBuyerRequest withTimeoutInSeconds(Optional<Double> timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public UpdateBuyerRequest withXGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public UpdateBuyerRequest withXGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
        return this;
    }

    public UpdateBuyerRequest withBuyerUpdate(BuyerUpdate buyerUpdate) {
        Utils.checkNotNull(buyerUpdate, "buyerUpdate");
        this.buyerUpdate = buyerUpdate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateBuyerRequest other = (UpdateBuyerRequest) o;
        return 
            Objects.deepEquals(this.buyerId, other.buyerId) &&
            Objects.deepEquals(this.timeoutInSeconds, other.timeoutInSeconds) &&
            Objects.deepEquals(this.xGr4vyMerchantAccountId, other.xGr4vyMerchantAccountId) &&
            Objects.deepEquals(this.buyerUpdate, other.buyerUpdate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            buyerId,
            timeoutInSeconds,
            xGr4vyMerchantAccountId,
            buyerUpdate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateBuyerRequest.class,
                "buyerId", buyerId,
                "timeoutInSeconds", timeoutInSeconds,
                "xGr4vyMerchantAccountId", xGr4vyMerchantAccountId,
                "buyerUpdate", buyerUpdate);
    }
    
    public final static class Builder {
 
        private String buyerId;
 
        private Optional<Double> timeoutInSeconds;
 
        private JsonNullable<String> xGr4vyMerchantAccountId = JsonNullable.undefined();
 
        private BuyerUpdate buyerUpdate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the buyer to edit.
         */
        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }

        public Builder timeoutInSeconds(double timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
            return this;
        }

        public Builder timeoutInSeconds(Optional<Double> timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
            return this;
        }

        public Builder buyerUpdate(BuyerUpdate buyerUpdate) {
            Utils.checkNotNull(buyerUpdate, "buyerUpdate");
            this.buyerUpdate = buyerUpdate;
            return this;
        }
        
        public UpdateBuyerRequest build() {
            if (timeoutInSeconds == null) {
                timeoutInSeconds = _SINGLETON_VALUE_TimeoutInSeconds.value();
            }
            return new UpdateBuyerRequest(
                buyerId,
                timeoutInSeconds,
                xGr4vyMerchantAccountId,
                buyerUpdate);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TimeoutInSeconds =
                new LazySingletonValue<>(
                        "timeout_in_seconds",
                        "1",
                        new TypeReference<Optional<Double>>() {});
    }
}
