/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = CardScheme._Deserializer.class)
@JsonSerialize(using = CardScheme._Serializer.class)
public class CardScheme {

    public static final CardScheme ACCEL = new CardScheme("accel");
    public static final CardScheme AMEX = new CardScheme("amex");
    public static final CardScheme BANCONTACT = new CardScheme("bancontact");
    public static final CardScheme CARTE_BANCAIRE = new CardScheme("carte-bancaire");
    public static final CardScheme CIRRUS = new CardScheme("cirrus");
    public static final CardScheme CULIANCE = new CardScheme("culiance");
    public static final CardScheme DANKORT = new CardScheme("dankort");
    public static final CardScheme DINERS_CLUB = new CardScheme("diners-club");
    public static final CardScheme DISCOVER = new CardScheme("discover");
    public static final CardScheme EFTPOS_AUSTRALIA = new CardScheme("eftpos-australia");
    public static final CardScheme ELO = new CardScheme("elo");
    public static final CardScheme HIPERCARD = new CardScheme("hipercard");
    public static final CardScheme JCB = new CardScheme("jcb");
    public static final CardScheme MAESTRO = new CardScheme("maestro");
    public static final CardScheme MASTERCARD = new CardScheme("mastercard");
    public static final CardScheme MIR = new CardScheme("mir");
    public static final CardScheme NYCE = new CardScheme("nyce");
    public static final CardScheme OTHER = new CardScheme("other");
    public static final CardScheme PULSE = new CardScheme("pulse");
    public static final CardScheme RUPAY = new CardScheme("rupay");
    public static final CardScheme STAR = new CardScheme("star");
    public static final CardScheme UATP = new CardScheme("uatp");
    public static final CardScheme UNIONPAY = new CardScheme("unionpay");
    public static final CardScheme VISA = new CardScheme("visa");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, CardScheme> values = createValuesMap();
    private static final Map<String, CardSchemeEnum> enums = createEnumsMap();

    private final String value;

    private CardScheme(String value) {
        this.value = value;
    }

    /**
     * Returns a CardScheme with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as CardScheme
     */ 
    public static CardScheme of(String value) {
        synchronized (CardScheme.class) {
            return values.computeIfAbsent(value, v -> new CardScheme(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<CardSchemeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        CardScheme other = (CardScheme) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "CardScheme [value=" + value + "]";
    }

    // return an array just like an enum
    public static CardScheme[] values() {
        synchronized (CardScheme.class) {
            return values.values().toArray(new CardScheme[] {});
        }
    }

    private static final Map<String, CardScheme> createValuesMap() {
        Map<String, CardScheme> map = new LinkedHashMap<>();
        map.put("accel", ACCEL);
        map.put("amex", AMEX);
        map.put("bancontact", BANCONTACT);
        map.put("carte-bancaire", CARTE_BANCAIRE);
        map.put("cirrus", CIRRUS);
        map.put("culiance", CULIANCE);
        map.put("dankort", DANKORT);
        map.put("diners-club", DINERS_CLUB);
        map.put("discover", DISCOVER);
        map.put("eftpos-australia", EFTPOS_AUSTRALIA);
        map.put("elo", ELO);
        map.put("hipercard", HIPERCARD);
        map.put("jcb", JCB);
        map.put("maestro", MAESTRO);
        map.put("mastercard", MASTERCARD);
        map.put("mir", MIR);
        map.put("nyce", NYCE);
        map.put("other", OTHER);
        map.put("pulse", PULSE);
        map.put("rupay", RUPAY);
        map.put("star", STAR);
        map.put("uatp", UATP);
        map.put("unionpay", UNIONPAY);
        map.put("visa", VISA);
        return map;
    }

    private static final Map<String, CardSchemeEnum> createEnumsMap() {
        Map<String, CardSchemeEnum> map = new HashMap<>();
        map.put("accel", CardSchemeEnum.ACCEL);
        map.put("amex", CardSchemeEnum.AMEX);
        map.put("bancontact", CardSchemeEnum.BANCONTACT);
        map.put("carte-bancaire", CardSchemeEnum.CARTE_BANCAIRE);
        map.put("cirrus", CardSchemeEnum.CIRRUS);
        map.put("culiance", CardSchemeEnum.CULIANCE);
        map.put("dankort", CardSchemeEnum.DANKORT);
        map.put("diners-club", CardSchemeEnum.DINERS_CLUB);
        map.put("discover", CardSchemeEnum.DISCOVER);
        map.put("eftpos-australia", CardSchemeEnum.EFTPOS_AUSTRALIA);
        map.put("elo", CardSchemeEnum.ELO);
        map.put("hipercard", CardSchemeEnum.HIPERCARD);
        map.put("jcb", CardSchemeEnum.JCB);
        map.put("maestro", CardSchemeEnum.MAESTRO);
        map.put("mastercard", CardSchemeEnum.MASTERCARD);
        map.put("mir", CardSchemeEnum.MIR);
        map.put("nyce", CardSchemeEnum.NYCE);
        map.put("other", CardSchemeEnum.OTHER);
        map.put("pulse", CardSchemeEnum.PULSE);
        map.put("rupay", CardSchemeEnum.RUPAY);
        map.put("star", CardSchemeEnum.STAR);
        map.put("uatp", CardSchemeEnum.UATP);
        map.put("unionpay", CardSchemeEnum.UNIONPAY);
        map.put("visa", CardSchemeEnum.VISA);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<CardScheme> {

        protected _Serializer() {
            super(CardScheme.class);
        }

        @Override
        public void serialize(CardScheme value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<CardScheme> {

        protected _Deserializer() {
            super(CardScheme.class);
        }

        @Override
        public CardScheme deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return CardScheme.of(v);
        }
    }
    
    public enum CardSchemeEnum {

        ACCEL("accel"),
        AMEX("amex"),
        BANCONTACT("bancontact"),
        CARTE_BANCAIRE("carte-bancaire"),
        CIRRUS("cirrus"),
        CULIANCE("culiance"),
        DANKORT("dankort"),
        DINERS_CLUB("diners-club"),
        DISCOVER("discover"),
        EFTPOS_AUSTRALIA("eftpos-australia"),
        ELO("elo"),
        HIPERCARD("hipercard"),
        JCB("jcb"),
        MAESTRO("maestro"),
        MASTERCARD("mastercard"),
        MIR("mir"),
        NYCE("nyce"),
        OTHER("other"),
        PULSE("pulse"),
        RUPAY("rupay"),
        STAR("star"),
        UATP("uatp"),
        UNIONPAY("unionpay"),
        VISA("visa"),;

        private final String value;

        private CardSchemeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

