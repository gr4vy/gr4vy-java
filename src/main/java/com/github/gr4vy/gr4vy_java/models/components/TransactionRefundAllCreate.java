/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class TransactionRefundAllCreate {

    /**
     * An optional reason to attach extra context to the refund requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private JsonNullable<String> reason;

    /**
     * An external identifier that can be used to match the refunds against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    @JsonCreator
    public TransactionRefundAllCreate(
            @JsonProperty("reason") JsonNullable<String> reason,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.reason = reason;
        this.externalIdentifier = externalIdentifier;
    }
    
    public TransactionRefundAllCreate() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * An optional reason to attach extra context to the refund requests.
     */
    @JsonIgnore
    public JsonNullable<String> reason() {
        return reason;
    }

    /**
     * An external identifier that can be used to match the refunds against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An optional reason to attach extra context to the refund requests.
     */
    public TransactionRefundAllCreate withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = JsonNullable.of(reason);
        return this;
    }

    /**
     * An optional reason to attach extra context to the refund requests.
     */
    public TransactionRefundAllCreate withReason(JsonNullable<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    /**
     * An external identifier that can be used to match the refunds against your own records.
     */
    public TransactionRefundAllCreate withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the refunds against your own records.
     */
    public TransactionRefundAllCreate withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionRefundAllCreate other = (TransactionRefundAllCreate) o;
        return 
            Objects.deepEquals(this.reason, other.reason) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            reason,
            externalIdentifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionRefundAllCreate.class,
                "reason", reason,
                "externalIdentifier", externalIdentifier);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> reason = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An optional reason to attach extra context to the refund requests.
         */
        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = JsonNullable.of(reason);
            return this;
        }

        /**
         * An optional reason to attach extra context to the refund requests.
         */
        public Builder reason(JsonNullable<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        /**
         * An external identifier that can be used to match the refunds against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the refunds against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }
        
        public TransactionRefundAllCreate build() {
            return new TransactionRefundAllCreate(
                reason,
                externalIdentifier);
        }
    }
}
