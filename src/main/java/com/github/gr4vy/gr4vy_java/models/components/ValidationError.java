/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class ValidationError {

    @JsonProperty("loc")
    private List<Loc> loc;

    @JsonProperty("msg")
    private String msg;

    @JsonProperty("type")
    private String type;

    @JsonCreator
    public ValidationError(
            @JsonProperty("loc") List<Loc> loc,
            @JsonProperty("msg") String msg,
            @JsonProperty("type") String type) {
        Utils.checkNotNull(loc, "loc");
        Utils.checkNotNull(msg, "msg");
        Utils.checkNotNull(type, "type");
        this.loc = loc;
        this.msg = msg;
        this.type = type;
    }

    @JsonIgnore
    public List<Loc> loc() {
        return loc;
    }

    @JsonIgnore
    public String msg() {
        return msg;
    }

    @JsonIgnore
    public String type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ValidationError withLoc(List<Loc> loc) {
        Utils.checkNotNull(loc, "loc");
        this.loc = loc;
        return this;
    }

    public ValidationError withMsg(String msg) {
        Utils.checkNotNull(msg, "msg");
        this.msg = msg;
        return this;
    }

    public ValidationError withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ValidationError other = (ValidationError) o;
        return 
            Objects.deepEquals(this.loc, other.loc) &&
            Objects.deepEquals(this.msg, other.msg) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            loc,
            msg,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ValidationError.class,
                "loc", loc,
                "msg", msg,
                "type", type);
    }
    
    public final static class Builder {
 
        private List<Loc> loc;
 
        private String msg;
 
        private String type;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder loc(List<Loc> loc) {
            Utils.checkNotNull(loc, "loc");
            this.loc = loc;
            return this;
        }

        public Builder msg(String msg) {
            Utils.checkNotNull(msg, "msg");
            this.msg = msg;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public ValidationError build() {
            return new ValidationError(
                loc,
                msg,
                type);
        }
    }
}
