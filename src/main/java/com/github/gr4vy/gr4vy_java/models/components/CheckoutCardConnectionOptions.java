/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class CheckoutCardConnectionOptions {

    /**
     * The processing channel to be used for the payment.
     */
    @JsonProperty("processing_channel_id")
    private String processingChannelId;

    /**
     * The ID of the currency account that will fund the payout.
     */
    @JsonProperty("source_id")
    private String sourceId;

    @JsonCreator
    public CheckoutCardConnectionOptions(
            @JsonProperty("processing_channel_id") String processingChannelId,
            @JsonProperty("source_id") String sourceId) {
        Utils.checkNotNull(processingChannelId, "processingChannelId");
        Utils.checkNotNull(sourceId, "sourceId");
        this.processingChannelId = processingChannelId;
        this.sourceId = sourceId;
    }

    /**
     * The processing channel to be used for the payment.
     */
    @JsonIgnore
    public String processingChannelId() {
        return processingChannelId;
    }

    /**
     * The ID of the currency account that will fund the payout.
     */
    @JsonIgnore
    public String sourceId() {
        return sourceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The processing channel to be used for the payment.
     */
    public CheckoutCardConnectionOptions withProcessingChannelId(String processingChannelId) {
        Utils.checkNotNull(processingChannelId, "processingChannelId");
        this.processingChannelId = processingChannelId;
        return this;
    }

    /**
     * The ID of the currency account that will fund the payout.
     */
    public CheckoutCardConnectionOptions withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckoutCardConnectionOptions other = (CheckoutCardConnectionOptions) o;
        return 
            Objects.deepEquals(this.processingChannelId, other.processingChannelId) &&
            Objects.deepEquals(this.sourceId, other.sourceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            processingChannelId,
            sourceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CheckoutCardConnectionOptions.class,
                "processingChannelId", processingChannelId,
                "sourceId", sourceId);
    }
    
    public final static class Builder {
 
        private String processingChannelId;
 
        private String sourceId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The processing channel to be used for the payment.
         */
        public Builder processingChannelId(String processingChannelId) {
            Utils.checkNotNull(processingChannelId, "processingChannelId");
            this.processingChannelId = processingChannelId;
            return this;
        }

        /**
         * The ID of the currency account that will fund the payout.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }
        
        public CheckoutCardConnectionOptions build() {
            return new CheckoutCardConnectionOptions(
                processingChannelId,
                sourceId);
        }
    }
}
