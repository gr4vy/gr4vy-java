/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.models.components.TransactionRefundAllCreate;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Double;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateFullTransactionRefundRequestBuilder {

    private String transactionId;
    private Optional<Double> timeoutInSeconds = Utils.readDefaultOrConstValue(
                            "timeoutInSeconds",
                            "1",
                            new TypeReference<Optional<Double>>() {});
    private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
    private JsonNullable<? extends TransactionRefundAllCreate> transactionRefundAllCreate = JsonNullable.undefined();
    private final SDKMethodInterfaces.MethodCallCreateFullTransactionRefund sdk;

    public CreateFullTransactionRefundRequestBuilder(SDKMethodInterfaces.MethodCallCreateFullTransactionRefund sdk) {
        this.sdk = sdk;
    }

    public CreateFullTransactionRefundRequestBuilder transactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
                
    public CreateFullTransactionRefundRequestBuilder timeoutInSeconds(double timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = Optional.of(timeoutInSeconds);
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder timeoutInSeconds(Optional<Double> timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder merchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder merchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder transactionRefundAllCreate(TransactionRefundAllCreate transactionRefundAllCreate) {
        Utils.checkNotNull(transactionRefundAllCreate, "transactionRefundAllCreate");
        this.transactionRefundAllCreate = JsonNullable.of(transactionRefundAllCreate);
        return this;
    }

    public CreateFullTransactionRefundRequestBuilder transactionRefundAllCreate(JsonNullable<? extends TransactionRefundAllCreate> transactionRefundAllCreate) {
        Utils.checkNotNull(transactionRefundAllCreate, "transactionRefundAllCreate");
        this.transactionRefundAllCreate = transactionRefundAllCreate;
        return this;
    }

    public CreateFullTransactionRefundResponse call() throws Exception {
        if (timeoutInSeconds == null) {
            timeoutInSeconds = _SINGLETON_VALUE_TimeoutInSeconds.value();
        }
        return sdk.create(
            transactionId,
            timeoutInSeconds,
            merchantAccountId,
            transactionRefundAllCreate);
    }

    private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TimeoutInSeconds =
            new LazySingletonValue<>(
                    "timeoutInSeconds",
                    "1",
                    new TypeReference<Optional<Double>>() {});
}
