/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.github.gr4vy.gr4vy_java.utils.HasSecurity;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class Security implements HasSecurity {

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private String oAuth2PasswordBearer;

    @JsonCreator
    public Security(
            String oAuth2PasswordBearer) {
        Utils.checkNotNull(oAuth2PasswordBearer, "oAuth2PasswordBearer");
        this.oAuth2PasswordBearer = oAuth2PasswordBearer;
    }

    @JsonIgnore
    public String oAuth2PasswordBearer() {
        return oAuth2PasswordBearer;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Security withOAuth2PasswordBearer(String oAuth2PasswordBearer) {
        Utils.checkNotNull(oAuth2PasswordBearer, "oAuth2PasswordBearer");
        this.oAuth2PasswordBearer = oAuth2PasswordBearer;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            Objects.deepEquals(this.oAuth2PasswordBearer, other.oAuth2PasswordBearer);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            oAuth2PasswordBearer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "oAuth2PasswordBearer", oAuth2PasswordBearer);
    }
    
    public final static class Builder {
 
        private String oAuth2PasswordBearer;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder oAuth2PasswordBearer(String oAuth2PasswordBearer) {
            Utils.checkNotNull(oAuth2PasswordBearer, "oAuth2PasswordBearer");
            this.oAuth2PasswordBearer = oAuth2PasswordBearer;
            return this;
        }
        
        public Security build() {
            return new Security(
                oAuth2PasswordBearer);
        }
    }
}
