/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class TransactionBuyer {

    /**
     * Always `buyer`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The display name for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The merchant identifier for this buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The billing name, address, email, and other fields for this buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_details")
    private JsonNullable<? extends BillingDetailsOutput> billingDetails;

    /**
     * The buyer account number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_number")
    private JsonNullable<String> accountNumber;

    @JsonCreator
    public TransactionBuyer(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("billing_details") JsonNullable<? extends BillingDetailsOutput> billingDetails,
            @JsonProperty("account_number") JsonNullable<String> accountNumber) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(billingDetails, "billingDetails");
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.displayName = displayName;
        this.externalIdentifier = externalIdentifier;
        this.billingDetails = billingDetails;
        this.accountNumber = accountNumber;
    }
    
    public TransactionBuyer() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Always `buyer`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the buyer.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The display name for the buyer.
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The merchant identifier for this buyer.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The billing name, address, email, and other fields for this buyer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BillingDetailsOutput> billingDetails() {
        return (JsonNullable<BillingDetailsOutput>) billingDetails;
    }

    /**
     * The buyer account number.
     */
    @JsonIgnore
    public JsonNullable<String> accountNumber() {
        return accountNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the buyer.
     */
    public TransactionBuyer withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The ID for the buyer.
     */
    public TransactionBuyer withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The display name for the buyer.
     */
    public TransactionBuyer withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The display name for the buyer.
     */
    public TransactionBuyer withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The merchant identifier for this buyer.
     */
    public TransactionBuyer withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * The merchant identifier for this buyer.
     */
    public TransactionBuyer withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The billing name, address, email, and other fields for this buyer.
     */
    public TransactionBuyer withBillingDetails(BillingDetailsOutput billingDetails) {
        Utils.checkNotNull(billingDetails, "billingDetails");
        this.billingDetails = JsonNullable.of(billingDetails);
        return this;
    }

    /**
     * The billing name, address, email, and other fields for this buyer.
     */
    public TransactionBuyer withBillingDetails(JsonNullable<? extends BillingDetailsOutput> billingDetails) {
        Utils.checkNotNull(billingDetails, "billingDetails");
        this.billingDetails = billingDetails;
        return this;
    }

    /**
     * The buyer account number.
     */
    public TransactionBuyer withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * The buyer account number.
     */
    public TransactionBuyer withAccountNumber(JsonNullable<String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionBuyer other = (TransactionBuyer) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Objects.deepEquals(this.billingDetails, other.billingDetails) &&
            Objects.deepEquals(this.accountNumber, other.accountNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            displayName,
            externalIdentifier,
            billingDetails,
            accountNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionBuyer.class,
                "type", type,
                "id", id,
                "displayName", displayName,
                "externalIdentifier", externalIdentifier,
                "billingDetails", billingDetails,
                "accountNumber", accountNumber);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> displayName = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<? extends BillingDetailsOutput> billingDetails = JsonNullable.undefined();
 
        private JsonNullable<String> accountNumber = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the buyer.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID for the buyer.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The display name for the buyer.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The display name for the buyer.
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The merchant identifier for this buyer.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * The merchant identifier for this buyer.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * The billing name, address, email, and other fields for this buyer.
         */
        public Builder billingDetails(BillingDetailsOutput billingDetails) {
            Utils.checkNotNull(billingDetails, "billingDetails");
            this.billingDetails = JsonNullable.of(billingDetails);
            return this;
        }

        /**
         * The billing name, address, email, and other fields for this buyer.
         */
        public Builder billingDetails(JsonNullable<? extends BillingDetailsOutput> billingDetails) {
            Utils.checkNotNull(billingDetails, "billingDetails");
            this.billingDetails = billingDetails;
            return this;
        }

        /**
         * The buyer account number.
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * The buyer account number.
         */
        public Builder accountNumber(JsonNullable<String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }
        
        public TransactionBuyer build() {
            return new TransactionBuyer(
                id,
                displayName,
                externalIdentifier,
                billingDetails,
                accountNumber);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"buyer\"",
                        new TypeReference<Optional<String>>() {});
    }
}
