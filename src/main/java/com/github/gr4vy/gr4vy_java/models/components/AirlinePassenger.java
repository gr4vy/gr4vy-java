/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class AirlinePassenger {

    /**
     * The age group for the passenger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("age_group")
    private JsonNullable<? extends AgeGroup> ageGroup;

    /**
     * The passenger's date of birth in YYYY-MM-YY format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_of_birth")
    private JsonNullable<LocalDate> dateOfBirth;

    /**
     * The email address of the passenger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    private JsonNullable<String> emailAddress;

    /**
     * The first name(s) or given name of the passenger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The passenger's frequent flyer number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequent_flyer_number")
    private JsonNullable<String> frequentFlyerNumber;

    /**
     * The last name, or family name, of the passenger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The passenger's unique passport number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passport_number")
    private JsonNullable<String> passportNumber;

    /**
     * The phone number of the passenger. This number is formatted according to the E164 number standard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private JsonNullable<String> phoneNumber;

    /**
     * The ticket number for a flight.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticket_number")
    private JsonNullable<String> ticketNumber;

    /**
     * Title of the passenger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The country of residence of the passenger
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private JsonNullable<String> countryCode;

    @JsonCreator
    public AirlinePassenger(
            @JsonProperty("age_group") JsonNullable<? extends AgeGroup> ageGroup,
            @JsonProperty("date_of_birth") JsonNullable<LocalDate> dateOfBirth,
            @JsonProperty("email_address") JsonNullable<String> emailAddress,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("frequent_flyer_number") JsonNullable<String> frequentFlyerNumber,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("passport_number") JsonNullable<String> passportNumber,
            @JsonProperty("phone_number") JsonNullable<String> phoneNumber,
            @JsonProperty("ticket_number") JsonNullable<String> ticketNumber,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("country_code") JsonNullable<String> countryCode) {
        Utils.checkNotNull(ageGroup, "ageGroup");
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(frequentFlyerNumber, "frequentFlyerNumber");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(passportNumber, "passportNumber");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(ticketNumber, "ticketNumber");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(countryCode, "countryCode");
        this.ageGroup = ageGroup;
        this.dateOfBirth = dateOfBirth;
        this.emailAddress = emailAddress;
        this.firstName = firstName;
        this.frequentFlyerNumber = frequentFlyerNumber;
        this.lastName = lastName;
        this.passportNumber = passportNumber;
        this.phoneNumber = phoneNumber;
        this.ticketNumber = ticketNumber;
        this.title = title;
        this.countryCode = countryCode;
    }
    
    public AirlinePassenger() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The age group for the passenger.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AgeGroup> ageGroup() {
        return (JsonNullable<AgeGroup>) ageGroup;
    }

    /**
     * The passenger's date of birth in YYYY-MM-YY format.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> dateOfBirth() {
        return dateOfBirth;
    }

    /**
     * The email address of the passenger.
     */
    @JsonIgnore
    public JsonNullable<String> emailAddress() {
        return emailAddress;
    }

    /**
     * The first name(s) or given name of the passenger.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The passenger's frequent flyer number.
     */
    @JsonIgnore
    public JsonNullable<String> frequentFlyerNumber() {
        return frequentFlyerNumber;
    }

    /**
     * The last name, or family name, of the passenger.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The passenger's unique passport number.
     */
    @JsonIgnore
    public JsonNullable<String> passportNumber() {
        return passportNumber;
    }

    /**
     * The phone number of the passenger. This number is formatted according to the E164 number standard.
     */
    @JsonIgnore
    public JsonNullable<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * The ticket number for a flight.
     */
    @JsonIgnore
    public JsonNullable<String> ticketNumber() {
        return ticketNumber;
    }

    /**
     * Title of the passenger.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The country of residence of the passenger
     */
    @JsonIgnore
    public JsonNullable<String> countryCode() {
        return countryCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The age group for the passenger.
     */
    public AirlinePassenger withAgeGroup(AgeGroup ageGroup) {
        Utils.checkNotNull(ageGroup, "ageGroup");
        this.ageGroup = JsonNullable.of(ageGroup);
        return this;
    }

    /**
     * The age group for the passenger.
     */
    public AirlinePassenger withAgeGroup(JsonNullable<? extends AgeGroup> ageGroup) {
        Utils.checkNotNull(ageGroup, "ageGroup");
        this.ageGroup = ageGroup;
        return this;
    }

    /**
     * The passenger's date of birth in YYYY-MM-YY format.
     */
    public AirlinePassenger withDateOfBirth(LocalDate dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = JsonNullable.of(dateOfBirth);
        return this;
    }

    /**
     * The passenger's date of birth in YYYY-MM-YY format.
     */
    public AirlinePassenger withDateOfBirth(JsonNullable<LocalDate> dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = dateOfBirth;
        return this;
    }

    /**
     * The email address of the passenger.
     */
    public AirlinePassenger withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = JsonNullable.of(emailAddress);
        return this;
    }

    /**
     * The email address of the passenger.
     */
    public AirlinePassenger withEmailAddress(JsonNullable<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * The first name(s) or given name of the passenger.
     */
    public AirlinePassenger withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name(s) or given name of the passenger.
     */
    public AirlinePassenger withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The passenger's frequent flyer number.
     */
    public AirlinePassenger withFrequentFlyerNumber(String frequentFlyerNumber) {
        Utils.checkNotNull(frequentFlyerNumber, "frequentFlyerNumber");
        this.frequentFlyerNumber = JsonNullable.of(frequentFlyerNumber);
        return this;
    }

    /**
     * The passenger's frequent flyer number.
     */
    public AirlinePassenger withFrequentFlyerNumber(JsonNullable<String> frequentFlyerNumber) {
        Utils.checkNotNull(frequentFlyerNumber, "frequentFlyerNumber");
        this.frequentFlyerNumber = frequentFlyerNumber;
        return this;
    }

    /**
     * The last name, or family name, of the passenger.
     */
    public AirlinePassenger withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name, or family name, of the passenger.
     */
    public AirlinePassenger withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The passenger's unique passport number.
     */
    public AirlinePassenger withPassportNumber(String passportNumber) {
        Utils.checkNotNull(passportNumber, "passportNumber");
        this.passportNumber = JsonNullable.of(passportNumber);
        return this;
    }

    /**
     * The passenger's unique passport number.
     */
    public AirlinePassenger withPassportNumber(JsonNullable<String> passportNumber) {
        Utils.checkNotNull(passportNumber, "passportNumber");
        this.passportNumber = passportNumber;
        return this;
    }

    /**
     * The phone number of the passenger. This number is formatted according to the E164 number standard.
     */
    public AirlinePassenger withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = JsonNullable.of(phoneNumber);
        return this;
    }

    /**
     * The phone number of the passenger. This number is formatted according to the E164 number standard.
     */
    public AirlinePassenger withPhoneNumber(JsonNullable<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The ticket number for a flight.
     */
    public AirlinePassenger withTicketNumber(String ticketNumber) {
        Utils.checkNotNull(ticketNumber, "ticketNumber");
        this.ticketNumber = JsonNullable.of(ticketNumber);
        return this;
    }

    /**
     * The ticket number for a flight.
     */
    public AirlinePassenger withTicketNumber(JsonNullable<String> ticketNumber) {
        Utils.checkNotNull(ticketNumber, "ticketNumber");
        this.ticketNumber = ticketNumber;
        return this;
    }

    /**
     * Title of the passenger.
     */
    public AirlinePassenger withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * Title of the passenger.
     */
    public AirlinePassenger withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The country of residence of the passenger
     */
    public AirlinePassenger withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = JsonNullable.of(countryCode);
        return this;
    }

    /**
     * The country of residence of the passenger
     */
    public AirlinePassenger withCountryCode(JsonNullable<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AirlinePassenger other = (AirlinePassenger) o;
        return 
            Objects.deepEquals(this.ageGroup, other.ageGroup) &&
            Objects.deepEquals(this.dateOfBirth, other.dateOfBirth) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.frequentFlyerNumber, other.frequentFlyerNumber) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.passportNumber, other.passportNumber) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.ticketNumber, other.ticketNumber) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.countryCode, other.countryCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ageGroup,
            dateOfBirth,
            emailAddress,
            firstName,
            frequentFlyerNumber,
            lastName,
            passportNumber,
            phoneNumber,
            ticketNumber,
            title,
            countryCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AirlinePassenger.class,
                "ageGroup", ageGroup,
                "dateOfBirth", dateOfBirth,
                "emailAddress", emailAddress,
                "firstName", firstName,
                "frequentFlyerNumber", frequentFlyerNumber,
                "lastName", lastName,
                "passportNumber", passportNumber,
                "phoneNumber", phoneNumber,
                "ticketNumber", ticketNumber,
                "title", title,
                "countryCode", countryCode);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends AgeGroup> ageGroup = JsonNullable.undefined();
 
        private JsonNullable<LocalDate> dateOfBirth = JsonNullable.undefined();
 
        private JsonNullable<String> emailAddress = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> frequentFlyerNumber = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> passportNumber = JsonNullable.undefined();
 
        private JsonNullable<String> phoneNumber = JsonNullable.undefined();
 
        private JsonNullable<String> ticketNumber = JsonNullable.undefined();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<String> countryCode = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The age group for the passenger.
         */
        public Builder ageGroup(AgeGroup ageGroup) {
            Utils.checkNotNull(ageGroup, "ageGroup");
            this.ageGroup = JsonNullable.of(ageGroup);
            return this;
        }

        /**
         * The age group for the passenger.
         */
        public Builder ageGroup(JsonNullable<? extends AgeGroup> ageGroup) {
            Utils.checkNotNull(ageGroup, "ageGroup");
            this.ageGroup = ageGroup;
            return this;
        }

        /**
         * The passenger's date of birth in YYYY-MM-YY format.
         */
        public Builder dateOfBirth(LocalDate dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = JsonNullable.of(dateOfBirth);
            return this;
        }

        /**
         * The passenger's date of birth in YYYY-MM-YY format.
         */
        public Builder dateOfBirth(JsonNullable<LocalDate> dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        /**
         * The email address of the passenger.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = JsonNullable.of(emailAddress);
            return this;
        }

        /**
         * The email address of the passenger.
         */
        public Builder emailAddress(JsonNullable<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * The first name(s) or given name of the passenger.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name(s) or given name of the passenger.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The passenger's frequent flyer number.
         */
        public Builder frequentFlyerNumber(String frequentFlyerNumber) {
            Utils.checkNotNull(frequentFlyerNumber, "frequentFlyerNumber");
            this.frequentFlyerNumber = JsonNullable.of(frequentFlyerNumber);
            return this;
        }

        /**
         * The passenger's frequent flyer number.
         */
        public Builder frequentFlyerNumber(JsonNullable<String> frequentFlyerNumber) {
            Utils.checkNotNull(frequentFlyerNumber, "frequentFlyerNumber");
            this.frequentFlyerNumber = frequentFlyerNumber;
            return this;
        }

        /**
         * The last name, or family name, of the passenger.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name, or family name, of the passenger.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The passenger's unique passport number.
         */
        public Builder passportNumber(String passportNumber) {
            Utils.checkNotNull(passportNumber, "passportNumber");
            this.passportNumber = JsonNullable.of(passportNumber);
            return this;
        }

        /**
         * The passenger's unique passport number.
         */
        public Builder passportNumber(JsonNullable<String> passportNumber) {
            Utils.checkNotNull(passportNumber, "passportNumber");
            this.passportNumber = passportNumber;
            return this;
        }

        /**
         * The phone number of the passenger. This number is formatted according to the E164 number standard.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = JsonNullable.of(phoneNumber);
            return this;
        }

        /**
         * The phone number of the passenger. This number is formatted according to the E164 number standard.
         */
        public Builder phoneNumber(JsonNullable<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * The ticket number for a flight.
         */
        public Builder ticketNumber(String ticketNumber) {
            Utils.checkNotNull(ticketNumber, "ticketNumber");
            this.ticketNumber = JsonNullable.of(ticketNumber);
            return this;
        }

        /**
         * The ticket number for a flight.
         */
        public Builder ticketNumber(JsonNullable<String> ticketNumber) {
            Utils.checkNotNull(ticketNumber, "ticketNumber");
            this.ticketNumber = ticketNumber;
            return this;
        }

        /**
         * Title of the passenger.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * Title of the passenger.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The country of residence of the passenger
         */
        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = JsonNullable.of(countryCode);
            return this;
        }

        /**
         * The country of residence of the passenger
         */
        public Builder countryCode(JsonNullable<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }
        
        public AirlinePassenger build() {
            return new AirlinePassenger(
                ageGroup,
                dateOfBirth,
                emailAddress,
                firstName,
                frequentFlyerNumber,
                lastName,
                passportNumber,
                phoneNumber,
                ticketNumber,
                title,
                countryCode);
        }
    }
}
