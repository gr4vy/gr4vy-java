/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.models.components.VerifyCredentials;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class VerifyPaymentServiceCredentialsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeout_in_seconds")
    private Optional<Double> timeoutInSeconds;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> merchantAccountId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private VerifyCredentials verifyCredentials;

    @JsonCreator
    public VerifyPaymentServiceCredentialsRequest(
            Optional<Double> timeoutInSeconds,
            JsonNullable<String> merchantAccountId,
            VerifyCredentials verifyCredentials) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(verifyCredentials, "verifyCredentials");
        this.timeoutInSeconds = timeoutInSeconds;
        this.merchantAccountId = merchantAccountId;
        this.verifyCredentials = verifyCredentials;
    }
    
    public VerifyPaymentServiceCredentialsRequest(
            VerifyCredentials verifyCredentials) {
        this(Optional.empty(), JsonNullable.undefined(), verifyCredentials);
    }

    @JsonIgnore
    public Optional<Double> timeoutInSeconds() {
        return timeoutInSeconds;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public VerifyCredentials verifyCredentials() {
        return verifyCredentials;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public VerifyPaymentServiceCredentialsRequest withTimeoutInSeconds(double timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
        return this;
    }

    public VerifyPaymentServiceCredentialsRequest withTimeoutInSeconds(Optional<Double> timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public VerifyPaymentServiceCredentialsRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = JsonNullable.of(merchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public VerifyPaymentServiceCredentialsRequest withMerchantAccountId(JsonNullable<String> merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public VerifyPaymentServiceCredentialsRequest withVerifyCredentials(VerifyCredentials verifyCredentials) {
        Utils.checkNotNull(verifyCredentials, "verifyCredentials");
        this.verifyCredentials = verifyCredentials;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifyPaymentServiceCredentialsRequest other = (VerifyPaymentServiceCredentialsRequest) o;
        return 
            Objects.deepEquals(this.timeoutInSeconds, other.timeoutInSeconds) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.verifyCredentials, other.verifyCredentials);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            timeoutInSeconds,
            merchantAccountId,
            verifyCredentials);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifyPaymentServiceCredentialsRequest.class,
                "timeoutInSeconds", timeoutInSeconds,
                "merchantAccountId", merchantAccountId,
                "verifyCredentials", verifyCredentials);
    }
    
    public final static class Builder {
 
        private Optional<Double> timeoutInSeconds;
 
        private JsonNullable<String> merchantAccountId = JsonNullable.undefined();
 
        private VerifyCredentials verifyCredentials;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder timeoutInSeconds(double timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
            return this;
        }

        public Builder timeoutInSeconds(Optional<Double> timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = JsonNullable.of(merchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder merchantAccountId(JsonNullable<String> merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public Builder verifyCredentials(VerifyCredentials verifyCredentials) {
            Utils.checkNotNull(verifyCredentials, "verifyCredentials");
            this.verifyCredentials = verifyCredentials;
            return this;
        }
        
        public VerifyPaymentServiceCredentialsRequest build() {
            if (timeoutInSeconds == null) {
                timeoutInSeconds = _SINGLETON_VALUE_TimeoutInSeconds.value();
            }
            return new VerifyPaymentServiceCredentialsRequest(
                timeoutInSeconds,
                merchantAccountId,
                verifyCredentials);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TimeoutInSeconds =
                new LazySingletonValue<>(
                        "timeout_in_seconds",
                        "1",
                        new TypeReference<Optional<Double>>() {});
    }
}
