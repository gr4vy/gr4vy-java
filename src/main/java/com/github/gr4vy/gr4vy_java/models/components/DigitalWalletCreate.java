/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * DigitalWalletCreate
 * 
 * <p>Request body for registering a new digital wallet
 */
public class DigitalWalletCreate {

    @JsonProperty("provider")
    private DigitalWalletProvider provider;

    @JsonProperty("merchant_name")
    private String merchantName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_display_name")
    private JsonNullable<String> merchantDisplayName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_url")
    private JsonNullable<String> merchantUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_country_code")
    private JsonNullable<String> merchantCountryCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_names")
    private Optional<? extends List<String>> domainNames;

    @JsonProperty("accept_terms_and_conditions")
    private boolean acceptTermsAndConditions;

    @JsonCreator
    public DigitalWalletCreate(
            @JsonProperty("provider") DigitalWalletProvider provider,
            @JsonProperty("merchant_name") String merchantName,
            @JsonProperty("merchant_display_name") JsonNullable<String> merchantDisplayName,
            @JsonProperty("merchant_url") JsonNullable<String> merchantUrl,
            @JsonProperty("merchant_country_code") JsonNullable<String> merchantCountryCode,
            @JsonProperty("domain_names") Optional<? extends List<String>> domainNames,
            @JsonProperty("accept_terms_and_conditions") boolean acceptTermsAndConditions) {
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(merchantName, "merchantName");
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        Utils.checkNotNull(domainNames, "domainNames");
        Utils.checkNotNull(acceptTermsAndConditions, "acceptTermsAndConditions");
        this.provider = provider;
        this.merchantName = merchantName;
        this.merchantDisplayName = merchantDisplayName;
        this.merchantUrl = merchantUrl;
        this.merchantCountryCode = merchantCountryCode;
        this.domainNames = domainNames;
        this.acceptTermsAndConditions = acceptTermsAndConditions;
    }
    
    public DigitalWalletCreate(
            DigitalWalletProvider provider,
            String merchantName,
            boolean acceptTermsAndConditions) {
        this(provider, merchantName, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), acceptTermsAndConditions);
    }

    @JsonIgnore
    public DigitalWalletProvider provider() {
        return provider;
    }

    @JsonIgnore
    public String merchantName() {
        return merchantName;
    }

    @JsonIgnore
    public JsonNullable<String> merchantDisplayName() {
        return merchantDisplayName;
    }

    @JsonIgnore
    public JsonNullable<String> merchantUrl() {
        return merchantUrl;
    }

    @JsonIgnore
    public JsonNullable<String> merchantCountryCode() {
        return merchantCountryCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> domainNames() {
        return (Optional<List<String>>) domainNames;
    }

    @JsonIgnore
    public boolean acceptTermsAndConditions() {
        return acceptTermsAndConditions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DigitalWalletCreate withProvider(DigitalWalletProvider provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public DigitalWalletCreate withMerchantName(String merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = merchantName;
        return this;
    }

    public DigitalWalletCreate withMerchantDisplayName(String merchantDisplayName) {
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        this.merchantDisplayName = JsonNullable.of(merchantDisplayName);
        return this;
    }

    public DigitalWalletCreate withMerchantDisplayName(JsonNullable<String> merchantDisplayName) {
        Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
        this.merchantDisplayName = merchantDisplayName;
        return this;
    }

    public DigitalWalletCreate withMerchantUrl(String merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = JsonNullable.of(merchantUrl);
        return this;
    }

    public DigitalWalletCreate withMerchantUrl(JsonNullable<String> merchantUrl) {
        Utils.checkNotNull(merchantUrl, "merchantUrl");
        this.merchantUrl = merchantUrl;
        return this;
    }

    public DigitalWalletCreate withMerchantCountryCode(String merchantCountryCode) {
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        this.merchantCountryCode = JsonNullable.of(merchantCountryCode);
        return this;
    }

    public DigitalWalletCreate withMerchantCountryCode(JsonNullable<String> merchantCountryCode) {
        Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
        this.merchantCountryCode = merchantCountryCode;
        return this;
    }

    public DigitalWalletCreate withDomainNames(List<String> domainNames) {
        Utils.checkNotNull(domainNames, "domainNames");
        this.domainNames = Optional.ofNullable(domainNames);
        return this;
    }

    public DigitalWalletCreate withDomainNames(Optional<? extends List<String>> domainNames) {
        Utils.checkNotNull(domainNames, "domainNames");
        this.domainNames = domainNames;
        return this;
    }

    public DigitalWalletCreate withAcceptTermsAndConditions(boolean acceptTermsAndConditions) {
        Utils.checkNotNull(acceptTermsAndConditions, "acceptTermsAndConditions");
        this.acceptTermsAndConditions = acceptTermsAndConditions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DigitalWalletCreate other = (DigitalWalletCreate) o;
        return 
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.merchantName, other.merchantName) &&
            Objects.deepEquals(this.merchantDisplayName, other.merchantDisplayName) &&
            Objects.deepEquals(this.merchantUrl, other.merchantUrl) &&
            Objects.deepEquals(this.merchantCountryCode, other.merchantCountryCode) &&
            Objects.deepEquals(this.domainNames, other.domainNames) &&
            Objects.deepEquals(this.acceptTermsAndConditions, other.acceptTermsAndConditions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            provider,
            merchantName,
            merchantDisplayName,
            merchantUrl,
            merchantCountryCode,
            domainNames,
            acceptTermsAndConditions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DigitalWalletCreate.class,
                "provider", provider,
                "merchantName", merchantName,
                "merchantDisplayName", merchantDisplayName,
                "merchantUrl", merchantUrl,
                "merchantCountryCode", merchantCountryCode,
                "domainNames", domainNames,
                "acceptTermsAndConditions", acceptTermsAndConditions);
    }
    
    public final static class Builder {
 
        private DigitalWalletProvider provider;
 
        private String merchantName;
 
        private JsonNullable<String> merchantDisplayName = JsonNullable.undefined();
 
        private JsonNullable<String> merchantUrl = JsonNullable.undefined();
 
        private JsonNullable<String> merchantCountryCode = JsonNullable.undefined();
 
        private Optional<? extends List<String>> domainNames = Optional.empty();
 
        private Boolean acceptTermsAndConditions;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder provider(DigitalWalletProvider provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder merchantName(String merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = merchantName;
            return this;
        }

        public Builder merchantDisplayName(String merchantDisplayName) {
            Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
            this.merchantDisplayName = JsonNullable.of(merchantDisplayName);
            return this;
        }

        public Builder merchantDisplayName(JsonNullable<String> merchantDisplayName) {
            Utils.checkNotNull(merchantDisplayName, "merchantDisplayName");
            this.merchantDisplayName = merchantDisplayName;
            return this;
        }

        public Builder merchantUrl(String merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = JsonNullable.of(merchantUrl);
            return this;
        }

        public Builder merchantUrl(JsonNullable<String> merchantUrl) {
            Utils.checkNotNull(merchantUrl, "merchantUrl");
            this.merchantUrl = merchantUrl;
            return this;
        }

        public Builder merchantCountryCode(String merchantCountryCode) {
            Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
            this.merchantCountryCode = JsonNullable.of(merchantCountryCode);
            return this;
        }

        public Builder merchantCountryCode(JsonNullable<String> merchantCountryCode) {
            Utils.checkNotNull(merchantCountryCode, "merchantCountryCode");
            this.merchantCountryCode = merchantCountryCode;
            return this;
        }

        public Builder domainNames(List<String> domainNames) {
            Utils.checkNotNull(domainNames, "domainNames");
            this.domainNames = Optional.ofNullable(domainNames);
            return this;
        }

        public Builder domainNames(Optional<? extends List<String>> domainNames) {
            Utils.checkNotNull(domainNames, "domainNames");
            this.domainNames = domainNames;
            return this;
        }

        public Builder acceptTermsAndConditions(boolean acceptTermsAndConditions) {
            Utils.checkNotNull(acceptTermsAndConditions, "acceptTermsAndConditions");
            this.acceptTermsAndConditions = acceptTermsAndConditions;
            return this;
        }
        
        public DigitalWalletCreate build() {
            return new DigitalWalletCreate(
                provider,
                merchantName,
                merchantDisplayName,
                merchantUrl,
                merchantCountryCode,
                domainNames,
                acceptTermsAndConditions);
        }
    }
}
