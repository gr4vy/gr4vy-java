/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = TaxIdKind._Deserializer.class)
@JsonSerialize(using = TaxIdKind._Serializer.class)
public class TaxIdKind {

    public static final TaxIdKind AE_TRN = new TaxIdKind("ae.trn");
    public static final TaxIdKind AU_ABN = new TaxIdKind("au.abn");
    public static final TaxIdKind AR_DNI = new TaxIdKind("ar.dni");
    public static final TaxIdKind AR_CUIL = new TaxIdKind("ar.cuil");
    public static final TaxIdKind AR_CUIT = new TaxIdKind("ar.cuit");
    public static final TaxIdKind BR_CNPJ = new TaxIdKind("br.cnpj");
    public static final TaxIdKind BR_CPF = new TaxIdKind("br.cpf");
    public static final TaxIdKind CA_BN = new TaxIdKind("ca.bn");
    public static final TaxIdKind CA_GST_HST = new TaxIdKind("ca.gst_hst");
    public static final TaxIdKind CA_PST_BC = new TaxIdKind("ca.pst_bc");
    public static final TaxIdKind CA_PST_MB = new TaxIdKind("ca.pst_mb");
    public static final TaxIdKind CA_PST_SK = new TaxIdKind("ca.pst_sk");
    public static final TaxIdKind CA_QST = new TaxIdKind("ca.qst");
    public static final TaxIdKind CH_VAT = new TaxIdKind("ch.vat");
    public static final TaxIdKind CL_TIN = new TaxIdKind("cl.tin");
    public static final TaxIdKind CO_ITIN = new TaxIdKind("co.itin");
    public static final TaxIdKind CO_NIT = new TaxIdKind("co.nit");
    public static final TaxIdKind ES_CIF = new TaxIdKind("es.cif");
    public static final TaxIdKind EU_VAT = new TaxIdKind("eu.vat");
    public static final TaxIdKind GB_VAT = new TaxIdKind("gb.vat");
    public static final TaxIdKind HK_BR = new TaxIdKind("hk.br");
    public static final TaxIdKind ID_NIK = new TaxIdKind("id.nik");
    public static final TaxIdKind ID_NPWP = new TaxIdKind("id.npwp");
    public static final TaxIdKind IN_GST = new TaxIdKind("in.gst");
    public static final TaxIdKind JP_CN = new TaxIdKind("jp.cn");
    public static final TaxIdKind JP_RN = new TaxIdKind("jp.rn");
    public static final TaxIdKind KR_BRN = new TaxIdKind("kr.brn");
    public static final TaxIdKind LI_UID = new TaxIdKind("li.uid");
    public static final TaxIdKind MX_CURP = new TaxIdKind("mx.curp");
    public static final TaxIdKind MX_RFC = new TaxIdKind("mx.rfc");
    public static final TaxIdKind MY_FRP = new TaxIdKind("my.frp");
    public static final TaxIdKind MY_ITN = new TaxIdKind("my.itn");
    public static final TaxIdKind MY_NRIC = new TaxIdKind("my.nric");
    public static final TaxIdKind MY_SST = new TaxIdKind("my.sst");
    public static final TaxIdKind NO_VAT = new TaxIdKind("no.vat");
    public static final TaxIdKind NZ_GST = new TaxIdKind("nz.gst");
    public static final TaxIdKind PE_RUC = new TaxIdKind("pe.ruc");
    public static final TaxIdKind PH_TIN = new TaxIdKind("ph.tin");
    public static final TaxIdKind RU_INN = new TaxIdKind("ru.inn");
    public static final TaxIdKind RU_KPP = new TaxIdKind("ru.kpp");
    public static final TaxIdKind SA_VAT = new TaxIdKind("sa.vat");
    public static final TaxIdKind SG_GST = new TaxIdKind("sg.gst");
    public static final TaxIdKind SG_UEN = new TaxIdKind("sg.uen");
    public static final TaxIdKind TH_ID = new TaxIdKind("th.id");
    public static final TaxIdKind TH_VAT = new TaxIdKind("th.vat");
    public static final TaxIdKind TW_VAT = new TaxIdKind("tw.vat");
    public static final TaxIdKind US_EIN = new TaxIdKind("us.ein");
    public static final TaxIdKind ZA_VAT = new TaxIdKind("za.vat");
    public static final TaxIdKind BO_CI = new TaxIdKind("bo.ci");
    public static final TaxIdKind UY_RUT = new TaxIdKind("uy.rut");
    public static final TaxIdKind UY_CI = new TaxIdKind("uy.ci");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, TaxIdKind> values = createValuesMap();
    private static final Map<String, TaxIdKindEnum> enums = createEnumsMap();

    private final String value;

    private TaxIdKind(String value) {
        this.value = value;
    }

    /**
     * Returns a TaxIdKind with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as TaxIdKind
     */ 
    public static TaxIdKind of(String value) {
        synchronized (TaxIdKind.class) {
            return values.computeIfAbsent(value, v -> new TaxIdKind(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<TaxIdKindEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        TaxIdKind other = (TaxIdKind) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "TaxIdKind [value=" + value + "]";
    }

    // return an array just like an enum
    public static TaxIdKind[] values() {
        synchronized (TaxIdKind.class) {
            return values.values().toArray(new TaxIdKind[] {});
        }
    }

    private static final Map<String, TaxIdKind> createValuesMap() {
        Map<String, TaxIdKind> map = new LinkedHashMap<>();
        map.put("ae.trn", AE_TRN);
        map.put("au.abn", AU_ABN);
        map.put("ar.dni", AR_DNI);
        map.put("ar.cuil", AR_CUIL);
        map.put("ar.cuit", AR_CUIT);
        map.put("br.cnpj", BR_CNPJ);
        map.put("br.cpf", BR_CPF);
        map.put("ca.bn", CA_BN);
        map.put("ca.gst_hst", CA_GST_HST);
        map.put("ca.pst_bc", CA_PST_BC);
        map.put("ca.pst_mb", CA_PST_MB);
        map.put("ca.pst_sk", CA_PST_SK);
        map.put("ca.qst", CA_QST);
        map.put("ch.vat", CH_VAT);
        map.put("cl.tin", CL_TIN);
        map.put("co.itin", CO_ITIN);
        map.put("co.nit", CO_NIT);
        map.put("es.cif", ES_CIF);
        map.put("eu.vat", EU_VAT);
        map.put("gb.vat", GB_VAT);
        map.put("hk.br", HK_BR);
        map.put("id.nik", ID_NIK);
        map.put("id.npwp", ID_NPWP);
        map.put("in.gst", IN_GST);
        map.put("jp.cn", JP_CN);
        map.put("jp.rn", JP_RN);
        map.put("kr.brn", KR_BRN);
        map.put("li.uid", LI_UID);
        map.put("mx.curp", MX_CURP);
        map.put("mx.rfc", MX_RFC);
        map.put("my.frp", MY_FRP);
        map.put("my.itn", MY_ITN);
        map.put("my.nric", MY_NRIC);
        map.put("my.sst", MY_SST);
        map.put("no.vat", NO_VAT);
        map.put("nz.gst", NZ_GST);
        map.put("pe.ruc", PE_RUC);
        map.put("ph.tin", PH_TIN);
        map.put("ru.inn", RU_INN);
        map.put("ru.kpp", RU_KPP);
        map.put("sa.vat", SA_VAT);
        map.put("sg.gst", SG_GST);
        map.put("sg.uen", SG_UEN);
        map.put("th.id", TH_ID);
        map.put("th.vat", TH_VAT);
        map.put("tw.vat", TW_VAT);
        map.put("us.ein", US_EIN);
        map.put("za.vat", ZA_VAT);
        map.put("bo.ci", BO_CI);
        map.put("uy.rut", UY_RUT);
        map.put("uy.ci", UY_CI);
        return map;
    }

    private static final Map<String, TaxIdKindEnum> createEnumsMap() {
        Map<String, TaxIdKindEnum> map = new HashMap<>();
        map.put("ae.trn", TaxIdKindEnum.AE_TRN);
        map.put("au.abn", TaxIdKindEnum.AU_ABN);
        map.put("ar.dni", TaxIdKindEnum.AR_DNI);
        map.put("ar.cuil", TaxIdKindEnum.AR_CUIL);
        map.put("ar.cuit", TaxIdKindEnum.AR_CUIT);
        map.put("br.cnpj", TaxIdKindEnum.BR_CNPJ);
        map.put("br.cpf", TaxIdKindEnum.BR_CPF);
        map.put("ca.bn", TaxIdKindEnum.CA_BN);
        map.put("ca.gst_hst", TaxIdKindEnum.CA_GST_HST);
        map.put("ca.pst_bc", TaxIdKindEnum.CA_PST_BC);
        map.put("ca.pst_mb", TaxIdKindEnum.CA_PST_MB);
        map.put("ca.pst_sk", TaxIdKindEnum.CA_PST_SK);
        map.put("ca.qst", TaxIdKindEnum.CA_QST);
        map.put("ch.vat", TaxIdKindEnum.CH_VAT);
        map.put("cl.tin", TaxIdKindEnum.CL_TIN);
        map.put("co.itin", TaxIdKindEnum.CO_ITIN);
        map.put("co.nit", TaxIdKindEnum.CO_NIT);
        map.put("es.cif", TaxIdKindEnum.ES_CIF);
        map.put("eu.vat", TaxIdKindEnum.EU_VAT);
        map.put("gb.vat", TaxIdKindEnum.GB_VAT);
        map.put("hk.br", TaxIdKindEnum.HK_BR);
        map.put("id.nik", TaxIdKindEnum.ID_NIK);
        map.put("id.npwp", TaxIdKindEnum.ID_NPWP);
        map.put("in.gst", TaxIdKindEnum.IN_GST);
        map.put("jp.cn", TaxIdKindEnum.JP_CN);
        map.put("jp.rn", TaxIdKindEnum.JP_RN);
        map.put("kr.brn", TaxIdKindEnum.KR_BRN);
        map.put("li.uid", TaxIdKindEnum.LI_UID);
        map.put("mx.curp", TaxIdKindEnum.MX_CURP);
        map.put("mx.rfc", TaxIdKindEnum.MX_RFC);
        map.put("my.frp", TaxIdKindEnum.MY_FRP);
        map.put("my.itn", TaxIdKindEnum.MY_ITN);
        map.put("my.nric", TaxIdKindEnum.MY_NRIC);
        map.put("my.sst", TaxIdKindEnum.MY_SST);
        map.put("no.vat", TaxIdKindEnum.NO_VAT);
        map.put("nz.gst", TaxIdKindEnum.NZ_GST);
        map.put("pe.ruc", TaxIdKindEnum.PE_RUC);
        map.put("ph.tin", TaxIdKindEnum.PH_TIN);
        map.put("ru.inn", TaxIdKindEnum.RU_INN);
        map.put("ru.kpp", TaxIdKindEnum.RU_KPP);
        map.put("sa.vat", TaxIdKindEnum.SA_VAT);
        map.put("sg.gst", TaxIdKindEnum.SG_GST);
        map.put("sg.uen", TaxIdKindEnum.SG_UEN);
        map.put("th.id", TaxIdKindEnum.TH_ID);
        map.put("th.vat", TaxIdKindEnum.TH_VAT);
        map.put("tw.vat", TaxIdKindEnum.TW_VAT);
        map.put("us.ein", TaxIdKindEnum.US_EIN);
        map.put("za.vat", TaxIdKindEnum.ZA_VAT);
        map.put("bo.ci", TaxIdKindEnum.BO_CI);
        map.put("uy.rut", TaxIdKindEnum.UY_RUT);
        map.put("uy.ci", TaxIdKindEnum.UY_CI);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<TaxIdKind> {

        protected _Serializer() {
            super(TaxIdKind.class);
        }

        @Override
        public void serialize(TaxIdKind value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<TaxIdKind> {

        protected _Deserializer() {
            super(TaxIdKind.class);
        }

        @Override
        public TaxIdKind deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return TaxIdKind.of(v);
        }
    }
    
    public enum TaxIdKindEnum {

        AE_TRN("ae.trn"),
        AU_ABN("au.abn"),
        AR_DNI("ar.dni"),
        AR_CUIL("ar.cuil"),
        AR_CUIT("ar.cuit"),
        BR_CNPJ("br.cnpj"),
        BR_CPF("br.cpf"),
        CA_BN("ca.bn"),
        CA_GST_HST("ca.gst_hst"),
        CA_PST_BC("ca.pst_bc"),
        CA_PST_MB("ca.pst_mb"),
        CA_PST_SK("ca.pst_sk"),
        CA_QST("ca.qst"),
        CH_VAT("ch.vat"),
        CL_TIN("cl.tin"),
        CO_ITIN("co.itin"),
        CO_NIT("co.nit"),
        ES_CIF("es.cif"),
        EU_VAT("eu.vat"),
        GB_VAT("gb.vat"),
        HK_BR("hk.br"),
        ID_NIK("id.nik"),
        ID_NPWP("id.npwp"),
        IN_GST("in.gst"),
        JP_CN("jp.cn"),
        JP_RN("jp.rn"),
        KR_BRN("kr.brn"),
        LI_UID("li.uid"),
        MX_CURP("mx.curp"),
        MX_RFC("mx.rfc"),
        MY_FRP("my.frp"),
        MY_ITN("my.itn"),
        MY_NRIC("my.nric"),
        MY_SST("my.sst"),
        NO_VAT("no.vat"),
        NZ_GST("nz.gst"),
        PE_RUC("pe.ruc"),
        PH_TIN("ph.tin"),
        RU_INN("ru.inn"),
        RU_KPP("ru.kpp"),
        SA_VAT("sa.vat"),
        SG_GST("sg.gst"),
        SG_UEN("sg.uen"),
        TH_ID("th.id"),
        TH_VAT("th.vat"),
        TW_VAT("tw.vat"),
        US_EIN("us.ein"),
        ZA_VAT("za.vat"),
        BO_CI("bo.ci"),
        UY_RUT("uy.rut"),
        UY_CI("uy.ci"),;

        private final String value;

        private TaxIdKindEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

