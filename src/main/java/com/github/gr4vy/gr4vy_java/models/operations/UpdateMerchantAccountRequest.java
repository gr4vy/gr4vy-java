/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.models.components.MerchantAccountUpdate;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class UpdateMerchantAccountRequest {

    /**
     * The ID of the merchant account
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=merchant_account_id")
    private String merchantAccountId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeout_in_seconds")
    private Optional<Double> timeoutInSeconds;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private MerchantAccountUpdate merchantAccountUpdate;

    @JsonCreator
    public UpdateMerchantAccountRequest(
            String merchantAccountId,
            Optional<Double> timeoutInSeconds,
            MerchantAccountUpdate merchantAccountUpdate) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        Utils.checkNotNull(merchantAccountUpdate, "merchantAccountUpdate");
        this.merchantAccountId = merchantAccountId;
        this.timeoutInSeconds = timeoutInSeconds;
        this.merchantAccountUpdate = merchantAccountUpdate;
    }
    
    public UpdateMerchantAccountRequest(
            String merchantAccountId,
            MerchantAccountUpdate merchantAccountUpdate) {
        this(merchantAccountId, Optional.empty(), merchantAccountUpdate);
    }

    /**
     * The ID of the merchant account
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    @JsonIgnore
    public Optional<Double> timeoutInSeconds() {
        return timeoutInSeconds;
    }

    @JsonIgnore
    public MerchantAccountUpdate merchantAccountUpdate() {
        return merchantAccountUpdate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the merchant account
     */
    public UpdateMerchantAccountRequest withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    public UpdateMerchantAccountRequest withTimeoutInSeconds(double timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
        return this;
    }

    public UpdateMerchantAccountRequest withTimeoutInSeconds(Optional<Double> timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    public UpdateMerchantAccountRequest withMerchantAccountUpdate(MerchantAccountUpdate merchantAccountUpdate) {
        Utils.checkNotNull(merchantAccountUpdate, "merchantAccountUpdate");
        this.merchantAccountUpdate = merchantAccountUpdate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateMerchantAccountRequest other = (UpdateMerchantAccountRequest) o;
        return 
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.timeoutInSeconds, other.timeoutInSeconds) &&
            Objects.deepEquals(this.merchantAccountUpdate, other.merchantAccountUpdate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            merchantAccountId,
            timeoutInSeconds,
            merchantAccountUpdate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateMerchantAccountRequest.class,
                "merchantAccountId", merchantAccountId,
                "timeoutInSeconds", timeoutInSeconds,
                "merchantAccountUpdate", merchantAccountUpdate);
    }
    
    public final static class Builder {
 
        private String merchantAccountId;
 
        private Optional<Double> timeoutInSeconds;
 
        private MerchantAccountUpdate merchantAccountUpdate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the merchant account
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        public Builder timeoutInSeconds(double timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
            return this;
        }

        public Builder timeoutInSeconds(Optional<Double> timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        public Builder merchantAccountUpdate(MerchantAccountUpdate merchantAccountUpdate) {
            Utils.checkNotNull(merchantAccountUpdate, "merchantAccountUpdate");
            this.merchantAccountUpdate = merchantAccountUpdate;
            return this;
        }
        
        public UpdateMerchantAccountRequest build() {
            if (timeoutInSeconds == null) {
                timeoutInSeconds = _SINGLETON_VALUE_TimeoutInSeconds.value();
            }
            return new UpdateMerchantAccountRequest(
                merchantAccountId,
                timeoutInSeconds,
                merchantAccountUpdate);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TimeoutInSeconds =
                new LazySingletonValue<>(
                        "timeout_in_seconds",
                        "1",
                        new TypeReference<Optional<Double>>() {});
    }
}
