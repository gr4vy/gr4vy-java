/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListPaymentMethodPaymentServiceTokensRequest {

    /**
     * The ID of the payment method
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=payment_method_id")
    private String paymentMethodId;

    /**
     * The ID of the payment service
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payment_service_id")
    private JsonNullable<String> paymentServiceId;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> xGr4vyMerchantAccountId;

    @JsonCreator
    public ListPaymentMethodPaymentServiceTokensRequest(
            String paymentMethodId,
            JsonNullable<String> paymentServiceId,
            JsonNullable<String> xGr4vyMerchantAccountId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.paymentMethodId = paymentMethodId;
        this.paymentServiceId = paymentServiceId;
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
    }
    
    public ListPaymentMethodPaymentServiceTokensRequest(
            String paymentMethodId) {
        this(paymentMethodId, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the payment method
     */
    @JsonIgnore
    public String paymentMethodId() {
        return paymentMethodId;
    }

    /**
     * The ID of the payment service
     */
    @JsonIgnore
    public JsonNullable<String> paymentServiceId() {
        return paymentServiceId;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> xGr4vyMerchantAccountId() {
        return xGr4vyMerchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the payment method
     */
    public ListPaymentMethodPaymentServiceTokensRequest withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    /**
     * The ID of the payment service
     */
    public ListPaymentMethodPaymentServiceTokensRequest withPaymentServiceId(String paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = JsonNullable.of(paymentServiceId);
        return this;
    }

    /**
     * The ID of the payment service
     */
    public ListPaymentMethodPaymentServiceTokensRequest withPaymentServiceId(JsonNullable<String> paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = paymentServiceId;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListPaymentMethodPaymentServiceTokensRequest withXGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public ListPaymentMethodPaymentServiceTokensRequest withXGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListPaymentMethodPaymentServiceTokensRequest other = (ListPaymentMethodPaymentServiceTokensRequest) o;
        return 
            Objects.deepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Objects.deepEquals(this.paymentServiceId, other.paymentServiceId) &&
            Objects.deepEquals(this.xGr4vyMerchantAccountId, other.xGr4vyMerchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentMethodId,
            paymentServiceId,
            xGr4vyMerchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListPaymentMethodPaymentServiceTokensRequest.class,
                "paymentMethodId", paymentMethodId,
                "paymentServiceId", paymentServiceId,
                "xGr4vyMerchantAccountId", xGr4vyMerchantAccountId);
    }
    
    public final static class Builder {
 
        private String paymentMethodId;
 
        private JsonNullable<String> paymentServiceId = JsonNullable.undefined();
 
        private JsonNullable<String> xGr4vyMerchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the payment method
         */
        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }

        /**
         * The ID of the payment service
         */
        public Builder paymentServiceId(String paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = JsonNullable.of(paymentServiceId);
            return this;
        }

        /**
         * The ID of the payment service
         */
        public Builder paymentServiceId(JsonNullable<String> paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = paymentServiceId;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
            return this;
        }
        
        public ListPaymentMethodPaymentServiceTokensRequest build() {
            return new ListPaymentMethodPaymentServiceTokensRequest(
                paymentMethodId,
                paymentServiceId,
                xGr4vyMerchantAccountId);
        }
    }
}
