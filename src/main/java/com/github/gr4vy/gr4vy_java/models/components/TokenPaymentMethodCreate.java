/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TokenPaymentMethodCreate
 * 
 * <p>Create a transaction with the ID (token) of a stored payment method (and an optional URL for approval)
 */
public class TokenPaymentMethodCreate {

    /**
     * The ID for the payment method.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Always `id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<String> method;

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security_code")
    private JsonNullable<String> securityCode;

    /**
     * The URL to redirect a user back to after they approve the transaction in the browser.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    private JsonNullable<String> redirectUrl;

    @JsonCreator
    public TokenPaymentMethodCreate(
            @JsonProperty("id") String id,
            @JsonProperty("security_code") JsonNullable<String> securityCode,
            @JsonProperty("redirect_url") JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(securityCode, "securityCode");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.id = id;
        this.method = Builder._SINGLETON_VALUE_Method.value();
        this.securityCode = securityCode;
        this.redirectUrl = redirectUrl;
    }
    
    public TokenPaymentMethodCreate(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID for the payment method.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Always `id`.
     */
    @JsonIgnore
    public Optional<String> method() {
        return method;
    }

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    @JsonIgnore
    public JsonNullable<String> securityCode() {
        return securityCode;
    }

    /**
     * The URL to redirect a user back to after they approve the transaction in the browser.
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the payment method.
     */
    public TokenPaymentMethodCreate withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    public TokenPaymentMethodCreate withSecurityCode(String securityCode) {
        Utils.checkNotNull(securityCode, "securityCode");
        this.securityCode = JsonNullable.of(securityCode);
        return this;
    }

    /**
     * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
     */
    public TokenPaymentMethodCreate withSecurityCode(JsonNullable<String> securityCode) {
        Utils.checkNotNull(securityCode, "securityCode");
        this.securityCode = securityCode;
        return this;
    }

    /**
     * The URL to redirect a user back to after they approve the transaction in the browser.
     */
    public TokenPaymentMethodCreate withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * The URL to redirect a user back to after they approve the transaction in the browser.
     */
    public TokenPaymentMethodCreate withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TokenPaymentMethodCreate other = (TokenPaymentMethodCreate) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.securityCode, other.securityCode) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            method,
            securityCode,
            redirectUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TokenPaymentMethodCreate.class,
                "id", id,
                "method", method,
                "securityCode", securityCode,
                "redirectUrl", redirectUrl);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> securityCode = JsonNullable.undefined();
 
        private JsonNullable<String> redirectUrl = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the payment method.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
         */
        public Builder securityCode(String securityCode) {
            Utils.checkNotNull(securityCode, "securityCode");
            this.securityCode = JsonNullable.of(securityCode);
            return this;
        }

        /**
         * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
         */
        public Builder securityCode(JsonNullable<String> securityCode) {
            Utils.checkNotNull(securityCode, "securityCode");
            this.securityCode = securityCode;
            return this;
        }

        /**
         * The URL to redirect a user back to after they approve the transaction in the browser.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * The URL to redirect a user back to after they approve the transaction in the browser.
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        public TokenPaymentMethodCreate build() {
            return new TokenPaymentMethodCreate(
                id,
                securityCode,
                redirectUrl);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"id\"",
                        new TypeReference<Optional<String>>() {});
    }
}
