/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class TransactionPaymentMethod {

    /**
     * Always `payment-method`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_url")
    private JsonNullable<String> approvalUrl;

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<String> currency;

    /**
     * Details for credit or debit card payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private JsonNullable<? extends PaymentMethodDetailsCard> details;

    /**
     * The expiration date for the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration_date")
    private JsonNullable<String> expirationDate;

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    private JsonNullable<String> fingerprint;

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private JsonNullable<String> label;

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_replaced_at")
    private JsonNullable<OffsetDateTime> lastReplacedAt;

    @JsonProperty("method")
    private Method method;

    /**
     * The mode to use with this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private JsonNullable<? extends Mode> mode;

    /**
     * The scheme of the card. Only applies to card payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme")
    private JsonNullable<? extends CardScheme> scheme;

    /**
     * The ID of the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_target")
    private JsonNullable<? extends ApprovalTarget> approvalTarget;

    /**
     * An external identifier that can be used to match the payment method against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_account_reference")
    private JsonNullable<String> paymentAccountReference;

    @JsonCreator
    public TransactionPaymentMethod(
            @JsonProperty("approval_url") JsonNullable<String> approvalUrl,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("currency") JsonNullable<String> currency,
            @JsonProperty("details") JsonNullable<? extends PaymentMethodDetailsCard> details,
            @JsonProperty("expiration_date") JsonNullable<String> expirationDate,
            @JsonProperty("fingerprint") JsonNullable<String> fingerprint,
            @JsonProperty("label") JsonNullable<String> label,
            @JsonProperty("last_replaced_at") JsonNullable<OffsetDateTime> lastReplacedAt,
            @JsonProperty("method") Method method,
            @JsonProperty("mode") JsonNullable<? extends Mode> mode,
            @JsonProperty("scheme") JsonNullable<? extends CardScheme> scheme,
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("approval_target") JsonNullable<? extends ApprovalTarget> approvalTarget,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("payment_account_reference") JsonNullable<String> paymentAccountReference) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(details, "details");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(fingerprint, "fingerprint");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(scheme, "scheme");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(approvalTarget, "approvalTarget");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(paymentAccountReference, "paymentAccountReference");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.approvalUrl = approvalUrl;
        this.country = country;
        this.currency = currency;
        this.details = details;
        this.expirationDate = expirationDate;
        this.fingerprint = fingerprint;
        this.label = label;
        this.lastReplacedAt = lastReplacedAt;
        this.method = method;
        this.mode = mode;
        this.scheme = scheme;
        this.id = id;
        this.approvalTarget = approvalTarget;
        this.externalIdentifier = externalIdentifier;
        this.paymentAccountReference = paymentAccountReference;
    }
    
    public TransactionPaymentMethod(
            Method method) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), method, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Always `payment-method`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    @JsonIgnore
    public JsonNullable<String> approvalUrl() {
        return approvalUrl;
    }

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    /**
     * Details for credit or debit card payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PaymentMethodDetailsCard> details() {
        return (JsonNullable<PaymentMethodDetailsCard>) details;
    }

    /**
     * The expiration date for the payment method.
     */
    @JsonIgnore
    public JsonNullable<String> expirationDate() {
        return expirationDate;
    }

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    @JsonIgnore
    public JsonNullable<String> fingerprint() {
        return fingerprint;
    }

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    @JsonIgnore
    public JsonNullable<String> label() {
        return label;
    }

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastReplacedAt() {
        return lastReplacedAt;
    }

    @JsonIgnore
    public Method method() {
        return method;
    }

    /**
     * The mode to use with this payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Mode> mode() {
        return (JsonNullable<Mode>) mode;
    }

    /**
     * The scheme of the card. Only applies to card payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardScheme> scheme() {
        return (JsonNullable<CardScheme>) scheme;
    }

    /**
     * The ID of the payment method.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ApprovalTarget> approvalTarget() {
        return (JsonNullable<ApprovalTarget>) approvalTarget;
    }

    /**
     * An external identifier that can be used to match the payment method against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
     */
    @JsonIgnore
    public JsonNullable<String> paymentAccountReference() {
        return paymentAccountReference;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    public TransactionPaymentMethod withApprovalUrl(String approvalUrl) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        this.approvalUrl = JsonNullable.of(approvalUrl);
        return this;
    }

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    public TransactionPaymentMethod withApprovalUrl(JsonNullable<String> approvalUrl) {
        Utils.checkNotNull(approvalUrl, "approvalUrl");
        this.approvalUrl = approvalUrl;
        return this;
    }

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    public TransactionPaymentMethod withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     */
    public TransactionPaymentMethod withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    public TransactionPaymentMethod withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     */
    public TransactionPaymentMethod withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Details for credit or debit card payment method.
     */
    public TransactionPaymentMethod withDetails(PaymentMethodDetailsCard details) {
        Utils.checkNotNull(details, "details");
        this.details = JsonNullable.of(details);
        return this;
    }

    /**
     * Details for credit or debit card payment method.
     */
    public TransactionPaymentMethod withDetails(JsonNullable<? extends PaymentMethodDetailsCard> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }

    /**
     * The expiration date for the payment method.
     */
    public TransactionPaymentMethod withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = JsonNullable.of(expirationDate);
        return this;
    }

    /**
     * The expiration date for the payment method.
     */
    public TransactionPaymentMethod withExpirationDate(JsonNullable<String> expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    public TransactionPaymentMethod withFingerprint(String fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = JsonNullable.of(fingerprint);
        return this;
    }

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    public TransactionPaymentMethod withFingerprint(JsonNullable<String> fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = fingerprint;
        return this;
    }

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    public TransactionPaymentMethod withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = JsonNullable.of(label);
        return this;
    }

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     */
    public TransactionPaymentMethod withLabel(JsonNullable<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    public TransactionPaymentMethod withLastReplacedAt(OffsetDateTime lastReplacedAt) {
        Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
        this.lastReplacedAt = JsonNullable.of(lastReplacedAt);
        return this;
    }

    /**
     * The date and time when this card was last replaced by the account updater.
     */
    public TransactionPaymentMethod withLastReplacedAt(JsonNullable<OffsetDateTime> lastReplacedAt) {
        Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
        this.lastReplacedAt = lastReplacedAt;
        return this;
    }

    public TransactionPaymentMethod withMethod(Method method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The mode to use with this payment method.
     */
    public TransactionPaymentMethod withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = JsonNullable.of(mode);
        return this;
    }

    /**
     * The mode to use with this payment method.
     */
    public TransactionPaymentMethod withMode(JsonNullable<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The scheme of the card. Only applies to card payments.
     */
    public TransactionPaymentMethod withScheme(CardScheme scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = JsonNullable.of(scheme);
        return this;
    }

    /**
     * The scheme of the card. Only applies to card payments.
     */
    public TransactionPaymentMethod withScheme(JsonNullable<? extends CardScheme> scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = scheme;
        return this;
    }

    /**
     * The ID of the payment method.
     */
    public TransactionPaymentMethod withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The ID of the payment method.
     */
    public TransactionPaymentMethod withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
     */
    public TransactionPaymentMethod withApprovalTarget(ApprovalTarget approvalTarget) {
        Utils.checkNotNull(approvalTarget, "approvalTarget");
        this.approvalTarget = JsonNullable.of(approvalTarget);
        return this;
    }

    /**
     * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
     */
    public TransactionPaymentMethod withApprovalTarget(JsonNullable<? extends ApprovalTarget> approvalTarget) {
        Utils.checkNotNull(approvalTarget, "approvalTarget");
        this.approvalTarget = approvalTarget;
        return this;
    }

    /**
     * An external identifier that can be used to match the payment method against your own records.
     */
    public TransactionPaymentMethod withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the payment method against your own records.
     */
    public TransactionPaymentMethod withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
     */
    public TransactionPaymentMethod withPaymentAccountReference(String paymentAccountReference) {
        Utils.checkNotNull(paymentAccountReference, "paymentAccountReference");
        this.paymentAccountReference = JsonNullable.of(paymentAccountReference);
        return this;
    }

    /**
     * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
     */
    public TransactionPaymentMethod withPaymentAccountReference(JsonNullable<String> paymentAccountReference) {
        Utils.checkNotNull(paymentAccountReference, "paymentAccountReference");
        this.paymentAccountReference = paymentAccountReference;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionPaymentMethod other = (TransactionPaymentMethod) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.approvalUrl, other.approvalUrl) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.details, other.details) &&
            Objects.deepEquals(this.expirationDate, other.expirationDate) &&
            Objects.deepEquals(this.fingerprint, other.fingerprint) &&
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.lastReplacedAt, other.lastReplacedAt) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.scheme, other.scheme) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.approvalTarget, other.approvalTarget) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Objects.deepEquals(this.paymentAccountReference, other.paymentAccountReference);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            approvalUrl,
            country,
            currency,
            details,
            expirationDate,
            fingerprint,
            label,
            lastReplacedAt,
            method,
            mode,
            scheme,
            id,
            approvalTarget,
            externalIdentifier,
            paymentAccountReference);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionPaymentMethod.class,
                "type", type,
                "approvalUrl", approvalUrl,
                "country", country,
                "currency", currency,
                "details", details,
                "expirationDate", expirationDate,
                "fingerprint", fingerprint,
                "label", label,
                "lastReplacedAt", lastReplacedAt,
                "method", method,
                "mode", mode,
                "scheme", scheme,
                "id", id,
                "approvalTarget", approvalTarget,
                "externalIdentifier", externalIdentifier,
                "paymentAccountReference", paymentAccountReference);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> approvalUrl = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> currency = JsonNullable.undefined();
 
        private JsonNullable<? extends PaymentMethodDetailsCard> details = JsonNullable.undefined();
 
        private JsonNullable<String> expirationDate = JsonNullable.undefined();
 
        private JsonNullable<String> fingerprint = JsonNullable.undefined();
 
        private JsonNullable<String> label = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> lastReplacedAt = JsonNullable.undefined();
 
        private Method method;
 
        private JsonNullable<? extends Mode> mode = JsonNullable.undefined();
 
        private JsonNullable<? extends CardScheme> scheme = JsonNullable.undefined();
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<? extends ApprovalTarget> approvalTarget = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<String> paymentAccountReference = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The optional URL that the buyer needs to be redirected to to further authorize their payment.
         */
        public Builder approvalUrl(String approvalUrl) {
            Utils.checkNotNull(approvalUrl, "approvalUrl");
            this.approvalUrl = JsonNullable.of(approvalUrl);
            return this;
        }

        /**
         * The optional URL that the buyer needs to be redirected to to further authorize their payment.
         */
        public Builder approvalUrl(JsonNullable<String> approvalUrl) {
            Utils.checkNotNull(approvalUrl, "approvalUrl");
            this.approvalUrl = approvalUrl;
            return this;
        }

        /**
         * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
         */
        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Details for credit or debit card payment method.
         */
        public Builder details(PaymentMethodDetailsCard details) {
            Utils.checkNotNull(details, "details");
            this.details = JsonNullable.of(details);
            return this;
        }

        /**
         * Details for credit or debit card payment method.
         */
        public Builder details(JsonNullable<? extends PaymentMethodDetailsCard> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }

        /**
         * The expiration date for the payment method.
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = JsonNullable.of(expirationDate);
            return this;
        }

        /**
         * The expiration date for the payment method.
         */
        public Builder expirationDate(JsonNullable<String> expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The unique hash derived from the payment method identifier (e.g. card number).
         */
        public Builder fingerprint(String fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = JsonNullable.of(fingerprint);
            return this;
        }

        /**
         * The unique hash derived from the payment method identifier (e.g. card number).
         */
        public Builder fingerprint(JsonNullable<String> fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = fingerprint;
            return this;
        }

        /**
         * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = JsonNullable.of(label);
            return this;
        }

        /**
         * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
         */
        public Builder label(JsonNullable<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        /**
         * The date and time when this card was last replaced by the account updater.
         */
        public Builder lastReplacedAt(OffsetDateTime lastReplacedAt) {
            Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
            this.lastReplacedAt = JsonNullable.of(lastReplacedAt);
            return this;
        }

        /**
         * The date and time when this card was last replaced by the account updater.
         */
        public Builder lastReplacedAt(JsonNullable<OffsetDateTime> lastReplacedAt) {
            Utils.checkNotNull(lastReplacedAt, "lastReplacedAt");
            this.lastReplacedAt = lastReplacedAt;
            return this;
        }

        public Builder method(Method method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The mode to use with this payment method.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = JsonNullable.of(mode);
            return this;
        }

        /**
         * The mode to use with this payment method.
         */
        public Builder mode(JsonNullable<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * The scheme of the card. Only applies to card payments.
         */
        public Builder scheme(CardScheme scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = JsonNullable.of(scheme);
            return this;
        }

        /**
         * The scheme of the card. Only applies to card payments.
         */
        public Builder scheme(JsonNullable<? extends CardScheme> scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = scheme;
            return this;
        }

        /**
         * The ID of the payment method.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID of the payment method.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
         */
        public Builder approvalTarget(ApprovalTarget approvalTarget) {
            Utils.checkNotNull(approvalTarget, "approvalTarget");
            this.approvalTarget = JsonNullable.of(approvalTarget);
            return this;
        }

        /**
         * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
         */
        public Builder approvalTarget(JsonNullable<? extends ApprovalTarget> approvalTarget) {
            Utils.checkNotNull(approvalTarget, "approvalTarget");
            this.approvalTarget = approvalTarget;
            return this;
        }

        /**
         * An external identifier that can be used to match the payment method against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the payment method against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
         */
        public Builder paymentAccountReference(String paymentAccountReference) {
            Utils.checkNotNull(paymentAccountReference, "paymentAccountReference");
            this.paymentAccountReference = JsonNullable.of(paymentAccountReference);
            return this;
        }

        /**
         * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
         */
        public Builder paymentAccountReference(JsonNullable<String> paymentAccountReference) {
            Utils.checkNotNull(paymentAccountReference, "paymentAccountReference");
            this.paymentAccountReference = paymentAccountReference;
            return this;
        }
        
        public TransactionPaymentMethod build() {
            return new TransactionPaymentMethod(
                approvalUrl,
                country,
                currency,
                details,
                expirationDate,
                fingerprint,
                label,
                lastReplacedAt,
                method,
                mode,
                scheme,
                id,
                approvalTarget,
                externalIdentifier,
                paymentAccountReference);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"payment-method\"",
                        new TypeReference<Optional<String>>() {});
    }
}
