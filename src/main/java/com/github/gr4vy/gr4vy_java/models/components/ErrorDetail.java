/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class ErrorDetail {

    @JsonProperty("location")
    private ErrorLocation location;

    /**
     * A JSON pointer for the particular property that caused the error.
     */
    @JsonProperty("pointer")
    private String pointer;

    /**
     * A human-readdable explanation of the error.
     */
    @JsonProperty("message")
    private String message;

    /**
     * The type of error that was raised for this property.
     */
    @JsonProperty("type")
    private String type;

    @JsonCreator
    public ErrorDetail(
            @JsonProperty("location") ErrorLocation location,
            @JsonProperty("pointer") String pointer,
            @JsonProperty("message") String message,
            @JsonProperty("type") String type) {
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(pointer, "pointer");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(type, "type");
        this.location = location;
        this.pointer = pointer;
        this.message = message;
        this.type = type;
    }

    @JsonIgnore
    public ErrorLocation location() {
        return location;
    }

    /**
     * A JSON pointer for the particular property that caused the error.
     */
    @JsonIgnore
    public String pointer() {
        return pointer;
    }

    /**
     * A human-readdable explanation of the error.
     */
    @JsonIgnore
    public String message() {
        return message;
    }

    /**
     * The type of error that was raised for this property.
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ErrorDetail withLocation(ErrorLocation location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    /**
     * A JSON pointer for the particular property that caused the error.
     */
    public ErrorDetail withPointer(String pointer) {
        Utils.checkNotNull(pointer, "pointer");
        this.pointer = pointer;
        return this;
    }

    /**
     * A human-readdable explanation of the error.
     */
    public ErrorDetail withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * The type of error that was raised for this property.
     */
    public ErrorDetail withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorDetail other = (ErrorDetail) o;
        return 
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.pointer, other.pointer) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            location,
            pointer,
            message,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorDetail.class,
                "location", location,
                "pointer", pointer,
                "message", message,
                "type", type);
    }
    
    public final static class Builder {
 
        private ErrorLocation location;
 
        private String pointer;
 
        private String message;
 
        private String type;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder location(ErrorLocation location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        /**
         * A JSON pointer for the particular property that caused the error.
         */
        public Builder pointer(String pointer) {
            Utils.checkNotNull(pointer, "pointer");
            this.pointer = pointer;
            return this;
        }

        /**
         * A human-readdable explanation of the error.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * The type of error that was raised for this property.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public ErrorDetail build() {
            return new ErrorDetail(
                location,
                pointer,
                message,
                type);
        }
    }
}
