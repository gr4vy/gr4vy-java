/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreatePaymentServiceSessionRequest {

    /**
     * the ID of the payment service
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=payment_service_id")
    private String paymentServiceId;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> xGr4vyMerchantAccountId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Map<String, Object> requestBody;

    @JsonCreator
    public CreatePaymentServiceSessionRequest(
            String paymentServiceId,
            JsonNullable<String> xGr4vyMerchantAccountId,
            Map<String, Object> requestBody) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        requestBody = Utils.emptyMapIfNull(requestBody);
        this.paymentServiceId = paymentServiceId;
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
        this.requestBody = requestBody;
    }
    
    public CreatePaymentServiceSessionRequest(
            String paymentServiceId,
            Map<String, Object> requestBody) {
        this(paymentServiceId, JsonNullable.undefined(), requestBody);
    }

    /**
     * the ID of the payment service
     */
    @JsonIgnore
    public String paymentServiceId() {
        return paymentServiceId;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> xGr4vyMerchantAccountId() {
        return xGr4vyMerchantAccountId;
    }

    @JsonIgnore
    public Map<String, Object> requestBody() {
        return requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * the ID of the payment service
     */
    public CreatePaymentServiceSessionRequest withPaymentServiceId(String paymentServiceId) {
        Utils.checkNotNull(paymentServiceId, "paymentServiceId");
        this.paymentServiceId = paymentServiceId;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public CreatePaymentServiceSessionRequest withXGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public CreatePaymentServiceSessionRequest withXGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
        return this;
    }

    public CreatePaymentServiceSessionRequest withRequestBody(Map<String, Object> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreatePaymentServiceSessionRequest other = (CreatePaymentServiceSessionRequest) o;
        return 
            Objects.deepEquals(this.paymentServiceId, other.paymentServiceId) &&
            Objects.deepEquals(this.xGr4vyMerchantAccountId, other.xGr4vyMerchantAccountId) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentServiceId,
            xGr4vyMerchantAccountId,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreatePaymentServiceSessionRequest.class,
                "paymentServiceId", paymentServiceId,
                "xGr4vyMerchantAccountId", xGr4vyMerchantAccountId,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String paymentServiceId;
 
        private JsonNullable<String> xGr4vyMerchantAccountId = JsonNullable.undefined();
 
        private Map<String, Object> requestBody;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the ID of the payment service
         */
        public Builder paymentServiceId(String paymentServiceId) {
            Utils.checkNotNull(paymentServiceId, "paymentServiceId");
            this.paymentServiceId = paymentServiceId;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
            return this;
        }

        public Builder requestBody(Map<String, Object> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public CreatePaymentServiceSessionRequest build() {
            return new CreatePaymentServiceSessionRequest(
                paymentServiceId,
                xGr4vyMerchantAccountId,
                requestBody);
        }
    }
}
