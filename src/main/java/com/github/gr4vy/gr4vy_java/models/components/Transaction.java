/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Transaction
 * 
 * <p>A full transaction resource.
 */
public class Transaction {

    /**
     * Always `transaction`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The ID for the transaction.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     */
    @JsonProperty("reconciliation_id")
    private String reconciliationId;

    /**
     * The ID of the merchant account this transaction belongs to.
     */
    @JsonProperty("merchant_account_id")
    private String merchantAccountId;

    /**
     * The currency code for this transaction.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     */
    @JsonProperty("amount")
    private long amount;

    @JsonProperty("status")
    private TransactionStatus status;

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     */
    @JsonProperty("authorized_amount")
    private long authorizedAmount;

    /**
     * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
     */
    @JsonProperty("captured_amount")
    private long capturedAmount;

    /**
     * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
     */
    @JsonProperty("refunded_amount")
    private long refundedAmount;

    /**
     * The currency of this transaction's settlement in ISO 4217 three-letter code format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settled_currency")
    private JsonNullable<String> settledCurrency;

    /**
     * The net amount settled for this transaction.
     */
    @JsonProperty("settled_amount")
    private long settledAmount;

    /**
     * Indicates whether this transaction has been settled.
     */
    @JsonProperty("settled")
    private boolean settled;

    /**
     * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    @JsonProperty("intent")
    private TransactionIntent intent;

    /**
     * The payment method used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<? extends TransactionPaymentMethod> paymentMethod;

    /**
     * The method used for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<? extends Method> method;

    /**
     * The name of the instrument used to process the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instrument_type")
    private JsonNullable<? extends InstrumentType> instrumentType;

    /**
     * The standardized error code set by Gr4vy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_code")
    private JsonNullable<String> errorCode;

    /**
     * The payment service used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service")
    private JsonNullable<? extends TransactionPaymentService> paymentService;

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_review")
    private Optional<Boolean> pendingReview;

    /**
     * The buyer used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends TransactionBuyer> buyer;

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_response_code")
    private JsonNullable<String> rawResponseCode;

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_response_description")
    private JsonNullable<String> rawResponseDescription;

    /**
     * The shipping details associated with the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_details")
    private JsonNullable<? extends ShippingDetails> shippingDetails;

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout_session_id")
    private JsonNullable<String> checkoutSessionId;

    /**
     * The gift cards redeemed for this transaction.
     */
    @JsonProperty("gift_card_redemptions")
    private List<GiftCardRedemption> giftCardRedemptions;

    /**
     * The gift card service used for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gift_card_service")
    private JsonNullable<? extends GiftCardService> giftCardService;

    /**
     * The date this buyer was created at.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The date this buyer was last updated at.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    /**
     * Contains information about an airline travel, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("airline")
    private JsonNullable<? extends Airline> airline;

    /**
     * This is the response description received from the processor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_response_code")
    private JsonNullable<String> authResponseCode;

    /**
     * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avs_response_code")
    private JsonNullable<? extends AVSResponseCode> avsResponseCode;

    /**
     * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cvv_response_code")
    private JsonNullable<? extends CVVResponseCode> cvvResponseCode;

    /**
     * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anti_fraud_decision")
    private JsonNullable<? extends AntiFraudDecision> antiFraudDecision;

    /**
     * The way payment method information made it to this transaction.
     */
    @JsonProperty("payment_source")
    private TransactionPaymentSource paymentSource;

    /**
     * Indicates whether the transaction was initiated by the merchant or the customer.
     */
    @JsonProperty("merchant_initiated")
    private boolean merchantInitiated;

    /**
     * Indicates whether the transaction represents a subsequent payment or an initial one.
     */
    @JsonProperty("is_subsequent_payment")
    private boolean isSubsequentPayment;

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cart_items")
    private JsonNullable<? extends List<CartItem>> cartItems;

    /**
     * The statement descriptor is the text to be shown on the buyer's statements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statement_descriptor")
    private JsonNullable<? extends StatementDescriptor> statementDescriptor;

    /**
     * An identifier for the transaction used by the scheme itself, when available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme_transaction_id")
    private JsonNullable<String> schemeTransactionId;

    /**
     * The 3-D Secure data that was sent to the payment service for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("three_d_secure")
    private JsonNullable<? extends TransactionThreeDSecureSummary> threeDSecure;

    /**
     * The payment service's unique ID for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service_transaction_id")
    private JsonNullable<String> paymentServiceTransactionId;

    /**
     * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_identifiers")
    private Optional<? extends Map<String, String>> additionalIdentifiers;

    /**
     * Additional information about the transaction stored as key-value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    /**
     * The date this transaction was authorized at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorized_at")
    private JsonNullable<OffsetDateTime> authorizedAt;

    /**
     * The date this transaction was captured at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captured_at")
    private JsonNullable<OffsetDateTime> capturedAt;

    /**
     * The date this transaction was voided at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voided_at")
    private JsonNullable<OffsetDateTime> voidedAt;

    /**
     * The date this transaction's approval URL will expire at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_expires_at")
    private JsonNullable<OffsetDateTime> approvalExpiresAt;

    /**
     * The date this transaction's approval timed out at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_approval_timedout_at")
    private JsonNullable<OffsetDateTime> buyerApprovalTimedoutAt;

    @JsonProperty("intent_outcome")
    private TransactionIntentOutcome intentOutcome;

    /**
     * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
     */
    @JsonProperty("multi_tender")
    private boolean multiTender;

    /**
     * Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
     */
    @JsonProperty("account_funding_transaction")
    private boolean accountFundingTransaction;

    /**
     * The recipient of any account to account funding. For use with AFTs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient")
    private JsonNullable<? extends Recipient> recipient;

    /**
     * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_advice_code")
    private JsonNullable<String> merchantAdviceCode;

    @JsonCreator
    public Transaction(
            @JsonProperty("id") String id,
            @JsonProperty("reconciliation_id") String reconciliationId,
            @JsonProperty("merchant_account_id") String merchantAccountId,
            @JsonProperty("currency") String currency,
            @JsonProperty("amount") long amount,
            @JsonProperty("status") TransactionStatus status,
            @JsonProperty("authorized_amount") long authorizedAmount,
            @JsonProperty("captured_amount") long capturedAmount,
            @JsonProperty("refunded_amount") long refundedAmount,
            @JsonProperty("settled_currency") JsonNullable<String> settledCurrency,
            @JsonProperty("settled_amount") long settledAmount,
            @JsonProperty("settled") boolean settled,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("intent") TransactionIntent intent,
            @JsonProperty("payment_method") JsonNullable<? extends TransactionPaymentMethod> paymentMethod,
            @JsonProperty("method") JsonNullable<? extends Method> method,
            @JsonProperty("instrument_type") JsonNullable<? extends InstrumentType> instrumentType,
            @JsonProperty("error_code") JsonNullable<String> errorCode,
            @JsonProperty("payment_service") JsonNullable<? extends TransactionPaymentService> paymentService,
            @JsonProperty("pending_review") Optional<Boolean> pendingReview,
            @JsonProperty("buyer") JsonNullable<? extends TransactionBuyer> buyer,
            @JsonProperty("raw_response_code") JsonNullable<String> rawResponseCode,
            @JsonProperty("raw_response_description") JsonNullable<String> rawResponseDescription,
            @JsonProperty("shipping_details") JsonNullable<? extends ShippingDetails> shippingDetails,
            @JsonProperty("checkout_session_id") JsonNullable<String> checkoutSessionId,
            @JsonProperty("gift_card_redemptions") List<GiftCardRedemption> giftCardRedemptions,
            @JsonProperty("gift_card_service") JsonNullable<? extends GiftCardService> giftCardService,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("airline") JsonNullable<? extends Airline> airline,
            @JsonProperty("auth_response_code") JsonNullable<String> authResponseCode,
            @JsonProperty("avs_response_code") JsonNullable<? extends AVSResponseCode> avsResponseCode,
            @JsonProperty("cvv_response_code") JsonNullable<? extends CVVResponseCode> cvvResponseCode,
            @JsonProperty("anti_fraud_decision") JsonNullable<? extends AntiFraudDecision> antiFraudDecision,
            @JsonProperty("payment_source") TransactionPaymentSource paymentSource,
            @JsonProperty("merchant_initiated") boolean merchantInitiated,
            @JsonProperty("is_subsequent_payment") boolean isSubsequentPayment,
            @JsonProperty("cart_items") JsonNullable<? extends List<CartItem>> cartItems,
            @JsonProperty("statement_descriptor") JsonNullable<? extends StatementDescriptor> statementDescriptor,
            @JsonProperty("scheme_transaction_id") JsonNullable<String> schemeTransactionId,
            @JsonProperty("three_d_secure") JsonNullable<? extends TransactionThreeDSecureSummary> threeDSecure,
            @JsonProperty("payment_service_transaction_id") JsonNullable<String> paymentServiceTransactionId,
            @JsonProperty("additional_identifiers") Optional<? extends Map<String, String>> additionalIdentifiers,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("authorized_at") JsonNullable<OffsetDateTime> authorizedAt,
            @JsonProperty("captured_at") JsonNullable<OffsetDateTime> capturedAt,
            @JsonProperty("voided_at") JsonNullable<OffsetDateTime> voidedAt,
            @JsonProperty("approval_expires_at") JsonNullable<OffsetDateTime> approvalExpiresAt,
            @JsonProperty("buyer_approval_timedout_at") JsonNullable<OffsetDateTime> buyerApprovalTimedoutAt,
            @JsonProperty("intent_outcome") TransactionIntentOutcome intentOutcome,
            @JsonProperty("multi_tender") boolean multiTender,
            @JsonProperty("account_funding_transaction") boolean accountFundingTransaction,
            @JsonProperty("recipient") JsonNullable<? extends Recipient> recipient,
            @JsonProperty("merchant_advice_code") JsonNullable<String> merchantAdviceCode) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(authorizedAmount, "authorizedAmount");
        Utils.checkNotNull(capturedAmount, "capturedAmount");
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        Utils.checkNotNull(settledCurrency, "settledCurrency");
        Utils.checkNotNull(settledAmount, "settledAmount");
        Utils.checkNotNull(settled, "settled");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(intent, "intent");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(instrumentType, "instrumentType");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(paymentService, "paymentService");
        Utils.checkNotNull(pendingReview, "pendingReview");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        Utils.checkNotNull(giftCardRedemptions, "giftCardRedemptions");
        Utils.checkNotNull(giftCardService, "giftCardService");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(airline, "airline");
        Utils.checkNotNull(authResponseCode, "authResponseCode");
        Utils.checkNotNull(avsResponseCode, "avsResponseCode");
        Utils.checkNotNull(cvvResponseCode, "cvvResponseCode");
        Utils.checkNotNull(antiFraudDecision, "antiFraudDecision");
        Utils.checkNotNull(paymentSource, "paymentSource");
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
        Utils.checkNotNull(cartItems, "cartItems");
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        Utils.checkNotNull(schemeTransactionId, "schemeTransactionId");
        Utils.checkNotNull(threeDSecure, "threeDSecure");
        Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
        Utils.checkNotNull(additionalIdentifiers, "additionalIdentifiers");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(authorizedAt, "authorizedAt");
        Utils.checkNotNull(capturedAt, "capturedAt");
        Utils.checkNotNull(voidedAt, "voidedAt");
        Utils.checkNotNull(approvalExpiresAt, "approvalExpiresAt");
        Utils.checkNotNull(buyerApprovalTimedoutAt, "buyerApprovalTimedoutAt");
        Utils.checkNotNull(intentOutcome, "intentOutcome");
        Utils.checkNotNull(multiTender, "multiTender");
        Utils.checkNotNull(accountFundingTransaction, "accountFundingTransaction");
        Utils.checkNotNull(recipient, "recipient");
        Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
        this.type = Builder._SINGLETON_VALUE_Type.value();
        this.id = id;
        this.reconciliationId = reconciliationId;
        this.merchantAccountId = merchantAccountId;
        this.currency = currency;
        this.amount = amount;
        this.status = status;
        this.authorizedAmount = authorizedAmount;
        this.capturedAmount = capturedAmount;
        this.refundedAmount = refundedAmount;
        this.settledCurrency = settledCurrency;
        this.settledAmount = settledAmount;
        this.settled = settled;
        this.country = country;
        this.externalIdentifier = externalIdentifier;
        this.intent = intent;
        this.paymentMethod = paymentMethod;
        this.method = method;
        this.instrumentType = instrumentType;
        this.errorCode = errorCode;
        this.paymentService = paymentService;
        this.pendingReview = pendingReview;
        this.buyer = buyer;
        this.rawResponseCode = rawResponseCode;
        this.rawResponseDescription = rawResponseDescription;
        this.shippingDetails = shippingDetails;
        this.checkoutSessionId = checkoutSessionId;
        this.giftCardRedemptions = giftCardRedemptions;
        this.giftCardService = giftCardService;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.airline = airline;
        this.authResponseCode = authResponseCode;
        this.avsResponseCode = avsResponseCode;
        this.cvvResponseCode = cvvResponseCode;
        this.antiFraudDecision = antiFraudDecision;
        this.paymentSource = paymentSource;
        this.merchantInitiated = merchantInitiated;
        this.isSubsequentPayment = isSubsequentPayment;
        this.cartItems = cartItems;
        this.statementDescriptor = statementDescriptor;
        this.schemeTransactionId = schemeTransactionId;
        this.threeDSecure = threeDSecure;
        this.paymentServiceTransactionId = paymentServiceTransactionId;
        this.additionalIdentifiers = additionalIdentifiers;
        this.metadata = metadata;
        this.authorizedAt = authorizedAt;
        this.capturedAt = capturedAt;
        this.voidedAt = voidedAt;
        this.approvalExpiresAt = approvalExpiresAt;
        this.buyerApprovalTimedoutAt = buyerApprovalTimedoutAt;
        this.intentOutcome = intentOutcome;
        this.multiTender = multiTender;
        this.accountFundingTransaction = accountFundingTransaction;
        this.recipient = recipient;
        this.merchantAdviceCode = merchantAdviceCode;
    }
    
    public Transaction(
            String id,
            String reconciliationId,
            String merchantAccountId,
            String currency,
            long amount,
            TransactionStatus status,
            long authorizedAmount,
            long capturedAmount,
            long refundedAmount,
            long settledAmount,
            boolean settled,
            TransactionIntent intent,
            List<GiftCardRedemption> giftCardRedemptions,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            TransactionPaymentSource paymentSource,
            boolean merchantInitiated,
            boolean isSubsequentPayment,
            TransactionIntentOutcome intentOutcome,
            boolean multiTender,
            boolean accountFundingTransaction) {
        this(id, reconciliationId, merchantAccountId, currency, amount, status, authorizedAmount, capturedAmount, refundedAmount, JsonNullable.undefined(), settledAmount, settled, JsonNullable.undefined(), JsonNullable.undefined(), intent, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), giftCardRedemptions, JsonNullable.undefined(), createdAt, updatedAt, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), paymentSource, merchantInitiated, isSubsequentPayment, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), intentOutcome, multiTender, accountFundingTransaction, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Always `transaction`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The ID for the transaction.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     */
    @JsonIgnore
    public String reconciliationId() {
        return reconciliationId;
    }

    /**
     * The ID of the merchant account this transaction belongs to.
     */
    @JsonIgnore
    public String merchantAccountId() {
        return merchantAccountId;
    }

    /**
     * The currency code for this transaction.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    @JsonIgnore
    public TransactionStatus status() {
        return status;
    }

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     */
    @JsonIgnore
    public long authorizedAmount() {
        return authorizedAmount;
    }

    /**
     * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
     */
    @JsonIgnore
    public long capturedAmount() {
        return capturedAmount;
    }

    /**
     * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
     */
    @JsonIgnore
    public long refundedAmount() {
        return refundedAmount;
    }

    /**
     * The currency of this transaction's settlement in ISO 4217 three-letter code format.
     */
    @JsonIgnore
    public JsonNullable<String> settledCurrency() {
        return settledCurrency;
    }

    /**
     * The net amount settled for this transaction.
     */
    @JsonIgnore
    public long settledAmount() {
        return settledAmount;
    }

    /**
     * Indicates whether this transaction has been settled.
     */
    @JsonIgnore
    public boolean settled() {
        return settled;
    }

    /**
     * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    @JsonIgnore
    public TransactionIntent intent() {
        return intent;
    }

    /**
     * The payment method used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionPaymentMethod> paymentMethod() {
        return (JsonNullable<TransactionPaymentMethod>) paymentMethod;
    }

    /**
     * The method used for the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Method> method() {
        return (JsonNullable<Method>) method;
    }

    /**
     * The name of the instrument used to process the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InstrumentType> instrumentType() {
        return (JsonNullable<InstrumentType>) instrumentType;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    @JsonIgnore
    public JsonNullable<String> errorCode() {
        return errorCode;
    }

    /**
     * The payment service used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionPaymentService> paymentService() {
        return (JsonNullable<TransactionPaymentService>) paymentService;
    }

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    @JsonIgnore
    public Optional<Boolean> pendingReview() {
        return pendingReview;
    }

    /**
     * The buyer used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionBuyer> buyer() {
        return (JsonNullable<TransactionBuyer>) buyer;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonIgnore
    public JsonNullable<String> rawResponseCode() {
        return rawResponseCode;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    @JsonIgnore
    public JsonNullable<String> rawResponseDescription() {
        return rawResponseDescription;
    }

    /**
     * The shipping details associated with the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ShippingDetails> shippingDetails() {
        return (JsonNullable<ShippingDetails>) shippingDetails;
    }

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    @JsonIgnore
    public JsonNullable<String> checkoutSessionId() {
        return checkoutSessionId;
    }

    /**
     * The gift cards redeemed for this transaction.
     */
    @JsonIgnore
    public List<GiftCardRedemption> giftCardRedemptions() {
        return giftCardRedemptions;
    }

    /**
     * The gift card service used for this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GiftCardService> giftCardService() {
        return (JsonNullable<GiftCardService>) giftCardService;
    }

    /**
     * The date this buyer was created at.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The date this buyer was last updated at.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    /**
     * Contains information about an airline travel, if applicable.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Airline> airline() {
        return (JsonNullable<Airline>) airline;
    }

    /**
     * This is the response description received from the processor.
     */
    @JsonIgnore
    public JsonNullable<String> authResponseCode() {
        return authResponseCode;
    }

    /**
     * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AVSResponseCode> avsResponseCode() {
        return (JsonNullable<AVSResponseCode>) avsResponseCode;
    }

    /**
     * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CVVResponseCode> cvvResponseCode() {
        return (JsonNullable<CVVResponseCode>) cvvResponseCode;
    }

    /**
     * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AntiFraudDecision> antiFraudDecision() {
        return (JsonNullable<AntiFraudDecision>) antiFraudDecision;
    }

    /**
     * The way payment method information made it to this transaction.
     */
    @JsonIgnore
    public TransactionPaymentSource paymentSource() {
        return paymentSource;
    }

    /**
     * Indicates whether the transaction was initiated by the merchant or the customer.
     */
    @JsonIgnore
    public boolean merchantInitiated() {
        return merchantInitiated;
    }

    /**
     * Indicates whether the transaction represents a subsequent payment or an initial one.
     */
    @JsonIgnore
    public boolean isSubsequentPayment() {
        return isSubsequentPayment;
    }

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CartItem>> cartItems() {
        return (JsonNullable<List<CartItem>>) cartItems;
    }

    /**
     * The statement descriptor is the text to be shown on the buyer's statements.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StatementDescriptor> statementDescriptor() {
        return (JsonNullable<StatementDescriptor>) statementDescriptor;
    }

    /**
     * An identifier for the transaction used by the scheme itself, when available.
     */
    @JsonIgnore
    public JsonNullable<String> schemeTransactionId() {
        return schemeTransactionId;
    }

    /**
     * The 3-D Secure data that was sent to the payment service for the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionThreeDSecureSummary> threeDSecure() {
        return (JsonNullable<TransactionThreeDSecureSummary>) threeDSecure;
    }

    /**
     * The payment service's unique ID for the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> paymentServiceTransactionId() {
        return paymentServiceTransactionId;
    }

    /**
     * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> additionalIdentifiers() {
        return (Optional<Map<String, String>>) additionalIdentifiers;
    }

    /**
     * Additional information about the transaction stored as key-value pairs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    /**
     * The date this transaction was authorized at.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> authorizedAt() {
        return authorizedAt;
    }

    /**
     * The date this transaction was captured at.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> capturedAt() {
        return capturedAt;
    }

    /**
     * The date this transaction was voided at.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> voidedAt() {
        return voidedAt;
    }

    /**
     * The date this transaction's approval URL will expire at.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> approvalExpiresAt() {
        return approvalExpiresAt;
    }

    /**
     * The date this transaction's approval timed out at.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> buyerApprovalTimedoutAt() {
        return buyerApprovalTimedoutAt;
    }

    @JsonIgnore
    public TransactionIntentOutcome intentOutcome() {
        return intentOutcome;
    }

    /**
     * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
     */
    @JsonIgnore
    public boolean multiTender() {
        return multiTender;
    }

    /**
     * Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
     */
    @JsonIgnore
    public boolean accountFundingTransaction() {
        return accountFundingTransaction;
    }

    /**
     * The recipient of any account to account funding. For use with AFTs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Recipient> recipient() {
        return (JsonNullable<Recipient>) recipient;
    }

    /**
     * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
     */
    @JsonIgnore
    public JsonNullable<String> merchantAdviceCode() {
        return merchantAdviceCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID for the transaction.
     */
    public Transaction withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     */
    public Transaction withReconciliationId(String reconciliationId) {
        Utils.checkNotNull(reconciliationId, "reconciliationId");
        this.reconciliationId = reconciliationId;
        return this;
    }

    /**
     * The ID of the merchant account this transaction belongs to.
     */
    public Transaction withMerchantAccountId(String merchantAccountId) {
        Utils.checkNotNull(merchantAccountId, "merchantAccountId");
        this.merchantAccountId = merchantAccountId;
        return this;
    }

    /**
     * The currency code for this transaction.
     */
    public Transaction withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     */
    public Transaction withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public Transaction withStatus(TransactionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     */
    public Transaction withAuthorizedAmount(long authorizedAmount) {
        Utils.checkNotNull(authorizedAmount, "authorizedAmount");
        this.authorizedAmount = authorizedAmount;
        return this;
    }

    /**
     * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
     */
    public Transaction withCapturedAmount(long capturedAmount) {
        Utils.checkNotNull(capturedAmount, "capturedAmount");
        this.capturedAmount = capturedAmount;
        return this;
    }

    /**
     * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
     */
    public Transaction withRefundedAmount(long refundedAmount) {
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        this.refundedAmount = refundedAmount;
        return this;
    }

    /**
     * The currency of this transaction's settlement in ISO 4217 three-letter code format.
     */
    public Transaction withSettledCurrency(String settledCurrency) {
        Utils.checkNotNull(settledCurrency, "settledCurrency");
        this.settledCurrency = JsonNullable.of(settledCurrency);
        return this;
    }

    /**
     * The currency of this transaction's settlement in ISO 4217 three-letter code format.
     */
    public Transaction withSettledCurrency(JsonNullable<String> settledCurrency) {
        Utils.checkNotNull(settledCurrency, "settledCurrency");
        this.settledCurrency = settledCurrency;
        return this;
    }

    /**
     * The net amount settled for this transaction.
     */
    public Transaction withSettledAmount(long settledAmount) {
        Utils.checkNotNull(settledAmount, "settledAmount");
        this.settledAmount = settledAmount;
        return this;
    }

    /**
     * Indicates whether this transaction has been settled.
     */
    public Transaction withSettled(boolean settled) {
        Utils.checkNotNull(settled, "settled");
        this.settled = settled;
        return this;
    }

    /**
     * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
     */
    public Transaction withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
     */
    public Transaction withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public Transaction withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    public Transaction withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    public Transaction withIntent(TransactionIntent intent) {
        Utils.checkNotNull(intent, "intent");
        this.intent = intent;
        return this;
    }

    /**
     * The payment method used for this transaction.
     */
    public Transaction withPaymentMethod(TransactionPaymentMethod paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * The payment method used for this transaction.
     */
    public Transaction withPaymentMethod(JsonNullable<? extends TransactionPaymentMethod> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The method used for the transaction.
     */
    public Transaction withMethod(Method method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * The method used for the transaction.
     */
    public Transaction withMethod(JsonNullable<? extends Method> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The name of the instrument used to process the transaction.
     */
    public Transaction withInstrumentType(InstrumentType instrumentType) {
        Utils.checkNotNull(instrumentType, "instrumentType");
        this.instrumentType = JsonNullable.of(instrumentType);
        return this;
    }

    /**
     * The name of the instrument used to process the transaction.
     */
    public Transaction withInstrumentType(JsonNullable<? extends InstrumentType> instrumentType) {
        Utils.checkNotNull(instrumentType, "instrumentType");
        this.instrumentType = instrumentType;
        return this;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    public Transaction withErrorCode(String errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = JsonNullable.of(errorCode);
        return this;
    }

    /**
     * The standardized error code set by Gr4vy.
     */
    public Transaction withErrorCode(JsonNullable<String> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    /**
     * The payment service used for this transaction.
     */
    public Transaction withPaymentService(TransactionPaymentService paymentService) {
        Utils.checkNotNull(paymentService, "paymentService");
        this.paymentService = JsonNullable.of(paymentService);
        return this;
    }

    /**
     * The payment service used for this transaction.
     */
    public Transaction withPaymentService(JsonNullable<? extends TransactionPaymentService> paymentService) {
        Utils.checkNotNull(paymentService, "paymentService");
        this.paymentService = paymentService;
        return this;
    }

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    public Transaction withPendingReview(boolean pendingReview) {
        Utils.checkNotNull(pendingReview, "pendingReview");
        this.pendingReview = Optional.ofNullable(pendingReview);
        return this;
    }

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     */
    public Transaction withPendingReview(Optional<Boolean> pendingReview) {
        Utils.checkNotNull(pendingReview, "pendingReview");
        this.pendingReview = pendingReview;
        return this;
    }

    /**
     * The buyer used for this transaction.
     */
    public Transaction withBuyer(TransactionBuyer buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * The buyer used for this transaction.
     */
    public Transaction withBuyer(JsonNullable<? extends TransactionBuyer> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public Transaction withRawResponseCode(String rawResponseCode) {
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        this.rawResponseCode = JsonNullable.of(rawResponseCode);
        return this;
    }

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public Transaction withRawResponseCode(JsonNullable<String> rawResponseCode) {
        Utils.checkNotNull(rawResponseCode, "rawResponseCode");
        this.rawResponseCode = rawResponseCode;
        return this;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public Transaction withRawResponseDescription(String rawResponseDescription) {
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        this.rawResponseDescription = JsonNullable.of(rawResponseDescription);
        return this;
    }

    /**
     * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     */
    public Transaction withRawResponseDescription(JsonNullable<String> rawResponseDescription) {
        Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
        this.rawResponseDescription = rawResponseDescription;
        return this;
    }

    /**
     * The shipping details associated with the transaction.
     */
    public Transaction withShippingDetails(ShippingDetails shippingDetails) {
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        this.shippingDetails = JsonNullable.of(shippingDetails);
        return this;
    }

    /**
     * The shipping details associated with the transaction.
     */
    public Transaction withShippingDetails(JsonNullable<? extends ShippingDetails> shippingDetails) {
        Utils.checkNotNull(shippingDetails, "shippingDetails");
        this.shippingDetails = shippingDetails;
        return this;
    }

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    public Transaction withCheckoutSessionId(String checkoutSessionId) {
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        this.checkoutSessionId = JsonNullable.of(checkoutSessionId);
        return this;
    }

    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    public Transaction withCheckoutSessionId(JsonNullable<String> checkoutSessionId) {
        Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
        this.checkoutSessionId = checkoutSessionId;
        return this;
    }

    /**
     * The gift cards redeemed for this transaction.
     */
    public Transaction withGiftCardRedemptions(List<GiftCardRedemption> giftCardRedemptions) {
        Utils.checkNotNull(giftCardRedemptions, "giftCardRedemptions");
        this.giftCardRedemptions = giftCardRedemptions;
        return this;
    }

    /**
     * The gift card service used for this transaction.
     */
    public Transaction withGiftCardService(GiftCardService giftCardService) {
        Utils.checkNotNull(giftCardService, "giftCardService");
        this.giftCardService = JsonNullable.of(giftCardService);
        return this;
    }

    /**
     * The gift card service used for this transaction.
     */
    public Transaction withGiftCardService(JsonNullable<? extends GiftCardService> giftCardService) {
        Utils.checkNotNull(giftCardService, "giftCardService");
        this.giftCardService = giftCardService;
        return this;
    }

    /**
     * The date this buyer was created at.
     */
    public Transaction withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date this buyer was last updated at.
     */
    public Transaction withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Contains information about an airline travel, if applicable.
     */
    public Transaction withAirline(Airline airline) {
        Utils.checkNotNull(airline, "airline");
        this.airline = JsonNullable.of(airline);
        return this;
    }

    /**
     * Contains information about an airline travel, if applicable.
     */
    public Transaction withAirline(JsonNullable<? extends Airline> airline) {
        Utils.checkNotNull(airline, "airline");
        this.airline = airline;
        return this;
    }

    /**
     * This is the response description received from the processor.
     */
    public Transaction withAuthResponseCode(String authResponseCode) {
        Utils.checkNotNull(authResponseCode, "authResponseCode");
        this.authResponseCode = JsonNullable.of(authResponseCode);
        return this;
    }

    /**
     * This is the response description received from the processor.
     */
    public Transaction withAuthResponseCode(JsonNullable<String> authResponseCode) {
        Utils.checkNotNull(authResponseCode, "authResponseCode");
        this.authResponseCode = authResponseCode;
        return this;
    }

    /**
     * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
     */
    public Transaction withAvsResponseCode(AVSResponseCode avsResponseCode) {
        Utils.checkNotNull(avsResponseCode, "avsResponseCode");
        this.avsResponseCode = JsonNullable.of(avsResponseCode);
        return this;
    }

    /**
     * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
     */
    public Transaction withAvsResponseCode(JsonNullable<? extends AVSResponseCode> avsResponseCode) {
        Utils.checkNotNull(avsResponseCode, "avsResponseCode");
        this.avsResponseCode = avsResponseCode;
        return this;
    }

    /**
     * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
     */
    public Transaction withCvvResponseCode(CVVResponseCode cvvResponseCode) {
        Utils.checkNotNull(cvvResponseCode, "cvvResponseCode");
        this.cvvResponseCode = JsonNullable.of(cvvResponseCode);
        return this;
    }

    /**
     * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
     */
    public Transaction withCvvResponseCode(JsonNullable<? extends CVVResponseCode> cvvResponseCode) {
        Utils.checkNotNull(cvvResponseCode, "cvvResponseCode");
        this.cvvResponseCode = cvvResponseCode;
        return this;
    }

    /**
     * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
     */
    public Transaction withAntiFraudDecision(AntiFraudDecision antiFraudDecision) {
        Utils.checkNotNull(antiFraudDecision, "antiFraudDecision");
        this.antiFraudDecision = JsonNullable.of(antiFraudDecision);
        return this;
    }

    /**
     * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
     */
    public Transaction withAntiFraudDecision(JsonNullable<? extends AntiFraudDecision> antiFraudDecision) {
        Utils.checkNotNull(antiFraudDecision, "antiFraudDecision");
        this.antiFraudDecision = antiFraudDecision;
        return this;
    }

    /**
     * The way payment method information made it to this transaction.
     */
    public Transaction withPaymentSource(TransactionPaymentSource paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = paymentSource;
        return this;
    }

    /**
     * Indicates whether the transaction was initiated by the merchant or the customer.
     */
    public Transaction withMerchantInitiated(boolean merchantInitiated) {
        Utils.checkNotNull(merchantInitiated, "merchantInitiated");
        this.merchantInitiated = merchantInitiated;
        return this;
    }

    /**
     * Indicates whether the transaction represents a subsequent payment or an initial one.
     */
    public Transaction withIsSubsequentPayment(boolean isSubsequentPayment) {
        Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
        this.isSubsequentPayment = isSubsequentPayment;
        return this;
    }

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    public Transaction withCartItems(List<CartItem> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = JsonNullable.of(cartItems);
        return this;
    }

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    public Transaction withCartItems(JsonNullable<? extends List<CartItem>> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = cartItems;
        return this;
    }

    /**
     * The statement descriptor is the text to be shown on the buyer's statements.
     */
    public Transaction withStatementDescriptor(StatementDescriptor statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = JsonNullable.of(statementDescriptor);
        return this;
    }

    /**
     * The statement descriptor is the text to be shown on the buyer's statements.
     */
    public Transaction withStatementDescriptor(JsonNullable<? extends StatementDescriptor> statementDescriptor) {
        Utils.checkNotNull(statementDescriptor, "statementDescriptor");
        this.statementDescriptor = statementDescriptor;
        return this;
    }

    /**
     * An identifier for the transaction used by the scheme itself, when available.
     */
    public Transaction withSchemeTransactionId(String schemeTransactionId) {
        Utils.checkNotNull(schemeTransactionId, "schemeTransactionId");
        this.schemeTransactionId = JsonNullable.of(schemeTransactionId);
        return this;
    }

    /**
     * An identifier for the transaction used by the scheme itself, when available.
     */
    public Transaction withSchemeTransactionId(JsonNullable<String> schemeTransactionId) {
        Utils.checkNotNull(schemeTransactionId, "schemeTransactionId");
        this.schemeTransactionId = schemeTransactionId;
        return this;
    }

    /**
     * The 3-D Secure data that was sent to the payment service for the transaction.
     */
    public Transaction withThreeDSecure(TransactionThreeDSecureSummary threeDSecure) {
        Utils.checkNotNull(threeDSecure, "threeDSecure");
        this.threeDSecure = JsonNullable.of(threeDSecure);
        return this;
    }

    /**
     * The 3-D Secure data that was sent to the payment service for the transaction.
     */
    public Transaction withThreeDSecure(JsonNullable<? extends TransactionThreeDSecureSummary> threeDSecure) {
        Utils.checkNotNull(threeDSecure, "threeDSecure");
        this.threeDSecure = threeDSecure;
        return this;
    }

    /**
     * The payment service's unique ID for the transaction.
     */
    public Transaction withPaymentServiceTransactionId(String paymentServiceTransactionId) {
        Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
        this.paymentServiceTransactionId = JsonNullable.of(paymentServiceTransactionId);
        return this;
    }

    /**
     * The payment service's unique ID for the transaction.
     */
    public Transaction withPaymentServiceTransactionId(JsonNullable<String> paymentServiceTransactionId) {
        Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
        this.paymentServiceTransactionId = paymentServiceTransactionId;
        return this;
    }

    /**
     * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
     */
    public Transaction withAdditionalIdentifiers(Map<String, String> additionalIdentifiers) {
        Utils.checkNotNull(additionalIdentifiers, "additionalIdentifiers");
        this.additionalIdentifiers = Optional.ofNullable(additionalIdentifiers);
        return this;
    }

    /**
     * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
     */
    public Transaction withAdditionalIdentifiers(Optional<? extends Map<String, String>> additionalIdentifiers) {
        Utils.checkNotNull(additionalIdentifiers, "additionalIdentifiers");
        this.additionalIdentifiers = additionalIdentifiers;
        return this;
    }

    /**
     * Additional information about the transaction stored as key-value pairs.
     */
    public Transaction withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Additional information about the transaction stored as key-value pairs.
     */
    public Transaction withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The date this transaction was authorized at.
     */
    public Transaction withAuthorizedAt(OffsetDateTime authorizedAt) {
        Utils.checkNotNull(authorizedAt, "authorizedAt");
        this.authorizedAt = JsonNullable.of(authorizedAt);
        return this;
    }

    /**
     * The date this transaction was authorized at.
     */
    public Transaction withAuthorizedAt(JsonNullable<OffsetDateTime> authorizedAt) {
        Utils.checkNotNull(authorizedAt, "authorizedAt");
        this.authorizedAt = authorizedAt;
        return this;
    }

    /**
     * The date this transaction was captured at.
     */
    public Transaction withCapturedAt(OffsetDateTime capturedAt) {
        Utils.checkNotNull(capturedAt, "capturedAt");
        this.capturedAt = JsonNullable.of(capturedAt);
        return this;
    }

    /**
     * The date this transaction was captured at.
     */
    public Transaction withCapturedAt(JsonNullable<OffsetDateTime> capturedAt) {
        Utils.checkNotNull(capturedAt, "capturedAt");
        this.capturedAt = capturedAt;
        return this;
    }

    /**
     * The date this transaction was voided at.
     */
    public Transaction withVoidedAt(OffsetDateTime voidedAt) {
        Utils.checkNotNull(voidedAt, "voidedAt");
        this.voidedAt = JsonNullable.of(voidedAt);
        return this;
    }

    /**
     * The date this transaction was voided at.
     */
    public Transaction withVoidedAt(JsonNullable<OffsetDateTime> voidedAt) {
        Utils.checkNotNull(voidedAt, "voidedAt");
        this.voidedAt = voidedAt;
        return this;
    }

    /**
     * The date this transaction's approval URL will expire at.
     */
    public Transaction withApprovalExpiresAt(OffsetDateTime approvalExpiresAt) {
        Utils.checkNotNull(approvalExpiresAt, "approvalExpiresAt");
        this.approvalExpiresAt = JsonNullable.of(approvalExpiresAt);
        return this;
    }

    /**
     * The date this transaction's approval URL will expire at.
     */
    public Transaction withApprovalExpiresAt(JsonNullable<OffsetDateTime> approvalExpiresAt) {
        Utils.checkNotNull(approvalExpiresAt, "approvalExpiresAt");
        this.approvalExpiresAt = approvalExpiresAt;
        return this;
    }

    /**
     * The date this transaction's approval timed out at.
     */
    public Transaction withBuyerApprovalTimedoutAt(OffsetDateTime buyerApprovalTimedoutAt) {
        Utils.checkNotNull(buyerApprovalTimedoutAt, "buyerApprovalTimedoutAt");
        this.buyerApprovalTimedoutAt = JsonNullable.of(buyerApprovalTimedoutAt);
        return this;
    }

    /**
     * The date this transaction's approval timed out at.
     */
    public Transaction withBuyerApprovalTimedoutAt(JsonNullable<OffsetDateTime> buyerApprovalTimedoutAt) {
        Utils.checkNotNull(buyerApprovalTimedoutAt, "buyerApprovalTimedoutAt");
        this.buyerApprovalTimedoutAt = buyerApprovalTimedoutAt;
        return this;
    }

    public Transaction withIntentOutcome(TransactionIntentOutcome intentOutcome) {
        Utils.checkNotNull(intentOutcome, "intentOutcome");
        this.intentOutcome = intentOutcome;
        return this;
    }

    /**
     * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
     */
    public Transaction withMultiTender(boolean multiTender) {
        Utils.checkNotNull(multiTender, "multiTender");
        this.multiTender = multiTender;
        return this;
    }

    /**
     * Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
     */
    public Transaction withAccountFundingTransaction(boolean accountFundingTransaction) {
        Utils.checkNotNull(accountFundingTransaction, "accountFundingTransaction");
        this.accountFundingTransaction = accountFundingTransaction;
        return this;
    }

    /**
     * The recipient of any account to account funding. For use with AFTs.
     */
    public Transaction withRecipient(Recipient recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = JsonNullable.of(recipient);
        return this;
    }

    /**
     * The recipient of any account to account funding. For use with AFTs.
     */
    public Transaction withRecipient(JsonNullable<? extends Recipient> recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = recipient;
        return this;
    }

    /**
     * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
     */
    public Transaction withMerchantAdviceCode(String merchantAdviceCode) {
        Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
        this.merchantAdviceCode = JsonNullable.of(merchantAdviceCode);
        return this;
    }

    /**
     * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
     */
    public Transaction withMerchantAdviceCode(JsonNullable<String> merchantAdviceCode) {
        Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
        this.merchantAdviceCode = merchantAdviceCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transaction other = (Transaction) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.reconciliationId, other.reconciliationId) &&
            Objects.deepEquals(this.merchantAccountId, other.merchantAccountId) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.authorizedAmount, other.authorizedAmount) &&
            Objects.deepEquals(this.capturedAmount, other.capturedAmount) &&
            Objects.deepEquals(this.refundedAmount, other.refundedAmount) &&
            Objects.deepEquals(this.settledCurrency, other.settledCurrency) &&
            Objects.deepEquals(this.settledAmount, other.settledAmount) &&
            Objects.deepEquals(this.settled, other.settled) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Objects.deepEquals(this.intent, other.intent) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.instrumentType, other.instrumentType) &&
            Objects.deepEquals(this.errorCode, other.errorCode) &&
            Objects.deepEquals(this.paymentService, other.paymentService) &&
            Objects.deepEquals(this.pendingReview, other.pendingReview) &&
            Objects.deepEquals(this.buyer, other.buyer) &&
            Objects.deepEquals(this.rawResponseCode, other.rawResponseCode) &&
            Objects.deepEquals(this.rawResponseDescription, other.rawResponseDescription) &&
            Objects.deepEquals(this.shippingDetails, other.shippingDetails) &&
            Objects.deepEquals(this.checkoutSessionId, other.checkoutSessionId) &&
            Objects.deepEquals(this.giftCardRedemptions, other.giftCardRedemptions) &&
            Objects.deepEquals(this.giftCardService, other.giftCardService) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.airline, other.airline) &&
            Objects.deepEquals(this.authResponseCode, other.authResponseCode) &&
            Objects.deepEquals(this.avsResponseCode, other.avsResponseCode) &&
            Objects.deepEquals(this.cvvResponseCode, other.cvvResponseCode) &&
            Objects.deepEquals(this.antiFraudDecision, other.antiFraudDecision) &&
            Objects.deepEquals(this.paymentSource, other.paymentSource) &&
            Objects.deepEquals(this.merchantInitiated, other.merchantInitiated) &&
            Objects.deepEquals(this.isSubsequentPayment, other.isSubsequentPayment) &&
            Objects.deepEquals(this.cartItems, other.cartItems) &&
            Objects.deepEquals(this.statementDescriptor, other.statementDescriptor) &&
            Objects.deepEquals(this.schemeTransactionId, other.schemeTransactionId) &&
            Objects.deepEquals(this.threeDSecure, other.threeDSecure) &&
            Objects.deepEquals(this.paymentServiceTransactionId, other.paymentServiceTransactionId) &&
            Objects.deepEquals(this.additionalIdentifiers, other.additionalIdentifiers) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.authorizedAt, other.authorizedAt) &&
            Objects.deepEquals(this.capturedAt, other.capturedAt) &&
            Objects.deepEquals(this.voidedAt, other.voidedAt) &&
            Objects.deepEquals(this.approvalExpiresAt, other.approvalExpiresAt) &&
            Objects.deepEquals(this.buyerApprovalTimedoutAt, other.buyerApprovalTimedoutAt) &&
            Objects.deepEquals(this.intentOutcome, other.intentOutcome) &&
            Objects.deepEquals(this.multiTender, other.multiTender) &&
            Objects.deepEquals(this.accountFundingTransaction, other.accountFundingTransaction) &&
            Objects.deepEquals(this.recipient, other.recipient) &&
            Objects.deepEquals(this.merchantAdviceCode, other.merchantAdviceCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            id,
            reconciliationId,
            merchantAccountId,
            currency,
            amount,
            status,
            authorizedAmount,
            capturedAmount,
            refundedAmount,
            settledCurrency,
            settledAmount,
            settled,
            country,
            externalIdentifier,
            intent,
            paymentMethod,
            method,
            instrumentType,
            errorCode,
            paymentService,
            pendingReview,
            buyer,
            rawResponseCode,
            rawResponseDescription,
            shippingDetails,
            checkoutSessionId,
            giftCardRedemptions,
            giftCardService,
            createdAt,
            updatedAt,
            airline,
            authResponseCode,
            avsResponseCode,
            cvvResponseCode,
            antiFraudDecision,
            paymentSource,
            merchantInitiated,
            isSubsequentPayment,
            cartItems,
            statementDescriptor,
            schemeTransactionId,
            threeDSecure,
            paymentServiceTransactionId,
            additionalIdentifiers,
            metadata,
            authorizedAt,
            capturedAt,
            voidedAt,
            approvalExpiresAt,
            buyerApprovalTimedoutAt,
            intentOutcome,
            multiTender,
            accountFundingTransaction,
            recipient,
            merchantAdviceCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Transaction.class,
                "type", type,
                "id", id,
                "reconciliationId", reconciliationId,
                "merchantAccountId", merchantAccountId,
                "currency", currency,
                "amount", amount,
                "status", status,
                "authorizedAmount", authorizedAmount,
                "capturedAmount", capturedAmount,
                "refundedAmount", refundedAmount,
                "settledCurrency", settledCurrency,
                "settledAmount", settledAmount,
                "settled", settled,
                "country", country,
                "externalIdentifier", externalIdentifier,
                "intent", intent,
                "paymentMethod", paymentMethod,
                "method", method,
                "instrumentType", instrumentType,
                "errorCode", errorCode,
                "paymentService", paymentService,
                "pendingReview", pendingReview,
                "buyer", buyer,
                "rawResponseCode", rawResponseCode,
                "rawResponseDescription", rawResponseDescription,
                "shippingDetails", shippingDetails,
                "checkoutSessionId", checkoutSessionId,
                "giftCardRedemptions", giftCardRedemptions,
                "giftCardService", giftCardService,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "airline", airline,
                "authResponseCode", authResponseCode,
                "avsResponseCode", avsResponseCode,
                "cvvResponseCode", cvvResponseCode,
                "antiFraudDecision", antiFraudDecision,
                "paymentSource", paymentSource,
                "merchantInitiated", merchantInitiated,
                "isSubsequentPayment", isSubsequentPayment,
                "cartItems", cartItems,
                "statementDescriptor", statementDescriptor,
                "schemeTransactionId", schemeTransactionId,
                "threeDSecure", threeDSecure,
                "paymentServiceTransactionId", paymentServiceTransactionId,
                "additionalIdentifiers", additionalIdentifiers,
                "metadata", metadata,
                "authorizedAt", authorizedAt,
                "capturedAt", capturedAt,
                "voidedAt", voidedAt,
                "approvalExpiresAt", approvalExpiresAt,
                "buyerApprovalTimedoutAt", buyerApprovalTimedoutAt,
                "intentOutcome", intentOutcome,
                "multiTender", multiTender,
                "accountFundingTransaction", accountFundingTransaction,
                "recipient", recipient,
                "merchantAdviceCode", merchantAdviceCode);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String reconciliationId;
 
        private String merchantAccountId;
 
        private String currency;
 
        private Long amount;
 
        private TransactionStatus status;
 
        private Long authorizedAmount;
 
        private Long capturedAmount;
 
        private Long refundedAmount;
 
        private JsonNullable<String> settledCurrency = JsonNullable.undefined();
 
        private Long settledAmount;
 
        private Boolean settled;
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private TransactionIntent intent;
 
        private JsonNullable<? extends TransactionPaymentMethod> paymentMethod = JsonNullable.undefined();
 
        private JsonNullable<? extends Method> method = JsonNullable.undefined();
 
        private JsonNullable<? extends InstrumentType> instrumentType = JsonNullable.undefined();
 
        private JsonNullable<String> errorCode = JsonNullable.undefined();
 
        private JsonNullable<? extends TransactionPaymentService> paymentService = JsonNullable.undefined();
 
        private Optional<Boolean> pendingReview;
 
        private JsonNullable<? extends TransactionBuyer> buyer = JsonNullable.undefined();
 
        private JsonNullable<String> rawResponseCode = JsonNullable.undefined();
 
        private JsonNullable<String> rawResponseDescription = JsonNullable.undefined();
 
        private JsonNullable<? extends ShippingDetails> shippingDetails = JsonNullable.undefined();
 
        private JsonNullable<String> checkoutSessionId = JsonNullable.undefined();
 
        private List<GiftCardRedemption> giftCardRedemptions;
 
        private JsonNullable<? extends GiftCardService> giftCardService = JsonNullable.undefined();
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;
 
        private JsonNullable<? extends Airline> airline = JsonNullable.undefined();
 
        private JsonNullable<String> authResponseCode = JsonNullable.undefined();
 
        private JsonNullable<? extends AVSResponseCode> avsResponseCode = JsonNullable.undefined();
 
        private JsonNullable<? extends CVVResponseCode> cvvResponseCode = JsonNullable.undefined();
 
        private JsonNullable<? extends AntiFraudDecision> antiFraudDecision = JsonNullable.undefined();
 
        private TransactionPaymentSource paymentSource;
 
        private Boolean merchantInitiated;
 
        private Boolean isSubsequentPayment;
 
        private JsonNullable<? extends List<CartItem>> cartItems = JsonNullable.undefined();
 
        private JsonNullable<? extends StatementDescriptor> statementDescriptor = JsonNullable.undefined();
 
        private JsonNullable<String> schemeTransactionId = JsonNullable.undefined();
 
        private JsonNullable<? extends TransactionThreeDSecureSummary> threeDSecure = JsonNullable.undefined();
 
        private JsonNullable<String> paymentServiceTransactionId = JsonNullable.undefined();
 
        private Optional<? extends Map<String, String>> additionalIdentifiers = Optional.empty();
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> authorizedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> capturedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> voidedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> approvalExpiresAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> buyerApprovalTimedoutAt = JsonNullable.undefined();
 
        private TransactionIntentOutcome intentOutcome;
 
        private Boolean multiTender;
 
        private Boolean accountFundingTransaction;
 
        private JsonNullable<? extends Recipient> recipient = JsonNullable.undefined();
 
        private JsonNullable<String> merchantAdviceCode = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID for the transaction.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
         */
        public Builder reconciliationId(String reconciliationId) {
            Utils.checkNotNull(reconciliationId, "reconciliationId");
            this.reconciliationId = reconciliationId;
            return this;
        }

        /**
         * The ID of the merchant account this transaction belongs to.
         */
        public Builder merchantAccountId(String merchantAccountId) {
            Utils.checkNotNull(merchantAccountId, "merchantAccountId");
            this.merchantAccountId = merchantAccountId;
            return this;
        }

        /**
         * The currency code for this transaction.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The total amount for this transaction across all funding sources including gift cards.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder status(TransactionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
         */
        public Builder authorizedAmount(long authorizedAmount) {
            Utils.checkNotNull(authorizedAmount, "authorizedAmount");
            this.authorizedAmount = authorizedAmount;
            return this;
        }

        /**
         * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
         */
        public Builder capturedAmount(long capturedAmount) {
            Utils.checkNotNull(capturedAmount, "capturedAmount");
            this.capturedAmount = capturedAmount;
            return this;
        }

        /**
         * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
         */
        public Builder refundedAmount(long refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = refundedAmount;
            return this;
        }

        /**
         * The currency of this transaction's settlement in ISO 4217 three-letter code format.
         */
        public Builder settledCurrency(String settledCurrency) {
            Utils.checkNotNull(settledCurrency, "settledCurrency");
            this.settledCurrency = JsonNullable.of(settledCurrency);
            return this;
        }

        /**
         * The currency of this transaction's settlement in ISO 4217 three-letter code format.
         */
        public Builder settledCurrency(JsonNullable<String> settledCurrency) {
            Utils.checkNotNull(settledCurrency, "settledCurrency");
            this.settledCurrency = settledCurrency;
            return this;
        }

        /**
         * The net amount settled for this transaction.
         */
        public Builder settledAmount(long settledAmount) {
            Utils.checkNotNull(settledAmount, "settledAmount");
            this.settledAmount = settledAmount;
            return this;
        }

        /**
         * Indicates whether this transaction has been settled.
         */
        public Builder settled(boolean settled) {
            Utils.checkNotNull(settled, "settled");
            this.settled = settled;
            return this;
        }

        /**
         * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier that can be used to match the transaction against your own records.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        public Builder intent(TransactionIntent intent) {
            Utils.checkNotNull(intent, "intent");
            this.intent = intent;
            return this;
        }

        /**
         * The payment method used for this transaction.
         */
        public Builder paymentMethod(TransactionPaymentMethod paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * The payment method used for this transaction.
         */
        public Builder paymentMethod(JsonNullable<? extends TransactionPaymentMethod> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * The method used for the transaction.
         */
        public Builder method(Method method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * The method used for the transaction.
         */
        public Builder method(JsonNullable<? extends Method> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The name of the instrument used to process the transaction.
         */
        public Builder instrumentType(InstrumentType instrumentType) {
            Utils.checkNotNull(instrumentType, "instrumentType");
            this.instrumentType = JsonNullable.of(instrumentType);
            return this;
        }

        /**
         * The name of the instrument used to process the transaction.
         */
        public Builder instrumentType(JsonNullable<? extends InstrumentType> instrumentType) {
            Utils.checkNotNull(instrumentType, "instrumentType");
            this.instrumentType = instrumentType;
            return this;
        }

        /**
         * The standardized error code set by Gr4vy.
         */
        public Builder errorCode(String errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = JsonNullable.of(errorCode);
            return this;
        }

        /**
         * The standardized error code set by Gr4vy.
         */
        public Builder errorCode(JsonNullable<String> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }

        /**
         * The payment service used for this transaction.
         */
        public Builder paymentService(TransactionPaymentService paymentService) {
            Utils.checkNotNull(paymentService, "paymentService");
            this.paymentService = JsonNullable.of(paymentService);
            return this;
        }

        /**
         * The payment service used for this transaction.
         */
        public Builder paymentService(JsonNullable<? extends TransactionPaymentService> paymentService) {
            Utils.checkNotNull(paymentService, "paymentService");
            this.paymentService = paymentService;
            return this;
        }

        /**
         * Whether a manual anti fraud review is pending with an anti fraud service.
         */
        public Builder pendingReview(boolean pendingReview) {
            Utils.checkNotNull(pendingReview, "pendingReview");
            this.pendingReview = Optional.ofNullable(pendingReview);
            return this;
        }

        /**
         * Whether a manual anti fraud review is pending with an anti fraud service.
         */
        public Builder pendingReview(Optional<Boolean> pendingReview) {
            Utils.checkNotNull(pendingReview, "pendingReview");
            this.pendingReview = pendingReview;
            return this;
        }

        /**
         * The buyer used for this transaction.
         */
        public Builder buyer(TransactionBuyer buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * The buyer used for this transaction.
         */
        public Builder buyer(JsonNullable<? extends TransactionBuyer> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }

        /**
         * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseCode(String rawResponseCode) {
            Utils.checkNotNull(rawResponseCode, "rawResponseCode");
            this.rawResponseCode = JsonNullable.of(rawResponseCode);
            return this;
        }

        /**
         * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseCode(JsonNullable<String> rawResponseCode) {
            Utils.checkNotNull(rawResponseCode, "rawResponseCode");
            this.rawResponseCode = rawResponseCode;
            return this;
        }

        /**
         * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseDescription(String rawResponseDescription) {
            Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
            this.rawResponseDescription = JsonNullable.of(rawResponseDescription);
            return this;
        }

        /**
         * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
         */
        public Builder rawResponseDescription(JsonNullable<String> rawResponseDescription) {
            Utils.checkNotNull(rawResponseDescription, "rawResponseDescription");
            this.rawResponseDescription = rawResponseDescription;
            return this;
        }

        /**
         * The shipping details associated with the transaction.
         */
        public Builder shippingDetails(ShippingDetails shippingDetails) {
            Utils.checkNotNull(shippingDetails, "shippingDetails");
            this.shippingDetails = JsonNullable.of(shippingDetails);
            return this;
        }

        /**
         * The shipping details associated with the transaction.
         */
        public Builder shippingDetails(JsonNullable<? extends ShippingDetails> shippingDetails) {
            Utils.checkNotNull(shippingDetails, "shippingDetails");
            this.shippingDetails = shippingDetails;
            return this;
        }

        /**
         * The identifier for the checkout session this transaction is associated with.
         */
        public Builder checkoutSessionId(String checkoutSessionId) {
            Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
            this.checkoutSessionId = JsonNullable.of(checkoutSessionId);
            return this;
        }

        /**
         * The identifier for the checkout session this transaction is associated with.
         */
        public Builder checkoutSessionId(JsonNullable<String> checkoutSessionId) {
            Utils.checkNotNull(checkoutSessionId, "checkoutSessionId");
            this.checkoutSessionId = checkoutSessionId;
            return this;
        }

        /**
         * The gift cards redeemed for this transaction.
         */
        public Builder giftCardRedemptions(List<GiftCardRedemption> giftCardRedemptions) {
            Utils.checkNotNull(giftCardRedemptions, "giftCardRedemptions");
            this.giftCardRedemptions = giftCardRedemptions;
            return this;
        }

        /**
         * The gift card service used for this transaction.
         */
        public Builder giftCardService(GiftCardService giftCardService) {
            Utils.checkNotNull(giftCardService, "giftCardService");
            this.giftCardService = JsonNullable.of(giftCardService);
            return this;
        }

        /**
         * The gift card service used for this transaction.
         */
        public Builder giftCardService(JsonNullable<? extends GiftCardService> giftCardService) {
            Utils.checkNotNull(giftCardService, "giftCardService");
            this.giftCardService = giftCardService;
            return this;
        }

        /**
         * The date this buyer was created at.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date this buyer was last updated at.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Contains information about an airline travel, if applicable.
         */
        public Builder airline(Airline airline) {
            Utils.checkNotNull(airline, "airline");
            this.airline = JsonNullable.of(airline);
            return this;
        }

        /**
         * Contains information about an airline travel, if applicable.
         */
        public Builder airline(JsonNullable<? extends Airline> airline) {
            Utils.checkNotNull(airline, "airline");
            this.airline = airline;
            return this;
        }

        /**
         * This is the response description received from the processor.
         */
        public Builder authResponseCode(String authResponseCode) {
            Utils.checkNotNull(authResponseCode, "authResponseCode");
            this.authResponseCode = JsonNullable.of(authResponseCode);
            return this;
        }

        /**
         * This is the response description received from the processor.
         */
        public Builder authResponseCode(JsonNullable<String> authResponseCode) {
            Utils.checkNotNull(authResponseCode, "authResponseCode");
            this.authResponseCode = authResponseCode;
            return this;
        }

        /**
         * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
         */
        public Builder avsResponseCode(AVSResponseCode avsResponseCode) {
            Utils.checkNotNull(avsResponseCode, "avsResponseCode");
            this.avsResponseCode = JsonNullable.of(avsResponseCode);
            return this;
        }

        /**
         * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
         */
        public Builder avsResponseCode(JsonNullable<? extends AVSResponseCode> avsResponseCode) {
            Utils.checkNotNull(avsResponseCode, "avsResponseCode");
            this.avsResponseCode = avsResponseCode;
            return this;
        }

        /**
         * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
         */
        public Builder cvvResponseCode(CVVResponseCode cvvResponseCode) {
            Utils.checkNotNull(cvvResponseCode, "cvvResponseCode");
            this.cvvResponseCode = JsonNullable.of(cvvResponseCode);
            return this;
        }

        /**
         * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
         */
        public Builder cvvResponseCode(JsonNullable<? extends CVVResponseCode> cvvResponseCode) {
            Utils.checkNotNull(cvvResponseCode, "cvvResponseCode");
            this.cvvResponseCode = cvvResponseCode;
            return this;
        }

        /**
         * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
         */
        public Builder antiFraudDecision(AntiFraudDecision antiFraudDecision) {
            Utils.checkNotNull(antiFraudDecision, "antiFraudDecision");
            this.antiFraudDecision = JsonNullable.of(antiFraudDecision);
            return this;
        }

        /**
         * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
         */
        public Builder antiFraudDecision(JsonNullable<? extends AntiFraudDecision> antiFraudDecision) {
            Utils.checkNotNull(antiFraudDecision, "antiFraudDecision");
            this.antiFraudDecision = antiFraudDecision;
            return this;
        }

        /**
         * The way payment method information made it to this transaction.
         */
        public Builder paymentSource(TransactionPaymentSource paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = paymentSource;
            return this;
        }

        /**
         * Indicates whether the transaction was initiated by the merchant or the customer.
         */
        public Builder merchantInitiated(boolean merchantInitiated) {
            Utils.checkNotNull(merchantInitiated, "merchantInitiated");
            this.merchantInitiated = merchantInitiated;
            return this;
        }

        /**
         * Indicates whether the transaction represents a subsequent payment or an initial one.
         */
        public Builder isSubsequentPayment(boolean isSubsequentPayment) {
            Utils.checkNotNull(isSubsequentPayment, "isSubsequentPayment");
            this.isSubsequentPayment = isSubsequentPayment;
            return this;
        }

        /**
         * An array of cart items that represents the line items of a transaction.
         */
        public Builder cartItems(List<CartItem> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = JsonNullable.of(cartItems);
            return this;
        }

        /**
         * An array of cart items that represents the line items of a transaction.
         */
        public Builder cartItems(JsonNullable<? extends List<CartItem>> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = cartItems;
            return this;
        }

        /**
         * The statement descriptor is the text to be shown on the buyer's statements.
         */
        public Builder statementDescriptor(StatementDescriptor statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = JsonNullable.of(statementDescriptor);
            return this;
        }

        /**
         * The statement descriptor is the text to be shown on the buyer's statements.
         */
        public Builder statementDescriptor(JsonNullable<? extends StatementDescriptor> statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = statementDescriptor;
            return this;
        }

        /**
         * An identifier for the transaction used by the scheme itself, when available.
         */
        public Builder schemeTransactionId(String schemeTransactionId) {
            Utils.checkNotNull(schemeTransactionId, "schemeTransactionId");
            this.schemeTransactionId = JsonNullable.of(schemeTransactionId);
            return this;
        }

        /**
         * An identifier for the transaction used by the scheme itself, when available.
         */
        public Builder schemeTransactionId(JsonNullable<String> schemeTransactionId) {
            Utils.checkNotNull(schemeTransactionId, "schemeTransactionId");
            this.schemeTransactionId = schemeTransactionId;
            return this;
        }

        /**
         * The 3-D Secure data that was sent to the payment service for the transaction.
         */
        public Builder threeDSecure(TransactionThreeDSecureSummary threeDSecure) {
            Utils.checkNotNull(threeDSecure, "threeDSecure");
            this.threeDSecure = JsonNullable.of(threeDSecure);
            return this;
        }

        /**
         * The 3-D Secure data that was sent to the payment service for the transaction.
         */
        public Builder threeDSecure(JsonNullable<? extends TransactionThreeDSecureSummary> threeDSecure) {
            Utils.checkNotNull(threeDSecure, "threeDSecure");
            this.threeDSecure = threeDSecure;
            return this;
        }

        /**
         * The payment service's unique ID for the transaction.
         */
        public Builder paymentServiceTransactionId(String paymentServiceTransactionId) {
            Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
            this.paymentServiceTransactionId = JsonNullable.of(paymentServiceTransactionId);
            return this;
        }

        /**
         * The payment service's unique ID for the transaction.
         */
        public Builder paymentServiceTransactionId(JsonNullable<String> paymentServiceTransactionId) {
            Utils.checkNotNull(paymentServiceTransactionId, "paymentServiceTransactionId");
            this.paymentServiceTransactionId = paymentServiceTransactionId;
            return this;
        }

        /**
         * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
         */
        public Builder additionalIdentifiers(Map<String, String> additionalIdentifiers) {
            Utils.checkNotNull(additionalIdentifiers, "additionalIdentifiers");
            this.additionalIdentifiers = Optional.ofNullable(additionalIdentifiers);
            return this;
        }

        /**
         * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
         */
        public Builder additionalIdentifiers(Optional<? extends Map<String, String>> additionalIdentifiers) {
            Utils.checkNotNull(additionalIdentifiers, "additionalIdentifiers");
            this.additionalIdentifiers = additionalIdentifiers;
            return this;
        }

        /**
         * Additional information about the transaction stored as key-value pairs.
         */
        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Additional information about the transaction stored as key-value pairs.
         */
        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * The date this transaction was authorized at.
         */
        public Builder authorizedAt(OffsetDateTime authorizedAt) {
            Utils.checkNotNull(authorizedAt, "authorizedAt");
            this.authorizedAt = JsonNullable.of(authorizedAt);
            return this;
        }

        /**
         * The date this transaction was authorized at.
         */
        public Builder authorizedAt(JsonNullable<OffsetDateTime> authorizedAt) {
            Utils.checkNotNull(authorizedAt, "authorizedAt");
            this.authorizedAt = authorizedAt;
            return this;
        }

        /**
         * The date this transaction was captured at.
         */
        public Builder capturedAt(OffsetDateTime capturedAt) {
            Utils.checkNotNull(capturedAt, "capturedAt");
            this.capturedAt = JsonNullable.of(capturedAt);
            return this;
        }

        /**
         * The date this transaction was captured at.
         */
        public Builder capturedAt(JsonNullable<OffsetDateTime> capturedAt) {
            Utils.checkNotNull(capturedAt, "capturedAt");
            this.capturedAt = capturedAt;
            return this;
        }

        /**
         * The date this transaction was voided at.
         */
        public Builder voidedAt(OffsetDateTime voidedAt) {
            Utils.checkNotNull(voidedAt, "voidedAt");
            this.voidedAt = JsonNullable.of(voidedAt);
            return this;
        }

        /**
         * The date this transaction was voided at.
         */
        public Builder voidedAt(JsonNullable<OffsetDateTime> voidedAt) {
            Utils.checkNotNull(voidedAt, "voidedAt");
            this.voidedAt = voidedAt;
            return this;
        }

        /**
         * The date this transaction's approval URL will expire at.
         */
        public Builder approvalExpiresAt(OffsetDateTime approvalExpiresAt) {
            Utils.checkNotNull(approvalExpiresAt, "approvalExpiresAt");
            this.approvalExpiresAt = JsonNullable.of(approvalExpiresAt);
            return this;
        }

        /**
         * The date this transaction's approval URL will expire at.
         */
        public Builder approvalExpiresAt(JsonNullable<OffsetDateTime> approvalExpiresAt) {
            Utils.checkNotNull(approvalExpiresAt, "approvalExpiresAt");
            this.approvalExpiresAt = approvalExpiresAt;
            return this;
        }

        /**
         * The date this transaction's approval timed out at.
         */
        public Builder buyerApprovalTimedoutAt(OffsetDateTime buyerApprovalTimedoutAt) {
            Utils.checkNotNull(buyerApprovalTimedoutAt, "buyerApprovalTimedoutAt");
            this.buyerApprovalTimedoutAt = JsonNullable.of(buyerApprovalTimedoutAt);
            return this;
        }

        /**
         * The date this transaction's approval timed out at.
         */
        public Builder buyerApprovalTimedoutAt(JsonNullable<OffsetDateTime> buyerApprovalTimedoutAt) {
            Utils.checkNotNull(buyerApprovalTimedoutAt, "buyerApprovalTimedoutAt");
            this.buyerApprovalTimedoutAt = buyerApprovalTimedoutAt;
            return this;
        }

        public Builder intentOutcome(TransactionIntentOutcome intentOutcome) {
            Utils.checkNotNull(intentOutcome, "intentOutcome");
            this.intentOutcome = intentOutcome;
            return this;
        }

        /**
         * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
         */
        public Builder multiTender(boolean multiTender) {
            Utils.checkNotNull(multiTender, "multiTender");
            this.multiTender = multiTender;
            return this;
        }

        /**
         * Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
         */
        public Builder accountFundingTransaction(boolean accountFundingTransaction) {
            Utils.checkNotNull(accountFundingTransaction, "accountFundingTransaction");
            this.accountFundingTransaction = accountFundingTransaction;
            return this;
        }

        /**
         * The recipient of any account to account funding. For use with AFTs.
         */
        public Builder recipient(Recipient recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = JsonNullable.of(recipient);
            return this;
        }

        /**
         * The recipient of any account to account funding. For use with AFTs.
         */
        public Builder recipient(JsonNullable<? extends Recipient> recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = recipient;
            return this;
        }

        /**
         * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
         */
        public Builder merchantAdviceCode(String merchantAdviceCode) {
            Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
            this.merchantAdviceCode = JsonNullable.of(merchantAdviceCode);
            return this;
        }

        /**
         * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
         */
        public Builder merchantAdviceCode(JsonNullable<String> merchantAdviceCode) {
            Utils.checkNotNull(merchantAdviceCode, "merchantAdviceCode");
            this.merchantAdviceCode = merchantAdviceCode;
            return this;
        }
        
        public Transaction build() {
            if (pendingReview == null) {
                pendingReview = _SINGLETON_VALUE_PendingReview.value();
            }
            return new Transaction(
                id,
                reconciliationId,
                merchantAccountId,
                currency,
                amount,
                status,
                authorizedAmount,
                capturedAmount,
                refundedAmount,
                settledCurrency,
                settledAmount,
                settled,
                country,
                externalIdentifier,
                intent,
                paymentMethod,
                method,
                instrumentType,
                errorCode,
                paymentService,
                pendingReview,
                buyer,
                rawResponseCode,
                rawResponseDescription,
                shippingDetails,
                checkoutSessionId,
                giftCardRedemptions,
                giftCardService,
                createdAt,
                updatedAt,
                airline,
                authResponseCode,
                avsResponseCode,
                cvvResponseCode,
                antiFraudDecision,
                paymentSource,
                merchantInitiated,
                isSubsequentPayment,
                cartItems,
                statementDescriptor,
                schemeTransactionId,
                threeDSecure,
                paymentServiceTransactionId,
                additionalIdentifiers,
                metadata,
                authorizedAt,
                capturedAt,
                voidedAt,
                approvalExpiresAt,
                buyerApprovalTimedoutAt,
                intentOutcome,
                multiTender,
                accountFundingTransaction,
                recipient,
                merchantAdviceCode);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"transaction\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_PendingReview =
                new LazySingletonValue<>(
                        "pending_review",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
