/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class CartItem {

    /**
     * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The quantity of this item in the cart. This value cannot be negative or zero.
     */
    @JsonProperty("quantity")
    private long quantity;

    /**
     * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
     */
    @JsonProperty("unit_amount")
    private long unitAmount;

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private JsonNullable<Long> discountAmount;

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<Long> taxAmount;

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_identifier")
    private JsonNullable<String> externalIdentifier;

    /**
     * The SKU for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The product URL for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_url")
    private JsonNullable<String> productUrl;

    /**
     * The URL for the image of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private JsonNullable<String> imageUrl;

    /**
     * A list of strings containing product categories for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private JsonNullable<? extends List<String>> categories;

    /**
     * The product type of the cart item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_type")
    private JsonNullable<? extends ProductType> productType;

    /**
     * The seller country of the cart item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seller_country")
    private JsonNullable<String> sellerCountry;

    @JsonCreator
    public CartItem(
            @JsonProperty("name") String name,
            @JsonProperty("quantity") long quantity,
            @JsonProperty("unit_amount") long unitAmount,
            @JsonProperty("discount_amount") JsonNullable<Long> discountAmount,
            @JsonProperty("tax_amount") JsonNullable<Long> taxAmount,
            @JsonProperty("external_identifier") JsonNullable<String> externalIdentifier,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("product_url") JsonNullable<String> productUrl,
            @JsonProperty("image_url") JsonNullable<String> imageUrl,
            @JsonProperty("categories") JsonNullable<? extends List<String>> categories,
            @JsonProperty("product_type") JsonNullable<? extends ProductType> productType,
            @JsonProperty("seller_country") JsonNullable<String> sellerCountry) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitAmount, "unitAmount");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(productUrl, "productUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(productType, "productType");
        Utils.checkNotNull(sellerCountry, "sellerCountry");
        this.name = name;
        this.quantity = quantity;
        this.unitAmount = unitAmount;
        this.discountAmount = discountAmount;
        this.taxAmount = taxAmount;
        this.externalIdentifier = externalIdentifier;
        this.sku = sku;
        this.productUrl = productUrl;
        this.imageUrl = imageUrl;
        this.categories = categories;
        this.productType = productType;
        this.sellerCountry = sellerCountry;
    }
    
    public CartItem(
            String name,
            long quantity,
            long unitAmount) {
        this(name, quantity, unitAmount, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The quantity of this item in the cart. This value cannot be negative or zero.
     */
    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    /**
     * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
     */
    @JsonIgnore
    public long unitAmount() {
        return unitAmount;
    }

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonIgnore
    public JsonNullable<Long> discountAmount() {
        return discountAmount;
    }

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    @JsonIgnore
    public JsonNullable<Long> taxAmount() {
        return taxAmount;
    }

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    @JsonIgnore
    public JsonNullable<String> externalIdentifier() {
        return externalIdentifier;
    }

    /**
     * The SKU for the item.
     */
    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    /**
     * The product URL for the item.
     */
    @JsonIgnore
    public JsonNullable<String> productUrl() {
        return productUrl;
    }

    /**
     * The URL for the image of the item.
     */
    @JsonIgnore
    public JsonNullable<String> imageUrl() {
        return imageUrl;
    }

    /**
     * A list of strings containing product categories for the item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> categories() {
        return (JsonNullable<List<String>>) categories;
    }

    /**
     * The product type of the cart item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProductType> productType() {
        return (JsonNullable<ProductType>) productType;
    }

    /**
     * The seller country of the cart item.
     */
    @JsonIgnore
    public JsonNullable<String> sellerCountry() {
        return sellerCountry;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     */
    public CartItem withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The quantity of this item in the cart. This value cannot be negative or zero.
     */
    public CartItem withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
     */
    public CartItem withUnitAmount(long unitAmount) {
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.unitAmount = unitAmount;
        return this;
    }

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withDiscountAmount(long discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withDiscountAmount(JsonNullable<Long> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withTaxAmount(long taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     */
    public CartItem withTaxAmount(JsonNullable<Long> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    public CartItem withExternalIdentifier(String externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = JsonNullable.of(externalIdentifier);
        return this;
    }

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    public CartItem withExternalIdentifier(JsonNullable<String> externalIdentifier) {
        Utils.checkNotNull(externalIdentifier, "externalIdentifier");
        this.externalIdentifier = externalIdentifier;
        return this;
    }

    /**
     * The SKU for the item.
     */
    public CartItem withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    /**
     * The SKU for the item.
     */
    public CartItem withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * The product URL for the item.
     */
    public CartItem withProductUrl(String productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = JsonNullable.of(productUrl);
        return this;
    }

    /**
     * The product URL for the item.
     */
    public CartItem withProductUrl(JsonNullable<String> productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = productUrl;
        return this;
    }

    /**
     * The URL for the image of the item.
     */
    public CartItem withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = JsonNullable.of(imageUrl);
        return this;
    }

    /**
     * The URL for the image of the item.
     */
    public CartItem withImageUrl(JsonNullable<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * A list of strings containing product categories for the item.
     */
    public CartItem withCategories(List<String> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = JsonNullable.of(categories);
        return this;
    }

    /**
     * A list of strings containing product categories for the item.
     */
    public CartItem withCategories(JsonNullable<? extends List<String>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * The product type of the cart item.
     */
    public CartItem withProductType(ProductType productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = JsonNullable.of(productType);
        return this;
    }

    /**
     * The product type of the cart item.
     */
    public CartItem withProductType(JsonNullable<? extends ProductType> productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = productType;
        return this;
    }

    /**
     * The seller country of the cart item.
     */
    public CartItem withSellerCountry(String sellerCountry) {
        Utils.checkNotNull(sellerCountry, "sellerCountry");
        this.sellerCountry = JsonNullable.of(sellerCountry);
        return this;
    }

    /**
     * The seller country of the cart item.
     */
    public CartItem withSellerCountry(JsonNullable<String> sellerCountry) {
        Utils.checkNotNull(sellerCountry, "sellerCountry");
        this.sellerCountry = sellerCountry;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CartItem other = (CartItem) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.unitAmount, other.unitAmount) &&
            Objects.deepEquals(this.discountAmount, other.discountAmount) &&
            Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            Objects.deepEquals(this.externalIdentifier, other.externalIdentifier) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.productUrl, other.productUrl) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.productType, other.productType) &&
            Objects.deepEquals(this.sellerCountry, other.sellerCountry);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            quantity,
            unitAmount,
            discountAmount,
            taxAmount,
            externalIdentifier,
            sku,
            productUrl,
            imageUrl,
            categories,
            productType,
            sellerCountry);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CartItem.class,
                "name", name,
                "quantity", quantity,
                "unitAmount", unitAmount,
                "discountAmount", discountAmount,
                "taxAmount", taxAmount,
                "externalIdentifier", externalIdentifier,
                "sku", sku,
                "productUrl", productUrl,
                "imageUrl", imageUrl,
                "categories", categories,
                "productType", productType,
                "sellerCountry", sellerCountry);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Long quantity;
 
        private Long unitAmount;
 
        private JsonNullable<Long> discountAmount = JsonNullable.undefined();
 
        private JsonNullable<Long> taxAmount = JsonNullable.undefined();
 
        private JsonNullable<String> externalIdentifier = JsonNullable.undefined();
 
        private JsonNullable<String> sku = JsonNullable.undefined();
 
        private JsonNullable<String> productUrl = JsonNullable.undefined();
 
        private JsonNullable<String> imageUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> categories = JsonNullable.undefined();
 
        private JsonNullable<? extends ProductType> productType = JsonNullable.undefined();
 
        private JsonNullable<String> sellerCountry = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The quantity of this item in the cart. This value cannot be negative or zero.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
         */
        public Builder unitAmount(long unitAmount) {
            Utils.checkNotNull(unitAmount, "unitAmount");
            this.unitAmount = unitAmount;
            return this;
        }

        /**
         * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder discountAmount(long discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder discountAmount(JsonNullable<Long> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder taxAmount(long taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
         */
        public Builder taxAmount(JsonNullable<Long> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
         */
        public Builder externalIdentifier(String externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = JsonNullable.of(externalIdentifier);
            return this;
        }

        /**
         * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
         */
        public Builder externalIdentifier(JsonNullable<String> externalIdentifier) {
            Utils.checkNotNull(externalIdentifier, "externalIdentifier");
            this.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * The SKU for the item.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The SKU for the item.
         */
        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * The product URL for the item.
         */
        public Builder productUrl(String productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = JsonNullable.of(productUrl);
            return this;
        }

        /**
         * The product URL for the item.
         */
        public Builder productUrl(JsonNullable<String> productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = productUrl;
            return this;
        }

        /**
         * The URL for the image of the item.
         */
        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = JsonNullable.of(imageUrl);
            return this;
        }

        /**
         * The URL for the image of the item.
         */
        public Builder imageUrl(JsonNullable<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        /**
         * A list of strings containing product categories for the item.
         */
        public Builder categories(List<String> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = JsonNullable.of(categories);
            return this;
        }

        /**
         * A list of strings containing product categories for the item.
         */
        public Builder categories(JsonNullable<? extends List<String>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * The product type of the cart item.
         */
        public Builder productType(ProductType productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = JsonNullable.of(productType);
            return this;
        }

        /**
         * The product type of the cart item.
         */
        public Builder productType(JsonNullable<? extends ProductType> productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = productType;
            return this;
        }

        /**
         * The seller country of the cart item.
         */
        public Builder sellerCountry(String sellerCountry) {
            Utils.checkNotNull(sellerCountry, "sellerCountry");
            this.sellerCountry = JsonNullable.of(sellerCountry);
            return this;
        }

        /**
         * The seller country of the cart item.
         */
        public Builder sellerCountry(JsonNullable<String> sellerCountry) {
            Utils.checkNotNull(sellerCountry, "sellerCountry");
            this.sellerCountry = sellerCountry;
            return this;
        }
        
        public CartItem build() {
            return new CartItem(
                name,
                quantity,
                unitAmount,
                discountAmount,
                taxAmount,
                externalIdentifier,
                sku,
                productUrl,
                imageUrl,
                categories,
                productType,
                sellerCountry);
        }
    }
}
