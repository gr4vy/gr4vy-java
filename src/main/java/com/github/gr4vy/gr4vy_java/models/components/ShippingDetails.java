/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ShippingDetails {

    /**
     * The first name(s) or given name for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name, or family name, of the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The email address for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    private JsonNullable<String> emailAddress;

    /**
     * The phone number for the buyer which should be formatted according to the E164 number standard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private JsonNullable<String> phoneNumber;

    /**
     * The billing address for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private JsonNullable<? extends Address> address;

    /**
     * The ID for the shipping details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The ID for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_id")
    private JsonNullable<String> buyerId;

    /**
     * Always `shipping-details`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public ShippingDetails(
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("email_address") JsonNullable<String> emailAddress,
            @JsonProperty("phone_number") JsonNullable<String> phoneNumber,
            @JsonProperty("address") JsonNullable<? extends Address> address,
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("buyer_id") JsonNullable<String> buyerId) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(buyerId, "buyerId");
        this.firstName = firstName;
        this.lastName = lastName;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.id = id;
        this.buyerId = buyerId;
        this.type = Builder._SINGLETON_VALUE_Type.value();
    }
    
    public ShippingDetails() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The first name(s) or given name for the buyer.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name, or family name, of the buyer.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The email address for the buyer.
     */
    @JsonIgnore
    public JsonNullable<String> emailAddress() {
        return emailAddress;
    }

    /**
     * The phone number for the buyer which should be formatted according to the E164 number standard.
     */
    @JsonIgnore
    public JsonNullable<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * The billing address for the buyer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Address> address() {
        return (JsonNullable<Address>) address;
    }

    /**
     * The ID for the shipping details.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The ID for the buyer.
     */
    @JsonIgnore
    public JsonNullable<String> buyerId() {
        return buyerId;
    }

    /**
     * Always `shipping-details`.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The first name(s) or given name for the buyer.
     */
    public ShippingDetails withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name(s) or given name for the buyer.
     */
    public ShippingDetails withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name, or family name, of the buyer.
     */
    public ShippingDetails withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name, or family name, of the buyer.
     */
    public ShippingDetails withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The email address for the buyer.
     */
    public ShippingDetails withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = JsonNullable.of(emailAddress);
        return this;
    }

    /**
     * The email address for the buyer.
     */
    public ShippingDetails withEmailAddress(JsonNullable<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * The phone number for the buyer which should be formatted according to the E164 number standard.
     */
    public ShippingDetails withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = JsonNullable.of(phoneNumber);
        return this;
    }

    /**
     * The phone number for the buyer which should be formatted according to the E164 number standard.
     */
    public ShippingDetails withPhoneNumber(JsonNullable<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The billing address for the buyer.
     */
    public ShippingDetails withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = JsonNullable.of(address);
        return this;
    }

    /**
     * The billing address for the buyer.
     */
    public ShippingDetails withAddress(JsonNullable<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * The ID for the shipping details.
     */
    public ShippingDetails withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The ID for the shipping details.
     */
    public ShippingDetails withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID for the buyer.
     */
    public ShippingDetails withBuyerId(String buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = JsonNullable.of(buyerId);
        return this;
    }

    /**
     * The ID for the buyer.
     */
    public ShippingDetails withBuyerId(JsonNullable<String> buyerId) {
        Utils.checkNotNull(buyerId, "buyerId");
        this.buyerId = buyerId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShippingDetails other = (ShippingDetails) o;
        return 
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.buyerId, other.buyerId) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            firstName,
            lastName,
            emailAddress,
            phoneNumber,
            address,
            id,
            buyerId,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShippingDetails.class,
                "firstName", firstName,
                "lastName", lastName,
                "emailAddress", emailAddress,
                "phoneNumber", phoneNumber,
                "address", address,
                "id", id,
                "buyerId", buyerId,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> emailAddress = JsonNullable.undefined();
 
        private JsonNullable<String> phoneNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends Address> address = JsonNullable.undefined();
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> buyerId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The first name(s) or given name for the buyer.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name(s) or given name for the buyer.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name, or family name, of the buyer.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name, or family name, of the buyer.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The email address for the buyer.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = JsonNullable.of(emailAddress);
            return this;
        }

        /**
         * The email address for the buyer.
         */
        public Builder emailAddress(JsonNullable<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * The phone number for the buyer which should be formatted according to the E164 number standard.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = JsonNullable.of(phoneNumber);
            return this;
        }

        /**
         * The phone number for the buyer which should be formatted according to the E164 number standard.
         */
        public Builder phoneNumber(JsonNullable<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * The billing address for the buyer.
         */
        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = JsonNullable.of(address);
            return this;
        }

        /**
         * The billing address for the buyer.
         */
        public Builder address(JsonNullable<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        /**
         * The ID for the shipping details.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID for the shipping details.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID for the buyer.
         */
        public Builder buyerId(String buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = JsonNullable.of(buyerId);
            return this;
        }

        /**
         * The ID for the buyer.
         */
        public Builder buyerId(JsonNullable<String> buyerId) {
            Utils.checkNotNull(buyerId, "buyerId");
            this.buyerId = buyerId;
            return this;
        }
        
        public ShippingDetails build() {
            return new ShippingDetails(
                firstName,
                lastName,
                emailAddress,
                phoneNumber,
                address,
                id,
                buyerId);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"shipping-details\"",
                        new TypeReference<Optional<String>>() {});
    }
}
