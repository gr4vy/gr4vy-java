/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class Address {

    /**
     * The city for the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * The country for the address in ISO 3166 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The postal code or zip code for the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * The state, county, or province for the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * The code of state, county, or province for the address in ISO 3166-2 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_code")
    private JsonNullable<String> stateCode;

    /**
     * The house number or name for the address. Not all payment services use this field but some do.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("house_number_or_name")
    private JsonNullable<String> houseNumberOrName;

    /**
     * The first line of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private JsonNullable<String> line1;

    /**
     * The second line of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private JsonNullable<String> line2;

    /**
     * The optional name of the company or organisation to add to the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    private JsonNullable<String> organization;

    @JsonCreator
    public Address(
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("postal_code") JsonNullable<String> postalCode,
            @JsonProperty("state") JsonNullable<String> state,
            @JsonProperty("state_code") JsonNullable<String> stateCode,
            @JsonProperty("house_number_or_name") JsonNullable<String> houseNumberOrName,
            @JsonProperty("line1") JsonNullable<String> line1,
            @JsonProperty("line2") JsonNullable<String> line2,
            @JsonProperty("organization") JsonNullable<String> organization) {
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(houseNumberOrName, "houseNumberOrName");
        Utils.checkNotNull(line1, "line1");
        Utils.checkNotNull(line2, "line2");
        Utils.checkNotNull(organization, "organization");
        this.city = city;
        this.country = country;
        this.postalCode = postalCode;
        this.state = state;
        this.stateCode = stateCode;
        this.houseNumberOrName = houseNumberOrName;
        this.line1 = line1;
        this.line2 = line2;
        this.organization = organization;
    }
    
    public Address() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The city for the address.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * The country for the address in ISO 3166 format.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The postal code or zip code for the address.
     */
    @JsonIgnore
    public JsonNullable<String> postalCode() {
        return postalCode;
    }

    /**
     * The state, county, or province for the address.
     */
    @JsonIgnore
    public JsonNullable<String> state() {
        return state;
    }

    /**
     * The code of state, county, or province for the address in ISO 3166-2 format.
     */
    @JsonIgnore
    public JsonNullable<String> stateCode() {
        return stateCode;
    }

    /**
     * The house number or name for the address. Not all payment services use this field but some do.
     */
    @JsonIgnore
    public JsonNullable<String> houseNumberOrName() {
        return houseNumberOrName;
    }

    /**
     * The first line of the address.
     */
    @JsonIgnore
    public JsonNullable<String> line1() {
        return line1;
    }

    /**
     * The second line of the address.
     */
    @JsonIgnore
    public JsonNullable<String> line2() {
        return line2;
    }

    /**
     * The optional name of the company or organisation to add to the address.
     */
    @JsonIgnore
    public JsonNullable<String> organization() {
        return organization;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The city for the address.
     */
    public Address withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * The city for the address.
     */
    public Address withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * The country for the address in ISO 3166 format.
     */
    public Address withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * The country for the address in ISO 3166 format.
     */
    public Address withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The postal code or zip code for the address.
     */
    public Address withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * The postal code or zip code for the address.
     */
    public Address withPostalCode(JsonNullable<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * The state, county, or province for the address.
     */
    public Address withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    /**
     * The state, county, or province for the address.
     */
    public Address withState(JsonNullable<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * The code of state, county, or province for the address in ISO 3166-2 format.
     */
    public Address withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = JsonNullable.of(stateCode);
        return this;
    }

    /**
     * The code of state, county, or province for the address in ISO 3166-2 format.
     */
    public Address withStateCode(JsonNullable<String> stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * The house number or name for the address. Not all payment services use this field but some do.
     */
    public Address withHouseNumberOrName(String houseNumberOrName) {
        Utils.checkNotNull(houseNumberOrName, "houseNumberOrName");
        this.houseNumberOrName = JsonNullable.of(houseNumberOrName);
        return this;
    }

    /**
     * The house number or name for the address. Not all payment services use this field but some do.
     */
    public Address withHouseNumberOrName(JsonNullable<String> houseNumberOrName) {
        Utils.checkNotNull(houseNumberOrName, "houseNumberOrName");
        this.houseNumberOrName = houseNumberOrName;
        return this;
    }

    /**
     * The first line of the address.
     */
    public Address withLine1(String line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = JsonNullable.of(line1);
        return this;
    }

    /**
     * The first line of the address.
     */
    public Address withLine1(JsonNullable<String> line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = line1;
        return this;
    }

    /**
     * The second line of the address.
     */
    public Address withLine2(String line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = JsonNullable.of(line2);
        return this;
    }

    /**
     * The second line of the address.
     */
    public Address withLine2(JsonNullable<String> line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = line2;
        return this;
    }

    /**
     * The optional name of the company or organisation to add to the address.
     */
    public Address withOrganization(String organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = JsonNullable.of(organization);
        return this;
    }

    /**
     * The optional name of the company or organisation to add to the address.
     */
    public Address withOrganization(JsonNullable<String> organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Address other = (Address) o;
        return 
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.stateCode, other.stateCode) &&
            Objects.deepEquals(this.houseNumberOrName, other.houseNumberOrName) &&
            Objects.deepEquals(this.line1, other.line1) &&
            Objects.deepEquals(this.line2, other.line2) &&
            Objects.deepEquals(this.organization, other.organization);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            city,
            country,
            postalCode,
            state,
            stateCode,
            houseNumberOrName,
            line1,
            line2,
            organization);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Address.class,
                "city", city,
                "country", country,
                "postalCode", postalCode,
                "state", state,
                "stateCode", stateCode,
                "houseNumberOrName", houseNumberOrName,
                "line1", line1,
                "line2", line2,
                "organization", organization);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> city = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> postalCode = JsonNullable.undefined();
 
        private JsonNullable<String> state = JsonNullable.undefined();
 
        private JsonNullable<String> stateCode = JsonNullable.undefined();
 
        private JsonNullable<String> houseNumberOrName = JsonNullable.undefined();
 
        private JsonNullable<String> line1 = JsonNullable.undefined();
 
        private JsonNullable<String> line2 = JsonNullable.undefined();
 
        private JsonNullable<String> organization = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The city for the address.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * The city for the address.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * The country for the address in ISO 3166 format.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * The country for the address in ISO 3166 format.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The postal code or zip code for the address.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * The postal code or zip code for the address.
         */
        public Builder postalCode(JsonNullable<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * The state, county, or province for the address.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * The state, county, or province for the address.
         */
        public Builder state(JsonNullable<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * The code of state, county, or province for the address in ISO 3166-2 format.
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = JsonNullable.of(stateCode);
            return this;
        }

        /**
         * The code of state, county, or province for the address in ISO 3166-2 format.
         */
        public Builder stateCode(JsonNullable<String> stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }

        /**
         * The house number or name for the address. Not all payment services use this field but some do.
         */
        public Builder houseNumberOrName(String houseNumberOrName) {
            Utils.checkNotNull(houseNumberOrName, "houseNumberOrName");
            this.houseNumberOrName = JsonNullable.of(houseNumberOrName);
            return this;
        }

        /**
         * The house number or name for the address. Not all payment services use this field but some do.
         */
        public Builder houseNumberOrName(JsonNullable<String> houseNumberOrName) {
            Utils.checkNotNull(houseNumberOrName, "houseNumberOrName");
            this.houseNumberOrName = houseNumberOrName;
            return this;
        }

        /**
         * The first line of the address.
         */
        public Builder line1(String line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = JsonNullable.of(line1);
            return this;
        }

        /**
         * The first line of the address.
         */
        public Builder line1(JsonNullable<String> line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = line1;
            return this;
        }

        /**
         * The second line of the address.
         */
        public Builder line2(String line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = JsonNullable.of(line2);
            return this;
        }

        /**
         * The second line of the address.
         */
        public Builder line2(JsonNullable<String> line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = line2;
            return this;
        }

        /**
         * The optional name of the company or organisation to add to the address.
         */
        public Builder organization(String organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = JsonNullable.of(organization);
            return this;
        }

        /**
         * The optional name of the company or organisation to add to the address.
         */
        public Builder organization(JsonNullable<String> organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }
        
        public Address build() {
            return new Address(
                city,
                country,
                postalCode,
                state,
                stateCode,
                houseNumberOrName,
                line1,
                line2,
                organization);
        }
    }
}
