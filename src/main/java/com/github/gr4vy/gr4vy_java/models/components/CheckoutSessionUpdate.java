/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CheckoutSessionUpdate {

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cart_items")
    private JsonNullable<? extends List<CartItem>> cartItems;

    /**
     * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    /**
     * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    private JsonNullable<? extends GuestBuyerInput> buyer;

    /**
     * The airline addendum data which describes the airline booking associated with this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("airline")
    private JsonNullable<? extends Airline> airline;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    private Optional<Double> expiresIn;

    @JsonCreator
    public CheckoutSessionUpdate(
            @JsonProperty("cart_items") JsonNullable<? extends List<CartItem>> cartItems,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("buyer") JsonNullable<? extends GuestBuyerInput> buyer,
            @JsonProperty("airline") JsonNullable<? extends Airline> airline,
            @JsonProperty("expires_in") Optional<Double> expiresIn) {
        Utils.checkNotNull(cartItems, "cartItems");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(buyer, "buyer");
        Utils.checkNotNull(airline, "airline");
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.cartItems = cartItems;
        this.metadata = metadata;
        this.buyer = buyer;
        this.airline = airline;
        this.expiresIn = expiresIn;
    }
    
    public CheckoutSessionUpdate() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CartItem>> cartItems() {
        return (JsonNullable<List<CartItem>>) cartItems;
    }

    /**
     * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    /**
     * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GuestBuyerInput> buyer() {
        return (JsonNullable<GuestBuyerInput>) buyer;
    }

    /**
     * The airline addendum data which describes the airline booking associated with this transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Airline> airline() {
        return (JsonNullable<Airline>) airline;
    }

    @JsonIgnore
    public Optional<Double> expiresIn() {
        return expiresIn;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    public CheckoutSessionUpdate withCartItems(List<CartItem> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = JsonNullable.of(cartItems);
        return this;
    }

    /**
     * An array of cart items that represents the line items of a transaction.
     */
    public CheckoutSessionUpdate withCartItems(JsonNullable<? extends List<CartItem>> cartItems) {
        Utils.checkNotNull(cartItems, "cartItems");
        this.cartItems = cartItems;
        return this;
    }

    /**
     * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
     */
    public CheckoutSessionUpdate withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
     */
    public CheckoutSessionUpdate withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
     */
    public CheckoutSessionUpdate withBuyer(GuestBuyerInput buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = JsonNullable.of(buyer);
        return this;
    }

    /**
     * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
     */
    public CheckoutSessionUpdate withBuyer(JsonNullable<? extends GuestBuyerInput> buyer) {
        Utils.checkNotNull(buyer, "buyer");
        this.buyer = buyer;
        return this;
    }

    /**
     * The airline addendum data which describes the airline booking associated with this transaction.
     */
    public CheckoutSessionUpdate withAirline(Airline airline) {
        Utils.checkNotNull(airline, "airline");
        this.airline = JsonNullable.of(airline);
        return this;
    }

    /**
     * The airline addendum data which describes the airline booking associated with this transaction.
     */
    public CheckoutSessionUpdate withAirline(JsonNullable<? extends Airline> airline) {
        Utils.checkNotNull(airline, "airline");
        this.airline = airline;
        return this;
    }

    public CheckoutSessionUpdate withExpiresIn(double expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = Optional.ofNullable(expiresIn);
        return this;
    }

    public CheckoutSessionUpdate withExpiresIn(Optional<Double> expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckoutSessionUpdate other = (CheckoutSessionUpdate) o;
        return 
            Objects.deepEquals(this.cartItems, other.cartItems) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.buyer, other.buyer) &&
            Objects.deepEquals(this.airline, other.airline) &&
            Objects.deepEquals(this.expiresIn, other.expiresIn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cartItems,
            metadata,
            buyer,
            airline,
            expiresIn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CheckoutSessionUpdate.class,
                "cartItems", cartItems,
                "metadata", metadata,
                "buyer", buyer,
                "airline", airline,
                "expiresIn", expiresIn);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends List<CartItem>> cartItems = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private JsonNullable<? extends GuestBuyerInput> buyer = JsonNullable.undefined();
 
        private JsonNullable<? extends Airline> airline = JsonNullable.undefined();
 
        private Optional<Double> expiresIn;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of cart items that represents the line items of a transaction.
         */
        public Builder cartItems(List<CartItem> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = JsonNullable.of(cartItems);
            return this;
        }

        /**
         * An array of cart items that represents the line items of a transaction.
         */
        public Builder cartItems(JsonNullable<? extends List<CartItem>> cartItems) {
            Utils.checkNotNull(cartItems, "cartItems");
            this.cartItems = cartItems;
            return this;
        }

        /**
         * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
         */
        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
         */
        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
         */
        public Builder buyer(GuestBuyerInput buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = JsonNullable.of(buyer);
            return this;
        }

        /**
         * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
         */
        public Builder buyer(JsonNullable<? extends GuestBuyerInput> buyer) {
            Utils.checkNotNull(buyer, "buyer");
            this.buyer = buyer;
            return this;
        }

        /**
         * The airline addendum data which describes the airline booking associated with this transaction.
         */
        public Builder airline(Airline airline) {
            Utils.checkNotNull(airline, "airline");
            this.airline = JsonNullable.of(airline);
            return this;
        }

        /**
         * The airline addendum data which describes the airline booking associated with this transaction.
         */
        public Builder airline(JsonNullable<? extends Airline> airline) {
            Utils.checkNotNull(airline, "airline");
            this.airline = airline;
            return this;
        }

        public Builder expiresIn(double expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = Optional.ofNullable(expiresIn);
            return this;
        }

        public Builder expiresIn(Optional<Double> expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }
        
        public CheckoutSessionUpdate build() {
            if (expiresIn == null) {
                expiresIn = _SINGLETON_VALUE_ExpiresIn.value();
            }
            return new CheckoutSessionUpdate(
                cartItems,
                metadata,
                buyer,
                airline,
                expiresIn);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_ExpiresIn =
                new LazySingletonValue<>(
                        "expires_in",
                        "3600",
                        new TypeReference<Optional<Double>>() {});
    }
}
