/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.github.gr4vy.gr4vy_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.github.gr4vy.gr4vy_java.utils.LazySingletonValue;
import com.github.gr4vy.gr4vy_java.utils.SpeakeasyMetadata;
import com.github.gr4vy.gr4vy_java.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class SuspendPaymentMethodNetworkTokenRequest {

    /**
     * The ID of the payment method
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=payment_method_id")
    private String paymentMethodId;

    /**
     * The ID of the network token
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=network_token_id")
    private String networkTokenId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeout_in_seconds")
    private Optional<Double> timeoutInSeconds;

    /**
     * The ID of the merchant account to use for this request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-gr4vy-merchant-account-id")
    private JsonNullable<String> xGr4vyMerchantAccountId;

    @JsonCreator
    public SuspendPaymentMethodNetworkTokenRequest(
            String paymentMethodId,
            String networkTokenId,
            Optional<Double> timeoutInSeconds,
            JsonNullable<String> xGr4vyMerchantAccountId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(networkTokenId, "networkTokenId");
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.paymentMethodId = paymentMethodId;
        this.networkTokenId = networkTokenId;
        this.timeoutInSeconds = timeoutInSeconds;
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
    }
    
    public SuspendPaymentMethodNetworkTokenRequest(
            String paymentMethodId,
            String networkTokenId) {
        this(paymentMethodId, networkTokenId, Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The ID of the payment method
     */
    @JsonIgnore
    public String paymentMethodId() {
        return paymentMethodId;
    }

    /**
     * The ID of the network token
     */
    @JsonIgnore
    public String networkTokenId() {
        return networkTokenId;
    }

    @JsonIgnore
    public Optional<Double> timeoutInSeconds() {
        return timeoutInSeconds;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    @JsonIgnore
    public JsonNullable<String> xGr4vyMerchantAccountId() {
        return xGr4vyMerchantAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the payment method
     */
    public SuspendPaymentMethodNetworkTokenRequest withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    /**
     * The ID of the network token
     */
    public SuspendPaymentMethodNetworkTokenRequest withNetworkTokenId(String networkTokenId) {
        Utils.checkNotNull(networkTokenId, "networkTokenId");
        this.networkTokenId = networkTokenId;
        return this;
    }

    public SuspendPaymentMethodNetworkTokenRequest withTimeoutInSeconds(double timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
        return this;
    }

    public SuspendPaymentMethodNetworkTokenRequest withTimeoutInSeconds(Optional<Double> timeoutInSeconds) {
        Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public SuspendPaymentMethodNetworkTokenRequest withXGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
        return this;
    }

    /**
     * The ID of the merchant account to use for this request.
     */
    public SuspendPaymentMethodNetworkTokenRequest withXGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
        Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
        this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuspendPaymentMethodNetworkTokenRequest other = (SuspendPaymentMethodNetworkTokenRequest) o;
        return 
            Objects.deepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Objects.deepEquals(this.networkTokenId, other.networkTokenId) &&
            Objects.deepEquals(this.timeoutInSeconds, other.timeoutInSeconds) &&
            Objects.deepEquals(this.xGr4vyMerchantAccountId, other.xGr4vyMerchantAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentMethodId,
            networkTokenId,
            timeoutInSeconds,
            xGr4vyMerchantAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SuspendPaymentMethodNetworkTokenRequest.class,
                "paymentMethodId", paymentMethodId,
                "networkTokenId", networkTokenId,
                "timeoutInSeconds", timeoutInSeconds,
                "xGr4vyMerchantAccountId", xGr4vyMerchantAccountId);
    }
    
    public final static class Builder {
 
        private String paymentMethodId;
 
        private String networkTokenId;
 
        private Optional<Double> timeoutInSeconds;
 
        private JsonNullable<String> xGr4vyMerchantAccountId = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the payment method
         */
        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }

        /**
         * The ID of the network token
         */
        public Builder networkTokenId(String networkTokenId) {
            Utils.checkNotNull(networkTokenId, "networkTokenId");
            this.networkTokenId = networkTokenId;
            return this;
        }

        public Builder timeoutInSeconds(double timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = Optional.ofNullable(timeoutInSeconds);
            return this;
        }

        public Builder timeoutInSeconds(Optional<Double> timeoutInSeconds) {
            Utils.checkNotNull(timeoutInSeconds, "timeoutInSeconds");
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(String xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = JsonNullable.of(xGr4vyMerchantAccountId);
            return this;
        }

        /**
         * The ID of the merchant account to use for this request.
         */
        public Builder xGr4vyMerchantAccountId(JsonNullable<String> xGr4vyMerchantAccountId) {
            Utils.checkNotNull(xGr4vyMerchantAccountId, "xGr4vyMerchantAccountId");
            this.xGr4vyMerchantAccountId = xGr4vyMerchantAccountId;
            return this;
        }
        
        public SuspendPaymentMethodNetworkTokenRequest build() {
            if (timeoutInSeconds == null) {
                timeoutInSeconds = _SINGLETON_VALUE_TimeoutInSeconds.value();
            }
            return new SuspendPaymentMethodNetworkTokenRequest(
                paymentMethodId,
                networkTokenId,
                timeoutInSeconds,
                xGr4vyMerchantAccountId);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TimeoutInSeconds =
                new LazySingletonValue<>(
                        "timeout_in_seconds",
                        "1",
                        new TypeReference<Optional<Double>>() {});
    }
}
