{
  "openapi": "3.1.0",
  "info": {
    "title": "Gr4vy",
    "description": "The Gr4vy API.",
    "version": "1.0.0"
  },
  "paths": {
    "/account-updater/jobs": {
      "post": {
        "tags": [
          "Account updater"
        ],
        "summary": "Create account updater job",
        "description": "Schedule one or more stored cards for an account update.",
        "operationId": "create_account_updater_job",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdaterJobCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A scheduled account updater job when one or more payment methods were scheduled for update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUpdaterJob"
                }
              }
            }
          },
          "204": {
            "description": "Empty response when no payment methods were scheduled for update."
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Account Updater Job"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "account-updater.jobs"
      }
    },
    "/buyers/payment-methods": {
      "get": {
        "tags": [
          "Buyers - Payment methods"
        ],
        "summary": "List payment methods for a buyer",
        "description": "List all the stored payment methods for a specific buyer.",
        "operationId": "list_buyer_payment_methods",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.read",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the buyer to query payment methods for.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to query payment methods for."
          },
          {
            "name": "buyer_external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The external identifier of the buyer to query payment methods for.",
              "examples": [
                "buyer-12345"
              ],
              "title": "Buyer External Identifier"
            },
            "description": "The external identifier of the buyer to query payment methods for."
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "const": "last_used_at",
                  "type": "string"
                },
                {
                  "const": "usage_count",
                  "type": "string"
                },
                {
                  "const": "cit_last_used_at",
                  "type": "string"
                },
                {
                  "const": "cit_usage_count",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The field to sort the payment methods by.",
              "examples": [
                "last_used_at"
              ],
              "title": "Sort By"
            },
            "description": "The field to sort the payment methods by."
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "description": "The direction to sort the payment methods in.",
              "examples": [
                "desc"
              ],
              "default": "desc",
              "title": "Order By"
            },
            "description": "The direction to sort the payment methods in."
          },
          {
            "name": "country",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[A-Z]{2}$",
                  "examples": [
                    "DE",
                    "GB",
                    "US"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "description": "The country code to filter payment methods by. This only applies to payment methods with a `country` value.",
              "examples": [
                "US"
              ],
              "title": "Country"
            },
            "description": "The country code to filter payment methods by. This only applies to payment methods with a `country` value."
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[A-Z]{3}$",
                  "examples": [
                    "EUR",
                    "GBP",
                    "USD"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "description": "The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.",
              "examples": [
                "USD"
              ],
              "title": "Currency"
            },
            "description": "The currency code to filter payment methods by. This only applies to payment methods with a `currency` value."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_PaymentMethodSummary_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Buyer Payment Methods"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "buyers.payment-methods"
      }
    },
    "/payment-methods": {
      "get": {
        "tags": [
          "Payment methods"
        ],
        "summary": "List all payment methods",
        "description": "List all stored payment method.",
        "operationId": "list_payment_methods",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          },
          {
            "name": "buyer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the buyer to filter payment methods by.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to filter payment methods by."
          },
          {
            "name": "buyer_external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The external identifier of the buyer to filter payment methods by.",
              "examples": [
                "buyer-12345"
              ],
              "title": "Buyer External Identifier"
            },
            "description": "The external identifier of the buyer to filter payment methods by."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodStatus"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The external identifier of the payment method to filter by.",
              "examples": [
                "payment-method-12345"
              ],
              "title": "External Identifier"
            },
            "description": "The external identifier of the payment method to filter by."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_PaymentMethod_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Payment Methods"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "payment-methods",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      },
      "post": {
        "tags": [
          "Payment methods"
        ],
        "summary": "Create payment method",
        "description": "Store a new payment method.",
        "operationId": "create_payment_method",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CardPaymentMethodCreate"
                  },
                  {
                    "$ref": "#/components/schemas/RedirectPaymentMethodCreate"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutSessionPaymentMethodCreate"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payment Method"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "payment-methods"
      }
    },
    "/payment-methods/{payment_method_id}": {
      "get": {
        "tags": [
          "Payment methods"
        ],
        "summary": "Get payment method",
        "description": "Retrieve a payment method.",
        "operationId": "get_payment_method",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Payment Method"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "payment-methods"
      },
      "delete": {
        "tags": [
          "Payment methods"
        ],
        "summary": "Delete payment method",
        "description": "Delete a payment method.",
        "operationId": "delete_payment_method",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Payment Method"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "payment-methods"
      }
    },
    "/payment-methods/{payment_method_id}/payment-service-tokens": {
      "get": {
        "tags": [
          "Payment methods - Payment service tokens"
        ],
        "summary": "List payment service tokens",
        "description": "List all gateway tokens stored for a payment method.",
        "operationId": "list_payment_method_payment_service_tokens",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "payment_service_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the payment service",
              "examples": [
                "fffd152a-9532-4087-9a4f-de58754210f0"
              ],
              "title": "Payment Service Id"
            },
            "description": "The ID of the payment service"
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_PaymentServiceToken_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Payment Method Payment Service Tokens"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "payment-methods.payment-service-tokens"
      },
      "post": {
        "tags": [
          "Payment methods - Payment service tokens"
        ],
        "summary": "Create payment service token",
        "description": "Create a gateway tokens for a payment method.",
        "operationId": "create_payment_method_payment_service_token",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentServiceTokenCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServiceToken"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payment Method Payment Service Token"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "payment-methods.payment-service-tokens"
      }
    },
    "/payment-methods/{payment_method_id}/payment-service-tokens/{payment_service_token_id}": {
      "delete": {
        "tags": [
          "Payment methods - Payment service tokens"
        ],
        "summary": "Delete payment service token",
        "description": "Delete a gateway tokens for a payment method.",
        "operationId": "delete_payment_method_payment_service_token",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "payment_service_token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment service token",
              "examples": [
                "703f2d99-3fd1-44bc-9cbd-a25a2d597886"
              ],
              "title": "Payment Service Token Id"
            },
            "description": "The ID of the payment service token"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Payment Method Payment Service Token"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "payment-methods.payment-service-tokens"
      }
    },
    "/payment-methods/{payment_method_id}/network-tokens": {
      "get": {
        "tags": [
          "Payment methods - Network tokens"
        ],
        "summary": "List network tokens",
        "description": "List all network tokens stored for a payment method.",
        "operationId": "list_payment_method_network_tokens",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_NetworkToken_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Payment Method Network Tokens"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "payment-methods.network-tokens"
      },
      "post": {
        "tags": [
          "Payment methods - Network tokens"
        ],
        "summary": "Provision network token",
        "description": "Provision a network token for a payment method.",
        "operationId": "create_payment_method_network_token",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkTokenCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkToken"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payment Method Network Token"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "payment-methods.network-tokens"
      }
    },
    "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/cryptogram": {
      "post": {
        "tags": [
          "Payment methods - Network tokens"
        ],
        "summary": "Provision network token cryptogram",
        "description": "Provision a cryptogram for a network token.",
        "operationId": "create_payment_method_network_token_cryptogram",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "network_token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the network token",
              "examples": [
                "f8dd5cfc-7834-4847-95dc-f75a360e2298"
              ],
              "title": "Network Token Id"
            },
            "description": "The ID of the network token"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CryptogramCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptogram"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payment Method Network Token Cryptogram"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "payment-methods.network-tokens.cryptogram"
      }
    },
    "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/suspend": {
      "post": {
        "tags": [
          "Payment methods - Network tokens"
        ],
        "summary": "Suspend network token",
        "description": "Suspend a network token for a payment method.",
        "operationId": "suspend_payment_method_network_token",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "network_token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the network token",
              "examples": [
                "f8dd5cfc-7834-4847-95dc-f75a360e2298"
              ],
              "title": "Network Token Id"
            },
            "description": "The ID of the network token"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkToken"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Suspend Payment Method Network Token"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "suspend",
        "x-speakeasy-group": "payment-methods.network-tokens"
      }
    },
    "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/resume": {
      "post": {
        "tags": [
          "Payment methods - Network tokens"
        ],
        "summary": "Resume network token",
        "description": "Resume a suspended network token for a payment method.",
        "operationId": "resume_payment_method_network_token",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "network_token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the network token",
              "examples": [
                "f8dd5cfc-7834-4847-95dc-f75a360e2298"
              ],
              "title": "Network Token Id"
            },
            "description": "The ID of the network token"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkToken"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Resume Payment Method Network Token"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "resume",
        "x-speakeasy-group": "payment-methods.network-tokens"
      }
    },
    "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}": {
      "delete": {
        "tags": [
          "Payment methods - Network tokens"
        ],
        "summary": "Delete network token",
        "description": "Delete a network token for a payment method.",
        "operationId": "delete_payment_method_network_token",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-methods.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the payment method",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            },
            "description": "The ID of the payment method"
          },
          {
            "name": "network_token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the network token",
              "examples": [
                "f8dd5cfc-7834-4847-95dc-f75a360e2298"
              ],
              "title": "Network Token Id"
            },
            "description": "The ID of the network token"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Payment Method Network Token"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "payment-methods.network-tokens"
      }
    },
    "/gift-cards/balances": {
      "post": {
        "tags": [
          "Gift cards"
        ],
        "summary": "List gift card balances",
        "description": "Fetch the balances for one or more gift cards.",
        "operationId": "list_gift_card_balances",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "gift-cards.read",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftCardBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_GiftCardSummary_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Gift Card Balances"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "gift-cards.balances"
      }
    },
    "/gift-cards/{gift_card_id}": {
      "get": {
        "tags": [
          "Gift cards"
        ],
        "summary": "Get gift card",
        "description": "Fetch details about a gift card.",
        "operationId": "get_gift_card",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "gift-cards.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "gift_card_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the gift card.",
              "examples": [
                "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
              ],
              "title": "Gift Card Id"
            },
            "description": "The ID of the gift card."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GiftCard"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Gift Card"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "gift-cards"
      },
      "delete": {
        "tags": [
          "Buyers - Gift cards"
        ],
        "summary": "Delete a gift card",
        "description": "Removes a gift card from our system.",
        "operationId": "delete_gift_card",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "gift-cards.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "gift_card_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the gift card.",
              "examples": [
                "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
              ],
              "title": "Gift Card Id"
            },
            "description": "The ID of the gift card."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Gift Card"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "gift-cards"
      }
    },
    "/gift-cards": {
      "post": {
        "tags": [
          "Gift cards"
        ],
        "summary": "Create gift card",
        "description": "Store a new gift card in the vault.",
        "operationId": "create_gift_card",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "gift-cards.write",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftCardCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GiftCard"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Gift Card"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "gift-cards"
      },
      "get": {
        "tags": [
          "Gift cards"
        ],
        "summary": "List gift cards",
        "description": "Browser all gift cards.",
        "operationId": "list_gift_cards",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "gift-cards.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Buyer External Identifier"
            }
          },
          {
            "name": "buyer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Buyer Id"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cursor"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_GiftCard_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Gift Cards"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "gift-cards",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      }
    },
    "/buyers/gift-cards": {
      "get": {
        "tags": [
          "Buyers - Gift cards"
        ],
        "summary": "List gift cards for a buyer",
        "description": "List all the stored gift cards for a specific buyer.",
        "operationId": "list_buyer_gift_cards",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "gift-cards.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Buyer External Identifier"
            }
          },
          {
            "name": "buyer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Buyer Id"
            }
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_GiftCardSummary_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Buyer Gift Cards"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "buyers.gift-cards"
      }
    },
    "/buyers": {
      "get": {
        "tags": [
          "Buyers"
        ],
        "summary": "List all buyers",
        "description": "List all buyers or search for a specific buyer.",
        "operationId": "list_buyers",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the buyers for which the `display_name` or `external_identifier` matches this value.",
              "examples": [
                "John"
              ],
              "title": "Search"
            },
            "description": "Filters the results to only the buyers for which the `display_name` or `external_identifier` matches this value."
          },
          {
            "name": "external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the buyers for which the `external_identifier` matches this value.",
              "examples": [
                "buyer-12345"
              ],
              "title": "External Identifier"
            },
            "description": "Filters the results to only the buyers for which the `external_identifier` matches this value."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_Buyer_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Buyers"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "buyers",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      },
      "post": {
        "tags": [
          "Buyers"
        ],
        "summary": "Add a buyer",
        "description": "Create a new buyer record.",
        "operationId": "add_buyer",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Add Buyer"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "buyers"
      }
    },
    "/buyers/{buyer_id}": {
      "get": {
        "tags": [
          "Buyers"
        ],
        "summary": "Get a buyer",
        "description": "Fetches a buyer by its ID.",
        "operationId": "get_buyer",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to retrieve.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to retrieve."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Buyer"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "buyers"
      },
      "put": {
        "tags": [
          "Buyers"
        ],
        "summary": "Update a buyer",
        "description": "Updates a buyer record.",
        "operationId": "update_buyer",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to edit.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to edit."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Update Buyer"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "buyers"
      },
      "delete": {
        "tags": [
          "Buyers"
        ],
        "summary": "Delete a buyer",
        "description": "Permanently removes a buyer record.",
        "operationId": "delete_buyer",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to delete.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to delete."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Buyer"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "buyers"
      }
    },
    "/buyers/{buyer_id}/shipping-details": {
      "post": {
        "tags": [
          "Buyers - Shipping details"
        ],
        "summary": "Add buyer shipping details",
        "description": "Associate shipping details to a buyer.",
        "operationId": "add_buyer_shipping_details",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to add shipping details to.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to add shipping details to."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingDetailsCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Add Buyer Shipping Details"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "buyers.shipping-details"
      },
      "get": {
        "tags": [
          "Buyers - Shipping details"
        ],
        "summary": "List a buyer's shipping details",
        "description": "List all the shipping details associated to a specific buyer.",
        "operationId": "list_buyer_shipping_details",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to retrieve shipping details for.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to retrieve shipping details for."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_ShippingDetails_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Buyer Shipping Details"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "buyers.shipping-details"
      }
    },
    "/buyers/{buyer_id}/shipping-details/{shipping_details_id}": {
      "get": {
        "tags": [
          "Buyers - Shipping details"
        ],
        "summary": "Get buyer shipping details",
        "description": "Get a buyer's shipping details.",
        "operationId": "get_buyer_shipping_details",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to retrieve shipping details for.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to retrieve shipping details for."
          },
          {
            "name": "shipping_details_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the shipping details to retrieve.",
              "examples": [
                "bf8c36ad-02d9-4904-b0f9-a230b149e341"
              ],
              "title": "Shipping Details Id"
            },
            "description": "The ID of the shipping details to retrieve."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Buyer Shipping Details"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "buyers.shipping-details"
      },
      "put": {
        "tags": [
          "Buyers - Shipping details"
        ],
        "summary": "Update a buyer's shipping details",
        "description": "Update the shipping details associated to a specific buyer.",
        "operationId": "update_buyer_shipping_details",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to update shipping details for.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to update shipping details for."
          },
          {
            "name": "shipping_details_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the shipping details to update.",
              "examples": [
                "bf8c36ad-02d9-4904-b0f9-a230b149e341"
              ],
              "title": "Shipping Details Id"
            },
            "description": "The ID of the shipping details to update."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingDetailsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Update Buyer Shipping Details"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "buyers.shipping-details"
      },
      "delete": {
        "tags": [
          "Buyers - Shipping details"
        ],
        "summary": "Delete a buyer's shipping details",
        "description": "Delete the shipping details associated to a specific buyer.",
        "operationId": "delete_buyer_shipping_details",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "buyers.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the buyer to delete shipping details for.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            },
            "description": "The ID of the buyer to delete shipping details for."
          },
          {
            "name": "shipping_details_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the shipping details to delete.",
              "examples": [
                "bf8c36ad-02d9-4904-b0f9-a230b149e341"
              ],
              "title": "Shipping Details Id"
            },
            "description": "The ID of the shipping details to delete."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Buyer Shipping Details"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "buyers.shipping-details"
      }
    },
    "/card-scheme-definitions": {
      "get": {
        "tags": [
          "Card scheme definitions"
        ],
        "summary": "List card scheme definitions",
        "description": "Fetch a list of the definitions of each card scheme.",
        "operationId": "list_card_scheme_definitions",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "card-scheme-definitions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_CardSchemeDefinition_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Card Scheme Definitions"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "card-scheme-definitions"
      }
    },
    "/digital-wallets": {
      "post": {
        "tags": [
          "Digital wallets - Setup"
        ],
        "summary": "Register digital wallet",
        "description": "Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.",
        "operationId": "configure_digital_wallet",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWalletCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalWallet"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Configure Digital Wallet"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "digital-wallets"
      },
      "get": {
        "tags": [
          "Digital wallets - Setup"
        ],
        "summary": "List digital wallets",
        "description": "List configured digital wallets.",
        "operationId": "list_digital_wallets",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_DigitalWallet_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Digital Wallets"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "digital-wallets"
      }
    },
    "/digital-wallets/{digital_wallet_id}": {
      "get": {
        "tags": [
          "Digital wallets - Setup"
        ],
        "summary": "Get digital wallet",
        "description": "Fetch the details a digital wallet.",
        "operationId": "get_digital_wallet",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "digital_wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the digital wallet to read.",
              "examples": [
                "1808f5e6-b49c-4db9-94fa-22371ea352f5"
              ],
              "title": "Digital Wallet Id"
            },
            "description": "The ID of the digital wallet to read."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalWallet"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Digital Wallet"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "digital-wallets"
      },
      "delete": {
        "tags": [
          "Digital wallets - Setup"
        ],
        "summary": "Delete digital wallet",
        "description": "Delete a configured digital wallet.",
        "operationId": "delete_digital_wallet",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "digital_wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the digital wallet to delete.",
              "examples": [
                "1808f5e6-b49c-4db9-94fa-22371ea352f5"
              ],
              "title": "Digital Wallet Id"
            },
            "description": "The ID of the digital wallet to delete."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Digital Wallet"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "digital-wallets"
      },
      "put": {
        "tags": [
          "Digital wallets - Setup"
        ],
        "summary": "Update digital wallet",
        "description": "Update a digital wallet.",
        "operationId": "update_digital_wallet",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "digital_wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the digital wallet to edit.",
              "examples": [
                "1808f5e6-b49c-4db9-94fa-22371ea352f5"
              ],
              "title": "Digital Wallet Id"
            },
            "description": "The ID of the digital wallet to edit."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWalletUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalWallet"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Update Digital Wallet"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "digital-wallets"
      }
    },
    "/digital-wallets/google/session": {
      "post": {
        "tags": [
          "Digital wallets - Sessions"
        ],
        "summary": "Create a Google Pay session",
        "description": "Create a session for use with Google Pay.",
        "operationId": "create_google_pay_digital_wallet_session",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.write",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GooglePaySessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GooglePaySession"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Google Pay Digital Wallet Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "google_pay",
        "x-speakeasy-group": "digital-wallets.sessions"
      }
    },
    "/digital-wallets/apple/session": {
      "post": {
        "tags": [
          "Digital wallets - Sessions"
        ],
        "summary": "Create a Apple Pay session",
        "description": "Create a session for use with Apple Pay.",
        "operationId": "create_apple_pay_digital_wallet_session",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.write",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplePaySessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePaySession"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Apple Pay Digital Wallet Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "apple_pay",
        "x-speakeasy-group": "digital-wallets.sessions"
      }
    },
    "/digital-wallets/{digital_wallet_id}/domains": {
      "post": {
        "tags": [
          "Digital wallets - Setup"
        ],
        "summary": "Register a digital wallet domain",
        "description": "Register a digital wallet domain (Apple Pay only).",
        "operationId": "register_digital_wallet_domain",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "digital_wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the digital wallet to remove a domain for.",
              "examples": [
                "1808f5e6-b49c-4db9-94fa-22371ea352f5"
              ],
              "title": "Digital Wallet Id"
            },
            "description": "The ID of the digital wallet to remove a domain for."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWalletDomain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Register Digital Wallet Domain"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "digital-wallets.domains"
      },
      "delete": {
        "tags": [
          "Digital wallets - Setup"
        ],
        "summary": "Remove a digital wallet domain",
        "description": "Remove a digital wallet domain (Apple Pay only).",
        "operationId": "unregister_digital_wallet_domain",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "digital-wallets.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "digital_wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "",
              "examples": [
                ""
              ],
              "title": "Digital Wallet Id"
            }
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWalletDomain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Unregister Digital Wallet Domain"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "digital-wallets.domains"
      }
    },
    "/digital-wallets/click-to-pay/session": {
      "post": {
        "tags": [
          "Digital wallets - Sessions"
        ],
        "summary": "Create a Click to Pay session",
        "description": "Create a session for use with Click to Pay.",
        "operationId": "create_click_to_pay_digital_wallet_session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClickToPaySessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClickToPaySession"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Click To Pay Digital Wallet Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "click_to_pay",
        "x-speakeasy-group": "digital-wallets.sessions"
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "List transactions",
        "description": "List all transactions for a specific merchant account sorted by most recently created.",
        "operationId": "list_transactions",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          },
          {
            "name": "created_at_lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only transactions created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.",
              "examples": [
                "2022-01-01T12:00:00+08:00"
              ],
              "title": "Created At Lte"
            },
            "description": "Filters the results to only transactions created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`."
          },
          {
            "name": "created_at_gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only transactions created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.",
              "examples": [
                "2022-01-01T12:00:00+08:00"
              ],
              "title": "Created At Gte"
            },
            "description": "Filters the results to only transactions created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`."
          },
          {
            "name": "updated_at_lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only transactions updated before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.",
              "examples": [
                "2022-01-01T12:00:00+08:00"
              ],
              "title": "Updated At Lte"
            },
            "description": "Filters the results to only transactions updated before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`."
          },
          {
            "name": "updated_at_gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only transactions updated after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.",
              "examples": [
                "2022-01-01T12:00:00+08:00"
              ],
              "title": "Updated At Gte"
            },
            "description": "Filters the results to only transactions updated after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`."
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have one of the following fields match exactly with the provided `search` value.",
              "examples": [
                "transaction-12345"
              ],
              "title": "Search"
            }
          },
          {
            "name": "buyer_external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the items for which the `buyer` has an `external_identifier` that exactly matches this value.",
              "examples": [
                "buyer-12345"
              ],
              "title": "Buyer External Identifier"
            }
          },
          {
            "name": "buyer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the items for which the `buyer` has an `id` that matches this value.",
              "examples": [
                "fe26475d-ec3e-4884-9553-f7356683f7f9"
              ],
              "title": "Buyer Id"
            }
          },
          {
            "name": "buyer_email_address",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the items for which the `buyer` has an `email_address` that matches this value.",
              "examples": [
                "john@example.com"
              ],
              "title": "Buyer Email Address"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionStatus"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the transactions that have a `status` that matches with any of the provided status values.",
              "examples": [
                "authorization_succeeded"
              ],
              "title": "Status"
            },
            "description": "Filters the results to only the transactions that have a `status` that matches with any of the provided status values."
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for the transaction that has a matching `id` value.",
              "examples": [
                "7099948d-7286-47e4-aad8-b68f7eb44591"
              ],
              "title": "Id"
            }
          },
          {
            "name": "payment_service_transaction_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have a matching `payment_service_transaction_id` value. The `payment_service_transaction_id` is the identifier of the transaction given by the payment service.",
              "examples": [
                "tx-12345"
              ],
              "title": "Payment Service Transaction Id"
            }
          },
          {
            "name": "external_identifier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the items for which the `external_identifier` matches this value.",
              "examples": [
                "transaction-12345"
              ],
              "title": "External Identifier"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions where their `metadata` values contain all of the provided `metadata` keys. The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be strings. This value should also be URL encoded.",
              "examples": [
                [
                  {
                    "first_key": "first_value",
                    "second_key": "second_value"
                  }
                ]
              ],
              "title": "Metadata"
            },
            "description": "Filters for transactions where their `metadata` values contain all of the provided `metadata` keys. The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be strings. This value should also be URL encoded."
          },
          {
            "name": "amount_eq",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.",
              "examples": [
                1299
              ],
              "title": "Amount Eq"
            },
            "description": "Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value."
          },
          {
            "name": "amount_lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.",
              "examples": [
                1299
              ],
              "title": "Amount Lte"
            },
            "description": "Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value."
          },
          {
            "name": "amount_gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte` value.",
              "examples": [
                1299
              ],
              "title": "Amount Gte"
            },
            "description": "Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte` value."
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[A-Z]{3}$",
                    "examples": [
                      "EUR",
                      "GBP",
                      "USD"
                    ]
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have matching `currency` values. The `currency` values provided must be formatted as 3-letter ISO currency code.",
              "examples": [
                [
                  "USD"
                ]
              ],
              "title": "Currency"
            },
            "description": "Filters for transactions that have matching `currency` values. The `currency` values provided must be formatted as 3-letter ISO currency code."
          },
          {
            "name": "payment_service_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that were processed by the provided `payment_service_id` values.",
              "examples": [
                [
                  "fffd152a-9532-4087-9a4f-de58754210f0"
                ]
              ],
              "title": "Payment Service Id"
            },
            "description": "Filters for transactions that were processed by the provided `payment_service_id` values."
          },
          {
            "name": "payment_method_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have a payment method with an ID that matches exactly with the provided value.",
              "examples": [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389"
              ],
              "title": "Payment Method Id"
            }
          },
          {
            "name": "payment_method_label",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have a payment method with a label that matches exactly with the provided value.",
              "examples": [
                "1234"
              ],
              "title": "Payment Method Label"
            }
          },
          {
            "name": "payment_method_fingerprint",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have a payment method with a fingerprint that matches exactly with the provided value",
              "examples": [
                "a50b85c200ee0795d6fd33a5c66f37a4564f554355c5b46a756aac485dd168a4"
              ],
              "title": "Payment Method Fingerprint"
            }
          },
          {
            "name": "method",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Method"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have matching `method` values.",
              "examples": [
                "card"
              ],
              "title": "Method"
            },
            "description": "Filters for transactions that have matching `method` values."
          },
          {
            "name": "error_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions where the `error_code` matches one for the provided values.",
              "examples": [
                [
                  "insufficient_funds"
                ]
              ],
              "title": "Error Code"
            },
            "description": "Filters for transactions where the `error_code` matches one for the provided values."
          },
          {
            "name": "has_refunds",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions with refunds.",
              "examples": [
                true
              ],
              "title": "Has Refunds"
            },
            "description": "Filters for transactions with refunds."
          },
          {
            "name": "pending_review",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions with a pending manual anti-fraud review.",
              "examples": [
                true
              ],
              "title": "Pending Review"
            },
            "description": "Filters for transactions with a pending manual anti-fraud review."
          },
          {
            "name": "checkout_session_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions where the `checkout_session_id` matches the provided value.",
              "examples": [
                "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
              ],
              "title": "Checkout Session Id"
            },
            "description": "Filters for transactions where the `checkout_session_id` matches the provided value."
          },
          {
            "name": "reconciliation_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions where the `reconciliation_id` matches the provided value.",
              "examples": [
                "7jZXl4gBUNl0CnaLEnfXbt"
              ],
              "title": "Reconciliation Id"
            },
            "description": "Filters for transactions where the `reconciliation_id` matches the provided value."
          },
          {
            "name": "has_gift_card_redemptions",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions with gift card redemptions.",
              "examples": [
                true
              ],
              "title": "Has Gift Card Redemptions"
            },
            "description": "Filters for transactions with gift card redemptions."
          },
          {
            "name": "gift_card_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions where a gift card used has an `id` that matches the provided value.",
              "examples": [
                "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
              ],
              "title": "Gift Card Id"
            },
            "description": "Filters for transactions where a gift card used has an `id` that matches the provided value."
          },
          {
            "name": "gift_card_last4",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 4,
                  "maxLength": 4
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have at least one gift card redemption where the last 4 digits of its gift card number matches exactly with the provided value.",
              "examples": [
                "7890"
              ],
              "title": "Gift Card Last4"
            },
            "description": "Filters for transactions that have at least one gift card redemption where the last 4 digits of its gift card number matches exactly with the provided value."
          },
          {
            "name": "has_settlements",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions that have at least one associated settlement record.",
              "examples": [
                true
              ],
              "title": "Has Settlements"
            },
            "description": "Filters for transactions that have at least one associated settlement record."
          },
          {
            "name": "payment_method_bin",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for transactions that have a card with a BIN that matches exactly with the provided value.",
              "examples": [
                "411111"
              ],
              "title": "Payment Method Bin"
            },
            "description": "Filter for transactions that have a card with a BIN that matches exactly with the provided value."
          },
          {
            "name": "payment_source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionPaymentSource"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the transactions that have a payment source that matches with any of the provided values.",
              "examples": [
                "recurring"
              ],
              "title": "Payment Source"
            },
            "description": "Filters the results to only the transactions that have a payment source that matches with any of the provided values."
          },
          {
            "name": "is_subsequent_payment",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions where the `is_subsequent_payment` matches the provided value.",
              "examples": [
                true
              ],
              "title": "Is Subsequent Payment"
            },
            "description": "Filters for transactions where the `is_subsequent_payment` matches the provided value."
          },
          {
            "name": "merchant_initiated",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters for transactions where the `merchant_initiated` matches the provided value.",
              "examples": [
                true
              ],
              "title": "Merchant Initiated"
            },
            "description": "Filters for transactions where the `merchant_initiated` matches the provided value."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_TransactionSummary_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Transactions"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "transactions",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create transaction",
        "description": "Create a transaction.",
        "operationId": "create_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.write",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A unique key that identifies this request. Providing this header will make this an idempotent request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid collisions.",
              "examples": [
                "request-12345"
              ],
              "title": "Idempotency-Key"
            },
            "description": "A unique key that identifies this request. Providing this header will make this an idempotent request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid collisions."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Transaction"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "transactions"
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction",
        "description": "Fetch a single transaction by its ID.",
        "operationId": "get_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Transaction Id"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Transaction"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "transactions"
      }
    },
    "/transactions/{transaction_id}/capture": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Capture transaction",
        "description": "Capture a previously authorized transaction.",
        "operationId": "capture_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Transaction Id"
            }
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCapture"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Capture Transaction"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "capture",
        "x-speakeasy-group": "transactions"
      }
    },
    "/transactions/{transaction_id}/refunds": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "List transaction refunds",
        "description": "List refunds for a transaction.",
        "operationId": "list_transaction_refunds",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": [
                "7099948d-7286-47e4-aad8-b68f7eb44591"
              ],
              "decription": "The ID of the transaction",
              "title": "Transaction Id"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_Refund_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Transaction Refunds"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "transactions.refunds"
      },
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Create transaction refund",
        "description": "Create a refund for a transaction.",
        "operationId": "create_transaction_refund",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": [
                "7099948d-7286-47e4-aad8-b68f7eb44591"
              ],
              "decription": "The ID of the transaction",
              "title": "Transaction Id"
            }
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRefundCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Transaction Refund"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "transactions.refunds"
      }
    },
    "/transactions/{transaction_id}/refunds/{refund_id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Get transaction refund",
        "description": "Fetch refund for a transaction.",
        "operationId": "get_transaction_refund",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": [
                "7099948d-7286-47e4-aad8-b68f7eb44591"
              ],
              "decription": "The ID of the transaction",
              "title": "Transaction Id"
            }
          },
          {
            "name": "refund_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": [
                "6a1d4e46-14ed-4fe1-a45f-eff4e025d211"
              ],
              "decription": "The ID of the refund",
              "title": "Refund Id"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Transaction Refund"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "transactions.refunds"
      }
    },
    "/refunds/{refund_id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Get refund",
        "description": "Fetch a refund.",
        "operationId": "get_refund",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": [
                "6a1d4e46-14ed-4fe1-a45f-eff4e025d211"
              ],
              "decription": "The ID of the refund",
              "title": "Refund Id"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Refund"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "refunds"
      }
    },
    "/transactions/{transaction_id}/void": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Void transaction",
        "description": "Void a previously authorized transaction.",
        "operationId": "void_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Transaction Id"
            }
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Void Transaction"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "void",
        "x-speakeasy-group": "transactions"
      }
    },
    "/transactions/{transaction_id}/refunds/all": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Create batch transaction refund",
        "description": "Create a refund for all instruments on a transaction.",
        "operationId": "create_full_transaction_refund",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.write",
              "gift-cards.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": [
                "7099948d-7286-47e4-aad8-b68f7eb44591"
              ],
              "decription": "The ID of the transaction",
              "title": "Transaction Id"
            }
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TransactionRefundAllCreate"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_Refund_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Full Transaction Refund"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "transactions.refunds.all"
      }
    },
    "/transactions/{transaction_id}/summary": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction summary",
        "description": "Fetch a summary for a transaction.",
        "operationId": "get_transaction_summary",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.read",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": [
                "7099948d-7286-47e4-aad8-b68f7eb44591"
              ],
              "decription": "The ID of the transaction",
              "title": "Transaction Id"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStatusSummary"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Transaction Summary"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "summary",
        "x-speakeasy-group": "transactions"
      }
    },
    "/transactions/{transaction_id}/sync": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Sync transaction",
        "description": "Fetch the latest status for a transaction.",
        "operationId": "sync_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Transaction Id"
            }
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Sync Transaction"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "sync",
        "x-speakeasy-group": "transactions"
      }
    },
    "/payment-options": {
      "post": {
        "tags": [
          "Payment options"
        ],
        "summary": "List payment options",
        "description": "List the payment options available at checkout. filtering by country, currency, and additional fields passed to Flow rules.",
        "operationId": "list_payment_options",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-options.read",
              "embed"
            ]
          }
        ],
        "parameters": [
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentOptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionNoCursor_PaymentOption_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Payment Options"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "payment-options"
      }
    },
    "/payment-service-definitions": {
      "get": {
        "tags": [
          "Payment service definitions"
        ],
        "summary": "List payment service definitions",
        "description": "List the definitions of each payment service that can be configured.",
        "operationId": "list_payment_service_definitions",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "payment-service-definitions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_PaymentServiceDefinition_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Payment Service Definitions"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "payment-service-definitions",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      }
    },
    "/payment-service-definitions/{payment_service_definition_id}": {
      "get": {
        "tags": [
          "Payment service definitions"
        ],
        "summary": "Get a payment service definition",
        "description": "Get the definition of a payment service that can be configured.",
        "operationId": "get_payment_service_definition",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "payment-service-definitions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_service_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "adyen-ideal"
              ],
              "dscription": "The ID of the payment service definition",
              "title": "Payment Service Definition Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServiceDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Payment Service Definition"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "payment-service-definitions"
      }
    },
    "/payment-service-definitions/{payment_service_definition_id}/sessions": {
      "post": {
        "tags": [
          "Payment service definitions"
        ],
        "summary": "Create a session for apayment service definition",
        "description": "Creates a session for a payment service that supports sessions.",
        "operationId": "create_payment_service_definition_session",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "transactions.write"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_service_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "adyen-ideal"
              ],
              "dscription": "The ID of the payment service definition",
              "title": "Payment Service Definition Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "The JSON payload to sent to the payment service's session API.",
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSession"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payment Service Definition Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "session",
        "x-speakeasy-group": "payment-service-definitions"
      }
    },
    "/payment-services": {
      "get": {
        "tags": [
          "Payment services"
        ],
        "summary": "List payment services",
        "description": "List the configured payment services.",
        "operationId": "list_payment_services",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-services.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "method",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Method"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return any payment service for this method.",
              "examples": [
                "card"
              ],
              "title": "Method"
            },
            "description": "Return any payment service for this method."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return any deleted payment service.",
              "examples": [
                true
              ],
              "default": false,
              "title": "Deleted"
            },
            "description": "Return any deleted payment service."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_PaymentService_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Payment Services"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "payment-services",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      },
      "post": {
        "tags": [
          "Payment services"
        ],
        "summary": "Update a configured payment service",
        "description": "Updates the configuration of a payment service.",
        "operationId": "update_payment_service",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-services.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentServiceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Update Payment Service"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "payment-services"
      }
    },
    "/payment-services/{payment_service_id}": {
      "get": {
        "tags": [
          "Payment services"
        ],
        "summary": "Get payment service",
        "description": "Get the details of a configured payment service.",
        "operationId": "get_payment_service",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-services.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_service_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "the ID of the payment service",
              "examples": [
                "fffd152a-9532-4087-9a4f-de58754210f0"
              ],
              "title": "Payment Service Id"
            },
            "description": "the ID of the payment service"
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Payment Service"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "payment-services"
      },
      "put": {
        "tags": [
          "Payment services"
        ],
        "summary": "Configure a payment service",
        "description": "Configures a new payment service for use by merchants.",
        "operationId": "create_payment_service",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-services.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_service_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "the ID of the payment service",
              "examples": [
                "fffd152a-9532-4087-9a4f-de58754210f0"
              ],
              "title": "Payment Service Id"
            },
            "description": "the ID of the payment service"
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentServiceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payment Service"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "payment-services"
      },
      "delete": {
        "tags": [
          "Payment services"
        ],
        "summary": "Delete a configured payment service",
        "description": "Deletes all the configuration of a payment service.",
        "operationId": "delete_payment_service",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-services.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_service_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "the ID of the payment service",
              "examples": [
                "fffd152a-9532-4087-9a4f-de58754210f0"
              ],
              "title": "Payment Service Id"
            },
            "description": "the ID of the payment service"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Payment Service"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "payment-services"
      }
    },
    "/payment-services/verify": {
      "post": {
        "tags": [
          "Payment services"
        ],
        "summary": "Verify payment service credentials",
        "description": "Verify the credentials of a configured payment service",
        "operationId": "verify_payment_service_credentials",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payment-services.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Verify Payment Service Credentials"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "verify",
        "x-speakeasy-group": "payment-services"
      }
    },
    "/payment-services/{payment_service_id}/sessions": {
      "post": {
        "tags": [
          "Payment services"
        ],
        "summary": "Create a session for apayment service definition",
        "description": "Creates a session for a payment service that supports sessions.",
        "operationId": "create_payment_service_session",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "transactions.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payment_service_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "the ID of the payment service",
              "examples": [
                "fffd152a-9532-4087-9a4f-de58754210f0"
              ],
              "title": "Payment Service Id"
            },
            "description": "the ID of the payment service"
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "The JSON payload to sent to the payment service's session API.",
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSession"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payment Service Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "session",
        "x-speakeasy-group": "payment-services"
      }
    },
    "/audit-logs": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "List audit log entries",
        "description": "Returns a list of activity by dashboard users.",
        "operationId": "list_audit_logs",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "audit-logs.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AuditLogAction"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the items for which the `audit-log` has an `action` that matches this value.",
              "examples": [
                "created"
              ],
              "title": "Action"
            },
            "description": "Filters the results to only the items for which the `audit-log` has an `action` that matches this value."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the items for which the `user` has an `id` that matches this value.",
              "examples": [
                "14b7b8c5-a6ba-4fb6-bbab-52d43c7f37ef"
              ],
              "title": "User Id"
            },
            "description": "Filters the results to only the items for which the `user` has an `id` that matches this value."
          },
          {
            "name": "resource_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filters the results to only the items for which the `audit-log` has a `resource` that matches this type value.",
              "examples": [
                "user"
              ],
              "title": "Resource Type"
            },
            "description": "Filters the results to only the items for which the `audit-log` has a `resource` that matches this type value."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_AuditLogEntry_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Audit Logs"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "audit-logs",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      }
    },
    "/checkout/sessions": {
      "post": {
        "tags": [
          "Checkout sessions"
        ],
        "summary": "Create checkout session",
        "description": "Create a new checkout session.",
        "operationId": "create_checkout_session",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "checkout-sessions.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutSessionUpdate"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BaseModel"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutSession"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Checkout Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "checkout-sessions"
      }
    },
    "/checkout/sessions/{session_id}": {
      "put": {
        "tags": [
          "Checkout sessions"
        ],
        "summary": "Update checkout session",
        "description": "Update the information stored on a checkout session.",
        "operationId": "update_checkout_session",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "checkout-sessions.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the checkout session.",
              "examples": [
                "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
              ],
              "title": "Session Id"
            },
            "description": "The ID of the checkout session."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutSessionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutSession"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Update Checkout Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "checkout-sessions"
      },
      "get": {
        "tags": [
          "Checkout sessions"
        ],
        "summary": "Get checkout session",
        "description": "Retrieve the information stored on a checkout session.",
        "operationId": "get_checkout_session",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "checkout-sessions.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the checkout session.",
              "examples": [
                "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
              ],
              "title": "Session Id"
            },
            "description": "The ID of the checkout session."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutSession"
                }
              }
            }
          },
          "422": {
            "description": "Empty response when referenced payment method does not exist."
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Checkout Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "checkout-sessions"
      },
      "delete": {
        "tags": [
          "Checkout sessions"
        ],
        "summary": "Delete checkout session",
        "description": "Deleta a checkout session and all of its (PCI) data.",
        "operationId": "delete_checkout_session",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "checkout-sessions.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the checkout session.",
              "examples": [
                "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
              ],
              "title": "Session Id"
            },
            "description": "The ID of the checkout session."
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Delete Checkout Session"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete",
        "x-speakeasy-group": "checkout-sessions"
      }
    },
    "/merchant-accounts": {
      "get": {
        "tags": [
          "Merchant accounts"
        ],
        "summary": "List all merchant accounts",
        "description": "List all merchant accounts in an instance.",
        "operationId": "list_merchant_accounts",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "merchant-accounts.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The search term to filter merchant accounts by.",
              "examples": [
                "merchant-12345"
              ],
              "title": "Search"
            },
            "description": "The search term to filter merchant accounts by."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_MerchantAccount_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Merchant Accounts"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "merchant-accounts",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      },
      "post": {
        "tags": [
          "Merchant accounts"
        ],
        "summary": "Create a merchant account",
        "description": "Create a new merchant account in an instance.",
        "operationId": "create_merchant_account",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "merchant-accounts.write"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccount"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Merchant Account"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "merchant-accounts"
      }
    },
    "/merchant-accounts/{merchant_account_id}": {
      "get": {
        "tags": [
          "Merchant accounts"
        ],
        "summary": "Get a merchant account",
        "description": "Get info about a merchant account in an instance.",
        "operationId": "get_merchant_account",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "merchant-accounts.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "merchant_account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the merchant account",
              "examples": [
                "merchant-12345"
              ],
              "title": "Merchant Account Id"
            },
            "description": "The ID of the merchant account"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccount"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Merchant Account"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "merchant-accounts"
      },
      "put": {
        "tags": [
          "Merchant accounts"
        ],
        "summary": "Update a merchant account",
        "description": "Update info for a merchant account in an instance.",
        "operationId": "update_merchant_account",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "merchant-accounts.write"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "merchant_account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the merchant account",
              "examples": [
                "merchant-12345"
              ],
              "title": "Merchant Account Id"
            },
            "description": "The ID of the merchant account"
          },
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccount"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Update Merchant Account"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "merchant-accounts"
      }
    },
    "/payouts": {
      "get": {
        "tags": [
          "Payouts"
        ],
        "summary": "List payouts created.",
        "description": "Returns a list of payouts made.",
        "operationId": "list_payouts",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payouts.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A pointer to the page of results to return.",
              "examples": [
                "ZXhhbXBsZTE"
              ],
              "title": "Cursor"
            },
            "description": "A pointer to the page of results to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "The maximum number of items that are at returned.",
              "examples": [
                20
              ],
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of items that are at returned."
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection_PayoutSummary_"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 List Payouts"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "payouts",
        "x-speakeasy-pagination": {
          "type": "cursor",
          "inputs": [
            {
              "name": "cursor",
              "in": "parameters",
              "type": "cursor"
            }
          ],
          "outputs": {
            "nextCursor": "$.next_cursor"
          }
        }
      },
      "post": {
        "tags": [
          "Payouts"
        ],
        "summary": "Create a payout.",
        "description": "Creates a new payout.",
        "operationId": "create_payout",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payouts.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "timeout_in_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1,
              "title": "Timeout In Seconds"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutSummary"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Create Payout"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create",
        "x-speakeasy-group": "payouts"
      }
    },
    "/payouts/{payout_id}": {
      "get": {
        "tags": [
          "Payouts"
        ],
        "summary": "Get a payout.",
        "description": "Retreives a payout.",
        "operationId": "get_payout",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "OAuth2PasswordBearer": [
              "payouts.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "payout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Payout Id"
            }
          },
          {
            "name": "x-gr4vy-merchant-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the merchant account to use for this request.",
              "examples": [
                "default"
              ],
              "title": "X-Gr4Vy-Merchant-Account-Id"
            },
            "description": "The ID of the merchant account to use for this request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutSummary"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "The credentials were invalid or the caller did not have permission to act on the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error403"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Forbidden"
                    },
                    {
                      "$ref": "#/components/schemas/Error403Active"
                    }
                  ],
                  "title": "Response 403 Get Payout"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "405": {
            "description": "The request method was not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "409": {
            "description": "A duplicate record was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409"
                }
              }
            }
          },
          "425": {
            "description": "The request was too early.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error425"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "502": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error502"
                }
              }
            }
          },
          "504": {
            "description": "The server encountered an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error504"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get",
        "x-speakeasy-group": "payouts"
      }
    }
  },
  "components": {
    "schemas": {
      "AVSResponseCode": {
        "type": "string",
        "enum": [
          "match",
          "no_match",
          "partial_match_address",
          "partial_match_postcode",
          "unavailable"
        ],
        "title": "AVSResponseCode"
      },
      "AccountUpdaterInquirySummary": {
        "properties": {
          "type": {
            "type": "string",
            "const": "account-updater-inquiry",
            "title": "Type",
            "description": "Always `account-updater-inquiry`",
            "default": "account-updater-inquiry",
            "examples": [
              "account-updater-inquiry"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the account updater inquiry.",
            "examples": [
              "aadb3ea8-5ad6-408b-8c3d-82da77c8d619"
            ]
          },
          "payment_method_id": {
            "type": "string",
            "format": "uuid",
            "title": "Payment Method Id",
            "description": "The ID of the payment method",
            "examples": [
              "ef9496d8-53a5-4aad-8ca2-00eb68334389"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "payment_method_id"
        ],
        "title": "AccountUpdaterInquirySummary"
      },
      "AccountUpdaterJob": {
        "properties": {
          "type": {
            "type": "string",
            "const": "account-updater-job",
            "title": "Type",
            "description": "Always `account-updater-job`",
            "default": "account-updater-job",
            "examples": [
              "account-updater-job"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the account updater job.",
            "examples": [
              "cc18c7c6-c1d4-4194-92a7-d5a985108b68"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this job belongs to.",
            "examples": [
              "default"
            ]
          },
          "inquiries": {
            "items": {
              "$ref": "#/components/schemas/AccountUpdaterInquirySummary"
            },
            "type": "array",
            "title": "Inquiries",
            "description": "A list of the payment methods that have been scheduled for an update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when this payment method was first created in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when this payment method was last updated in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "merchant_account_id",
          "inquiries",
          "created_at",
          "updated_at"
        ],
        "title": "AccountUpdaterJob"
      },
      "AccountUpdaterJobCreate": {
        "properties": {
          "payment_method_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "maxItems": 100,
            "minItems": 1,
            "uniqueItems": true,
            "title": "Payment Method Ids",
            "description": "A list of payment method IDs to request an update for.",
            "examples": [
              [
                "ef9496d8-53a5-4aad-8ca2-00eb68334389",
                "f29e886e-93cc-4714-b4a3-12b7a718e595"
              ]
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_method_ids"
        ],
        "title": "AccountUpdaterJobCreate"
      },
      "Address": {
        "properties": {
          "city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "City",
            "description": "The city for the address.",
            "examples": [
              "San Jose"
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The country for the address in ISO 3166 format.",
            "examples": [
              "US"
            ]
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code",
            "description": "The postal code or zip code for the address.",
            "examples": [
              "94560"
            ]
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "State",
            "description": "The state, county, or province for the address.",
            "examples": [
              "California"
            ]
          },
          "state_code": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}-[A-Z0-9]{1,3}$",
                "examples": [
                  "GB-LND",
                  "US-CA"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "State Code",
            "description": "The code of state, county, or province for the address in ISO 3166-2 format.",
            "examples": [
              "US-CA"
            ]
          },
          "house_number_or_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "House Number Or Name",
            "description": "The house number or name for the address. Not all payment services use this field but some do.",
            "examples": [
              "10"
            ]
          },
          "line1": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Line1",
            "description": "The first line of the address.",
            "examples": [
              "Stafford Appartments"
            ]
          },
          "line2": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Line2",
            "description": "The second line of the address.",
            "examples": [
              "29th Street"
            ]
          },
          "organization": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization",
            "description": "The optional name of the company or organisation to add to the address.",
            "examples": [
              "Gr4vy"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Address"
      },
      "Airline": {
        "properties": {
          "booking_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Booking Code",
            "description": "The unique identifier of the reservation in the global distribution system.",
            "examples": [
              "X36Q9C"
            ]
          },
          "issued_address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Issued Address",
            "description": "The address of the place/agency that issued the ticket.",
            "examples": [
              "123 Broadway, New York"
            ]
          },
          "issued_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issued At",
            "description": "The date that the ticket was last issued in the airline reservation system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "issuing_carrier_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuing Carrier Code",
            "description": "For airline aggregators, three-character IATA code of the airline issuing the ticket.",
            "examples": [
              "649"
            ]
          },
          "issuing_carrier_name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuing Carrier Name",
            "description": "For airline aggregators, name of the airline issuing the ticket.",
            "examples": [
              "Air Transat A.T. Inc"
            ]
          },
          "issuing_iata_designator": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuing Iata Designator",
            "description": "For airline aggregators, two-character IATA code of the airline issuing the ticket.",
            "examples": [
              "TS"
            ]
          },
          "issuing_icao_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuing Icao Code",
            "description": "For airline aggregators, three-character ICAO code of the airline issuing the ticket.",
            "examples": [
              "TSC"
            ]
          },
          "legs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AirlineLeg"
                },
                "type": "array",
                "maxItems": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Legs",
            "description": "An array of separate trip segments. Each leg contains detailed itinerary information."
          },
          "passenger_name_record": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Passenger Name Record",
            "description": "The Passenger Name Record (PNR) in the airline reservation system.",
            "examples": [
              "JOHN L"
            ]
          },
          "passengers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AirlinePassenger"
                },
                "type": "array",
                "maxItems": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Passengers",
            "description": "An array of the travelling passengers."
          },
          "reservation_system": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Reservation System",
            "description": "The name of the reservation system.",
            "examples": [
              "Amadeus"
            ]
          },
          "restricted_ticket": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Restricted Ticket",
            "description": "Indicates whether the ticket is restricted (refundable).",
            "examples": [
              false
            ]
          },
          "ticket_delivery_method": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "electronic",
                  "other"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Ticket Delivery Method",
            "description": "The delivery method of the ticket.",
            "default": "electronic",
            "examples": [
              "electronic"
            ]
          },
          "ticket_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Ticket Number",
            "description": "The airline's unique ticket number.",
            "examples": [
              "123-1234-151555"
            ]
          },
          "travel_agency_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Travel Agency Code",
            "description": "The IATA travel agency code.",
            "examples": [
              "12345"
            ]
          },
          "travel_agency_invoice_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Travel Agency Invoice Number",
            "description": "The reference number of the invoice that was issued by the travel agency.",
            "examples": [
              "EG15555155"
            ]
          },
          "travel_agency_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Travel Agency Name",
            "description": "The name of the travel agency.",
            "examples": [
              "ACME Agency"
            ]
          },
          "travel_agency_plan_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Travel Agency Plan Name",
            "description": "The name of the travel agency plan.",
            "examples": [
              "B733"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Airline",
        "description": "Information about an airline travel."
      },
      "AirlineLeg": {
        "properties": {
          "arrival_airport": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Arrival Airport",
            "description": "Arrival airport code of leg. 3-letter ISO code according to IATA official directory.",
            "examples": [
              "LAX"
            ]
          },
          "arrival_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Arrival At",
            "description": "The date and time of travel in local time at the arrival airport.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "arrival_city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Arrival City",
            "description": "Arrival city name.",
            "examples": [
              "Los Angeles"
            ]
          },
          "arrival_country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Arrival Country",
            "description": "Arrival country code in ISO 3166 format.",
            "examples": [
              "US"
            ]
          },
          "carrier_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Carrier Code",
            "description": "3 character airline code as set by IATA.",
            "examples": [
              "649"
            ]
          },
          "carrier_name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Carrier Name",
            "description": "Name of the airline.",
            "examples": [
              "Air Transat A.T. Inc"
            ]
          },
          "iata_designator": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Iata Designator",
            "description": "Two-character IATA code of the airline.",
            "examples": [
              "TS"
            ]
          },
          "icao_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Icao Code",
            "description": "Three-character ICAO code of the airline.",
            "examples": [
              "TSC"
            ]
          },
          "coupon_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Coupon Number",
            "description": "Coupon number associated with the leg.",
            "examples": [
              "15885566"
            ]
          },
          "departure_airport": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Departure Airport",
            "description": "Departure airport code of leg. 3-letter ISO code according to IATA official directory.",
            "examples": [
              "LHR"
            ]
          },
          "departure_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Departure At",
            "description": "The date and time of travel in local time at the departure airport.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "departure_city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Departure City",
            "description": "Departure city name.",
            "examples": [
              "London"
            ]
          },
          "departure_country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Departure Country",
            "description": "Departure airport code of leg. 3-letter ISO code according to IATA official directory.",
            "examples": [
              "GB"
            ]
          },
          "departure_tax_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Departure Tax Amount",
            "description": "Departure tax amount charged by a country when a person is leaving the country.",
            "examples": [
              1200
            ]
          },
          "fare_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Fare Amount",
            "description": "Amount of the ticket, for current leg of the trip, excluding taxes and fees.",
            "examples": [
              129900
            ]
          },
          "fare_basis_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 8,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Fare Basis Code",
            "description": "The alphanumeric code for the booking class of a ticket.",
            "examples": [
              "FY"
            ]
          },
          "fee_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Fee Amount",
            "description": "Fee amount for current leg of the trip.",
            "examples": [
              1200
            ]
          },
          "flight_class": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Flight Class",
            "description": "Indicates service class (first class, business class, etc.).",
            "examples": [
              "E"
            ]
          },
          "flight_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 6,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Flight Number",
            "description": "Unique identifier of the flight number.",
            "examples": [
              "101"
            ]
          },
          "route_type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "round_trip",
                  "one_way"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Type",
            "description": "The route type of the flight.",
            "examples": [
              "round_trip"
            ]
          },
          "seat_class": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Seat Class",
            "description": "Indicates seat class (first class, business class, etc.).",
            "examples": [
              "F"
            ]
          },
          "stop_over": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop Over",
            "description": "Indicates whether a stopover is allowed on this ticket.",
            "examples": [
              false
            ]
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "Amount of the taxes for current leg of the trip.",
            "examples": [
              1200
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "AirlineLeg"
      },
      "AirlinePassenger": {
        "properties": {
          "age_group": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "adult",
                  "infant"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Age Group",
            "description": "The age group for the passenger.",
            "examples": [
              "adult"
            ]
          },
          "date_of_birth": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Of Birth",
            "description": "The passenger's date of birth in YYYY-MM-YY format.",
            "examples": [
              "2013-07-16"
            ]
          },
          "email_address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Address",
            "description": "The email address of the passenger.",
            "examples": [
              "john@example.com"
            ]
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "The first name(s) or given name of the passenger.",
            "examples": [
              "John"
            ]
          },
          "frequent_flyer_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 5
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequent Flyer Number",
            "description": "The passenger's frequent flyer number.",
            "examples": [
              "15885566"
            ]
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "The last name, or family name, of the passenger.",
            "examples": [
              "Luhn"
            ]
          },
          "passport_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Passport Number",
            "description": "The passenger's unique passport number.",
            "examples": [
              "11117700225"
            ]
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "examples": [
                  "+14155552671",
                  "+442071838750"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number of the passenger. This number is formatted according to the E164 number standard.",
            "examples": [
              "+1234567890"
            ]
          },
          "ticket_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Ticket Number",
            "description": "The ticket number for a flight.",
            "examples": [
              "BA1236699999"
            ]
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title of the passenger.",
            "examples": [
              "Mr."
            ]
          },
          "country_code": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country Code",
            "description": "The country of residence of the passenger",
            "examples": [
              "US"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "AirlinePassenger"
      },
      "AntiFraudDecision": {
        "type": "string",
        "enum": [
          "accept",
          "error",
          "exception",
          "reject",
          "review",
          "skipped"
        ],
        "title": "AntiFraudDecision"
      },
      "ApplePayPaymentMethodCreate": {
        "properties": {
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The external identifier of the buyer to create a payment for.",
            "examples": [
              "buyer-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID of the buyer to retrieve billing details for.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "cardholder_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardholder Name",
            "description": "The card holder name associated to the original card for the token.",
            "examples": [
              "John Luhn"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          },
          "card_suffix": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 4
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Suffix",
            "description": "The last 4 digits of the original card used to generate the token.",
            "examples": [
              "1234"
            ]
          },
          "card_scheme": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Scheme",
            "description": "The original card scheme for which the token was generated.",
            "examples": [
              "visa"
            ]
          },
          "card_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Type",
            "description": "The payment scheme of the card.",
            "examples": [
              "credit"
            ]
          },
          "method": {
            "type": "string",
            "const": "applepay",
            "title": "Method",
            "description": "Always `applepay`",
            "examples": [
              "applepay"
            ]
          },
          "token": {
            "additionalProperties": true,
            "type": "object",
            "title": "Token",
            "description": "The opaque token as received from the Apple Pay JS library. This format may change between JS library versions.",
            "examples": [
              {
                "paymentData": {
                  "data": "fU2SY4yjz/F8YkFMPjlbsY5uuIK3glAb3bJw2PZOSMld41CDqbGwBIXw6rVIPIzSvPtGoDwmWvzOT1AG8iOxPknMpaZmg4OKis/CtNpTNIbLR8VwuRzK3O7iffLiA17rnV8osXycxZPQrwSJIQl8XSMHfaU4bJW/X6hAlMiHJv5g22F7kFKNQyAkL3yX1F9Q4pZK8T9JW/jXoho30njRllrI+swinZ7Hyk4KaYw65HeAiPSWbPqWQZcjJX074CSk8y41nfTyCu+WoQnOpgMruRZS2AoxRc/cgk1/1tjwqDT4dyPRxZLZjyn7lHGTbIxZjrQ8kvSFcY6V4BxgMJqgEoZrxljS8cY7BBmUadGK7tkTp4oGCPvQ8RxPxPIfEU+7LAg8t1BBP+8yEVGOHGlBVRuiav/JYYq1xgIc/PFHTYw=",
                  "header": {
                    "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgu7sidxY7MBgu5TPZdLJk4as3VnQ8IAD+qX0KLemH0rP+Nw0O9CdiNjAlYdtIvyfAgj7Lo7cB5ZQvjR3HsOR1w==",
                    "publicKeyHash": "lfaT/5QFZe4Cnb1T4j3hsgLJJdtVvMhfB/4EBx9rOQI=",
                    "transactionId": "bf84ca75845426f3faa1bdb30d07db9ef1cf68bdff766c57b44e45e0780d0b83"
                  },
                  "signature": "MIAGCSqGSIb3DQEHAqCAMIACAQExDTALBglghkgBZQMEAgEwgAYJKoZIhvcNAQcBAACggDCCA+QwggOLoAMCAQICCFnYobyq9OPNMAoGCCqGSM49BAMCMHoxLjAsBgNVBAMMJUFwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzAeFw0yMTA0MjAxOTM3MDBaFw0yNjA0MTkxOTM2NTlaMGIxKDAmBgNVBAMMH2VjYy1zbXAtYnJva2VyLXNpZ25fVUM0LVNBTkRCT1gxFDASBgNVBAsMC2lPUyBTeXN0ZW1zMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABIIw/avDnPdeICxQ2ZtFEuY34qkB3Wyz4LHNS1JnmPjPTr3oGiWowh5MM93OjiqWwvavoZMDRcToekQmzpUbEpWjggIRMIICDTAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFCPyScRPk+TvJ+bE9ihsP6K7/S5LMEUGCCsGAQUFBwEBBDkwNzA1BggrBgEFBQcwAYYpaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZWFpY2EzMDIwggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlYWljYTMuY3JsMB0GA1UdDgQWBBQCJDALmu7tRjGXpKZaKZ5CcYIcRTAOBgNVHQ8BAf8EBAMCB4AwDwYJKoZIhvdjZAYdBAIFADAKBggqhkjOPQQDAgNHADBEAiB0obMk20JJQw3TJ0xQdMSAjZofSA46hcXBNiVmMl+8owIgaTaQU6v1C1pS+fYATcWKrWxQp9YIaDeQ4Kc60B5K2YEwggLuMIICdaADAgECAghJbS+/OpjalzAKBggqhkjOPQQDAjBnMRswGQYDVQQDDBJBcHBsZSBSb290IENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzAeFw0xNDA1MDYyMzQ2MzBaFw0yOTA1MDYyMzQ2MzBaMHoxLjAsBgNVBAMMJUFwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABPAXEYQZ12SF1RpeJYEHduiAou/ee65N4I38S5PhM1bVZls1riLQl3YNIk57ugj9dhfOiMt2u2ZwvsjoKYT/VEWjgfcwgfQwRgYIKwYBBQUHAQEEOjA4MDYGCCsGAQUFBzABhipodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDA0LWFwcGxlcm9vdGNhZzMwHQYDVR0OBBYEFCPyScRPk+TvJ+bE9ihsP6K7/S5LMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUu7DeoVgziJqkipnevr3rr9rLJKswNwYDVR0fBDAwLjAsoCqgKIYmaHR0cDovL2NybC5hcHBsZS5jb20vYXBwbGVyb290Y2FnMy5jcmwwDgYDVR0PAQH/BAQDAgEGMBAGCiqGSIb3Y2QGAg4EAgUAMAoGCCqGSM49BAMCA2cAMGQCMDrPcoNRFpmxhvs1w1bKYr/0F+3ZD3VNoo6+8ZyBXkK3ifiY95tZn5jVQQ2PnenC/gIwMi3VRCGwowV3bF3zODuQZ/0XfCwhbZZPxnJpghJvVPh6fRuZy5sJiSFhBpkPCZIdAAAxggGJMIIBhQIBATCBhjB6MS4wLAYDVQQDDCVBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMCCFnYobyq9OPNMAsGCWCGSAFlAwQCAaCBkzAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yNTA0MDExMzQyMDlaMCgGCSqGSIb3DQEJNDEbMBkwCwYJYIZIAWUDBAIBoQoGCCqGSM49BAMCMC8GCSqGSIb3DQEJBDEiBCAj19NXaH9dIlnGZE2eRBi8ZPb6PtUF3wGPm66tjfROGjAKBggqhkjOPQQDAgRIMEYCIQDO0qfGETOUHRJNDO86J12oucqVeEOap6shJ5iGsAeupgIhAPO8YJKyYYdPFxU+VFkLAlMdbIxgOuDV54SdLCSQ/xI0AAAAAAAA",
                  "version": "EC_v1"
                },
                "paymentMethod": {
                  "displayName": "Visa 0224",
                  "network": "Visa",
                  "type": "debit"
                },
                "transactionIdentifier": "bf84ca75845426f3faa1bdb30d07db9ef1cf68bdff766c57b44e45e0780d0b83"
              }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "token"
        ],
        "title": "ApplePayPaymentMethodCreate",
        "description": "Create an Apple Pay transaction with a device or merchant token."
      },
      "ApplePaySession": {
        "properties": {},
        "additionalProperties": true,
        "type": "object",
        "title": "ApplePaySession"
      },
      "ApplePaySessionRequest": {
        "properties": {
          "validation_url": {
            "type": "string",
            "title": "Validation Url",
            "description": "The validation URL as provided by the Apple SDK when processing a payment.",
            "examples": [
              "https://apple-pay-gateway-cert.apple.com"
            ]
          },
          "domain_name": {
            "type": "string",
            "title": "Domain Name",
            "description": "The domain on which Apple Pay is being loaded.",
            "examples": [
              "example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "validation_url",
          "domain_name"
        ],
        "title": "ApplePaySessionRequest"
      },
      "ApprovalTarget": {
        "type": "string",
        "enum": [
          "new_window",
          "any"
        ],
        "title": "ApprovalTarget"
      },
      "AuditLogAction": {
        "type": "string",
        "enum": [
          "created",
          "updated",
          "deleted",
          "voided",
          "captured"
        ],
        "title": "AuditLogAction"
      },
      "AuditLogEntry": {
        "properties": {
          "type": {
            "type": "string",
            "const": "audit-log",
            "title": "Type",
            "description": "Always `audit-log`.",
            "default": "audit-log",
            "examples": [
              "audit-log"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the audit log entry.",
            "examples": [
              "8d3fe99b-1422-42e6-bbb3-932d95ae5f79"
            ]
          },
          "merchant_account_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this entry was created for.",
            "examples": [
              "default"
            ]
          },
          "resource": {
            "$ref": "#/components/schemas/AuditLogEntryResource",
            "description": "The resource that was changed."
          },
          "action": {
            "$ref": "#/components/schemas/AuditLogAction",
            "description": "The action that was performed.",
            "examples": [
              "created"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/AuditLogEntryUser",
            "description": "The user who performed the action."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The date and time that the action was performed.",
            "examples": [
              "2022-01-01T00:00:00+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "resource",
          "action",
          "user",
          "timestamp"
        ],
        "title": "AuditLogEntry"
      },
      "AuditLogEntryResource": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": " The type of the resource.",
            "examples": [
              "user"
            ]
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the resource.",
            "examples": [
              "d0f98bc9-8915-413c-a1de-d853eb658c1b"
            ]
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The descriptive name of the resource.",
            "examples": [
              "Jane Zoe"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "id",
          "name"
        ],
        "title": "AuditLogEntryResource"
      },
      "AuditLogEntryUser": {
        "properties": {
          "type": {
            "type": "string",
            "const": "user",
            "title": "Type",
            "description": "Always `user`.",
            "default": "user",
            "examples": [
              "user"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID of the user.",
            "examples": [
              "14b7b8c5-a6ba-4fb6-bbab-52d43c7f37ef"
            ]
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the user.",
            "examples": [
              "John Doe"
            ]
          },
          "email_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Address",
            "description": "The email address for this user.",
            "examples": [
              "john@example.com"
            ]
          },
          "is_staff": {
            "type": "boolean",
            "title": "Is Staff",
            "description": "Whether this is a Gr4vy staff user.",
            "examples": [
              false
            ]
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus",
            "description": "The status of the user.",
            "examples": [
              "active"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "is_staff",
          "status"
        ],
        "title": "AuditLogEntryUser"
      },
      "BaseModel": {
        "properties": {},
        "additionalProperties": false,
        "type": "object",
        "title": "BaseModel"
      },
      "BillingDetails-Input": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "The first name(s) or given name for the buyer.",
            "examples": [
              "John"
            ]
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "The last name, or family name, of the buyer.",
            "examples": [
              "Doe"
            ]
          },
          "email_address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Address",
            "description": "The email address for the buyer.",
            "examples": [
              "john@example.com"
            ]
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "examples": [
                  "+14155552671",
                  "+442071838750"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number for the buyer which should be formatted according to the E164 number standard.",
            "examples": [
              "+1234567890"
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing address for the buyer."
          },
          "tax_id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaxId"
              },
              {
                "type": "null"
              }
            ],
            "description": "The tax ID information associated with the billing details."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "BillingDetails"
      },
      "BillingDetails-Output": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "The first name(s) or given name for the buyer.",
            "examples": [
              "John"
            ]
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "The last name, or family name, of the buyer.",
            "examples": [
              "Doe"
            ]
          },
          "email_address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Address",
            "description": "The email address for the buyer.",
            "examples": [
              "john@example.com"
            ]
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "examples": [
                  "+14155552671",
                  "+442071838750"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number for the buyer which should be formatted according to the E164 number standard.",
            "examples": [
              "+1234567890"
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing address for the buyer."
          },
          "tax_id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaxId"
              },
              {
                "type": "null"
              }
            ],
            "description": "The tax ID information associated with the billing details."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "BillingDetails"
      },
      "BrowserInfo": {
        "properties": {
          "javascript_enabled": {
            "type": "boolean",
            "title": "Javascript Enabled"
          },
          "java_enabled": {
            "type": "boolean",
            "title": "Java Enabled"
          },
          "language": {
            "type": "string",
            "title": "Language"
          },
          "color_depth": {
            "type": "integer",
            "title": "Color Depth"
          },
          "screen_height": {
            "type": "integer",
            "title": "Screen Height"
          },
          "screen_width": {
            "type": "integer",
            "title": "Screen Width"
          },
          "time_zone_offset": {
            "type": "integer",
            "title": "Time Zone Offset"
          },
          "user_agent": {
            "type": "string",
            "title": "User Agent",
            "description": "Exact content of the HTTP user-agent header.",
            "examples": [
              "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            ]
          },
          "user_device": {
            "type": "string",
            "enum": [
              "desktop",
              "mobile"
            ],
            "title": "User Device",
            "description": "The platform that is being used to access the website.",
            "examples": [
              "desktop"
            ]
          },
          "accept_header": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accept Header",
            "description": "The Accept header of the request from the buyer's browser.",
            "examples": [
              "*/*"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "javascript_enabled",
          "java_enabled",
          "language",
          "color_depth",
          "screen_height",
          "screen_width",
          "time_zone_offset",
          "user_agent",
          "user_device"
        ],
        "title": "BrowserInfo",
        "description": "Merchant provided browser info"
      },
      "Buyer": {
        "properties": {
          "type": {
            "type": "string",
            "const": "buyer",
            "title": "Type",
            "description": "Always `buyer`.",
            "default": "buyer",
            "examples": [
              "buyer"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the buyer.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this buyer belongs to.",
            "examples": [
              "default"
            ]
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the buyer.",
            "examples": [
              "John Doe"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this buyer.",
            "examples": [
              "buyer-12345"
            ]
          },
          "billing_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BillingDetails-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing name, address, email, and other fields for this buyer."
          },
          "account_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Number",
            "description": "The buyer account number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this buyer was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this buyer was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_account_id",
          "created_at",
          "updated_at"
        ],
        "title": "Buyer"
      },
      "BuyerCreate": {
        "properties": {
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the buyer.",
            "examples": [
              "John Doe"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this buyer.",
            "examples": [
              "buyer-12345"
            ]
          },
          "billing_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BillingDetails-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing name, address, email, and other fields for this buyer."
          },
          "account_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Number",
            "description": "The buyer account number"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "BuyerCreate",
        "description": "Request body for creating a new buyer"
      },
      "BuyerUpdate": {
        "properties": {
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the buyer.",
            "examples": [
              "John Doe"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this buyer.",
            "examples": [
              "buyer-12345"
            ]
          },
          "account_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Number",
            "description": "The buyer account number"
          },
          "billing_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BillingDetails-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing name, address, email, and other fields for this buyer."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "BuyerUpdate",
        "description": "Request body for updating an existing buyer"
      },
      "CVVResponseCode": {
        "type": "string",
        "enum": [
          "match",
          "no_match",
          "unavailable",
          "not_provided"
        ],
        "title": "CVVResponseCode"
      },
      "CardPaymentMethodCreate": {
        "properties": {
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date of the card, formatted `MM/YY`.",
            "examples": [
              "12/30"
            ]
          },
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 13-19 digit number for this card.",
            "examples": [
              "4111111111111111"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The external identifier of the buyer to attach the method to.",
            "examples": [
              "buyer-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID of the buyer to attach the method to.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant reference for this payment method.",
            "examples": [
              "payment-method-12345"
            ]
          },
          "card_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Type",
            "description": "The type of the card used",
            "examples": [
              "credit"
            ]
          },
          "method": {
            "type": "string",
            "const": "card",
            "title": "Method",
            "description": "Always `card`",
            "default": "card",
            "examples": [
              "card"
            ]
          },
          "security_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 3,
                "pattern": "^\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Code",
            "description": "The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.",
            "examples": [
              "123"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "expiration_date",
          "number"
        ],
        "title": "CardPaymentMethodCreate"
      },
      "CardScheme": {
        "type": "string",
        "enum": [
          "accel",
          "amex",
          "bancontact",
          "carte-bancaire",
          "cirrus",
          "culiance",
          "dankort",
          "diners-club",
          "discover",
          "eftpos-australia",
          "elo",
          "hipercard",
          "jcb",
          "maestro",
          "mastercard",
          "mir",
          "nyce",
          "other",
          "pulse",
          "rupay",
          "star",
          "uatp",
          "unionpay",
          "visa"
        ],
        "title": "CardScheme"
      },
      "CardSchemeDefinition": {
        "properties": {
          "type": {
            "type": "string",
            "const": "card-scheme-definition",
            "title": "Type",
            "description": "Always `card-scheme-definition`.",
            "default": "card-scheme-definition",
            "examples": [
              "card-scheme-definition"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Id",
            "description": "The ID for the card scheme.",
            "examples": [
              "visa"
            ]
          },
          "icon_url": {
            "type": "string",
            "title": "Icon Url",
            "description": "The icon for this card scheme.",
            "examples": [
              "https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg"
            ]
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name",
            "description": "The display name of this card scheme.",
            "examples": [
              "Visa"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "icon_url",
          "display_name"
        ],
        "title": "CardSchemeDefinition"
      },
      "CardType": {
        "type": "string",
        "enum": [
          "credit",
          "debit",
          "prepaid"
        ],
        "title": "CardType"
      },
      "CardWithUrlPaymentMethodCreate": {
        "properties": {
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date of the card, formatted `MM/YY`.",
            "examples": [
              "12/30"
            ]
          },
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 13-19 digit number for this card.",
            "examples": [
              "4111111111111111"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The external identifier of the buyer to attach the method to.",
            "examples": [
              "buyer-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID of the buyer to attach the method to.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant reference for this payment method.",
            "examples": [
              "payment-method-12345"
            ]
          },
          "card_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Type",
            "description": "The type of the card used",
            "examples": [
              "credit"
            ]
          },
          "method": {
            "type": "string",
            "const": "card",
            "title": "Method",
            "description": "Always `card`",
            "default": "card",
            "examples": [
              "card"
            ]
          },
          "security_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 3,
                "pattern": "^\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Code",
            "description": "The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.",
            "examples": [
              "123"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "expiration_date",
          "number"
        ],
        "title": "CardWithUrlPaymentMethodCreate",
        "description": "Create a transaction with raw card details"
      },
      "CartItem": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.",
            "examples": [
              "GoPro HD"
            ]
          },
          "quantity": {
            "type": "integer",
            "maximum": 99999999.0,
            "exclusiveMinimum": 0.0,
            "title": "Quantity",
            "description": "The quantity of this item in the cart. This value cannot be negative or zero.",
            "examples": [
              2
            ]
          },
          "unit_amount": {
            "type": "integer",
            "maximum": 99999999.0,
            "minimum": 0.0,
            "title": "Unit Amount",
            "description": "The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.",
            "examples": [
              1299
            ]
          },
          "discount_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Amount",
            "description": "The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.",
            "default": 0,
            "examples": [
              0
            ]
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.",
            "default": 0,
            "examples": [
              0
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier for the cart item. This can be set to any value and is not sent to the payment service.",
            "examples": [
              "goprohd"
            ]
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku",
            "description": "The SKU for the item.",
            "examples": [
              "GPHD1078"
            ]
          },
          "product_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Url",
            "description": "The product URL for the item.",
            "examples": [
              "https://example.com/catalog/go-pro-hd"
            ]
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url",
            "description": "The URL for the image of the item.",
            "examples": [
              "https://example.com/images/go-pro-hd.jpg"
            ]
          },
          "categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 50,
                  "minLength": 1
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Categories",
            "description": "A list of strings containing product categories for the item.",
            "examples": [
              [
                "camera",
                "travel",
                "gear"
              ]
            ]
          },
          "product_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              },
              {
                "type": "null"
              }
            ],
            "description": "The product type of the cart item.",
            "examples": [
              "physical"
            ]
          },
          "seller_country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Seller Country",
            "description": "The seller country of the cart item.",
            "examples": [
              "US",
              "GB"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit_amount"
        ],
        "title": "CartItem"
      },
      "CheckoutCardConnectionOptions": {
        "properties": {
          "processing_channel_id": {
            "type": "string",
            "title": "Processing Channel Id",
            "description": "The processing channel to be used for the payment.",
            "examples": [
              "channel-1234"
            ]
          },
          "source_id": {
            "type": "string",
            "title": "Source Id",
            "description": "The ID of the currency account that will fund the payout.",
            "examples": [
              "acct-1234"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "processing_channel_id",
          "source_id"
        ],
        "title": "CheckoutCardConnectionOptions"
      },
      "CheckoutSession": {
        "properties": {
          "cart_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cart Items",
            "description": "An array of cart items that represents the line items of a transaction."
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.",
            "examples": [
              {
                "cohort": "cohort-a",
                "order_id": "order-12345"
              }
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GuestBuyer-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used."
          },
          "airline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Airline"
              },
              {
                "type": "null"
              }
            ],
            "description": "The airline addendum data which describes the airline booking associated with this transaction."
          },
          "type": {
            "type": "string",
            "const": "checkout-session",
            "title": "Type",
            "description": "Always `checkout-session`",
            "default": "checkout-session",
            "examples": [
              "checkout-session"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the checkout session.",
            "examples": [
              "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
            ]
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "The date and time when this checkout session expires.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "payment_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CheckoutSessionPaymentMethod"
              },
              {
                "type": "null"
              }
            ],
            "description": "Information about the payment method stored on the checkout session."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "expires_at"
        ],
        "title": "CheckoutSession"
      },
      "CheckoutSessionPaymentMethod": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-method",
            "title": "Type",
            "description": "Always `payment-method`",
            "default": "payment-method",
            "examples": [
              "payment-method"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID of the payment method.",
            "examples": [
              "ef9496d8-53a5-4aad-8ca2-00eb68334389"
            ]
          },
          "details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CheckoutSessionPaymentMethodDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "Details for credit or debit card payment method."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The last 4 digits of the the card.",
            "examples": [
              "1234"
            ]
          },
          "method": {
            "type": "string",
            "const": "card",
            "title": "Method",
            "description": "Always `card`",
            "default": "card",
            "examples": [
              "card"
            ]
          },
          "scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The scheme of the card.",
            "examples": [
              "visa"
            ]
          },
          "fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fingerprint",
            "description": "The unique hash derived from the card number.",
            "examples": [
              "a50b85c200ee0795d6fd33a5c66f37a4564f554355c5b46a756aac485dd168a4"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "CheckoutSessionPaymentMethod"
      },
      "CheckoutSessionPaymentMethodCreate": {
        "properties": {
          "method": {
            "type": "string",
            "const": "checkout-session",
            "title": "Method",
            "description": "Always `checkout-session`",
            "default": "checkout-session",
            "examples": [
              "checkout-session"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the checkout session.",
            "examples": [
              "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant reference that can be used to match the payment method against your own records.",
            "examples": [
              "card-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.",
            "examples": [
              "buyer-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "CheckoutSessionPaymentMethodCreate"
      },
      "CheckoutSessionPaymentMethodDetails": {
        "properties": {
          "bin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bin",
            "description": "The first 6 digit of the card.",
            "examples": [
              "411111"
            ]
          },
          "card_country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Country",
            "description": "The country of the card issuer.",
            "examples": [
              "US"
            ]
          },
          "card_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardType"
              },
              {
                "type": "null"
              }
            ],
            "description": "The payment scheme of the card.",
            "examples": [
              "credit"
            ]
          },
          "card_issuer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Issuer Name",
            "description": "The card issuer.",
            "examples": [
              "Bank of America NA"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "CheckoutSessionPaymentMethodDetails"
      },
      "CheckoutSessionUpdate": {
        "properties": {
          "cart_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cart Items",
            "description": "An array of cart items that represents the line items of a transaction."
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.",
            "examples": [
              {
                "cohort": "cohort-a",
                "order_id": "order-12345"
              }
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GuestBuyer-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used."
          },
          "airline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Airline"
              },
              {
                "type": "null"
              }
            ],
            "description": "The airline addendum data which describes the airline booking associated with this transaction."
          },
          "expires_in": {
            "type": "number",
            "maximum": 86400.0,
            "minimum": 3600.0,
            "title": "Expires In",
            "default": 3600
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "CheckoutSessionUpdate"
      },
      "CheckoutSessionWithUrlPaymentMethodCreate": {
        "properties": {
          "method": {
            "type": "string",
            "const": "checkout-session",
            "title": "Method",
            "description": "Always `checkout-session`",
            "default": "checkout-session",
            "examples": [
              "checkout-session"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the checkout session.",
            "examples": [
              "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant reference that can be used to match the payment method against your own records.",
            "examples": [
              "card-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.",
            "examples": [
              "buyer-12345"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "CheckoutSessionWithUrlPaymentMethodCreate",
        "description": "Create a payment with a checkout session ID (and an optional URL for 3DS)."
      },
      "ClickToPayFPANPaymentMethodCreate": {
        "properties": {
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date of the card, formatted `MM/YY`.",
            "examples": [
              "12/30"
            ]
          },
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 13-19 digit number for this card.",
            "examples": [
              "4111111111111111"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The external identifier of the buyer to attach the method to.",
            "examples": [
              "buyer-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID of the buyer to attach the method to.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant reference for this payment method.",
            "examples": [
              "payment-method-12345"
            ]
          },
          "card_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Type",
            "description": "The type of the card used",
            "examples": [
              "credit"
            ]
          },
          "method": {
            "type": "string",
            "const": "click-to-pay",
            "title": "Method",
            "description": "Aways `click-to-pay`.",
            "examples": [
              "click-to-pay"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          },
          "security_code": {
            "type": "null",
            "title": "Security Code",
            "description": "The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.",
            "examples": [
              "123"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "expiration_date",
          "number",
          "method"
        ],
        "title": "ClickToPayFPANPaymentMethodCreate",
        "description": "Create a Click to Pay payment with an FPAN or virtual PAN"
      },
      "ClickToPayPaymentMethodCreate": {
        "properties": {
          "method": {
            "type": "string",
            "const": "click-to-pay",
            "title": "Method",
            "description": "Aways `click-to-pay`.",
            "examples": [
              "click-to-pay"
            ]
          },
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The device token.",
            "examples": [
              "4111123456789012"
            ]
          },
          "cryptogram": {
            "type": "string",
            "title": "Cryptogram",
            "description": "The payment cryptogram for the device token.",
            "examples": [
              "A3F9C2D47E1B56A9"
            ]
          },
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date of the device token.",
            "examples": [
              "12/30"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": " The ID of the buyer to associate this transaction to.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The external identifier of the buyer to create a transaction for.",
            "examples": [
              "buyer-12345"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The external identifier of the payment method to filter by.",
            "examples": [
              "payment-method-12345"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "token",
          "cryptogram",
          "expiration_date"
        ],
        "title": "ClickToPayPaymentMethodCreate",
        "description": "Create a Click to Pay payment with a decrypted token and cryptogram. This\nis mainly used internally but can be used by anyone with their own C2P\nintegration."
      },
      "ClickToPaySession": {
        "properties": {
          "digital_payment_application_id": {
            "type": "string",
            "title": "Digital Payment Application Id",
            "description": "The ID of the Click to Pay application.",
            "examples": [
              "a0c3ef2e-9cdb-4cbf-aaff-5baac2928e1b"
            ]
          },
          "digital_payment_application_name": {
            "type": "string",
            "title": "Digital Payment Application Name",
            "description": "The merchant name as configured ont he the Click to Pay wallet.",
            "examples": [
              "ACME"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "digital_payment_application_id",
          "digital_payment_application_name"
        ],
        "title": "ClickToPaySession"
      },
      "ClickToPaySessionRequest": {
        "properties": {
          "checkout_session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Checkout Session Id",
            "description": "The checkout session ID to create a Click to Pay session for.",
            "examples": [
              "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "checkout_session_id"
        ],
        "title": "ClickToPaySessionRequest"
      },
      "CollectionNoCursor_CardSchemeDefinition_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CardSchemeDefinition"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[CardSchemeDefinition]"
      },
      "CollectionNoCursor_DigitalWallet_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DigitalWallet"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[DigitalWallet]"
      },
      "CollectionNoCursor_GiftCardSummary_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/GiftCardSummary"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[GiftCardSummary]"
      },
      "CollectionNoCursor_NetworkToken_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/NetworkToken"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[NetworkToken]"
      },
      "CollectionNoCursor_PaymentMethodSummary_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PaymentMethodSummary"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[PaymentMethodSummary]"
      },
      "CollectionNoCursor_PaymentOption_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PaymentOption"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[PaymentOption]"
      },
      "CollectionNoCursor_PaymentServiceToken_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PaymentServiceToken"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[PaymentServiceToken]"
      },
      "CollectionNoCursor_Refund_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Refund"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[Refund]"
      },
      "CollectionNoCursor_ShippingDetails_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ShippingDetails"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CollectionNoCursor[ShippingDetails]"
      },
      "Collection_AuditLogEntry_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AuditLogEntry"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[AuditLogEntry]"
      },
      "Collection_Buyer_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Buyer"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[Buyer]"
      },
      "Collection_GiftCard_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/GiftCard"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[GiftCard]"
      },
      "Collection_MerchantAccount_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MerchantAccount"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[MerchantAccount]"
      },
      "Collection_PaymentMethod_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[PaymentMethod]"
      },
      "Collection_PaymentServiceDefinition_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PaymentServiceDefinition"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[PaymentServiceDefinition]"
      },
      "Collection_PaymentService_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PaymentService"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[PaymentService]"
      },
      "Collection_PayoutSummary_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PayoutSummary"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[PayoutSummary]"
      },
      "Collection_Refund_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Refund"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[Refund]"
      },
      "Collection_TransactionSummary_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/TransactionSummary"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of items returned for this request."
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "The number of items for this page.",
            "default": 20,
            "examples": [
              20
            ]
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "The cursor pointing at the next page of items.",
            "examples": [
              "ZXhhbXBsZTE"
            ]
          },
          "previous_cursor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Cursor",
            "description": "The cursor pointing at the previous page of items.",
            "examples": [
              "Xkjss7asS"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "Collection[TransactionSummary]"
      },
      "ConnectionOptions": {
        "properties": {
          "checkout-card": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CheckoutCardConnectionOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Custom options for `checkout-card` payment service."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ConnectionOptions"
      },
      "CreateSession": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-service-session",
            "title": "Type",
            "description": "Always `payment-service-session`.",
            "default": "payment-service-session",
            "examples": [
              "payment-service-session"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/CreateSessionStatus",
            "description": "The status of the response.",
            "examples": [
              "succeeded"
            ]
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "A generic error code that may be returned when the session could not be generated.",
            "examples": [
              "UNKNOWN_ERROR"
            ]
          },
          "status_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Code",
            "description": "The HTTP status code received from the payment service.",
            "examples": [
              201
            ]
          },
          "response_body": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Body",
            "description": "The JSON response body received from the payment service.",
            "examples": [
              {
                "sessionId": "12345"
              }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "status"
        ],
        "title": "CreateSession",
        "description": "The session data received from the payment service."
      },
      "CreateSessionStatus": {
        "type": "string",
        "enum": [
          "succeeded",
          "failed"
        ],
        "title": "CreateSessionStatus"
      },
      "Creator": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "email_address": {
            "type": "string",
            "title": "Email Address"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "name",
          "email_address"
        ],
        "title": "Creator"
      },
      "Cryptogram": {
        "properties": {
          "type": {
            "type": "string",
            "const": "network-token-cryptogram",
            "title": "Type",
            "description": "Always `network-token-cryptogram`.",
            "default": "network-token-cryptogram",
            "examples": [
              "network-token-cryptogram"
            ]
          },
          "cryptogram": {
            "type": "string",
            "title": "Cryptogram",
            "description": "The cryptogram of the network token.",
            "examples": [
              "A3F9C2D47E1B56A9"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "cryptogram"
        ],
        "title": "Cryptogram"
      },
      "CryptogramCreate": {
        "properties": {
          "merchant_initiated": {
            "type": "boolean",
            "title": "Merchant Initiated",
            "description": "Defines if the request is merchant initiated or not.",
            "examples": [
              false
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_initiated"
        ],
        "title": "CryptogramCreate"
      },
      "DefinitionField": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Key",
            "description": "The key of a field that can be submitted.",
            "examples": [
              "private_api_key"
            ]
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name",
            "description": "The human readable name for this field.",
            "examples": [
              "Private API key"
            ]
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Defines if this field is required when the service is created.",
            "examples": [
              true
            ]
          },
          "format": {
            "$ref": "#/components/schemas/DefinitionFieldFormat",
            "description": "Defines the type of input that needs to be rendered for this field.",
            "examples": [
              "text"
            ]
          },
          "secret": {
            "type": "boolean",
            "title": "Secret",
            "description": "Defines if this field is secret. When `true` the field's value is not returned when querying the payment service information.",
            "examples": [
              true
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "key",
          "display_name",
          "required",
          "format",
          "secret"
        ],
        "title": "DefinitionField",
        "description": "A single field that needs to be submitted for a payment service when it is created."
      },
      "DefinitionFieldFormat": {
        "type": "string",
        "enum": [
          "text",
          "multiline",
          "number",
          "timezone",
          "boolean"
        ],
        "title": "DefinitionFieldFormat"
      },
      "DigitalWallet": {
        "properties": {
          "type": {
            "type": "string",
            "const": "digital-wallet",
            "title": "Type",
            "description": "Always `digital-wallet`.",
            "default": "digital-wallet",
            "examples": [
              "digital-wallet"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the digital wallet.",
            "examples": [
              "1808f5e6-b49c-4db9-94fa-22371ea352f5"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this digital wallet belongs to.",
            "examples": [
              "default"
            ]
          },
          "provider": {
            "$ref": "#/components/schemas/DigitalWalletProvider",
            "description": "The name of the digital wallet provider.",
            "examples": [
              "apple"
            ]
          },
          "merchant_name": {
            "type": "string",
            "title": "Merchant Name",
            "description": "The name of the merchant the digital wallet is registered to.",
            "examples": [
              "ACME Inc."
            ]
          },
          "merchant_display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Display Name",
            "description": "The consumer facing name of the merchant.",
            "examples": [
              "ACME"
            ]
          },
          "merchant_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Url",
            "description": "The main URL of the merchant.",
            "examples": [
              "https://example.com"
            ]
          },
          "merchant_country_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Country Code",
            "description": "The country code where the merchant is registered.",
            "examples": [
              "US"
            ]
          },
          "domain_names": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Domain Names",
            "description": "The list of domain names that a digital wallet can be used on (deprecated).",
            "examples": [
              "example.com"
            ]
          },
          "active_certificate_count": {
            "type": "integer",
            "title": "Active Certificate Count",
            "description": "The number of active custom certificates registered for this digital wallet (Apple Pay only).",
            "default": 0,
            "examples": [
              2
            ]
          },
          "pending_certificate_count": {
            "type": "integer",
            "title": "Pending Certificate Count",
            "description": "The number of pending custom certificates registered for this digital wallet (Apple Pay only).",
            "default": 0,
            "examples": [
              1
            ]
          },
          "expired_certificate_count": {
            "type": "integer",
            "title": "Expired Certificate Count",
            "description": "The number of expired custom certificates registered for this digital wallet (Apple Pay only).",
            "default": 0,
            "examples": [
              0
            ]
          },
          "fields": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fields",
            "description": "Custom attributes for some digital wallets. Currently only used by Click to Pay.",
            "examples": [
              {
                "digital_payment_application_id": "8faebf73-5b43-4514-b170-cbfb50c99fff",
                "digital_payment_application_name": "ACME"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this buyer was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this buyer was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "merchant_account_id",
          "provider",
          "merchant_name",
          "domain_names",
          "created_at",
          "updated_at"
        ],
        "title": "DigitalWallet"
      },
      "DigitalWalletCreate": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/DigitalWalletProvider"
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 1024,
            "title": "Merchant Name"
          },
          "merchant_display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1024
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Display Name"
          },
          "merchant_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Url"
          },
          "merchant_country_code": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Country Code"
          },
          "domain_names": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Domain Names"
          },
          "accept_terms_and_conditions": {
            "type": "boolean",
            "title": "Accept Terms And Conditions"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "provider",
          "merchant_name",
          "accept_terms_and_conditions"
        ],
        "title": "DigitalWalletCreate",
        "description": "Request body for registering a new digital wallet"
      },
      "DigitalWalletDomain": {
        "properties": {
          "domain_name": {
            "type": "string",
            "title": "Domain Name",
            "description": "The domain to add or remove.",
            "examples": [
              "example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "domain_name"
        ],
        "title": "DigitalWalletDomain"
      },
      "DigitalWalletProvider": {
        "type": "string",
        "enum": [
          "apple",
          "google",
          "click-to-pay"
        ],
        "title": "DigitalWalletProvider"
      },
      "DigitalWalletUpdate": {
        "properties": {
          "merchant_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1024
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Name"
          },
          "domain_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Domain Names"
          },
          "merchant_display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Display Name"
          },
          "merchant_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Url"
          },
          "merchant_country_code": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Country Code"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "DigitalWalletUpdate",
        "description": "Request body for editing a registered digital wallet"
      },
      "Error400": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `bad_request`",
            "default": "bad_request",
            "examples": [
              "bad_request"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `400`.",
            "default": 400,
            "examples": [
              400
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "examples": [
              "Request failed validation"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "message"
        ],
        "title": "Error400"
      },
      "Error401": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `unauthorized`",
            "default": "unauthorized",
            "examples": [
              "unauthorized"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `401`.",
            "default": 401,
            "examples": [
              401
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "No valid API authentication found",
            "examples": [
              "No valid API authentication found"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error401"
      },
      "Error403": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `forbidden`",
            "default": "forbidden",
            "examples": [
              "forbidden"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `403`.",
            "default": 403,
            "examples": [
              403
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "Invalid credentials",
            "examples": [
              "Invalid credentials"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error403"
      },
      "Error403Active": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `forbidden`",
            "default": "forbidden",
            "examples": [
              "forbidden"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `403`.",
            "default": 403,
            "examples": [
              403
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "The resource could not be removed as it is currently active",
            "examples": [
              "The resource could not be removed as it is currently active"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error403Active"
      },
      "Error403Forbidden": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `forbidden`",
            "default": "forbidden",
            "examples": [
              "forbidden"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `403`.",
            "default": 403,
            "examples": [
              403
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "examples": [
              "Request failed validation"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "message"
        ],
        "title": "Error403Forbidden"
      },
      "Error404": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `not_found`",
            "default": "not_found",
            "examples": [
              "not_found"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `404`.",
            "default": 404,
            "examples": [
              404
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "The resource could not be found",
            "examples": [
              "The resource could not be found"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error404"
      },
      "Error405": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `method_not_allowed`",
            "default": "method_not_allowed",
            "examples": [
              "method_not_allowed"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `405`.",
            "default": 405,
            "examples": [
              405
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "Method Not Allowed",
            "examples": [
              "Method Not Allowed"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error405"
      },
      "Error409": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `duplicate_record`",
            "default": "duplicate_record",
            "examples": [
              "duplicate_record"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `409`.",
            "default": 409,
            "examples": [
              409
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "examples": [
              "Request failed validation"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "message"
        ],
        "title": "Error409"
      },
      "Error425": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `too_early`",
            "default": "too_early",
            "examples": [
              "too_early"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `425`.",
            "default": 425,
            "examples": [
              425
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "examples": [
              "Request failed validation"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "message"
        ],
        "title": "Error425"
      },
      "Error429": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `too_many_requests`",
            "default": "too_many_requests",
            "examples": [
              "too_many_requests"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `429`.",
            "default": 429,
            "examples": [
              429
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "examples": [
              "Request failed validation"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "message"
        ],
        "title": "Error429"
      },
      "Error500": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `server_error`",
            "default": "server_error",
            "examples": [
              "server_error"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `500`.",
            "default": 500,
            "examples": [
              500
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "Request could not be processed",
            "examples": [
              "Request could not be processed"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error500"
      },
      "Error502": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `bad_gateway`",
            "default": "bad_gateway",
            "examples": [
              "bad_gateway"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "Always `502`.",
            "default": 502,
            "examples": [
              502
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "Request could not be processed",
            "examples": [
              "Request could not be processed"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error502"
      },
      "Error504": {
        "properties": {
          "type": {
            "type": "string",
            "const": "error",
            "title": "Type",
            "description": "Always `error`.",
            "default": "error",
            "examples": [
              "error"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Always `gateway_timeout`",
            "default": "gateway_timeout",
            "examples": [
              "gateway_timeout"
            ]
          },
          "status": {
            "type": "integer",
            "title": "Status",
            "default": 504
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human readable message that provides more context to the error.",
            "default": "Request could not be processed",
            "examples": [
              "Request could not be processed"
            ]
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": "array",
            "title": "Details",
            "description": "A list of details that further ellaborate on the error.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Error504"
      },
      "ErrorDetail": {
        "properties": {
          "location": {
            "$ref": "#/components/schemas/ErrorLocation",
            "description": "The part of the request where the property can be found that caused the error.",
            "examples": [
              "body"
            ]
          },
          "pointer": {
            "anyOf": [
              {
                "type": "string",
                "format": "json-pointer"
              },
              {
                "type": "string"
              }
            ],
            "title": "Pointer",
            "description": "A JSON pointer for the particular property that caused the error.",
            "examples": [
              "/currency"
            ]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "A human-readdable explanation of the error.",
            "examples": [
              "Unknown ISO 4217 currency code: USX"
            ]
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of error that was raised for this property.",
            "examples": [
              "value_error"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "location",
          "pointer",
          "message",
          "type"
        ],
        "title": "ErrorDetail"
      },
      "ErrorLocation": {
        "type": "string",
        "enum": [
          "query",
          "body",
          "path",
          "header",
          "unknown"
        ],
        "title": "ErrorLocation"
      },
      "Field": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Key",
            "description": "The ID of the configured field.",
            "examples": [
              "api_key"
            ]
          },
          "value": {
            "type": "string",
            "maxLength": 5000,
            "minLength": 1,
            "title": "Value",
            "description": "The value of the configured field.",
            "examples": [
              "key-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "Field",
        "description": "A field used in a payment service"
      },
      "GiftCard": {
        "properties": {
          "type": {
            "type": "string",
            "const": "gift-card",
            "title": "Type",
            "description": "Always `gift-card`.",
            "default": "gift-card",
            "examples": [
              "gift-card"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the gift card.",
            "examples": [
              "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this buyer belongs to.",
            "examples": [
              "default"
            ]
          },
          "gift_card_service": {
            "$ref": "#/components/schemas/GiftCardService",
            "description": "The service this gift card belongs to."
          },
          "bin": {
            "type": "string",
            "title": "Bin",
            "description": "The first 6 digits of the full gift card number.",
            "examples": [
              "412345"
            ]
          },
          "sub_bin": {
            "type": "string",
            "title": "Sub Bin",
            "description": "The 3 digits after the `bin` of the full gift card number.",
            "examples": [
              "554"
            ]
          },
          "last4": {
            "type": "string",
            "title": "Last4",
            "description": "The last 4 digits for the gift card.",
            "examples": [
              "1234"
            ]
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date",
            "description": " The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The buyer for which this gift card is stored."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this gift card record was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this gift card record was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "merchant_account_id",
          "gift_card_service",
          "bin",
          "sub_bin",
          "last4",
          "created_at",
          "updated_at"
        ],
        "title": "GiftCard"
      },
      "GiftCardBalanceRequest": {
        "properties": {
          "items": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GiftCardRequest"
                },
                {
                  "$ref": "#/components/schemas/GiftCardStoredRequest"
                }
              ]
            },
            "type": "array",
            "title": "Items",
            "description": "A list of gift cards to request a balance for."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "items"
        ],
        "title": "GiftCardBalanceRequest"
      },
      "GiftCardCreate": {
        "properties": {
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 16,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 16-19 digit number for the gift card.",
            "examples": [
              "4123455541234561234"
            ]
          },
          "pin": {
            "type": "string",
            "minLength": 1,
            "title": "Pin",
            "description": "The PIN for this gift card.",
            "examples": [
              "1234"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": " The ID of the buyer to associate this gift card to. If this field is provided then the `buyer_external_identifier` field needs to be unset.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The `external_identifier` of the buyer to associate this gift card to. If this field is provided then the `buyer_id` field needs to be unset.",
            "examples": [
              "buyer-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "number",
          "pin"
        ],
        "title": "GiftCardCreate"
      },
      "GiftCardErrorCode": {
        "type": "string",
        "enum": [
          "invalid_gift_card",
          "expired_card",
          "inactive_card",
          "invalid_service_credentials",
          "invalid_amount",
          "incorrect_currency",
          "insufficient_funds",
          "invalid_service_configuration",
          "operation_canceled",
          "service_error",
          "service_network_error",
          "unknown_error"
        ],
        "title": "GiftCardErrorCode",
        "description": "Gift card error codes.\n\nGr4vy normalised gift card error codes. Keep the naming and style in line with\nthose in the connectors framework.\n\nIf new codes are added, append them at the end or amend public simulator\ndocumentation: https://docs.gr4vy.com/guides/features/gift-cards/simulator"
      },
      "GiftCardRedemption": {
        "properties": {
          "type": {
            "type": "string",
            "const": "gift-card-redemption",
            "title": "Type",
            "description": "Always `gift-card-redemption`.",
            "default": "gift-card-redemption",
            "examples": [
              "gift-card-redemption"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the gift card redemption.",
            "examples": [
              "31e65fb1-9c67-432e-9c06-83300b9d4059"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/GiftCardRedemptionStatus",
            "description": "The status of the gift card redemption for the `payment_method`.",
            "examples": [
              "succeeded"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount redeemed for this gift card.",
            "examples": [
              100
            ]
          },
          "refunded_amount": {
            "type": "integer",
            "title": "Refunded Amount",
            "description": "The amount refunded for this gift card. This can not be larger than `amount`.",
            "examples": [
              50
            ]
          },
          "gift_card_service_redemption_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gift Card Service Redemption Id",
            "description": "The gift card service's unique ID for the redemption.",
            "examples": [
              "xYqd43gySMtori"
            ]
          },
          "error_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GiftCardErrorCode"
              },
              {
                "type": "null"
              }
            ],
            "description": "If this gift card redemption resulted in an error, this will contain the internal code for the error.",
            "examples": [
              "expired_card"
            ]
          },
          "raw_error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Error Code",
            "description": "If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.",
            "examples": [
              "10001"
            ]
          },
          "raw_error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Error Message",
            "description": "If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.",
            "examples": [
              "Card expired"
            ]
          },
          "gift_card": {
            "$ref": "#/components/schemas/TransactionGiftCard",
            "description": "The gift card used for this redemption"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "status",
          "amount",
          "refunded_amount",
          "gift_card"
        ],
        "title": "GiftCardRedemption"
      },
      "GiftCardRedemptionStatus": {
        "type": "string",
        "enum": [
          "created",
          "succeeded",
          "failed",
          "skipped"
        ],
        "title": "GiftCardRedemptionStatus"
      },
      "GiftCardRequest": {
        "properties": {
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 16,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 16-19 digit number for the gift card.",
            "examples": [
              "4123455541234561234"
            ]
          },
          "pin": {
            "type": "string",
            "minLength": 1,
            "title": "Pin",
            "description": "The PIN for this gift card.",
            "examples": [
              "1234"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "number",
          "pin"
        ],
        "title": "GiftCardRequest",
        "description": "The number and pin for a gift card to fetch a balance for."
      },
      "GiftCardService": {
        "properties": {
          "type": {
            "type": "string",
            "const": "gift-card-service",
            "title": "Type",
            "description": "Always `gift-card-service`.",
            "default": "gift-card-service",
            "examples": [
              "gift-card-service"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the gift card service.",
            "examples": [
              "35b60feec-a7c7-4844-b503-f39b09192d81"
            ]
          },
          "gift_card_service_definition_id": {
            "$ref": "#/components/schemas/GiftCardServiceProvider",
            "description": "The ID of the definition for this service.",
            "examples": [
              "qwikcilver-gift-card"
            ]
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name",
            "description": "The display name for the gift card service.",
            "examples": [
              "Qwikcilver USA"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "gift_card_service_definition_id",
          "display_name"
        ],
        "title": "GiftCardService"
      },
      "GiftCardServiceProvider": {
        "type": "string",
        "enum": [
          "mock-gift-card",
          "qwikcilver-gift-card"
        ],
        "title": "GiftCardServiceProvider"
      },
      "GiftCardStoredRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the field to fetch a balance for.",
            "examples": [
              "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "GiftCardStoredRequest",
        "description": "The ID of a stored gift card to fetch a balance for."
      },
      "GiftCardSummary": {
        "properties": {
          "type": {
            "type": "string",
            "const": "gift-card",
            "title": "Type",
            "description": "Always `gift-card`.",
            "default": "gift-card",
            "examples": [
              "gift-card"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the gift card.",
            "examples": [
              "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this buyer belongs to.",
            "examples": [
              "default"
            ]
          },
          "bin": {
            "type": "string",
            "title": "Bin",
            "description": "The first 6 digits of the full gift card number.",
            "examples": [
              "412345"
            ]
          },
          "sub_bin": {
            "type": "string",
            "title": "Sub Bin",
            "description": "The 3 digits after the `bin` of the full gift card number.",
            "examples": [
              "554"
            ]
          },
          "last4": {
            "type": "string",
            "title": "Last4",
            "description": "The last 4 digits for the gift card.",
            "examples": [
              "1234"
            ]
          },
          "currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "examples": [
                  "EUR",
                  "GBP",
                  "USD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "The ISO-4217 currency code that this gift card has a balance for.",
            "examples": [
              "AUD"
            ]
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date",
            "description": " The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "balance": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance",
            "description": "The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.",
            "examples": [
              1299
            ]
          },
          "balance_error_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GiftCardErrorCode"
              },
              {
                "type": "null"
              }
            ],
            "description": "If the last balance update failed, this will contain the internal code for this error.",
            "examples": [
              "incorrect_currency"
            ]
          },
          "balance_raw_error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance Raw Error Code",
            "description": "If the last balance update failed, this will contain the the raw error code received from the gift card provider.",
            "examples": [
              "10363"
            ]
          },
          "balance_raw_error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance Raw Error Message",
            "description": "If the last balance update failed, this will contain the the raw error message received from the gift card provider.",
            "examples": [
              "This currency is not supported by the merchant."
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_account_id",
          "bin",
          "sub_bin",
          "last4"
        ],
        "title": "GiftCardSummary"
      },
      "GiftCardTokenTransactionCreate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the gift card to charge.",
            "examples": [
              "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
            ]
          },
          "amount": {
            "type": "integer",
            "maximum": 99999999.0,
            "minimum": 0.0,
            "title": "Amount",
            "description": "The monetary amount for this transaction to charge against the gift card, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`.",
            "examples": [
              1299
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "amount"
        ],
        "title": "GiftCardTokenTransactionCreate"
      },
      "GiftCardTransactionCreate": {
        "properties": {
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 16,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 16-19 digit number for the gift card.",
            "examples": [
              "4123455541234561234"
            ]
          },
          "pin": {
            "type": "string",
            "minLength": 1,
            "title": "Pin",
            "description": "The PIN for this gift card.",
            "examples": [
              "1234"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The monetary amount for this transaction to charge against the gift card, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`.",
            "examples": [
              1299
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "number",
          "pin",
          "amount"
        ],
        "title": "GiftCardTransactionCreate",
        "description": "Create a charge against a gift card"
      },
      "GooglePayAssuranceDetails": {
        "properties": {
          "account_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Verified",
            "description": "Defines if an account was verified.",
            "examples": [
              true
            ]
          },
          "card_holder_authenticated": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Holder Authenticated",
            "description": "Defines if the card holder was authenticated.",
            "examples": [
              true
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "GooglePayAssuranceDetails",
        "description": "The assurance details provided by Google Pay"
      },
      "GooglePayFPANPaymentMethodCreate": {
        "properties": {
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date of the card, formatted `MM/YY`.",
            "examples": [
              "12/30"
            ]
          },
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 13-19 digit number for this card.",
            "examples": [
              "4111111111111111"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The external identifier of the buyer to attach the method to.",
            "examples": [
              "buyer-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID of the buyer to attach the method to.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant reference for this payment method.",
            "examples": [
              "payment-method-12345"
            ]
          },
          "card_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Type",
            "description": "The type of the card used",
            "examples": [
              "credit"
            ]
          },
          "method": {
            "type": "string",
            "const": "googlepay_pan_only",
            "title": "Method",
            "description": "Aways `googlepay_pan_only`.",
            "examples": [
              "googlepay_pan_only"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          },
          "security_code": {
            "type": "null",
            "title": "Security Code",
            "description": "The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.",
            "examples": [
              "123"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "expiration_date",
          "number",
          "method"
        ],
        "title": "GooglePayFPANPaymentMethodCreate",
        "description": "Create a Google Pay payment with an FPAN."
      },
      "GooglePayPaymentMethodCreate": {
        "properties": {
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The external identifier of the buyer to create a payment for.",
            "examples": [
              "buyer-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID of the buyer to retrieve billing details for.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "cardholder_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardholder Name",
            "description": "The card holder name associated to the original card for the token.",
            "examples": [
              "John Luhn"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          },
          "card_suffix": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 4
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Suffix",
            "description": "The last 4 digits of the original card used to generate the token.",
            "examples": [
              "1234"
            ]
          },
          "card_scheme": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Scheme",
            "description": "The original card scheme for which the token was generated.",
            "examples": [
              "visa"
            ]
          },
          "card_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Type",
            "description": "The payment scheme of the card.",
            "examples": [
              "credit"
            ]
          },
          "method": {
            "type": "string",
            "const": "googlepay",
            "title": "Method",
            "description": "Always `googlepay`",
            "examples": [
              "googlepay"
            ]
          },
          "token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "type": "object"
              }
            ],
            "title": "Token",
            "description": "The opaque token as received from the Google Pay JS library. This format may change between JS library versions.",
            "examples": [
              "{\"signature\":\"MEUCIEg4a4A+pu+AUjgVjBpfz9msLqQOkT5kz7htz..."
            ]
          },
          "assurance_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GooglePayAssuranceDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "The assurance details provided by Google Pay"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "token"
        ],
        "title": "GooglePayPaymentMethodCreate",
        "description": "Create a Google Pay transaction with a device token."
      },
      "GooglePayPaymentOptionContext": {
        "properties": {
          "merchant_name": {
            "type": "string",
            "title": "Merchant Name"
          },
          "supported_schemes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Schemes"
          },
          "gateway": {
            "type": "string",
            "title": "Gateway"
          },
          "gateway_merchant_id": {
            "type": "string",
            "title": "Gateway Merchant Id"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_name",
          "supported_schemes",
          "gateway",
          "gateway_merchant_id"
        ],
        "title": "GooglePayPaymentOptionContext"
      },
      "GooglePaySession": {
        "properties": {
          "gateway_merchant_id": {
            "type": "string",
            "title": "Gateway Merchant Id",
            "description": "The gateway ID for the merchant as assigned by our platform.",
            "examples": [
              "app.gr4vy.sandbox.example.default"
            ]
          },
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The session token for Google Pay.",
            "examples": [
              "UouQUGXehuqwQ7FI"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "gateway_merchant_id",
          "token"
        ],
        "title": "GooglePaySession"
      },
      "GooglePaySessionRequest": {
        "properties": {
          "origin_domain": {
            "type": "string",
            "title": "Origin Domain",
            "description": "The domain on which Google Pay is being loaded.",
            "examples": [
              "example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "origin_domain"
        ],
        "title": "GooglePaySessionRequest"
      },
      "GuestBuyer-Input": {
        "properties": {
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the buyer.",
            "examples": [
              "John Doe"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this buyer.",
            "examples": [
              "buyer-12345"
            ]
          },
          "billing_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BillingDetails-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing name, address, email, and other fields for this buyer."
          },
          "account_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Number",
            "description": "The buyer account number"
          },
          "shipping_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShippingDetailsCreate"
              },
              {
                "type": "null"
              }
            ],
            "description": "The optional shipping details for this buyer."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "GuestBuyer"
      },
      "GuestBuyer-Output": {
        "properties": {
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the buyer.",
            "examples": [
              "John Doe"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this buyer.",
            "examples": [
              "buyer-12345"
            ]
          },
          "billing_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BillingDetails-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing name, address, email, and other fields for this buyer."
          },
          "account_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Number",
            "description": "The buyer account number"
          },
          "shipping_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShippingDetailsCreate"
              },
              {
                "type": "null"
              }
            ],
            "description": "The optional shipping details for this buyer."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "GuestBuyer"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InstrumentType": {
        "type": "string",
        "enum": [
          "pan",
          "card_token",
          "redirect",
          "redirect_token",
          "googlepay",
          "applepay",
          "network_token"
        ],
        "title": "InstrumentType"
      },
      "MerchantAccount": {
        "properties": {
          "type": {
            "type": "string",
            "const": "merchant-account",
            "title": "Type",
            "description": "Always `merchant-account`.",
            "default": "merchant-account",
            "examples": [
              "merchant-account"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Id",
            "description": "The ID for the merchant account.",
            "examples": [
              "merchant-12345"
            ]
          },
          "display_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Display Name",
            "description": "The display name for the buyer.",
            "examples": [
              "John Doe"
            ]
          },
          "outbound_webhook_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Url",
            "description": "An optional endpoint URL to deliver webhook notifications to.",
            "examples": [
              "https://example.com/callback"
            ]
          },
          "outbound_webhook_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Username",
            "description": "The optional username to use when `outbound_webhook_url` is configured and requires basic authentication.",
            "examples": [
              "user-12345"
            ]
          },
          "outbound_webhook_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Password",
            "description": "The optional password to use when `outbound_webhook_url` is configured and requires basic authentication",
            "examples": [
              "password-12345"
            ]
          },
          "loon_client_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Client Key",
            "description": "Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              "client-key-1234"
            ]
          },
          "loon_secret_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Secret Key",
            "description": "Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              "key-12345"
            ]
          },
          "loon_accepted_schemes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Accepted Schemes",
            "description": "Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              [
                "visa"
              ]
            ]
          },
          "account_updater_request_encryption_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Request Encryption Key",
            "description": "The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-1234"
            ]
          },
          "account_updater_request_encryption_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Request Encryption Key Id",
            "description": "The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-id-1234"
            ]
          },
          "account_updater_response_decryption_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Response Decryption Key",
            "description": "The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-1234"
            ]
          },
          "account_updater_response_decryption_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Response Decryption Key Id",
            "description": "The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-id-1234"
            ]
          },
          "account_updater_enabled": {
            "type": "boolean",
            "title": "Account Updater Enabled",
            "description": "Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.",
            "examples": [
              true
            ]
          },
          "over_capture_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Over Capture Amount",
            "description": "The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.",
            "examples": [
              1299
            ]
          },
          "over_capture_percentage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Over Capture Percentage",
            "description": "The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.",
            "examples": [
              25
            ]
          },
          "visa_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Visa Network Tokens Requestor Id",
            "description": "Requestor ID provided for Visa after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "visa_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Visa Network Tokens App Id",
            "description": "Application ID provided for Visa after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "amex_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amex Network Tokens Requestor Id",
            "description": "Requestor ID provided for American Express after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "amex_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amex Network Tokens App Id",
            "description": "Application ID provided for American Express after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "mastercard_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mastercard Network Tokens Requestor Id",
            "description": "Requestor ID provided for Mastercard after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "mastercard_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mastercard Network Tokens App Id",
            "description": "Application ID provided for Mastercard after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this merchant account was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this merchant account was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "display_name",
          "account_updater_enabled",
          "created_at",
          "updated_at"
        ],
        "title": "MerchantAccount"
      },
      "MerchantAccountCreate": {
        "properties": {
          "account_updater_enabled": {
            "type": "boolean",
            "title": "Account Updater Enabled",
            "description": "Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.",
            "default": false,
            "examples": [
              true
            ]
          },
          "account_updater_request_encryption_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Request Encryption Key",
            "description": "The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-1234"
            ]
          },
          "account_updater_request_encryption_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Request Encryption Key Id",
            "description": "The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-id-1234"
            ]
          },
          "account_updater_response_decryption_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Response Decryption Key",
            "description": "The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-1234"
            ]
          },
          "account_updater_response_decryption_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Response Decryption Key Id",
            "description": "The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-id-1234"
            ]
          },
          "over_capture_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Over Capture Amount",
            "description": "The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.",
            "examples": [
              1299
            ]
          },
          "over_capture_percentage": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Over Capture Percentage",
            "description": "The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.",
            "examples": [
              25
            ]
          },
          "loon_client_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Client Key",
            "description": "Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              "client-key-1234"
            ]
          },
          "loon_secret_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Secret Key",
            "description": "Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              "key-12345"
            ]
          },
          "loon_accepted_schemes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Accepted Schemes",
            "description": "Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              [
                "visa"
              ]
            ]
          },
          "visa_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Visa Network Tokens Requestor Id",
            "description": "Requestor ID provided for Visa after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "visa_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Visa Network Tokens App Id",
            "description": "Application ID provided for Visa after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "amex_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Amex Network Tokens Requestor Id",
            "description": "Requestor ID provided for American Express after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "amex_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Amex Network Tokens App Id",
            "description": "Application ID provided for American Express after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "mastercard_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Mastercard Network Tokens Requestor Id",
            "description": "Requestor ID provided for Mastercard after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "mastercard_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Mastercard Network Tokens App Id",
            "description": "Application ID provided for Mastercard after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "outbound_webhook_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Url",
            "description": "An optional endpoint URL to deliver webhook notifications to.",
            "examples": [
              "https://example.com/callback"
            ]
          },
          "outbound_webhook_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Username",
            "description": "The optional username to use when `outbound_webhook_url` is configured and requires basic authentication.",
            "examples": [
              "user-12345"
            ]
          },
          "outbound_webhook_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Password",
            "description": "The optional password to use when `outbound_webhook_url` is configured and requires basic authentication",
            "examples": [
              "password-12345"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9-]+$",
            "title": "Id",
            "description": "The ID for the merchant account.",
            "examples": [
              "merchant-12345"
            ]
          },
          "display_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Display Name",
            "description": "The display name for the merchant account.",
            "examples": [
              "Example"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "display_name"
        ],
        "title": "MerchantAccountCreate"
      },
      "MerchantAccountUpdate": {
        "properties": {
          "account_updater_enabled": {
            "type": "boolean",
            "title": "Account Updater Enabled",
            "description": "Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.",
            "default": false,
            "examples": [
              true
            ]
          },
          "account_updater_request_encryption_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Request Encryption Key",
            "description": "The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-1234"
            ]
          },
          "account_updater_request_encryption_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Request Encryption Key Id",
            "description": "The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-id-1234"
            ]
          },
          "account_updater_response_decryption_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Response Decryption Key",
            "description": "The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-1234"
            ]
          },
          "account_updater_response_decryption_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Updater Response Decryption Key Id",
            "description": "The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.",
            "examples": [
              "key-id-1234"
            ]
          },
          "over_capture_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Over Capture Amount",
            "description": "The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.",
            "examples": [
              1299
            ]
          },
          "over_capture_percentage": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Over Capture Percentage",
            "description": "The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.",
            "examples": [
              25
            ]
          },
          "loon_client_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Client Key",
            "description": "Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              "client-key-1234"
            ]
          },
          "loon_secret_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Secret Key",
            "description": "Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              "key-12345"
            ]
          },
          "loon_accepted_schemes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Loon Accepted Schemes",
            "description": "Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.",
            "examples": [
              [
                "visa"
              ]
            ]
          },
          "visa_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Visa Network Tokens Requestor Id",
            "description": "Requestor ID provided for Visa after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "visa_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Visa Network Tokens App Id",
            "description": "Application ID provided for Visa after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "amex_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Amex Network Tokens Requestor Id",
            "description": "Requestor ID provided for American Express after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "amex_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Amex Network Tokens App Id",
            "description": "Application ID provided for American Express after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "mastercard_network_tokens_requestor_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Mastercard Network Tokens Requestor Id",
            "description": "Requestor ID provided for Mastercard after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "mastercard_network_tokens_app_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Mastercard Network Tokens App Id",
            "description": "Application ID provided for Mastercard after onboarding to use Network Tokens.",
            "examples": [
              "id-12345"
            ]
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the merchant account.",
            "examples": [
              "Example"
            ]
          },
          "outbound_webhook_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Url",
            "description": "An optional endpoint URL to deliver webhook notifications to.",
            "examples": [
              "https://example.com/callback"
            ]
          },
          "outbound_webhook_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Username",
            "description": "The optional username to use when `outbound_webhook_url` is configured and requires basic authentication.",
            "examples": [
              "user-12345"
            ]
          },
          "outbound_webhook_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outbound Webhook Password",
            "description": "The optional password to use when `outbound_webhook_url` is configured and requires basic authentication",
            "examples": [
              "password-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "MerchantAccountUpdate"
      },
      "MerchantProfileScheme": {
        "properties": {
          "merchant_acquirer_bin": {
            "type": "string",
            "maxLength": 11,
            "title": "Merchant Acquirer Bin",
            "description": "Acquirer BIN to use when calling 3DS through this scheme.",
            "examples": [
              "516327"
            ]
          },
          "merchant_url": {
            "type": "string",
            "title": "Merchant Url",
            "description": "URL to send when calling 3DS through this scheme.",
            "examples": [
              "https://example.com"
            ]
          },
          "merchant_acquirer_id": {
            "type": "string",
            "maxLength": 35,
            "title": "Merchant Acquirer Id",
            "description": "Merchant ID to use when calling 3DS through this scheme.",
            "examples": [
              "123456789012345"
            ]
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 40,
            "title": "Merchant Name",
            "description": "",
            "examples": [
              "Acme Inc."
            ]
          },
          "merchant_country_code": {
            "type": "string",
            "pattern": "^\\d{3}$",
            "title": "Merchant Country Code",
            "description": "Merchant country code to use when calling 3DS through this scheme.",
            "examples": [
              "USD"
            ]
          },
          "merchant_category_code": {
            "type": "string",
            "maxLength": 4,
            "minLength": 4,
            "title": "Merchant Category Code",
            "description": "Merchant category code to use when calling 3DS through this scheme.",
            "examples": [
              "1234"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_acquirer_bin",
          "merchant_url",
          "merchant_acquirer_id",
          "merchant_name",
          "merchant_country_code",
          "merchant_category_code"
        ],
        "title": "MerchantProfileScheme"
      },
      "MerchantProfileSchemeSummary": {
        "properties": {
          "merchant_acquirer_bin": {
            "type": "string",
            "maxLength": 11,
            "title": "Merchant Acquirer Bin",
            "description": "Acquirer BIN to use when calling 3DS through this scheme.",
            "examples": [
              "516327"
            ]
          },
          "merchant_url": {
            "type": "string",
            "title": "Merchant Url",
            "description": "URL to send when calling 3DS through this scheme.",
            "examples": [
              "https://example.com"
            ]
          },
          "merchant_acquirer_id": {
            "type": "string",
            "maxLength": 35,
            "title": "Merchant Acquirer Id",
            "description": "Merchant ID to use when calling 3DS through this scheme.",
            "examples": [
              "123456789012345"
            ]
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 40,
            "title": "Merchant Name",
            "description": "",
            "examples": [
              "Acme Inc."
            ]
          },
          "merchant_country_code": {
            "type": "string",
            "pattern": "^\\d{3}$",
            "title": "Merchant Country Code",
            "description": "Merchant country code to use when calling 3DS through this scheme.",
            "examples": [
              "USD"
            ]
          },
          "merchant_category_code": {
            "type": "string",
            "maxLength": 4,
            "minLength": 4,
            "title": "Merchant Category Code",
            "description": "Merchant category code to use when calling 3DS through this scheme.",
            "examples": [
              "1234"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when this profile was first created in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_acquirer_bin",
          "merchant_url",
          "merchant_acquirer_id",
          "merchant_name",
          "merchant_country_code",
          "merchant_category_code",
          "created_at"
        ],
        "title": "MerchantProfileSchemeSummary"
      },
      "Method": {
        "type": "string",
        "enum": [
          "abitab",
          "affirm",
          "afterpay",
          "alipay",
          "alipayhk",
          "applepay",
          "arcuspaynetwork",
          "bacs",
          "bancontact",
          "banked",
          "bcp",
          "becs",
          "bitpay",
          "boleto",
          "boost",
          "card",
          "cashapp",
          "chaseorbital",
          "clearpay",
          "click-to-pay",
          "dana",
          "dcb",
          "dlocal",
          "ebanx",
          "efecty",
          "eps",
          "everydaypay",
          "gcash",
          "gem",
          "gemds",
          "gift-card",
          "giropay",
          "givingblock",
          "gocardless",
          "googlepay",
          "googlepay_pan_only",
          "gopay",
          "grabpay",
          "ideal",
          "kakaopay",
          "kcp",
          "khipu",
          "klarna",
          "latitude",
          "latitudeds",
          "laybuy",
          "linepay",
          "linkaja",
          "maybankqrpay",
          "mercadopago",
          "multibanco",
          "multipago",
          "nequi",
          "netbanking",
          "network-token",
          "nupay",
          "oney_10x",
          "oney_12x",
          "oney_3x",
          "oney_4x",
          "oney_6x",
          "ovo",
          "oxxo",
          "pagoefectivo",
          "payid",
          "paymaya",
          "paypal",
          "paypalpaylater",
          "payto",
          "payvalida",
          "picpay",
          "pix",
          "pse",
          "rabbitlinepay",
          "razorpay",
          "rapipago",
          "redpagos",
          "scalapay",
          "sepa",
          "servipag",
          "shopeepay",
          "singteldash",
          "smartpay",
          "sofort",
          "spei",
          "stitch",
          "stripedd",
          "thaiqr",
          "touchngo",
          "truemoney",
          "trustly",
          "trustlyeurope",
          "upi",
          "venmo",
          "vipps",
          "waave",
          "webpay",
          "wechat",
          "yape",
          "zippay"
        ],
        "title": "Method"
      },
      "Mode": {
        "type": "string",
        "enum": [
          "card",
          "redirect",
          "applepay",
          "googlepay",
          "checkout-session",
          "click-to-pay",
          "gift-card"
        ],
        "title": "Mode"
      },
      "NetworkToken": {
        "properties": {
          "type": {
            "type": "string",
            "const": "network-token",
            "title": "Type",
            "description": "Always `network-token`.",
            "default": "network-token",
            "examples": [
              "network-token"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the network token.",
            "examples": [
              "918f6c9b-5d11-4897-98dc-23fda6fe0055"
            ]
          },
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date for the network token.",
            "examples": [
              "12/30"
            ]
          },
          "payment_method_id": {
            "type": "string",
            "format": "uuid",
            "title": "Payment Method Id",
            "description": "The ID of the payment method used to generate this token",
            "examples": [
              "ef9496d8-53a5-4aad-8ca2-00eb68334389"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/NetworkTokenStatus",
            "description": "The state of the network token.",
            "examples": [
              "active"
            ]
          },
          "token": {
            "type": "string",
            "maxLength": 300,
            "minLength": 1,
            "title": "Token",
            "description": "The token value. Will be present if succeeded.",
            "examples": [
              "4111123456789012"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when this network token was first created in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when this network token was last updated in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "expiration_date",
          "payment_method_id",
          "status",
          "token",
          "created_at",
          "updated_at"
        ],
        "title": "NetworkToken"
      },
      "NetworkTokenCreate": {
        "properties": {
          "security_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 3,
                "pattern": "^\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Code",
            "description": "The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.",
            "examples": [
              "123"
            ]
          },
          "merchant_initiated": {
            "type": "boolean",
            "title": "Merchant Initiated",
            "description": "Defines if the request is merchant initiated or not.",
            "examples": [
              false
            ]
          },
          "is_subsequent_payment": {
            "type": "boolean",
            "title": "Is Subsequent Payment",
            "description": "Defines if the request is a subsequent of another request or not.",
            "examples": [
              false
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_initiated",
          "is_subsequent_payment"
        ],
        "title": "NetworkTokenCreate"
      },
      "NetworkTokenPaymentMethodCreate": {
        "properties": {
          "method": {
            "type": "string",
            "const": "network-token",
            "title": "Method",
            "description": "Always `network-token`.",
            "examples": [
              "network-token"
            ]
          },
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The scheme token.",
            "examples": [
              "4111123456789012"
            ]
          },
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date of the token.",
            "examples": [
              "12/30"
            ]
          },
          "cryptogram": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cryptogram",
            "description": "The payment cryptogram for the network token.",
            "examples": [
              "A3F9C2D47E1B56A9"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after the complete 3DS in browser.",
            "examples": [
              "https://example.com"
            ]
          },
          "card_source": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "apple-pay",
                  "google-pay"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Source",
            "description": "The optional source of the decrypted device token.",
            "examples": [
              "apple-pay"
            ]
          },
          "card_scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The original card scheme for which the token was generated.",
            "examples": [
              "visa"
            ]
          },
          "card_suffix": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Suffix",
            "description": "The last 4 digits of the original card used to generate the token.",
            "examples": [
              "1234"
            ]
          },
          "cardholder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardholder Name",
            "description": "The card holder name associated to the original card for the token.",
            "examples": [
              "John Luhn"
            ]
          },
          "eci": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2,
                "minLength": 1,
                "pattern": "^0?\\d$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Eci",
            "description": "The ecommerce indicator for the token.",
            "examples": [
              "05"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "token",
          "expiration_date"
        ],
        "title": "NetworkTokenPaymentMethodCreate"
      },
      "NetworkTokenStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "suspended",
          "deleted"
        ],
        "title": "NetworkTokenStatus"
      },
      "PaymentMethod": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-method",
            "title": "Type",
            "description": "Always `payment-method`.",
            "default": "payment-method",
            "examples": [
              "payment-method"
            ]
          },
          "approval_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approval Url",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize their payment.",
            "examples": [
              "https://gr4vy.app/redirect/12345"
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.",
            "examples": [
              "US"
            ]
          },
          "currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "examples": [
                  "EUR",
                  "GBP",
                  "USD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.",
            "examples": [
              "USD"
            ]
          },
          "details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDetailsCard"
              },
              {
                "type": "null"
              }
            ],
            "description": "Details for credit or debit card payment method."
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5,
                "minLength": 5,
                "pattern": "^\\d{2}/\\d{2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date",
            "description": "The expiration date for the payment method.",
            "examples": [
              "12/30"
            ]
          },
          "fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fingerprint",
            "description": "The unique hash derived from the payment method identifier (e.g. card number).",
            "examples": [
              "a50b85c200ee0795d6fd33a5c66f37a4564f554355c5b46a756aac485dd168a4"
            ]
          },
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.",
            "examples": [
              "1234"
            ]
          },
          "last_replaced_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Replaced At",
            "description": "The date and time when this card was last replaced by the account updater.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "method": {
            "$ref": "#/components/schemas/Method",
            "description": "The type of this payment method.",
            "examples": [
              "card"
            ]
          },
          "mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Mode"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mode to use with this payment method.",
            "examples": [
              "card"
            ]
          },
          "scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The scheme of the card. Only applies to card payments.",
            "examples": [
              "visa"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the payment method.",
            "examples": [
              "ef9496d8-53a5-4aad-8ca2-00eb68334389"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this buyer belongs to.",
            "examples": [
              "default"
            ]
          },
          "additional_schemes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Schemes",
            "description": "Additional schemes of the card besides the primary scheme. Only applies to card payment methods.",
            "examples": [
              [
                "eftpos-australia"
              ]
            ]
          },
          "cit_last_used_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cit Last Used At",
            "description": "The timestamp when this payment method was last used in a transaction for client initiated transactions.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "cit_usage_count": {
            "type": "integer",
            "title": "Cit Usage Count",
            "description": "The number of times this payment method has been used in transactions for client initiated transactions.",
            "examples": [
              50
            ]
          },
          "has_replacement": {
            "type": "boolean",
            "title": "Has Replacement",
            "description": "Whether this card has a pending replacement that hasn't been applied yet.",
            "examples": [
              false
            ]
          },
          "last_used_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Used At",
            "description": "The timestamp when this payment method was last used in a transaction.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "usage_count": {
            "type": "integer",
            "title": "Usage Count",
            "description": "The number of times this payment method has been used in transactions.",
            "examples": [
              100
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The optional buyer for which this payment method has been stored."
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant reference that can be used to match the payment method against your own records.",
            "examples": [
              "card-12345"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentMethodStatus",
            "description": "The state of the payment method.",
            "examples": [
              "succeeded"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when this payment method was first created in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when this payment method was last updated in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "id",
          "merchant_account_id",
          "cit_usage_count",
          "has_replacement",
          "usage_count",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "PaymentMethod",
        "description": "Payment Method\n\nA stored payment method."
      },
      "PaymentMethodCard": {
        "properties": {
          "method": {
            "type": "string",
            "const": "card",
            "title": "Method",
            "description": "Set to `card` to use a new card.",
            "default": "card",
            "examples": [
              "card"
            ]
          },
          "number": {
            "type": "string",
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d+$",
            "title": "Number",
            "description": "The 13-19 digit number for this card as it can be found on the front of the card.",
            "examples": [
              "4242424242424242"
            ]
          },
          "expiration_date": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}/\\d{2}$",
            "title": "Expiration Date",
            "description": "The expiration date of the card, formatted `MM/YY`.",
            "examples": [
              "12/30"
            ]
          },
          "card_scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The optional card's network scheme.",
            "examples": [
              "visa"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this card.",
            "examples": [
              "card-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "number",
          "expiration_date"
        ],
        "title": "PaymentMethodCard"
      },
      "PaymentMethodDetailsCard": {
        "properties": {
          "bin": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 8,
                "minLength": 6,
                "pattern": "^\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bin"
          },
          "card_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardType"
              },
              {
                "type": "null"
              }
            ]
          },
          "card_issuer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Issuer Name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PaymentMethodDetailsCard"
      },
      "PaymentMethodStatus": {
        "type": "string",
        "enum": [
          "processing",
          "buyer_approval_required",
          "succeeded",
          "failed",
          "paused"
        ],
        "title": "PaymentMethodStatus"
      },
      "PaymentMethodStoredCard": {
        "properties": {
          "method": {
            "type": "string",
            "const": "id",
            "title": "Method",
            "description": "Set to `id` to use a stored card.",
            "default": "id",
            "examples": [
              "id"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the stored card to use.",
            "examples": [
              "852b951c-d7ea-4c98-b09e-4a1c9e97c077"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "PaymentMethodStoredCard"
      },
      "PaymentMethodSummary": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-method",
            "title": "Type",
            "description": "Always `payment-method`.",
            "default": "payment-method",
            "examples": [
              "payment-method"
            ]
          },
          "approval_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approval Url",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize their payment.",
            "examples": [
              "https://gr4vy.app/redirect/12345"
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.",
            "examples": [
              "US"
            ]
          },
          "currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "examples": [
                  "EUR",
                  "GBP",
                  "USD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.",
            "examples": [
              "USD"
            ]
          },
          "details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDetailsCard"
              },
              {
                "type": "null"
              }
            ],
            "description": "Details for credit or debit card payment method."
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5,
                "minLength": 5,
                "pattern": "^\\d{2}/\\d{2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date",
            "description": "The expiration date for the payment method.",
            "examples": [
              "12/30"
            ]
          },
          "fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fingerprint",
            "description": "The unique hash derived from the payment method identifier (e.g. card number).",
            "examples": [
              "a50b85c200ee0795d6fd33a5c66f37a4564f554355c5b46a756aac485dd168a4"
            ]
          },
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.",
            "examples": [
              "1234"
            ]
          },
          "last_replaced_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Replaced At",
            "description": "The date and time when this card was last replaced by the account updater.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "method": {
            "$ref": "#/components/schemas/Method",
            "description": "The type of this payment method.",
            "examples": [
              "card"
            ]
          },
          "mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Mode"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mode to use with this payment method.",
            "examples": [
              "card"
            ]
          },
          "scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The scheme of the card. Only applies to card payments.",
            "examples": [
              "visa"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the payment method.",
            "examples": [
              "ef9496d8-53a5-4aad-8ca2-00eb68334389"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this buyer belongs to.",
            "examples": [
              "default"
            ]
          },
          "additional_schemes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Schemes",
            "description": "Additional schemes of the card besides the primary scheme. Only applies to card payment methods.",
            "examples": [
              [
                "eftpos-australia"
              ]
            ]
          },
          "cit_last_used_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cit Last Used At",
            "description": "The timestamp when this payment method was last used in a transaction for client initiated transactions.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "cit_usage_count": {
            "type": "integer",
            "title": "Cit Usage Count",
            "description": "The number of times this payment method has been used in transactions for client initiated transactions.",
            "examples": [
              50
            ]
          },
          "has_replacement": {
            "type": "boolean",
            "title": "Has Replacement",
            "description": "Whether this card has a pending replacement that hasn't been applied yet.",
            "examples": [
              false
            ]
          },
          "last_used_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Used At",
            "description": "The timestamp when this payment method was last used in a transaction.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "usage_count": {
            "type": "integer",
            "title": "Usage Count",
            "description": "The number of times this payment method has been used in transactions.",
            "examples": [
              100
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "id",
          "merchant_account_id",
          "cit_usage_count",
          "has_replacement",
          "usage_count"
        ],
        "title": "PaymentMethodSummary",
        "description": "Payment Method\n\nA summary of a payment method."
      },
      "PaymentOption": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-option",
            "title": "Type",
            "default": "payment-option"
          },
          "method": {
            "type": "string",
            "title": "Method"
          },
          "icon_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1500,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon Url"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "can_store_payment_method": {
            "type": "boolean",
            "title": "Can Store Payment Method"
          },
          "can_delay_capture": {
            "type": "boolean",
            "title": "Can Delay Capture"
          },
          "context": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WalletPaymentOptionContext"
              },
              {
                "$ref": "#/components/schemas/GooglePayPaymentOptionContext"
              },
              {
                "$ref": "#/components/schemas/PaymentOptionContext"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "mode",
          "can_store_payment_method",
          "can_delay_capture"
        ],
        "title": "PaymentOption"
      },
      "PaymentOptionContext": {
        "properties": {
          "approval_ui": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentOptionContextApprovalUI"
              },
              {
                "type": "null"
              }
            ]
          },
          "required_fields": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {}
                        ]
                      },
                      "type": "object"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Fields"
          },
          "redirect_requires_popup": {
            "type": "boolean",
            "title": "Redirect Requires Popup"
          },
          "requires_tokenized_redirect_popup": {
            "type": "boolean",
            "title": "Requires Tokenized Redirect Popup"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "redirect_requires_popup",
          "requires_tokenized_redirect_popup"
        ],
        "title": "PaymentOptionContext"
      },
      "PaymentOptionContextApprovalUI": {
        "properties": {
          "height": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Height"
          },
          "width": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Width"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PaymentOptionContextApprovalUI"
      },
      "PaymentOptionRequest": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.",
            "examples": [
              {
                "cohort": "a"
              }
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.",
            "examples": [
              "US"
            ]
          },
          "currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "examples": [
                  "EUR",
                  "GBP",
                  "USD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.",
            "examples": [
              "USD"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount",
            "description": "The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.",
            "examples": [
              1299
            ]
          },
          "locale": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Locale",
            "description": "The locale used to determine the labels for each payment option.",
            "default": "en",
            "examples": [
              "en"
            ]
          },
          "cart_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cart Items",
            "description": "The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PaymentOptionRequest"
      },
      "PaymentService": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-service",
            "title": "Type",
            "description": "Always `payment-service`",
            "default": "payment-service",
            "examples": [
              "payment-service"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "default": "The ID of the payment service",
            "examples": [
              "fffd152a-9532-4087-9a4f-de58754210f0"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this job belongs to.",
            "examples": [
              "default"
            ]
          },
          "payment_service_definition_id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Payment Service Definition Id",
            "description": "The definition ID of the service that has been configured.",
            "examples": [
              "stripe-card"
            ]
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Defines if this payment service is currently active.",
            "default": true,
            "examples": [
              true,
              false
            ]
          },
          "method": {
            "$ref": "#/components/schemas/Method",
            "description": "The payment method that this service supports.",
            "examples": [
              "card"
            ]
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name",
            "description": "The display name for the payment service.",
            "examples": [
              "Stripe"
            ]
          },
          "position": {
            "type": "integer",
            "title": "Position",
            "description": "Deprecated field used to define the order in which to process payment services",
            "examples": [
              1
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentServiceStatus",
            "default": "The current status of this service.",
            "examples": [
              "created"
            ]
          },
          "accepted_currencies": {
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{3}$",
              "examples": [
                "EUR",
                "GBP",
                "USD"
              ]
            },
            "type": "array",
            "title": "Accepted Currencies",
            "description": "A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.",
            "examples": [
              [
                "USD",
                "EUR",
                "GBP"
              ]
            ]
          },
          "accepted_countries": {
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{2}$",
              "examples": [
                "DE",
                "GB",
                "US"
              ]
            },
            "type": "array",
            "title": "Accepted Countries",
            "description": "A list of countries for which this service is enabled, in ISO two-letter code format.",
            "examples": [
              [
                "US",
                "DE",
                "GB"
              ]
            ]
          },
          "payment_method_tokenization_enabled": {
            "type": "boolean",
            "title": "Payment Method Tokenization Enabled",
            "description": "Defines if this payment service support payment method tokenization.",
            "examples": [
              true
            ]
          },
          "network_tokens_enabled": {
            "type": "boolean",
            "title": "Network Tokens Enabled",
            "description": "Defines if this payment service supports network tokens.",
            "examples": [
              true
            ]
          },
          "open_loop": {
            "type": "boolean",
            "title": "Open Loop",
            "description": "Defines if this payment service is open loop.",
            "examples": [
              true
            ]
          },
          "settlement_reporting_enabled": {
            "type": "boolean",
            "title": "Settlement Reporting Enabled",
            "description": "Defines if this payment service has settlement reporting enabled.",
            "examples": [
              true
            ]
          },
          "three_d_secure_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Three D Secure Enabled",
            "description": "Defines if this payment service has 3DS enabled.",
            "examples": [
              true
            ]
          },
          "merchant_profile": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/MerchantProfileSchemeSummary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "propertyNames": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Profile",
            "description": "An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme."
          },
          "webhook_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Webhook Url",
            "description": "The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant."
          },
          "fields": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Field"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fields",
            "description": "The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted."
          },
          "reporting_fields": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Field"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reporting Fields",
            "description": "The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted."
          },
          "is_deleted": {
            "type": "boolean",
            "title": "Is Deleted",
            "description": "Defines if this payment service has been deleted",
            "default": false,
            "examples": [
              false
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when this payment service was first created in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when this payment service was last updated in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_account_id",
          "payment_service_definition_id",
          "method",
          "display_name",
          "position",
          "accepted_currencies",
          "accepted_countries",
          "payment_method_tokenization_enabled",
          "network_tokens_enabled",
          "open_loop",
          "settlement_reporting_enabled",
          "created_at",
          "updated_at"
        ],
        "title": "PaymentService"
      },
      "PaymentServiceConfiguration": {
        "properties": {
          "approval_ui_target": {
            "$ref": "#/components/schemas/ApprovalTarget",
            "description": "The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.",
            "examples": [
              "any"
            ]
          },
          "approval_ui_height": {
            "type": "string",
            "pattern": "^\\d+(?:vh|px)$",
            "title": "Approval Ui Height",
            "description": "Height of the approval interface in either pixels or view height (vh).",
            "examples": [
              "100px",
              "50vh"
            ]
          },
          "approval_ui_width": {
            "type": "string",
            "pattern": "^\\d+(?:vw|px)$",
            "title": "Approval Ui Width",
            "description": "Width of the approval interface in either pixels or view width (vw).",
            "examples": [
              "100px",
              "50vw"
            ]
          },
          "cart_items_limit": {
            "type": "integer",
            "title": "Cart Items Limit",
            "description": "The maximum number of cart items supported by this connector before we will truncate the list.",
            "examples": [
              100
            ]
          },
          "cart_items_required": {
            "type": "boolean",
            "title": "Cart Items Required",
            "description": "Defines if cart items are required by this connector.",
            "examples": [
              true
            ]
          },
          "cart_items_should_match_amount": {
            "type": "boolean",
            "title": "Cart Items Should Match Amount",
            "description": "Defines if the cart items sum value should match the transaction amount.",
            "examples": [
              true
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "approval_ui_target",
          "approval_ui_height",
          "approval_ui_width",
          "cart_items_limit",
          "cart_items_required",
          "cart_items_should_match_amount"
        ],
        "title": "PaymentServiceConfiguration"
      },
      "PaymentServiceCreate": {
        "properties": {
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name",
            "description": "The display name for the payment service.",
            "examples": [
              "Stripe"
            ]
          },
          "payment_service_definition_id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Payment Service Definition Id",
            "description": "The definition ID of the service to configure.",
            "examples": [
              "stripe-card"
            ]
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "type": "array",
            "title": "Fields",
            "description": "The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted."
          },
          "reporting_fields": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Field"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reporting Fields",
            "description": "The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted."
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position",
            "description": "Deprecated field used to define the order in which to process payment services",
            "examples": [
              1
            ]
          },
          "accepted_currencies": {
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{3}$",
              "examples": [
                "EUR",
                "GBP",
                "USD"
              ]
            },
            "type": "array",
            "minItems": 1,
            "title": "Accepted Currencies",
            "description": "A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.",
            "examples": [
              [
                "USD",
                "EUR",
                "GBP"
              ]
            ]
          },
          "accepted_countries": {
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{2}$",
              "examples": [
                "DE",
                "GB",
                "US"
              ]
            },
            "type": "array",
            "minItems": 1,
            "title": "Accepted Countries",
            "description": "A list of countries for which this service is enabled, in ISO two-letter code format.",
            "examples": [
              [
                "US",
                "DE",
                "GB"
              ]
            ]
          },
          "active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active",
            "description": "Defines if this payment service is currently active.",
            "default": true,
            "examples": [
              true,
              false
            ]
          },
          "three_d_secure_enabled": {
            "type": "boolean",
            "title": "Three D Secure Enabled",
            "description": "Defines if this payment service has 3DS enabled.",
            "default": false,
            "examples": [
              true
            ]
          },
          "merchant_profile": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/MerchantProfileScheme"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "propertyNames": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Profile",
            "description": "An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme."
          },
          "payment_method_tokenization_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method Tokenization Enabled",
            "description": "Defines if this payment service support payment method tokenization.",
            "examples": [
              true
            ]
          },
          "network_tokens_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Network Tokens Enabled",
            "description": "Defines if this payment service supports network tokens.",
            "examples": [
              true
            ]
          },
          "open_loop": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Open Loop",
            "description": "Defines if this payment service is open loop.",
            "examples": [
              true
            ]
          },
          "settlement_reporting_enabled": {
            "type": "boolean",
            "title": "Settlement Reporting Enabled",
            "description": "Defines if this payment service has settlement reporting enabled.",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "display_name",
          "payment_service_definition_id",
          "fields",
          "accepted_currencies",
          "accepted_countries"
        ],
        "title": "PaymentServiceCreate",
        "description": "Request body for activating a payment service"
      },
      "PaymentServiceDefinition": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Id",
            "description": "The definition ID of the payment service that can be configured. This is the underlying provider followed by a dash followed by the method.",
            "examples": [
              "adyen-ideal",
              "stripe-card"
            ]
          },
          "type": {
            "type": "string",
            "const": "payment-service-definition",
            "title": "Type",
            "description": "Always `payment-service-definition`.",
            "default": "payment-service-definition",
            "examples": [
              "payment-service-definition"
            ]
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name",
            "description": "A human friendly name for this service.",
            "examples": [
              "iDEAL",
              "Stripe"
            ]
          },
          "method": {
            "$ref": "#/components/schemas/Method",
            "description": "The method of the service",
            "examples": [
              "ideal",
              "card"
            ]
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/DefinitionField"
            },
            "type": "array",
            "title": "Fields",
            "description": "A list of credentials and related fields which can be configured for this service."
          },
          "reporting_fields": {
            "items": {
              "$ref": "#/components/schemas/DefinitionField"
            },
            "type": "array",
            "title": "Reporting Fields",
            "description": "A list of reporting fields which can be configured for this service."
          },
          "supported_currencies": {
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{3}$",
              "examples": [
                "EUR",
                "GBP",
                "USD"
              ]
            },
            "type": "array",
            "title": "Supported Currencies",
            "description": "A list of three-letter ISO currency codes that this service supports.",
            "examples": [
              [
                "USD",
                "GBP",
                "EUR",
                "AUD"
              ]
            ]
          },
          "supported_countries": {
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{2}$",
              "examples": [
                "DE",
                "GB",
                "US"
              ]
            },
            "type": "array",
            "title": "Supported Countries",
            "description": "A list of two-letter ISO country codes that this service supports.",
            "examples": [
              "US",
              "GB",
              "DE",
              "AUD"
            ]
          },
          "mode": {
            "$ref": "#/components/schemas/Mode",
            "description": "The mode that defines the flow this payment service uses to process a payment.",
            "examples": [
              "card",
              "redirect"
            ]
          },
          "icon_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon Url",
            "description": "An icon to display for the payment service.",
            "examples": [
              "https://example.com/icons/adyen-ideal.svg"
            ]
          },
          "supported_features": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Supported Features",
            "description": "Features supported by the payment service."
          },
          "required_checkout_fields": {
            "items": {
              "$ref": "#/components/schemas/RequiredCheckoutFields"
            },
            "type": "array",
            "title": "Required Checkout Fields",
            "description": "A list of condition that define when some fields must be provided with a transaction request."
          },
          "configuration": {
            "$ref": "#/components/schemas/PaymentServiceConfiguration",
            "description": "Additional configuration on how to present the approval UI."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "display_name",
          "method",
          "fields",
          "reporting_fields",
          "supported_currencies",
          "supported_countries",
          "mode",
          "supported_features",
          "required_checkout_fields",
          "configuration"
        ],
        "title": "PaymentServiceDefinition"
      },
      "PaymentServiceStatus": {
        "type": "string",
        "enum": [
          "pending",
          "created",
          "failed"
        ],
        "title": "PaymentServiceStatus"
      },
      "PaymentServiceToken": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-service-token",
            "title": "Type",
            "description": "Always `payment-service-token`.",
            "default": "payment-service-token",
            "examples": [
              "payment-service-token"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the payment service token.",
            "examples": [
              "07e70d14-a0c0-4ff5-bd4a-509959af0e4d"
            ]
          },
          "approval_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approval Url",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize the token creation.",
            "examples": [
              "https://gr4vy.app/redirect/12345"
            ]
          },
          "payment_method_id": {
            "type": "string",
            "format": "uuid",
            "title": "Payment Method Id",
            "description": "The ID of the payment method used to generate this token",
            "examples": [
              "ef9496d8-53a5-4aad-8ca2-00eb68334389"
            ]
          },
          "payment_service_id": {
            "type": "string",
            "format": "uuid",
            "title": "Payment Service Id",
            "description": "The ID of the payment method used to generate this token.",
            "examples": [
              "fffd152a-9532-4087-9a4f-de58754210f0"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentMethodStatus",
            "description": "The state of the payment service token.",
            "examples": [
              "succeeded"
            ]
          },
          "token": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Token",
            "description": "The token value. Will be present if succeeded.",
            "examples": [
              "pm_12345"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when this payment service token was first created in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when this payment service token was last updated in our system.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "payment_method_id",
          "payment_service_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "PaymentServiceToken"
      },
      "PaymentServiceTokenCreate": {
        "properties": {
          "security_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 3,
                "pattern": "^\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Code",
            "description": "The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.",
            "examples": [
              "123"
            ]
          },
          "payment_service_id": {
            "type": "string",
            "format": "uuid",
            "title": "Payment Service Id",
            "description": "The ID of the payment method to use.",
            "examples": [
              "fffd152a-9532-4087-9a4f-de58754210f0"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              }
            ],
            "title": "Redirect Url",
            "description": "The redirect URL to redirect a buyer to after they have authorized the payment method.",
            "examples": [
              "https://example.com/callback"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_service_id",
          "redirect_url"
        ],
        "title": "PaymentServiceTokenCreate"
      },
      "PaymentServiceUpdate": {
        "properties": {
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the payment service.",
            "examples": [
              "Stripe"
            ]
          },
          "fields": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VoidableField"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fields",
            "description": "The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted."
          },
          "reporting_fields": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VoidableField"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reporting Fields",
            "description": "The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted."
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position",
            "description": "Deprecated field used to define the order in which to process payment services",
            "examples": [
              1
            ]
          },
          "accepted_currencies": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "pattern": "^[A-Z]{3}$",
                  "examples": [
                    "EUR",
                    "GBP",
                    "USD"
                  ]
                },
                "type": "array",
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Accepted Currencies",
            "description": "A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.",
            "examples": [
              [
                "USD",
                "EUR",
                "GBP"
              ]
            ]
          },
          "accepted_countries": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "pattern": "^[A-Z]{2}$",
                  "examples": [
                    "DE",
                    "GB",
                    "US"
                  ]
                },
                "type": "array",
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Accepted Countries",
            "description": "A list of countries for which this service is enabled, in ISO two-letter code format.",
            "examples": [
              [
                "US",
                "DE",
                "GB"
              ]
            ]
          },
          "active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active",
            "description": "Defines if this payment service is currently active.",
            "default": true,
            "examples": [
              true,
              false
            ]
          },
          "three_d_secure_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Three D Secure Enabled",
            "description": "Defines if this payment service has 3DS enabled.",
            "examples": [
              true
            ]
          },
          "merchant_profile": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/MerchantProfileScheme"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "propertyNames": {
                  "$ref": "#/components/schemas/CardScheme"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Profile",
            "description": "An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme."
          },
          "payment_method_tokenization_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method Tokenization Enabled",
            "description": "Defines if this payment service support payment method tokenization.",
            "examples": [
              true
            ]
          },
          "network_tokens_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Network Tokens Enabled",
            "description": "Defines if this payment service supports network tokens.",
            "examples": [
              true
            ]
          },
          "open_loop": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Open Loop",
            "description": "Defines if this payment service is open loop.",
            "examples": [
              true
            ]
          },
          "settlement_reporting_enabled": {
            "type": "boolean",
            "title": "Settlement Reporting Enabled",
            "description": "Defines if this payment service has settlement reporting enabled.",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PaymentServiceUpdate",
        "description": "Request body for updating a Payment Service"
      },
      "PayoutCategory": {
        "type": "string",
        "enum": [
          "online_gambling"
        ],
        "title": "PayoutCategory"
      },
      "PayoutCreate": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 99999999.0,
            "minimum": 0.0,
            "title": "Amount",
            "description": "The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.",
            "examples": [
              1299
            ]
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "description": "The ISO-4217 currency code for this payout.",
            "examples": [
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "payment_service_id": {
            "type": "string",
            "format": "uuid",
            "title": "Payment Service Id",
            "description": "The ID of the payment service to use for the payout.",
            "examples": [
              "ed8bd87d-85ad-40cf-8e8f-007e21e55aad"
            ]
          },
          "payment_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodCard"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodStoredCard"
              }
            ],
            "title": "Payment Method",
            "description": "The type of payment method to send funds too."
          },
          "category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PayoutCategory"
              },
              {
                "type": "null"
              }
            ],
            "description": "The type of payout to process.",
            "examples": [
              "online_gambling"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "A value that can be used to match the payout against your own records.",
            "examples": [
              "payout-12345"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or `buyer_external_identifier`.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GuestBuyer-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Inline buyer details for the payout. Use this instead of the `buyer_id` or `buyer_external_identifier`."
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The `external_identifier` of a stored buyer to use for this payout. Use this instead of the `buyer_id` or `buyer`.",
            "examples": [
              "buyer-12345"
            ]
          },
          "merchant": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PayoutMerchant"
              },
              {
                "type": "null"
              }
            ],
            "description": "Merchant information for the source of the payout."
          },
          "connection_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConnectionOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional fields for processing payouts on specific payment services."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "amount",
          "currency",
          "payment_service_id",
          "payment_method"
        ],
        "title": "PayoutCreate",
        "description": "PayoutCreate\n\nRepresents the data required to create a new payout."
      },
      "PayoutMerchant": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the merchant.",
            "examples": [
              "Acme Inc"
            ]
          },
          "identification_number": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Identification Number",
            "description": "Unique value which identifies a merchant for processing transactions, also known as a MID.",
            "examples": [
              "12345"
            ]
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "title": "Phone Number",
            "description": "The phone number for the merchant which should be formatted according to the E164 number standard.",
            "examples": [
              "+14155552671",
              "+442071838750"
            ]
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Merchant website URL.",
            "examples": [
              "https://example.com"
            ]
          },
          "statement_descriptor": {
            "type": "string",
            "maxLength": 22,
            "minLength": 5,
            "title": "Statement Descriptor",
            "description": "Value to explain charges or payments on bank statements.",
            "examples": [
              "Winnings"
            ]
          },
          "merchant_category_code": {
            "type": "string",
            "maxLength": 4,
            "minLength": 1,
            "title": "Merchant Category Code",
            "description": "Merchant classification for the type of goods or services it provides.",
            "examples": [
              "123456"
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The address for the merchant."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "identification_number",
          "phone_number",
          "url",
          "statement_descriptor",
          "merchant_category_code"
        ],
        "title": "PayoutMerchant"
      },
      "PayoutMerchantSummary": {
        "properties": {
          "type": {
            "type": "string",
            "const": "merchant",
            "title": "Type",
            "description": "Always `merchant`.",
            "default": "merchant",
            "examples": [
              "merchant"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the merchant.",
            "examples": [
              "Acme Inc"
            ]
          },
          "identification_number": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Identification Number",
            "description": "Unique value which identifies a merchant for processing transactions, also known as a MID.",
            "examples": [
              "12345"
            ]
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "title": "Phone Number",
            "description": "The phone number for the merchant which should be formatted according to the E164 number standard.",
            "examples": [
              "+14155552671",
              "+442071838750"
            ]
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Merchant website URL.",
            "examples": [
              "https://example.com"
            ]
          },
          "statement_descriptor": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 22,
                "minLength": 5
              },
              {
                "type": "null"
              }
            ],
            "title": "Statement Descriptor",
            "description": "Value to explain charges or payments on bank statements.",
            "examples": [
              "Winnings"
            ]
          },
          "merchant_category_code": {
            "type": "string",
            "maxLength": 4,
            "minLength": 1,
            "title": "Merchant Category Code",
            "description": "Merchant classification for the type of goods or services it provides.",
            "examples": [
              "1234"
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The address for the merchant."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "identification_number",
          "phone_number",
          "url",
          "merchant_category_code"
        ],
        "title": "PayoutMerchantSummary",
        "description": "PayoutMerchantSummary\n\nRepresents a summary of a merchant."
      },
      "PayoutPaymentService": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-service",
            "title": "Type",
            "description": "Always `payment-service`.",
            "default": "payment-service",
            "examples": [
              "payment-service"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the payout service.",
            "examples": [
              "b6c9eb12-2b62-4103-99b9-e3efc94e396d"
            ]
          },
          "method": {
            "type": "string",
            "const": "card",
            "title": "Method",
            "description": "Always `card`.",
            "default": "card",
            "examples": [
              "card"
            ]
          },
          "payment_service_definition_id": {
            "type": "string",
            "title": "Payment Service Definition Id",
            "description": "The ID of the connection used for this payout.",
            "examples": [
              "nuvei-card"
            ]
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name of the connection used for this payout.",
            "examples": [
              "Nuvei"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_service_definition_id"
        ],
        "title": "PayoutPaymentService"
      },
      "PayoutStatus": {
        "type": "string",
        "enum": [
          "declined",
          "failed",
          "pending",
          "succeeded"
        ],
        "title": "PayoutStatus"
      },
      "PayoutSummary": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payout",
            "title": "Type",
            "description": "Always `payout`.",
            "default": "payout",
            "examples": [
              "payout"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the payout.",
            "examples": [
              "6f96a57e-a35b-4f98-b192-d298995f811a"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.",
            "examples": [
              1299
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionBuyer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The buyer used for this payout."
          },
          "category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PayoutCategory"
              },
              {
                "type": "null"
              }
            ],
            "description": "The type of payout to process.",
            "examples": [
              "online_gambling"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this payout was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "description": "A supported ISO-4217 currency code.",
            "examples": [
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this payout.",
            "examples": [
              "payout-12345"
            ]
          },
          "merchant": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PayoutMerchantSummary"
              },
              {
                "type": "null"
              }
            ],
            "description": "The merchant details associated to this payout."
          },
          "merchant_account_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this payout was created for.",
            "examples": [
              "default"
            ]
          },
          "payment_method": {
            "$ref": "#/components/schemas/TransactionPaymentMethod",
            "description": "The payment method used for this payout."
          },
          "payment_service": {
            "$ref": "#/components/schemas/PayoutPaymentService",
            "description": "The payment service used for this payout."
          },
          "payment_service_payout_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Service Payout Id",
            "description": "The ID of the payout in the underlying payment service.",
            "examples": [
              "pout-12345"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus",
            "description": "The status of the payout.",
            "examples": [
              "succeeded"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this payout was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "amount",
          "created_at",
          "currency",
          "payment_method",
          "payment_service",
          "status",
          "updated_at"
        ],
        "title": "PayoutSummary",
        "description": "PayoutSummary\n\nRepresents a summary of a payout."
      },
      "ProductType": {
        "type": "string",
        "enum": [
          "physical",
          "discount",
          "shipping_fee",
          "sales_tax",
          "digital",
          "gift_card",
          "store_credit",
          "surcharge"
        ],
        "title": "ProductType"
      },
      "Recipient": {
        "properties": {
          "first_name": {
            "type": "string",
            "title": "First Name",
            "description": "The first name of the recipient.",
            "examples": [
              ""
            ]
          },
          "last_name": {
            "type": "string",
            "title": "Last Name",
            "description": "The last name of the recipient.",
            "examples": [
              ""
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recipient of the fund's address."
          },
          "account_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Number",
            "description": "The account number of the recipient. Depending on the type of funds transfer, this could be a wallet ID, bank accoutn number, or email address.",
            "examples": [
              "act12345"
            ]
          },
          "date_of_birth": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Of Birth",
            "description": "The date of birth of the recipient.",
            "examples": [
              "1995-12-23"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "first_name",
          "last_name"
        ],
        "title": "Recipient",
        "description": "Recipient of an account funding transaction"
      },
      "RedirectPaymentMethodCreate": {
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "abitab",
              "affirm",
              "afterpay",
              "alipay",
              "alipayhk",
              "arcuspaynetwork",
              "bacs",
              "bancontact",
              "banked",
              "bcp",
              "becs",
              "bitpay",
              "boleto",
              "boost",
              "cashapp",
              "clearpay",
              "dana",
              "dcb",
              "dlocal",
              "ebanx",
              "efecty",
              "eps",
              "everydaypay",
              "gcash",
              "gem",
              "gemds",
              "giropay",
              "givingblock",
              "gocardless",
              "gopay",
              "grabpay",
              "ideal",
              "kakaopay",
              "kcp",
              "khipu",
              "klarna",
              "latitude",
              "latitudeds",
              "laybuy",
              "linepay",
              "linkaja",
              "maybankqrpay",
              "mercadopago",
              "multibanco",
              "multipago",
              "netbanking",
              "nupay",
              "nequi",
              "oney_10x",
              "oney_12x",
              "oney_3x",
              "oney_4x",
              "oney_6x",
              "ovo",
              "oxxo",
              "pagoefectivo",
              "payid",
              "paymaya",
              "paypal",
              "paypalpaylater",
              "payto",
              "payvalida",
              "picpay",
              "pix",
              "pse",
              "rabbitlinepay",
              "rapipago",
              "razorpay",
              "redpagos",
              "scalapay",
              "sepa",
              "servipag",
              "shopeepay",
              "singteldash",
              "smartpay",
              "sofort",
              "spei",
              "stitch",
              "stripedd",
              "thaiqr",
              "touchngo",
              "truemoney",
              "trustly",
              "trustlyeurope",
              "upi",
              "venmo",
              "vipps",
              "waave",
              "webpay",
              "wechat",
              "yape",
              "zippay"
            ],
            "title": "Method",
            "description": "The method to use, this can be any of the methods that support redirect requests.",
            "examples": [
              "paypal",
              "zippay"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.",
            "examples": [
              "buyer-12345"
            ]
          },
          "country": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "title": "Country",
            "description": "The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use.",
            "examples": [
              "DE",
              "GB",
              "US"
            ]
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "description": "The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use.",
            "examples": [
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              }
            ],
            "title": "Redirect Url",
            "description": "The redirect URL to redirect a buyer to after they have authorized the payment method.",
            "examples": [
              "https://example.com/callback"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this payment method.",
            "examples": [
              "payment-method-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method",
          "country",
          "currency",
          "redirect_url"
        ],
        "title": "RedirectPaymentMethodCreate",
        "description": "Create a transaction for an APM/LPM that requires a redirect."
      },
      "Refund": {
        "properties": {
          "type": {
            "type": "string",
            "const": "refund",
            "title": "Type",
            "description": "Always `refund`.",
            "default": "refund",
            "examples": [
              "refund"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the refund.",
            "examples": [
              "6a1d4e46-14ed-4fe1-a45f-eff4e025d211"
            ]
          },
          "transaction_id": {
            "type": "string",
            "format": "uuid",
            "title": "Transaction Id",
            "description": "The ID of the transaction associated with this refund.",
            "examples": [
              "7099948d-7286-47e4-aad8-b68f7eb44591"
            ]
          },
          "payment_service_refund_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Service Refund Id",
            "description": "The payment service's unique ID for the refund.",
            "examples": [
              "refund_xYqd43gySMtori"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus",
            "description": "The status of the refund.",
            "examples": [
              "succeeded"
            ]
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "description": "The currency code for this refund.  Will always match that of the associated transaction.",
            "examples": [
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "amount": {
            "type": "integer",
            "maximum": 99999999.0,
            "minimum": 0.0,
            "title": "Amount",
            "description": "The amount requested for this refund.",
            "examples": [
              1299
            ]
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "The reason for this refund. Could be a multiline string.",
            "examples": [
              "Refund due to user request."
            ]
          },
          "target_type": {
            "$ref": "#/components/schemas/RefundTargetType",
            "description": "The type of the instrument that was refunded.",
            "examples": [
              "payment-method"
            ]
          },
          "target_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Id",
            "description": "The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.",
            "examples": [
              "07e70d14-a0c0-4ff5-bd4a-509959af0e4d"
            ]
          },
          "reconciliation_id": {
            "type": "string",
            "title": "Reconciliation Id",
            "description": "The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.",
            "examples": [
              "7jZXl4gBUNl0CnaLEnfXbt"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier that can be used to match the refund against your own records.",
            "examples": [
              "refund-12345"
            ]
          },
          "transaction_reconciliation_id": {
            "type": "string",
            "title": "Transaction Reconciliation Id",
            "description": "The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.",
            "examples": [
              "aLEnfXbt7jZXl4gBUNl0Cn"
            ]
          },
          "transaction_external_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction External Identifier",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "examples": [
              "transaction-12345"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this refund was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this refund was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "creator": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Creator"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user that created this resource",
            "examples": [
              {
                "email_address": "jhon.doe@gr4vy.com",
                "id": "07e70d14-a0c0-4ff5-bd4a-509959af0e4d",
                "name": "Jhon Doe"
              }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "transaction_id",
          "status",
          "currency",
          "amount",
          "target_type",
          "reconciliation_id",
          "transaction_reconciliation_id",
          "created_at",
          "updated_at"
        ],
        "title": "Refund"
      },
      "RefundStatus": {
        "type": "string",
        "enum": [
          "processing",
          "succeeded",
          "failed",
          "declined",
          "voided"
        ],
        "title": "RefundStatus"
      },
      "RefundTargetType": {
        "type": "string",
        "enum": [
          "payment-method",
          "gift-card-redemption"
        ],
        "title": "RefundTargetType"
      },
      "RequiredCheckoutFields": {
        "properties": {
          "required_fields": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Required Fields",
            "description": "A list of transaction fields that are required to process a payment for this service.",
            "examples": [
              [
                "address.line1",
                "address.country",
                "address.city",
                "address.postal_code"
              ]
            ]
          },
          "conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conditions",
            "description": "The conditions under which these fields are required",
            "examples": [
              {
                "country": [
                  "IN"
                ]
              }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "required_fields"
        ],
        "title": "RequiredCheckoutFields",
        "description": "A collection of checkout fields and the conditions under which they are required."
      },
      "ShippingDetails": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "The first name(s) or given name for the buyer.",
            "examples": [
              "John"
            ]
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "The last name, or family name, of the buyer.",
            "examples": [
              "Doe"
            ]
          },
          "email_address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Address",
            "description": "The email address for the buyer.",
            "examples": [
              "john@example.com"
            ]
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "examples": [
                  "+14155552671",
                  "+442071838750"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number for the buyer which should be formatted according to the E164 number standard.",
            "examples": [
              "+1234567890"
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing address for the buyer."
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the shipping details.",
            "examples": [
              "bf8c36ad-02d9-4904-b0f9-a230b149e341"
            ]
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID for the buyer.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "type": {
            "type": "string",
            "const": "shipping-details",
            "title": "Type",
            "description": "Always `shipping-details`.",
            "default": "shipping-details",
            "examples": [
              "shipping-details"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ShippingDetails"
      },
      "ShippingDetailsCreate": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "The first name(s) or given name for the buyer.",
            "examples": [
              "John"
            ]
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "The last name, or family name, of the buyer.",
            "examples": [
              "Doe"
            ]
          },
          "email_address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Address",
            "description": "The email address for the buyer.",
            "examples": [
              "john@example.com"
            ]
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "examples": [
                  "+14155552671",
                  "+442071838750"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number for the buyer which should be formatted according to the E164 number standard.",
            "examples": [
              "+1234567890"
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing address for the buyer."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ShippingDetailsCreate"
      },
      "ShippingDetailsUpdate": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "The first name(s) or given name for the buyer.",
            "examples": [
              "John"
            ]
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "The last name, or family name, of the buyer.",
            "examples": [
              "Doe"
            ]
          },
          "email_address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Address",
            "description": "The email address for the buyer.",
            "examples": [
              "john@example.com"
            ]
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "examples": [
                  "+14155552671",
                  "+442071838750"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The phone number for the buyer which should be formatted according to the E164 number standard.",
            "examples": [
              "+1234567890"
            ]
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing address for the buyer."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ShippingDetailsUpdate"
      },
      "StatementDescriptor": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 22,
                "minLength": 5
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Reflects your doing business as (DBA) name.",
            "examples": [
              "ACME"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 22,
                "minLength": 5
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A short description about the purchase.",
            "examples": [
              "ACME San Jose Electronics"
            ]
          },
          "city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "City",
            "description": "The merchant's city to be displayed in a statement descriptor.",
            "examples": [
              "San Jose"
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.",
            "examples": [
              "US"
            ]
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "examples": [
                  "+14155552671",
                  "+442071838750"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "The value in the phone number field of a customer's statement which should be formatted according to the E164 number standard.",
            "examples": [
              "+1234567890"
            ]
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "The merchant's URL to be displayed in a statement descriptor.",
            "examples": [
              "www.example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "StatementDescriptor",
        "description": "Information to show the user on their payments statement"
      },
      "TaxId": {
        "properties": {
          "value": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Value",
            "description": "The tax ID for the buyer.",
            "examples": [
              "12345678931"
            ]
          },
          "kind": {
            "$ref": "#/components/schemas/TaxIdKind",
            "description": "The kind of tax ID",
            "examples": [
              "us.ein"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "value",
          "kind"
        ],
        "title": "TaxId"
      },
      "TaxIdKind": {
        "type": "string",
        "enum": [
          "ae.trn",
          "au.abn",
          "ar.dni",
          "ar.cuil",
          "ar.cuit",
          "br.cnpj",
          "br.cpf",
          "ca.bn",
          "ca.gst_hst",
          "ca.pst_bc",
          "ca.pst_mb",
          "ca.pst_sk",
          "ca.qst",
          "ch.vat",
          "cl.tin",
          "co.itin",
          "co.nit",
          "es.cif",
          "eu.vat",
          "gb.vat",
          "hk.br",
          "id.nik",
          "id.npwp",
          "in.gst",
          "jp.cn",
          "jp.rn",
          "kr.brn",
          "li.uid",
          "mx.curp",
          "mx.rfc",
          "my.frp",
          "my.itn",
          "my.nric",
          "my.sst",
          "no.vat",
          "nz.gst",
          "pe.ruc",
          "ph.tin",
          "ru.inn",
          "ru.kpp",
          "sa.vat",
          "sg.gst",
          "sg.uen",
          "th.id",
          "th.vat",
          "tw.vat",
          "us.ein",
          "za.vat",
          "bo.ci",
          "uy.rut",
          "uy.ci"
        ],
        "title": "TaxIdKind"
      },
      "ThreeDSecureDataV1": {
        "properties": {
          "cavv": {
            "type": "string",
            "title": "Cavv",
            "description": "The cardholder authentication value or AAV.",
            "examples": [
              "3q2+78r+ur7erb7vyv66vv8="
            ]
          },
          "eci": {
            "type": "string",
            "maxLength": 2,
            "minLength": 1,
            "pattern": "^0?\\d$",
            "title": "Eci",
            "description": "The ecommerce indicator for the 3DS transaction.",
            "examples": [
              "05"
            ]
          },
          "version": {
            "type": "string",
            "pattern": "^[12](\\.\\d+){0,2}$",
            "title": "Version",
            "description": "The version of 3-D Secure that was used.",
            "examples": [
              "2.1.0"
            ]
          },
          "directory_response": {
            "type": "string",
            "maxLength": 1,
            "title": "Directory Response",
            "description": "For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.",
            "examples": [
              "C"
            ]
          },
          "scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The scheme/brand of the card that is used for 3-D Secure.",
            "examples": [
              "visa"
            ]
          },
          "authentication_response": {
            "type": "string",
            "maxLength": 1,
            "title": "Authentication Response",
            "description": " The response for the 3DS authentication call.",
            "examples": [
              "Y"
            ]
          },
          "cavv_algorithm": {
            "type": "string",
            "maxLength": 1,
            "title": "Cavv Algorithm",
            "description": "The CAVV algorithm used.",
            "examples": [
              "A"
            ]
          },
          "xid": {
            "type": "string",
            "title": "Xid",
            "description": "The transaction identifier.",
            "examples": [
              "12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "cavv",
          "eci",
          "version",
          "directory_response",
          "authentication_response",
          "cavv_algorithm",
          "xid"
        ],
        "title": "ThreeDSecureDataV1"
      },
      "ThreeDSecureDataV2": {
        "properties": {
          "cavv": {
            "type": "string",
            "title": "Cavv",
            "description": "The cardholder authentication value or AAV.",
            "examples": [
              "3q2+78r+ur7erb7vyv66vv8="
            ]
          },
          "eci": {
            "type": "string",
            "maxLength": 2,
            "minLength": 1,
            "pattern": "^0?\\d$",
            "title": "Eci",
            "description": "The ecommerce indicator for the 3DS transaction.",
            "examples": [
              "05"
            ]
          },
          "version": {
            "type": "string",
            "pattern": "^[12](\\.\\d+){0,2}$",
            "title": "Version",
            "description": "The version of 3-D Secure that was used.",
            "examples": [
              "2.1.0"
            ]
          },
          "directory_response": {
            "type": "string",
            "maxLength": 1,
            "title": "Directory Response",
            "description": "For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.",
            "examples": [
              "C"
            ]
          },
          "scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The scheme/brand of the card that is used for 3-D Secure.",
            "examples": [
              "visa"
            ]
          },
          "authentication_response": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Authentication Response",
            "description": "The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.",
            "examples": [
              "Y"
            ]
          },
          "directory_transaction_id": {
            "type": "string",
            "title": "Directory Transaction Id",
            "description": "The transaction identifier.",
            "examples": [
              "c4e59ceb-a382-4d6a-bc87-385d591fa09d"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "cavv",
          "eci",
          "version",
          "directory_response",
          "directory_transaction_id"
        ],
        "title": "ThreeDSecureDataV2"
      },
      "ThreeDSecureError": {
        "properties": {
          "code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "The error code.",
            "examples": [
              "305"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2048
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The error description.",
            "examples": [
              "Invalid ThreeDSCompInd"
            ]
          },
          "detail": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2048
              },
              {
                "type": "null"
              }
            ],
            "title": "Detail",
            "description": "Detail about the 3DS error.",
            "examples": [
              "The threeDSCompInd must be 'Y' when successful"
            ]
          },
          "component": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Component",
            "description": "Code indicating the 3-D Secure component that identified the error.",
            "examples": [
              "C"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ThreeDSecureError"
      },
      "ThreeDSecureMethod": {
        "type": "string",
        "enum": [
          "challenge",
          "frictionless"
        ],
        "title": "ThreeDSecureMethod"
      },
      "ThreeDSecureStatus": {
        "type": "string",
        "enum": [
          "setup_error",
          "error",
          "declined",
          "cancelled",
          "complete"
        ],
        "title": "ThreeDSecureStatus"
      },
      "ThreeDSecureV2": {
        "properties": {
          "version": {
            "type": "string",
            "pattern": "^[12](\\.\\d+){0,2}$",
            "title": "Version"
          },
          "authentication_response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authentication Response"
          },
          "directory_response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Directory Response"
          },
          "directory_transaction_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Directory Transaction Id"
          },
          "transaction_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction Reason"
          },
          "cavv": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cavv"
          },
          "eci": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2,
                "minLength": 1,
                "pattern": "^0?\\d$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Eci"
          },
          "cardholder_info": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardholder Info"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "version"
        ],
        "title": "ThreeDSecureV2"
      },
      "TokenPaymentMethodCreate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the payment method.",
            "examples": [
              "ef9496d8-53a5-4aad-8ca2-00eb68334389"
            ]
          },
          "method": {
            "type": "string",
            "const": "id",
            "title": "Method",
            "description": "Always `id`.",
            "default": "id",
            "examples": [
              "id"
            ]
          },
          "security_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 3,
                "pattern": "^\\d+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Code",
            "description": "The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.",
            "examples": [
              "123"
            ]
          },
          "redirect_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "pattern": "^data:application/json;base64,.*$",
                "examples": [
                  "data:application/json;base64,eyJ0YXJnZXQiOiAib3BlbmVyIiwgImNoYW5uZWwiOiAiY2hhbm5lbCIsICJvcmlnaW5fdXJsIjogImh0dHBzOi8vZ3I0dnkuYXBwIn0="
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Url",
            "description": "The URL to redirect a user back to after they approve the transaction in the browser.",
            "examples": [
              "https://example.com"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "TokenPaymentMethodCreate",
        "description": "Create a transaction with the ID (token) of a stored payment method (and an optional URL for approval)"
      },
      "Transaction": {
        "properties": {
          "type": {
            "type": "string",
            "const": "transaction",
            "title": "Type",
            "description": "Always `transaction`.",
            "default": "transaction",
            "examples": [
              "transaction"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the transaction.",
            "examples": [
              "7099948d-7286-47e4-aad8-b68f7eb44591"
            ]
          },
          "reconciliation_id": {
            "type": "string",
            "title": "Reconciliation Id",
            "description": "The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.",
            "examples": [
              "default"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this transaction belongs to.",
            "examples": [
              "default"
            ]
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "description": "The currency code for this transaction.",
            "examples": [
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The total amount for this transaction across all funding sources including gift cards.",
            "examples": [
              1299
            ]
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.",
            "examples": [
              "authorization_succeeded"
            ]
          },
          "authorized_amount": {
            "type": "integer",
            "title": "Authorized Amount",
            "description": "The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.",
            "examples": [
              1299
            ]
          },
          "captured_amount": {
            "type": "integer",
            "title": "Captured Amount",
            "description": "The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.",
            "examples": [
              1299
            ]
          },
          "refunded_amount": {
            "type": "integer",
            "title": "Refunded Amount",
            "description": "The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.",
            "examples": [
              1299
            ]
          },
          "settled_currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "examples": [
                  "EUR",
                  "GBP",
                  "USD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Settled Currency",
            "description": "The currency of this transaction's settlement in ISO 4217 three-letter code format.",
            "examples": [
              "USD"
            ]
          },
          "settled_amount": {
            "type": "integer",
            "title": "Settled Amount",
            "description": "The net amount settled for this transaction.",
            "examples": [
              1100
            ]
          },
          "settled": {
            "type": "boolean",
            "title": "Settled",
            "description": "Indicates whether this transaction has been settled.",
            "examples": [
              true
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.",
            "examples": [
              "US"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "examples": [
              "transaction-12345"
            ]
          },
          "intent": {
            "$ref": "#/components/schemas/TransactionIntent",
            "description": "The original `intent` used when the transaction was created.",
            "examples": [
              "capture"
            ]
          },
          "payment_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionPaymentMethod"
              },
              {
                "type": "null"
              }
            ],
            "description": "The payment method used for this transaction."
          },
          "method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Method"
              },
              {
                "type": "null"
              }
            ],
            "description": "The method used for the transaction.",
            "examples": [
              "card"
            ]
          },
          "instrument_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstrumentType"
              },
              {
                "type": "null"
              }
            ],
            "description": "The name of the instrument used to process the transaction.",
            "examples": [
              "pan"
            ]
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code",
            "description": "The standardized error code set by Gr4vy.",
            "examples": [
              "missing_redirect_url"
            ]
          },
          "payment_service": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionPaymentService"
              },
              {
                "type": "null"
              }
            ],
            "description": "The payment service used for this transaction."
          },
          "pending_review": {
            "type": "boolean",
            "title": "Pending Review",
            "description": "Whether a manual anti fraud review is pending with an anti fraud service.",
            "default": false,
            "examples": [
              false
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionBuyer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The buyer used for this transaction."
          },
          "raw_response_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Response Code",
            "description": "This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.",
            "examples": [
              "E104"
            ]
          },
          "raw_response_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Response Description",
            "description": " This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.",
            "examples": [
              "Missing redirect URL"
            ]
          },
          "shipping_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShippingDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "The shipping details associated with the transaction."
          },
          "checkout_session_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Session Id",
            "description": "The identifier for the checkout session this transaction is associated with.",
            "examples": [
              "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
            ]
          },
          "gift_card_redemptions": {
            "items": {
              "$ref": "#/components/schemas/GiftCardRedemption"
            },
            "type": "array",
            "title": "Gift Card Redemptions",
            "description": "The gift cards redeemed for this transaction."
          },
          "gift_card_service": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GiftCardService"
              },
              {
                "type": "null"
              }
            ],
            "description": "The gift card service used for this transaction."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this buyer was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this buyer was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "airline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Airline"
              },
              {
                "type": "null"
              }
            ],
            "description": "Contains information about an airline travel, if applicable."
          },
          "auth_response_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth Response Code",
            "description": "This is the response description received from the processor.",
            "examples": [
              "00"
            ]
          },
          "avs_response_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AVSResponseCode"
              },
              {
                "type": "null"
              }
            ],
            "description": "The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.",
            "examples": [
              "match"
            ]
          },
          "cvv_response_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CVVResponseCode"
              },
              {
                "type": "null"
              }
            ],
            "description": "The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.",
            "examples": [
              "match"
            ]
          },
          "anti_fraud_decision": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AntiFraudDecision"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.",
            "examples": [
              "accept"
            ]
          },
          "payment_source": {
            "$ref": "#/components/schemas/TransactionPaymentSource",
            "description": "The source of the transaction.",
            "examples": [
              "ecommerce"
            ]
          },
          "merchant_initiated": {
            "type": "boolean",
            "title": "Merchant Initiated",
            "description": "Indicates whether the transaction was initiated by the merchant or the customer.",
            "examples": [
              true
            ]
          },
          "is_subsequent_payment": {
            "type": "boolean",
            "title": "Is Subsequent Payment",
            "description": "Indicates whether the transaction represents a subsequent payment or an initial one.",
            "examples": [
              false
            ]
          },
          "cart_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cart Items",
            "description": "An array of cart items that represents the line items of a transaction."
          },
          "statement_descriptor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StatementDescriptor"
              },
              {
                "type": "null"
              }
            ],
            "description": "The statement descriptor is the text to be shown on the buyer's statements."
          },
          "scheme_transaction_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheme Transaction Id",
            "description": "An identifier for the transaction used by the scheme itself, when available.",
            "examples": [
              "123456789012345"
            ]
          },
          "three_d_secure": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionThreeDSecureSummary"
              },
              {
                "type": "null"
              }
            ],
            "description": "The 3-D Secure data that was sent to the payment service for the transaction."
          },
          "payment_service_transaction_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Service Transaction Id",
            "description": "The payment service's unique ID for the transaction.",
            "examples": [
              "tx-12345"
            ]
          },
          "additional_identifiers": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Additional Identifiers",
            "description": "A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.",
            "examples": [
              {
                "payment_service_authorization_id": "auth-12345",
                "payment_service_capture_id": "capture-12345"
              }
            ]
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional information about the transaction stored as key-value pairs.",
            "examples": [
              {
                "cohort": "cohort-12345",
                "order": "order-12345"
              }
            ]
          },
          "authorized_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authorized At",
            "description": "The date this transaction was authorized at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "captured_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Captured At",
            "description": "The date this transaction was captured at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "voided_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Voided At",
            "description": "The date this transaction was voided at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "approval_expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approval Expires At",
            "description": "The date this transaction's approval URL will expire at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "buyer_approval_timedout_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Approval Timedout At",
            "description": "The date this transaction's approval timed out at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "intent_outcome": {
            "$ref": "#/components/schemas/TransactionIntentOutcome",
            "description": "The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.",
            "examples": [
              "succeeded"
            ]
          },
          "multi_tender": {
            "type": "boolean",
            "title": "Multi Tender",
            "description": "The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.",
            "examples": [
              true
            ]
          },
          "account_funding_transaction": {
            "type": "boolean",
            "title": "Account Funding Transaction",
            "description": "Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data",
            "examples": [
              true
            ]
          },
          "recipient": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Recipient"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recipient of any account to account funding. For use with AFTs."
          },
          "merchant_advice_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merchant Advice Code",
            "description": "An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.",
            "examples": [
              "02",
              "21"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "reconciliation_id",
          "merchant_account_id",
          "currency",
          "amount",
          "status",
          "authorized_amount",
          "captured_amount",
          "refunded_amount",
          "settled_amount",
          "settled",
          "intent",
          "gift_card_redemptions",
          "created_at",
          "updated_at",
          "payment_source",
          "merchant_initiated",
          "is_subsequent_payment",
          "intent_outcome",
          "multi_tender",
          "account_funding_transaction"
        ],
        "title": "Transaction",
        "description": "A full transaction resource."
      },
      "TransactionBuyer": {
        "properties": {
          "type": {
            "type": "string",
            "const": "buyer",
            "title": "Type",
            "description": "Always `buyer`.",
            "default": "buyer",
            "examples": [
              "buyer"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the buyer.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "The display name for the buyer.",
            "examples": [
              "John Doe"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "The merchant identifier for this buyer.",
            "examples": [
              "buyer-12345"
            ]
          },
          "billing_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BillingDetails-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "The billing name, address, email, and other fields for this buyer."
          },
          "account_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Number",
            "description": "The buyer account number."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TransactionBuyer"
      },
      "TransactionCapture": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount",
            "description": "The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.",
            "examples": [
              1299
            ]
          },
          "airline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Airline"
              },
              {
                "type": "null"
              }
            ],
            "description": "The airline data to submit to the payment service during the capture call."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TransactionCapture",
        "description": "Request body for capturing an authorized transaction"
      },
      "TransactionCreate": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 99999999.0,
            "minimum": 0.0,
            "title": "Amount",
            "description": "The monetary amount for this transaction, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`. If the `intent` is set to `capture`, an amount greater than zero must be supplied. All gift card amounts are subtracted from this amount before the remainder is charged to the provided `payment_method`.",
            "examples": [
              1299
            ]
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "description": "A supported ISO-4217 currency code. For redirect requests, this value must match the one specified for `currency` in `payment_method`.",
            "examples": [
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The 2-letter ISO code of the country where the transaction is processed. This is also used to filter the payment services that can process the transaction. If this value is provided for redirect requests and it's not `null`, it must match the one specified for `country` in `payment_method`. Otherwise, the value specified for `country` in `payment_method` will be assumed implicitly.",
            "examples": [
              "US"
            ]
          },
          "payment_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardWithUrlPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/RedirectPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/TokenPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/ApplePayPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/ClickToPayPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/ClickToPayFPANPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/GooglePayPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/GooglePayFPANPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/NetworkTokenPaymentMethodCreate"
              },
              {
                "$ref": "#/components/schemas/CheckoutSessionWithUrlPaymentMethodCreate"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method",
            "description": "The optional payment method to use for this transaction. This field is required if no `gift_cards` have been added."
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GuestBuyer-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Guest buyer details provided inline rather than creating a buyer resource beforehand and using the `buyer_id` or `buyer_external_identifier` keys. No buyer resource will be created on Gr4vy when used."
          },
          "buyer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer Id",
            "description": "The ID of the buyer to associate this payment method to. If this field is provided then the `buyer_external_identifier` field needs to be unset. If a stored payment method or gift card is provided, then the buyer for that payment method needs to match the buyer for this field.",
            "examples": [
              "fe26475d-ec3e-4884-9553-f7356683f7f9"
            ]
          },
          "buyer_external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyer External Identifier",
            "description": "The `external_identifier` of the buyer to associate this payment method to. If this field is provided then the `buyer_id` field needs to be unset. If a stored payment method or gift card is provided, then the buyer for that payment method needs to match the buyer for this field.",
            "examples": [
              "buyer-12345"
            ]
          },
          "gift_cards": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/GiftCardTransactionCreate"
                    },
                    {
                      "$ref": "#/components/schemas/GiftCardTokenTransactionCreate"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gift Cards",
            "description": "The optional gift card(s) to use for this transaction. At least one gift card is required if no other `payment_method` has been added. By default, only a maximum limit of 10 gift cards may be used in a single transaction. Please contact our team to change this limit."
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "examples": [
              "transaction-12345"
            ]
          },
          "intent": {
            "$ref": "#/components/schemas/TransactionIntent",
            "description": "Defines the intent of this API call. This determines the desired initial state of the transaction.\n\n* `authorize` - (Default) Optionally approves and then authorizes a transaction but does not capture the funds.\n* `capture` - Optionally approves and then authorizes and captures the funds of the transaction.",
            "default": "authorize",
            "examples": [
              "authorize"
            ]
          },
          "store": {
            "type": "boolean",
            "title": "Store",
            "description": " Whether or not to also try and store the payment method with us so that it can be used again for future use. This is only supported for payment methods that support this feature. There are also a few restrictions on how the flag may be set:\n\n* The flag has to be set to `true` when the `payment_source` is set to `recurring` or `installment`, and `merchant_initiated` is set to `false`.\n* The flag has to be set to `false` (or not set) when using a previously vaulted payment method.",
            "default": false,
            "examples": [
              true
            ]
          },
          "three_d_secure_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureDataV1"
              },
              {
                "$ref": "#/components/schemas/ThreeDSecureDataV2"
              },
              {
                "type": "null"
              }
            ],
            "title": "Three D Secure Data",
            "description": "Pass through 3-D Secure data to support external 3-D Secure authorisation. If using an external 3-D Secure provider, you should not pass a `redirect_url` in the `payment_method` object for a transaction."
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.",
            "examples": [
              {
                "cohort": "cohort-12345",
                "order": "order-12345"
              }
            ]
          },
          "is_subsequent_payment": {
            "type": "boolean",
            "title": "Is Subsequent Payment",
            "description": "Indicates whether the transaction represents a subsequent payment coming from a setup recurring payment. Please note there are some restrictions on how this flag may be used.\n\nThe flag can only be `false` (or not set) when the transaction meets one of the following criteria:\n\n* It is not `merchant_initiated`.\n* `payment_source` is set to `card_on_file`.\n\nThe flag can only be set to `true` when the transaction meets one of the following criteria:\n* It is not `merchant_initiated`.\n* `payment_source` is set to `recurring` or `installment` and `merchant_initiated` is set to `true`.\n* `payment_source` is set to `card_on_file`.",
            "default": false,
            "examples": [
              true
            ]
          },
          "merchant_initiated": {
            "type": "boolean",
            "title": "Merchant Initiated",
            "description": "Indicates whether the transaction was initiated by the merchant (true) or customer (false).",
            "default": false,
            "examples": [
              true
            ]
          },
          "payment_source": {
            "$ref": "#/components/schemas/TransactionPaymentSource",
            "description": "The use-case for the the transaction.",
            "default": "ecommerce",
            "examples": [
              "ecommerce"
            ]
          },
          "airline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Airline"
              },
              {
                "type": "null"
              }
            ],
            "description": "The airline addendum data which describes the airline booking associated with this transaction."
          },
          "cart_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cart Items",
            "description": "An array of cart items that represents the line items of a transaction."
          },
          "statement_descriptor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StatementDescriptor"
              },
              {
                "type": "null"
              }
            ],
            "description": "Details about the payment and the merchant which may end up on the (bank) statement for the payment."
          },
          "previous_scheme_transaction_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Scheme Transaction Id",
            "description": "A scheme's transaction identifier to use in connecting a merchant initiated transaction to a previous customer initiated transaction. If not provided, and a qualifying customer initiated transaction has been previously made with the stored payment method, then Gr4vy will populate this value with the identifier returned for that transaction. This field is also know as the Visa Transaction Identifier, or Mastercard Trace ID.",
            "examples": [
              "123456789012345"
            ]
          },
          "browser_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BrowserInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "Information about the browser used by the buyer. This can be used by anti-fraud services."
          },
          "shipping_details_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shipping Details Id",
            "description": "The unique identifier of a set of shipping details stored for the buyer. If provided, the created transaction will include a copy of the details at the point of transaction creation; i.e. it will not be affected by later changes to the detail in the database.",
            "examples": [
              "bf8c36ad-02d9-4904-b0f9-a230b149e341"
            ]
          },
          "connection_options": {
            "anyOf": [
              {
                "additionalProperties": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connection Options",
            "description": "Allows for passing optional configuration per connection to take advantage of connection specific features. When provided, the data is only passed to the target connection type to prevent sharing configuration across connections. Please note that each of the keys this object are in kebab-case, for example `cybersource-anti-fraud` as they represent the ID of the connector. All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an external API that the connector uses."
          },
          "async_capture": {
            "type": "boolean",
            "title": "Async Capture",
            "description": "Whether to capture the transaction asynchronously.\n\n- When `async_capture` is `false` (default), the transaction is captured in the same request.\n- When `async_capture` is `true`, the transaction is automatically captured at a later time.\n\nRedirect transactions are not affected by this flag. This flag can only be set to `true` when `intent` is set to `capture`.",
            "default": false,
            "examples": [
              true
            ]
          },
          "anti_fraud_fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Anti Fraud Fingerprint",
            "description": "This field represents the fingerprint data to be passed to the active anti-fraud service.",
            "examples": [
              "yGeBAFYgFmM="
            ]
          },
          "payment_service_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Service Id",
            "description": "The unique identifier of an existing payment service. When provided, the created transaction will be processed by the given payment service and any routing rules will be skipped.",
            "examples": [
              "fffd152a-9532-4087-9a4f-de58754210f0"
            ]
          },
          "account_funding_transaction": {
            "type": "boolean",
            "title": "Account Funding Transaction",
            "description": "Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data",
            "default": false,
            "examples": [
              true
            ]
          },
          "allow_partial_authorization": {
            "type": "boolean",
            "title": "Allow Partial Authorization",
            "description": "Defines if the transaction will allow for a partial authorization.",
            "default": false
          },
          "recipient": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Recipient"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recipient of any account to account funding. For use with AFTs."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "title": "TransactionCreate"
      },
      "TransactionGiftCard": {
        "properties": {
          "type": {
            "type": "string",
            "const": "gift-card",
            "title": "Type",
            "description": "Always `gift-card`.",
            "default": "gift-card",
            "examples": [
              "gift-card"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID for the gift card.",
            "examples": [
              "356d56e5-fe16-42ae-97ee-8d55d846ae2e"
            ]
          },
          "bin": {
            "type": "string",
            "title": "Bin",
            "description": "The first 6 digits of the full gift card number.",
            "examples": [
              "412345"
            ]
          },
          "sub_bin": {
            "type": "string",
            "title": "Sub Bin",
            "description": "The 3 digits after the `bin` of the full gift card number.",
            "examples": [
              "554"
            ]
          },
          "last4": {
            "type": "string",
            "title": "Last4",
            "description": "The last 4 digits for the gift card.",
            "examples": [
              "1234"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "bin",
          "sub_bin",
          "last4"
        ],
        "title": "TransactionGiftCard"
      },
      "TransactionIntent": {
        "type": "string",
        "enum": [
          "authorize",
          "capture"
        ],
        "title": "TransactionIntent"
      },
      "TransactionIntentOutcome": {
        "type": "string",
        "enum": [
          "pending",
          "succeeded",
          "failed"
        ],
        "title": "TransactionIntentOutcome"
      },
      "TransactionPaymentMethod": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-method",
            "title": "Type",
            "description": "Always `payment-method`.",
            "default": "payment-method",
            "examples": [
              "payment-method"
            ]
          },
          "approval_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approval Url",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize their payment.",
            "examples": [
              "https://gr4vy.app/redirect/12345"
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.",
            "examples": [
              "US"
            ]
          },
          "currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "examples": [
                  "EUR",
                  "GBP",
                  "USD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.",
            "examples": [
              "USD"
            ]
          },
          "details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDetailsCard"
              },
              {
                "type": "null"
              }
            ],
            "description": "Details for credit or debit card payment method."
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5,
                "minLength": 5,
                "pattern": "^\\d{2}/\\d{2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date",
            "description": "The expiration date for the payment method.",
            "examples": [
              "12/30"
            ]
          },
          "fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fingerprint",
            "description": "The unique hash derived from the payment method identifier (e.g. card number).",
            "examples": [
              "20eb353620155d2b5fc864cc46a73ea77cb92c725238650839da1813fa987a17"
            ]
          },
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 320,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.",
            "examples": [
              "1234"
            ]
          },
          "last_replaced_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Replaced At",
            "description": "The date and time when this card was last replaced by the account updater.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "method": {
            "$ref": "#/components/schemas/Method",
            "description": "The type of this payment method.",
            "examples": [
              "card"
            ]
          },
          "mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Mode"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mode to use with this payment method.",
            "examples": [
              "card"
            ]
          },
          "scheme": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardScheme"
              },
              {
                "type": "null"
              }
            ],
            "description": "The scheme of the card. Only applies to card payments.",
            "examples": [
              "visa"
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID of the payment method.",
            "examples": [
              "852b951c-d7ea-4c98-b09e-4a1c9e97c077"
            ]
          },
          "approval_target": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApprovalTarget"
              },
              {
                "type": "null"
              }
            ],
            "description": "The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.",
            "examples": [
              "any"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier that can be used to match the payment method against your own records.",
            "examples": [
              "card-12345"
            ]
          },
          "payment_account_reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Account Reference",
            "description": "The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.",
            "examples": [
              "V0010014629724763377327521982"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "method"
        ],
        "title": "TransactionPaymentMethod"
      },
      "TransactionPaymentService": {
        "properties": {
          "type": {
            "type": "string",
            "const": "payment-service",
            "title": "Type",
            "description": "Always `payment-service`.",
            "default": "payment-service",
            "examples": [
              "payment-service"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the payment-service.",
            "examples": [
              "824ff064-7f4b-430b-9801-59aff90d013e"
            ]
          },
          "payment_service_definition_id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Payment Service Definition Id",
            "description": "The definition ID of the service used to process this payment.",
            "examples": [
              "stripe-card"
            ]
          },
          "method": {
            "$ref": "#/components/schemas/Method",
            "description": "The payment method that this service handles.",
            "examples": [
              "card"
            ]
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "The display name for the payment service.",
            "examples": [
              "Stripe USA"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "payment_service_definition_id",
          "method",
          "display_name"
        ],
        "title": "TransactionPaymentService"
      },
      "TransactionPaymentSource": {
        "type": "string",
        "enum": [
          "ecommerce",
          "moto",
          "recurring",
          "installment",
          "card_on_file"
        ],
        "title": "TransactionPaymentSource",
        "description": "The way payment method information made it to this transaction."
      },
      "TransactionRefundAllCreate": {
        "properties": {
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "An optional reason to attach extra context to the refund requests.",
            "examples": [
              "Refund due to user request."
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier that can be used to match the refunds against your own records.",
            "examples": [
              "refund-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TransactionRefundAllCreate"
      },
      "TransactionRefundCreate": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount",
            "description": "The amount requested to refund. If omitted, a full refund will be requested.",
            "examples": [
              1299
            ]
          },
          "target_type": {
            "$ref": "#/components/schemas/RefundTargetType",
            "description": "The target type to refund for. This can be used to target a gift card to refund to instead of the main payment method.",
            "default": "payment-method",
            "examples": [
              "payment-method"
            ]
          },
          "target_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Id",
            "description": "The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.",
            "examples": [
              "7a6c366d-9205-45ab-8021-0d9ee37f20f2"
            ]
          },
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "An optional reason to attach extra context to the refund request.",
            "examples": [
              "Refund due to user request."
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier that can be used to match the refund against your own records.",
            "examples": [
              "refund-12345"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TransactionRefundCreate"
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "processing",
          "authorization_succeeded",
          "authorization_declined",
          "authorization_failed",
          "authorization_voided",
          "authorization_void_pending",
          "capture_succeeded",
          "capture_pending",
          "buyer_approval_pending"
        ],
        "title": "TransactionStatus"
      },
      "TransactionStatusSummary": {
        "properties": {
          "type": {
            "type": "string",
            "const": "transaction",
            "title": "Type",
            "description": "Always `transaction`.",
            "default": "transaction",
            "examples": [
              "transaction"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the transaction.",
            "examples": [
              "7099948d-7286-47e4-aad8-b68f7eb44591"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "The status of the transaction.",
            "examples": [
              "authorization_succeeded"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "title": "TransactionStatusSummary"
      },
      "TransactionSummary": {
        "properties": {
          "type": {
            "type": "string",
            "const": "transaction",
            "title": "Type",
            "description": "Always `transaction`.",
            "default": "transaction",
            "examples": [
              "transaction"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID for the transaction.",
            "examples": [
              "7099948d-7286-47e4-aad8-b68f7eb44591"
            ]
          },
          "reconciliation_id": {
            "type": "string",
            "title": "Reconciliation Id",
            "description": "The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.",
            "examples": [
              "default"
            ]
          },
          "merchant_account_id": {
            "type": "string",
            "title": "Merchant Account Id",
            "description": "The ID of the merchant account this transaction belongs to.",
            "examples": [
              "default"
            ]
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "description": "The currency code for this transaction.",
            "examples": [
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The total amount for this transaction across all funding sources including gift cards.",
            "examples": [
              1299
            ]
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.",
            "examples": [
              "authorization_succeeded"
            ]
          },
          "authorized_amount": {
            "type": "integer",
            "title": "Authorized Amount",
            "description": "The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.",
            "examples": [
              1299
            ]
          },
          "captured_amount": {
            "type": "integer",
            "title": "Captured Amount",
            "description": "The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.",
            "examples": [
              1299
            ]
          },
          "refunded_amount": {
            "type": "integer",
            "title": "Refunded Amount",
            "description": "The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.",
            "examples": [
              1299
            ]
          },
          "settled_currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "examples": [
                  "EUR",
                  "GBP",
                  "USD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Settled Currency",
            "description": "The currency of this transaction's settlement in ISO 4217 three-letter code format.",
            "examples": [
              "USD"
            ]
          },
          "settled_amount": {
            "type": "integer",
            "title": "Settled Amount",
            "description": "The net amount settled for this transaction.",
            "examples": [
              1100
            ]
          },
          "settled": {
            "type": "boolean",
            "title": "Settled",
            "description": "Indicates whether this transaction has been settled.",
            "examples": [
              true
            ]
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "examples": [
                  "DE",
                  "GB",
                  "US"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.",
            "examples": [
              "US"
            ]
          },
          "external_identifier": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "External Identifier",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "examples": [
              "transaction-12345"
            ]
          },
          "intent": {
            "$ref": "#/components/schemas/TransactionIntent",
            "description": "The original `intent` used when the transaction was created.",
            "examples": [
              "capture"
            ]
          },
          "payment_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionPaymentMethod"
              },
              {
                "type": "null"
              }
            ],
            "description": "The payment method used for this transaction."
          },
          "method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Method"
              },
              {
                "type": "null"
              }
            ],
            "description": "The method used for the transaction.",
            "examples": [
              "card"
            ]
          },
          "instrument_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstrumentType"
              },
              {
                "type": "null"
              }
            ],
            "description": "The name of the instrument used to process the transaction.",
            "examples": [
              "pan"
            ]
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code",
            "description": "The standardized error code set by Gr4vy.",
            "examples": [
              "missing_redirect_url"
            ]
          },
          "payment_service": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionPaymentService"
              },
              {
                "type": "null"
              }
            ],
            "description": "The payment service used for this transaction."
          },
          "pending_review": {
            "type": "boolean",
            "title": "Pending Review",
            "description": "Whether a manual anti fraud review is pending with an anti fraud service.",
            "default": false,
            "examples": [
              false
            ]
          },
          "buyer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionBuyer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The buyer used for this transaction."
          },
          "raw_response_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Response Code",
            "description": "This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.",
            "examples": [
              "E104"
            ]
          },
          "raw_response_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Response Description",
            "description": " This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.",
            "examples": [
              "Missing redirect URL"
            ]
          },
          "shipping_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShippingDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "The shipping details associated with the transaction."
          },
          "checkout_session_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Session Id",
            "description": "The identifier for the checkout session this transaction is associated with.",
            "examples": [
              "4137b1cf-39ac-42a8-bad6-1c680d5dab6b"
            ]
          },
          "gift_card_redemptions": {
            "items": {
              "$ref": "#/components/schemas/GiftCardRedemption"
            },
            "type": "array",
            "title": "Gift Card Redemptions",
            "description": "The gift cards redeemed for this transaction."
          },
          "gift_card_service": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GiftCardService"
              },
              {
                "type": "null"
              }
            ],
            "description": "The gift card service used for this transaction."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date this buyer was created at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date this buyer was last updated at.",
            "examples": [
              "2013-07-16T19:23:00.000+00:00"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "reconciliation_id",
          "merchant_account_id",
          "currency",
          "amount",
          "status",
          "authorized_amount",
          "captured_amount",
          "refunded_amount",
          "settled_amount",
          "settled",
          "intent",
          "gift_card_redemptions",
          "created_at",
          "updated_at"
        ],
        "title": "TransactionSummary",
        "description": "A transaction, summarised"
      },
      "TransactionThreeDSecureSummary": {
        "properties": {
          "version": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[12](\\.\\d+){0,2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "The version of 3DS used for this transaction.",
            "examples": [
              "2.2.0"
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureStatus"
              },
              {
                "type": "null"
              }
            ],
            "description": "The status of the 3DS challenge for this transaction.",
            "examples": [
              "complete"
            ]
          },
          "method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureMethod"
              },
              {
                "type": "null"
              }
            ],
            "description": "The method used for 3DS authentication for this transaction.",
            "examples": [
              "challenge"
            ]
          },
          "response_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureDataV1"
              },
              {
                "$ref": "#/components/schemas/ThreeDSecureV2"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Data",
            "description": "The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API."
          },
          "error_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureError"
              },
              {
                "type": "null"
              }
            ],
            "description": "The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TransactionThreeDSecureSummary"
      },
      "UserStatus": {
        "type": "string",
        "enum": [
          "active",
          "pending",
          "deleted"
        ],
        "title": "UserStatus"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VerifyCredentials": {
        "properties": {
          "payment_service_definition_id": {
            "type": "string",
            "title": "Payment Service Definition Id",
            "description": "The ID of the payment service definition to verify the fields against",
            "examples": [
              "stripe-card"
            ]
          },
          "payment_service_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Service Id",
            "description": "The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.",
            "examples": [
              "fffd152a-9532-4087-9a4f-de58754210f0"
            ]
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "type": "array",
            "title": "Fields",
            "description": "The fields and their values, or a set of updated fields to merge with existing values."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_service_definition_id",
          "fields"
        ],
        "title": "VerifyCredentials"
      },
      "VoidableField": {
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Key"
          },
          "value": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5000,
                "minLength": 1
              },
              {
                "type": "string",
                "const": ""
              }
            ],
            "title": "Value"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "VoidableField"
      },
      "WalletPaymentOptionContext": {
        "properties": {
          "merchant_name": {
            "type": "string",
            "title": "Merchant Name"
          },
          "supported_schemes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Schemes"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "merchant_name",
          "supported_schemes"
        ],
        "title": "WalletPaymentOptionContext"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {
              "embed": "Shorthand for all gr4vy embed related scopes",
              "sessions.refresh": "Refresh access-token",
              "anti-fraud-service-definitions.read": "Read Anti Fraud Service Definitions",
              "anti-fraud-services.read": "Read Anti Fraud Services",
              "api-logs.read": "Read API Logs",
              "apple-pay-certificates.read": "Read Apple Pay Certificates",
              "audit-logs.read": "Read Audit Logs",
              "buyers.read": "Read Buyers",
              "buyers.billing-details.read": "Read Billing Details",
              "card-scheme-definitions.read": "Read Card Scheme Definitions",
              "checkout-sessions.read": "Read Checkout Sessions",
              "connections.read": "Read Connections",
              "digital-wallets.read": "Read Digital Wallets",
              "flows.read": "Read Flows",
              "gift-card-service-definitions.read": "Read Gift Card Service Definitions",
              "gift-card-services.read": "Read Gift Card Services",
              "gift-cards.read": "Read Gift Cards",
              "merchant-accounts.read": "Read Merchant Accounts",
              "payment-links.read": "Read Payment Links",
              "payment-method-definitions.read": "Read Payment Method Definitions",
              "payment-methods.read": "Read Payment Methods",
              "payment-options.read": "Read Payment Options",
              "payment-service-definitions.read": "Read Payment Service Definitions",
              "payment-services.read": "Read Payment Service",
              "payouts.read": "Read Payouts",
              "reports.read": "Read Reports",
              "roles.read": "Read Roles",
              "transactions.read": "Read Transactions",
              "users.me.read": "Read User Profile",
              "vault-forward.read": "Read Vault Forward",
              "vault-forward-authentications.read": "Read Vault Forward Authentications",
              "vault-forward-configs.read": "Read Vault Forward Configurations",
              "vault-forward-definitions.read": "Read Vault Forward Definitions",
              "webhook-subscriptions.read": "Read Webhook Subscriptions",
              "api-key-pairs.read": "Read API Key Pairs",
              "bin-checker.read": "Read BIN Checker",
              "health-dashboard.read": "Read Health Dashboard",
              "metrics-explorer.read": "Read Metrics Explorer",
              "reset.read": "Read Reset",
              "sessions.read": "Read Sessions",
              "users.read": "Read Users",
              "anti-fraud-service-definitions.write": "Write Anti Fraud Service Definitions",
              "anti-fraud-services.write": "Write Anti Fraud Services",
              "api-logs.write": "Write API Logs",
              "apple-pay-certificates.write": "Write Apple Pay Certificates",
              "audit-logs.write": "Write Audit Logs",
              "buyers.write": "Write Buyers",
              "buyers.billing-details.write": "Write Billing Details",
              "card-scheme-definitions.write": "Write Card Scheme Definitions",
              "checkout-sessions.write": "Write Checkout Sessions",
              "connections.write": "Write Connections",
              "digital-wallets.write": "Write Digital Wallets",
              "flows.write": "Write Flows",
              "gift-card-service-definitions.write": "Write Gift Card Service Definitions",
              "gift-card-services.write": "Write Gift Card Services",
              "gift-cards.write": "Write Gift Cards",
              "merchant-accounts.write": "Write Merchant Accounts",
              "payment-links.write": "Write Payment Links",
              "payment-method-definitions.write": "Write Payment Method Definitions",
              "payment-methods.write": "Write Payment Methods",
              "payment-options.write": "Write Payment Options",
              "payment-service-definitions.write": "Write Payment Service Definitions",
              "payment-services.write": "Write Payment Service",
              "payouts.write": "Write Payouts",
              "reports.write": "Write Reports",
              "roles.write": "Write Roles",
              "transactions.write": "Write Transactions",
              "users.me.write": "Write User Profile",
              "vault-forward.write": "Write Vault Forward",
              "vault-forward-authentications.write": "Write Vault Forward Authentications",
              "vault-forward-configs.write": "Write Vault Forward Configurations",
              "vault-forward-definitions.write": "Write Vault Forward Definitions",
              "webhook-subscriptions.write": "Write Webhook Subscriptions",
              "api-key-pairs.write": "Write API Key Pairs",
              "bin-checker.write": "Write BIN Checker",
              "health-dashboard.write": "Write Health Dashboard",
              "metrics-explorer.write": "Write Metrics Explorer",
              "reset.write": "Write Reset",
              "sessions.write": "Write Sessions",
              "users.write": "Write Users"
            },
            "tokenUrl": "auth/token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Account updater",
      "description": "Schedule stored cards for an account update."
    },
    {
      "name": "Audit logs",
      "description": "Query user activity."
    },
    {
      "name": "Buyers",
      "description": "Manage buyers."
    },
    {
      "name": "Buyers - Gift cards",
      "description": "Query gift cards for buyers."
    },
    {
      "name": "Buyers - Payment methods",
      "description": "Query payment methods for buyers."
    },
    {
      "name": "Buyers - Shipping details",
      "description": "Manage shipping details for buyers."
    },
    {
      "name": "Card scheme definitions",
      "description": "List definitions for card schemes."
    },
    {
      "name": "Checkout sessions",
      "description": "Manage checkout sessions."
    },
    {
      "name": "Digital wallets - Sessions",
      "description": "Create sessions for digital wallets like Apple Pay and Google Pay."
    },
    {
      "name": "Digital wallets - Setup",
      "description": "Manage digital wallets like Apple Pay and Google Pay."
    },
    {
      "name": "Gift cards",
      "description": "Manage stored gift cards."
    },
    {
      "name": "Merchant accounts",
      "description": "Manage merchant accounts in an instance."
    },
    {
      "name": "Payment methods",
      "description": "Manage stored payment methods."
    },
    {
      "name": "Payment methods - Network tokens",
      "description": "Manage network tokens for stored payment methods."
    },
    {
      "name": "Payment methods - Payment service tokens",
      "description": "Manage payment service tokens for stored payment methods."
    },
    {
      "name": "Payment options",
      "description": "Fetch a list of payment options to display at checkout."
    },
    {
      "name": "Payment service definitions",
      "description": "Fetch info about the definition of each payment service."
    },
    {
      "name": "Payment services",
      "description": "Manage configured payment services."
    },
    {
      "name": "Payouts",
      "description": "Payout API."
    },
    {
      "name": "Refunds",
      "description": "Manage transaction refunds."
    },
    {
      "name": "Transactions",
      "description": "Manage transaction."
    }
  ]
}