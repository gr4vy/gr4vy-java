/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.gr4vy.sdk;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import com.gr4vy.sdk.utils.BackoffStrategy;
import com.gr4vy.sdk.utils.HTTPClient;
import com.gr4vy.sdk.utils.RetryConfig;
import com.gr4vy.sdk.utils.SpeakeasyHTTPClient;
import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;


/**
 * Spring Boot Auto Configuration for openapi SDK
 * This configuration class automatically configures the openapi SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(Gr4vy.class)
@EnableConfigurationProperties(SDKAutoConfigProperties.class)
public class SDKAutoConfig {

    /**
     * Constructor.
     */
    public SDKAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "sdk.retry-config", name = "strategy")
    public RetryConfig retryConfig(SDKAutoConfigProperties properties) {
        SDKAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            SDKAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(SDKAutoConfigProperties properties, Consumer<String> httpLogger) {
        SDKAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "sdk.security")
    public SecuritySource securitySource(SDKAutoConfigProperties properties) {SDKAutoConfigProperties.Security securityProps = properties.getSecurity();
        com.gr4vy.sdk.models.components.Security.Builder securityBuilder = com.gr4vy.sdk.models.components.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build bearerAuth security from direct properties (primitive value)
        if (securityProps.getBearerAuth() != null) {
            securityBuilder.bearerAuth(securityProps.getBearerAuth());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param securitySource the security source bean (optional)
     * @param globals the globals configuration bean
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            SDKAutoConfigProperties properties,
            HTTPClient httpClient,
            com.gr4vy.sdk.utils.Hooks hooks,
            com.gr4vy.sdk.utils.AsyncHooks asyncHooks,
            SecuritySource securitySource,
            com.gr4vy.sdk.utils.Globals globals,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        if (properties.getServer() != null) {
            sdkConfiguration.setServer(properties.getServer());
        }
        sdkConfiguration.setGlobals(globals);
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured Gr4vy instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Gr4vy gr4vy(SDKConfiguration sdkConfiguration) {
        return new Gr4vy(sdkConfiguration);
    }

    /**
     * Creates a Globals configuration bean if none exists, populated from properties.
     *
     * @param properties the configuration properties
     * @return A configured Globals instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.gr4vy.sdk.utils.Globals globals(SDKAutoConfigProperties properties) {
        com.gr4vy.sdk.utils.Globals globals = new com.gr4vy.sdk.utils.Globals();
        
        // Populate globals from properties
        SDKAutoConfigProperties.Globals globalProps = properties.getGlobals();
        if (globalProps.getMerchantAccountId() != null) {
            globals.putParam("header", "merchantAccountId", globalProps.getMerchantAccountId());
        }
        
        return globals;
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.gr4vy.sdk.utils.AsyncHooks asyncHooks() {
        return new com.gr4vy.sdk.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.gr4vy.sdk.utils.Hooks hooks() {
        return new com.gr4vy.sdk.utils.Hooks();
    }
    /**
     * Creates a AccountUpdater sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured AccountUpdater instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AccountUpdater accountUpdater(Gr4vy gr4vy) {
        return gr4vy.accountUpdater();
    }
    /**
     * Creates a Buyers sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured Buyers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Buyers buyers(Gr4vy gr4vy) {
        return gr4vy.buyers();
    }
    /**
     * Creates a PaymentMethods sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured PaymentMethods instance
     */
    @Bean
    @ConditionalOnMissingBean
    public PaymentMethods paymentMethods(Gr4vy gr4vy) {
        return gr4vy.paymentMethods();
    }
    /**
     * Creates a GiftCards sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured GiftCards instance
     */
    @Bean
    @ConditionalOnMissingBean
    public GiftCards giftCards(Gr4vy gr4vy) {
        return gr4vy.giftCards();
    }
    /**
     * Creates a CardSchemeDefinitions sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured CardSchemeDefinitions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public CardSchemeDefinitions cardSchemeDefinitions(Gr4vy gr4vy) {
        return gr4vy.cardSchemeDefinitions();
    }
    /**
     * Creates a DigitalWallets sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured DigitalWallets instance
     */
    @Bean
    @ConditionalOnMissingBean
    public DigitalWallets digitalWallets(Gr4vy gr4vy) {
        return gr4vy.digitalWallets();
    }
    /**
     * Creates a Transactions sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured Transactions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Transactions transactions(Gr4vy gr4vy) {
        return gr4vy.transactions();
    }
    /**
     * Creates a Refunds sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured Refunds instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Refunds refunds(Gr4vy gr4vy) {
        return gr4vy.refunds();
    }
    /**
     * Creates a PaymentOptions sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured PaymentOptions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public PaymentOptions paymentOptions(Gr4vy gr4vy) {
        return gr4vy.paymentOptions();
    }
    /**
     * Creates a PaymentServiceDefinitions sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured PaymentServiceDefinitions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public PaymentServiceDefinitions paymentServiceDefinitions(Gr4vy gr4vy) {
        return gr4vy.paymentServiceDefinitions();
    }
    /**
     * Creates a PaymentServices sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured PaymentServices instance
     */
    @Bean
    @ConditionalOnMissingBean
    public PaymentServices paymentServices(Gr4vy gr4vy) {
        return gr4vy.paymentServices();
    }
    /**
     * Creates a AuditLogs sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured AuditLogs instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AuditLogs auditLogs(Gr4vy gr4vy) {
        return gr4vy.auditLogs();
    }
    /**
     * Creates a Reports sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured Reports instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Reports reports(Gr4vy gr4vy) {
        return gr4vy.reports();
    }
    /**
     * Creates a ReportExecutions sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured ReportExecutions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ReportExecutions reportExecutions(Gr4vy gr4vy) {
        return gr4vy.reportExecutions();
    }
    /**
     * Creates a CheckoutSessions sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured CheckoutSessions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public CheckoutSessions checkoutSessions(Gr4vy gr4vy) {
        return gr4vy.checkoutSessions();
    }
    /**
     * Creates a MerchantAccounts sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured MerchantAccounts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public MerchantAccounts merchantAccounts(Gr4vy gr4vy) {
        return gr4vy.merchantAccounts();
    }
    /**
     * Creates a Payouts sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured Payouts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Payouts payouts(Gr4vy gr4vy) {
        return gr4vy.payouts();
    }
    /**
     * Creates a PaymentLinks sub-SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @return A configured PaymentLinks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public PaymentLinks paymentLinks(Gr4vy gr4vy) {
        return gr4vy.paymentLinks();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param gr4vy the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncGr4vy instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncGr4vy asyncGr4vy(Gr4vy gr4vy, SDKConfiguration sdkConfiguration) {
        return new AsyncGr4vy(gr4vy, sdkConfiguration);
    }
    /**
     * Creates an AsyncAccountUpdater sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncAccountUpdater instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAccountUpdater asyncAccountUpdater(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.accountUpdater();
    }
    /**
     * Creates an AsyncBuyers sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncBuyers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBuyers asyncBuyers(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.buyers();
    }
    /**
     * Creates an AsyncPaymentMethods sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncPaymentMethods instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPaymentMethods asyncPaymentMethods(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.paymentMethods();
    }
    /**
     * Creates an AsyncGiftCards sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncGiftCards instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncGiftCards asyncGiftCards(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.giftCards();
    }
    /**
     * Creates an AsyncCardSchemeDefinitions sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncCardSchemeDefinitions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCardSchemeDefinitions asyncCardSchemeDefinitions(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.cardSchemeDefinitions();
    }
    /**
     * Creates an AsyncDigitalWallets sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncDigitalWallets instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDigitalWallets asyncDigitalWallets(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.digitalWallets();
    }
    /**
     * Creates an AsyncTransactions sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncTransactions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTransactions asyncTransactions(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.transactions();
    }
    /**
     * Creates an AsyncRefunds sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncRefunds instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRefunds asyncRefunds(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.refunds();
    }
    /**
     * Creates an AsyncPaymentOptions sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncPaymentOptions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPaymentOptions asyncPaymentOptions(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.paymentOptions();
    }
    /**
     * Creates an AsyncPaymentServiceDefinitions sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncPaymentServiceDefinitions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPaymentServiceDefinitions asyncPaymentServiceDefinitions(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.paymentServiceDefinitions();
    }
    /**
     * Creates an AsyncPaymentServices sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncPaymentServices instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPaymentServices asyncPaymentServices(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.paymentServices();
    }
    /**
     * Creates an AsyncAuditLogs sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncAuditLogs instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAuditLogs asyncAuditLogs(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.auditLogs();
    }
    /**
     * Creates an AsyncReports sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncReports instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncReports asyncReports(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.reports();
    }
    /**
     * Creates an AsyncReportExecutions sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncReportExecutions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncReportExecutions asyncReportExecutions(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.reportExecutions();
    }
    /**
     * Creates an AsyncCheckoutSessions sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncCheckoutSessions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCheckoutSessions asyncCheckoutSessions(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.checkoutSessions();
    }
    /**
     * Creates an AsyncMerchantAccounts sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncMerchantAccounts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMerchantAccounts asyncMerchantAccounts(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.merchantAccounts();
    }
    /**
     * Creates an AsyncPayouts sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncPayouts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPayouts asyncPayouts(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.payouts();
    }
    /**
     * Creates an AsyncPaymentLinks sub-SDK bean if none exists.
     *
     * @param asyncGr4vy the async SDK instance
     * @return A configured AsyncPaymentLinks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPaymentLinks asyncPaymentLinks(AsyncGr4vy asyncGr4vy) {
        return asyncGr4vy.paymentLinks();
    }
}